CREATE TABLE widget(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(64) NOT NULL UNIQUE,
        path TEXT NOT NULL,
        is_abstract INTEGER NOT NULL DEFAULT 0,
        is_private INTEGER NOT NULL DEFAULT 0,
        deprecated INTEGER DEFAULT 0,
        family INTEGER NOT NULL,
        lever FLOAT(2) NOT NULL,
        linkWidget TEXT DEFAULT ''
      );
INSERT INTO widget VALUES(1,'Container','/src/widgets/container.dart',0,0,0,0,5.0,'74,85,80,78,70,123');
INSERT INTO widget VALUES(2,'Text','/src/widgets/text.dart',0,0,0,0,5.0,'101,324');
INSERT INTO widget VALUES(3,'Card','/src/material/card.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(4,'FlutterLogo','/src/widgets/flutter_logo.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(5,'Banner','/src/widgets/banner.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(6,'Icon','/src/widgets/icon.dart',0,0,0,0,2.0,'7,30,125');
INSERT INTO widget VALUES(7,'ImageIcon','/src/widgets/image_icon.dart',0,0,0,0,1.0,'6,30,125');
INSERT INTO widget VALUES(8,'FadeInImage','/src/widgets/fade_in_image.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(9,'CircleAvatar','/src/material/circle_avatar.dart',0,0,0,0,4.0,'');
INSERT INTO widget VALUES(10,'Visibility','/src/widgets/visibility.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(11,'Chip','/src/material/chip.dart',0,0,0,0,4.0,'12,13,14,15,153');
INSERT INTO widget VALUES(12,'ChoiceChip','/src/material/choice_chip.dart',0,0,0,0,3.0,'11,13,14,15,153');
INSERT INTO widget VALUES(13,'ActionChip','/src/material/action_chip.dart',0,0,0,0,3.0,'11,12,14,15,153');
INSERT INTO widget VALUES(14,'InputChip','/src/material/input_chip.dart',0,0,0,0,4.0,'11,12,13,15,153');
INSERT INTO widget VALUES(15,'FilterChip','/src/material/filter_chip.dart',0,0,0,0,4.0,'11,12,13,14,153');
INSERT INTO widget VALUES(16,'ListTile','/src/material/list_tile.dart',0,0,0,0,3.0,'162,334');
INSERT INTO widget VALUES(17,'CheckboxListTile','/src/material/checkbox_list_tile.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(18,'SwitchListTile','/src/material/switch_list_tile.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(19,'RadioListTile','/src/material/radio_list_tile.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(20,'GridTileBar','/src/material/grid_tile_bar.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(21,'GridTile','/src/material/grid_tile.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(22,'UserAccountsDrawerHeader','/src/material/user_accounts_drawer_header.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(23,'MaterialButton','/src/material/material_button.dart',0,0,0,0,4.0,'25,26,27,326,175');
INSERT INTO widget VALUES(24,'CupertinoButton','/src/cupertino/button.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(28,'FloatingActionButton','/src/material/floating_action_button.dart',0,0,0,0,4.0,'');
INSERT INTO widget VALUES(29,'ButtonBar','/src/material/button_bar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(30,'IconButton','/src/material/icon_button.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(31,'BackButton','/src/material/action_buttons.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(32,'CloseButton','/src/material/action_buttons.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(33,'ToggleButtons','/src/material/toggle_buttons.dart',0,0,0,0,4.0,'332,262');
INSERT INTO widget VALUES(34,'Divider','/src/material/divider.dart',0,0,0,0,2.0,'35,329');
INSERT INTO widget VALUES(35,'VerticalDivider','/src/material/divider.dart',0,0,0,0,2.0,'34,329');
INSERT INTO widget VALUES(36,'Placeholder','/src/widgets/placeholder.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(37,'GridPaper','/src/widgets/grid_paper.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(38,'Image','/src/widgets/image.dart',0,0,0,1,5.0,'8,87');
INSERT INTO widget VALUES(39,'Checkbox','/src/material/checkbox.dart',0,0,0,1,4.0,'326,17');
INSERT INTO widget VALUES(40,'Switch','/src/material/switch.dart',0,0,0,1,4.0,'41,18');
INSERT INTO widget VALUES(41,'CupertinoSwitch','/src/cupertino/switch.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(42,'Slider','/src/material/slider.dart',0,0,0,1,4.0,'43,44,331');
INSERT INTO widget VALUES(43,'CupertinoSlider','/src/cupertino/slider.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(44,'RangeSlider','/src/material/range_slider.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(45,'Radio','/src/material/radio.dart',0,0,0,1,4.0,'19,240');
INSERT INTO widget VALUES(46,'CircularProgressIndicator','/src/material/progress_indicator.dart',0,0,0,1,3.0,'47,48');
INSERT INTO widget VALUES(47,'LinearProgressIndicator','/src/material/progress_indicator.dart',0,0,0,1,3.0,'46,48');
INSERT INTO widget VALUES(48,'CupertinoActivityIndicator','/src/cupertino/activity_indicator.dart',0,0,0,1,2.0,'46,47');
INSERT INTO widget VALUES(49,'RefreshIndicator','/src/material/refresh_indicator.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(50,'Tooltip','/src/material/tooltip.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(51,'ExpandIcon','/src/material/expand_icon.dart',0,0,0,1,1.0,'66,125');
INSERT INTO widget VALUES(52,'ExpansionTile','/src/material/expansion_tile.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(53,'SelectableText','/src/material/selectable_text.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(54,'TextField','/src/material/text_field.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(55,'DropdownButton','/src/material/dropdown.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(56,'PopupMenuButton','/src/material/popup_menu.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(57,'AppBar','/src/material/app_bar.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(58,'TabBar','/src/material/tabs.dart',0,0,0,1,3.0,'57,59,148');
INSERT INTO widget VALUES(59,'TabBarView','/src/material/tabs.dart',0,0,0,1,2.0,'');
INSERT INTO widget VALUES(60,'BottomNavigationBar','/src/material/bottom_navigation_bar.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(61,'BottomAppBar','/src/material/bottom_app_bar.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(62,'CupertinoNavigationBar','/src/cupertino/nav_bar.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(63,'CupertinoTabBar','/src/cupertino/bottom_tab_bar.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(64,'Scaffold','/src/material/scaffold.dart',0,0,0,1,4.0,'57,60,61');
INSERT INTO widget VALUES(65,'MaterialApp','/src/material/app.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(66,'ClipOval','/src/widgets/basic.dart',0,0,0,2,3.0,'67,68,69');
INSERT INTO widget VALUES(67,'ClipRect','/src/widgets/basic.dart',0,0,0,2,3.0,'66,68,69');
INSERT INTO widget VALUES(68,'ClipRRect','/src/widgets/basic.dart',0,0,0,2,3.0,'66,67,69');
INSERT INTO widget VALUES(69,'ClipPath','/src/widgets/basic.dart',0,0,0,2,5.0,'66,67,68');
INSERT INTO widget VALUES(70,'DecoratedBox','/src/widgets/container.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(71,'Offstage','/src/widgets/basic.dart',0,0,0,2,3.0,'10');
INSERT INTO widget VALUES(72,'RotatedBox','/src/widgets/basic.dart',0,0,0,2,2.0,'');
INSERT INTO widget VALUES(73,'Opacity','/src/widgets/basic.dart',0,0,0,2,3.0,'89,118');
INSERT INTO widget VALUES(74,'Padding','/src/widgets/basic.dart',0,0,0,2,4.0,'1,191');
INSERT INTO widget VALUES(75,'Baseline','/src/widgets/basic.dart',0,0,0,2,2.0,'');
INSERT INTO widget VALUES(76,'SizedBox','/src/widgets/basic.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(77,'AspectRatio','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(78,'Transform','/src/widgets/basic.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(79,'LimitedBox','/src/widgets/basic.dart',0,0,0,2,3.0,'80');
INSERT INTO widget VALUES(80,'ConstrainedBox','/src/widgets/basic.dart',0,0,0,2,3.0,'1,79,81');
INSERT INTO widget VALUES(81,'UnconstrainedBox','/src/widgets/basic.dart',0,0,0,0,3.0,'80');
INSERT INTO widget VALUES(82,'FractionallySizedBox','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(83,'OverflowBox','/src/widgets/basic.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(84,'SizedOverflowBox','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(85,'Align','/src/widgets/basic.dart',0,0,0,2,5.0,'1,86,111,120');
INSERT INTO widget VALUES(86,'Center','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(87,'FittedBox','/src/widgets/basic.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(88,'ColorFiltered','/src/widgets/color_filter.dart',0,0,0,2,5.0,'277,38');
INSERT INTO widget VALUES(89,'FadeTransition','/src/widgets/transitions.dart',0,0,0,2,3.0,'73,118');
INSERT INTO widget VALUES(90,'RotationTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(91,'ScaleTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(92,'SizeTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(93,'PositionedTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(94,'Flex','/src/widgets/basic.dart',0,0,0,3,5.0,'95,96,106,107,109');
INSERT INTO widget VALUES(95,'Row','/src/widgets/basic.dart',0,0,0,3,4.0,'94,96');
INSERT INTO widget VALUES(96,'Column','/src/widgets/basic.dart',0,0,0,3,4.0,'94,95');
INSERT INTO widget VALUES(97,'Stack','/src/widgets/basic.dart',0,0,0,3,5.0,'94,95,161');
INSERT INTO widget VALUES(98,'Wrap','/src/widgets/basic.dart',0,0,0,3,5.0,'94,95');
INSERT INTO widget VALUES(99,'Flow','/src/widgets/basic.dart',0,0,0,3,5.0,'98,94');
INSERT INTO widget VALUES(100,'AnimatedCrossFade','/src/widgets/animated_cross_fade.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(101,'RichText','/src/widgets/basic.dart',0,0,0,3,5.0,'');
INSERT INTO widget VALUES(102,'DataTable','/src/material/data_table.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(103,'Draggable','/src/widgets/drag_target.dart',0,0,0,1,4.0,'104,105');
INSERT INTO widget VALUES(104,'DragTarget','/src/widgets/drag_target.dart',0,0,0,1,4.0,'103,105');
INSERT INTO widget VALUES(105,'LongPressDraggable','/src/widgets/drag_target.dart',0,0,0,1,4.0,'103,104');
INSERT INTO widget VALUES(106,'Expanded','/src/widgets/basic.dart',0,0,0,5,4.0,'94,109');
INSERT INTO widget VALUES(107,'Spacer','/src/widgets/spacer.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(108,'Positioned','/src/widgets/basic.dart',0,0,0,5,3.0,'97,159,121');
INSERT INTO widget VALUES(109,'Flexible','/src/widgets/basic.dart',0,0,0,5,3.0,'94,106');
INSERT INTO widget VALUES(110,'Table','/src/widgets/table.dart',0,0,0,6,4.0,'');
INSERT INTO widget VALUES(111,'AlignTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'85,120');
INSERT INTO widget VALUES(112,'SlideTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(113,'DecoratedBoxTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(114,'DefaultTextStyleTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'124,324');
INSERT INTO widget VALUES(115,'RelativePositionedTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(116,'AnimatedSwitcher','/src/widgets/animated_switcher.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(117,'AnimatedList','/src/widgets/animated_scroll_view.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(118,'AnimatedOpacity','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'89,73');
INSERT INTO widget VALUES(119,'AnimatedPadding','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(120,'AnimatedAlign','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'85,111');
INSERT INTO widget VALUES(121,'AnimatedPositioned','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'108,93,122');
INSERT INTO widget VALUES(122,'AnimatedPositionedDirectional','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'121,159');
INSERT INTO widget VALUES(123,'AnimatedContainer','/src/widgets/implicit_animations.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(124,'AnimatedDefaultTextStyle','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'114,324');
INSERT INTO widget VALUES(125,'AnimatedIcon','/src/material/animated_icons/animated_icons.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(126,'Dialog','/src/material/dialog.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(127,'AlertDialog','/src/material/dialog.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(128,'SimpleDialog','/src/material/dialog.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(129,'CupertinoAlertDialog','/src/cupertino/dialog.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(130,'AboutDialog','/src/material/about.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(131,'CupertinoActionSheet','/src/cupertino/dialog.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(132,'CupertinoActionSheetAction','/src/cupertino/dialog.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(133,'SimpleDialogOption','/src/material/dialog.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(136,'YearPicker','/src/material/calendar_date_picker.dart',0,0,0,1,3.0,'134,135');
INSERT INTO widget VALUES(137,'CupertinoDatePicker','/src/cupertino/date_picker.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(138,'CupertinoTimerPicker','/src/cupertino/date_picker.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(139,'CupertinoPicker','/src/cupertino/picker.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(140,'SnackBar','/src/material/snack_bar.dart',0,0,0,1,4.0,'141,142');
INSERT INTO widget VALUES(141,'SnackBarAction','/src/material/snack_bar.dart',0,0,0,1,1.0,'');
INSERT INTO widget VALUES(142,'BottomSheet','/src/material/bottom_sheet.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(143,'CupertinoContextMenu','/src/cupertino/context_menu.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(144,'CupertinoContextMenuAction','/src/cupertino/context_menu_action.dart',0,0,0,1,1.0,'');
INSERT INTO widget VALUES(145,'LicensePage','/src/material/about.dart',0,0,0,1,1.0,'130,193');
INSERT INTO widget VALUES(146,'GestureDetector','/src/widgets/gesture_detector.dart',0,0,0,0,5.0,'147,150');
INSERT INTO widget VALUES(147,'Listener','/src/widgets/basic.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(148,'Tab','/src/material/tabs.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(149,'InkResponse','/src/material/ink_well.dart',0,0,0,1,1.0,'150,152');
INSERT INTO widget VALUES(150,'InkWell','/src/material/ink_well.dart',0,0,0,1,4.0,'149,152');
INSERT INTO widget VALUES(151,'TableRowInkWell','/src/material/data_table.dart',0,0,0,1,1.0,'');
INSERT INTO widget VALUES(152,'Ink','/src/material/ink_decoration.dart',0,0,0,1,3.0,'149,150');
INSERT INTO widget VALUES(153,'RawChip','/src/material/chip.dart',0,0,0,1,5.0,'11,12,13,14,15');
INSERT INTO widget VALUES(154,'Drawer','/src/material/drawer.dart',0,0,0,0,2.0,'64,155');
INSERT INTO widget VALUES(155,'DrawerHeader','/src/material/drawer_header.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(156,'CupertinoApp','/src/cupertino/app.dart',0,0,0,1,4.0,'157,158');
INSERT INTO widget VALUES(157,'CupertinoPageScaffold','/src/cupertino/page_scaffold.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(158,'CupertinoTabScaffold','/src/cupertino/tab_scaffold.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(159,'PositionedDirectional','/src/widgets/basic.dart',0,0,0,0,3.0,'108,122');
INSERT INTO widget VALUES(160,'Material','/src/material/material.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(161,'IndexedStack','/src/widgets/basic.dart',0,0,0,0,4.0,'');
INSERT INTO widget VALUES(162,'ListView','/src/widgets/scroll_view.dart',0,0,0,0,5.0,'16,163');
INSERT INTO widget VALUES(163,'GridView','/src/widgets/scroll_view.dart',0,0,0,0,5.0,'21,162');
INSERT INTO widget VALUES(164,'SingleChildScrollView','/src/widgets/single_child_scroll_view.dart',0,0,0,0,5.0,'');
INSERT INTO widget VALUES(165,'PageView','/src/widgets/page_view.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(166,'CustomPaint','/src/widgets/basic.dart',0,0,0,2,5.0,'');
INSERT INTO widget VALUES(167,'MediaQuery','/src/widgets/media_query.dart',0,0,0,5,4.0,'');
INSERT INTO widget VALUES(168,'Theme','/src/material/theme.dart',0,0,0,0,4.0,'65,169,224');
INSERT INTO widget VALUES(169,'CupertinoTheme','/src/cupertino/theme.dart',0,0,0,0,3.0,'156,168');
INSERT INTO widget VALUES(170,'WillPopScope','/src/widgets/will_pop_scope.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(171,'Hero','/src/widgets/heroes.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(172,'FutureBuilder','/src/widgets/async.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(173,'StreamBuilder','/src/widgets/async.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(174,'PopupMenuDivider','/src/material/popup_menu.dart',0,0,0,1,1.0,'56,34');
INSERT INTO widget VALUES(175,'RawMaterialButton','/src/material/button.dart',0,0,0,1,5.0,'23,25,26,27');
INSERT INTO widget VALUES(176,'Dismissible','/src/widgets/dismissible.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(177,'ReorderableListView','/src/material/reorderable_list.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(178,'ExpansionPanelList','/src/material/expansion_panel.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(179,'ListWheelScrollView','/src/widgets/list_wheel_scroll_view.dart',0,0,0,1,4.0,'139,291');
INSERT INTO widget VALUES(180,'ScrollConfiguration','/src/widgets/scroll_configuration.dart',0,0,0,5,3.0,'162,163,164');
INSERT INTO widget VALUES(181,'DropdownButtonHideUnderline','/src/material/dropdown.dart',0,0,0,5,1.0,'');
INSERT INTO widget VALUES(182,'Overlay','/src/widgets/overlay.dart',0,0,0,1,5.0,'265,266');
INSERT INTO widget VALUES(183,'CustomScrollView','/src/widgets/scroll_view.dart',0,0,0,4,5.0,'184,185,188');
INSERT INTO widget VALUES(184,'SliverAppBar','/src/material/app_bar.dart',0,0,0,4,4.0,'183,196');
INSERT INTO widget VALUES(185,'SliverList','/src/widgets/sliver.dart',0,0,0,4,5.0,'183,186,187');
INSERT INTO widget VALUES(186,'SliverFixedExtentList','/src/widgets/sliver.dart',0,0,0,4,3.0,'183,185,187');
INSERT INTO widget VALUES(187,'SliverFillViewport','/src/widgets/sliver_fill.dart',0,0,0,4,3.0,'183,185,186');
INSERT INTO widget VALUES(188,'SliverGrid','/src/widgets/sliver.dart',0,0,0,4,4.0,'');
INSERT INTO widget VALUES(189,'SliverToBoxAdapter','/src/widgets/basic.dart',0,0,0,4,4.0,'');
INSERT INTO widget VALUES(190,'SliverPersistentHeader','/src/widgets/sliver_persistent_header.dart',0,0,0,4,5.0,'');
INSERT INTO widget VALUES(191,'SliverPadding','/src/widgets/basic.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(192,'SliverOpacity','/src/widgets/sliver.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(193,'AboutListTile','/src/material/about.dart',0,0,0,0,3.0,'130,145');
INSERT INTO widget VALUES(194,'Scrollbar','/src/material/scrollbar.dart',0,0,0,1,3.0,'195,164,162');
INSERT INTO widget VALUES(195,'CupertinoScrollbar','/src/cupertino/scrollbar.dart',0,0,0,1,3.0,'194,164,162');
INSERT INTO widget VALUES(196,'FlexibleSpaceBar','/src/material/flexible_space_bar.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(197,'ErrorWidget','/src/widgets/framework.dart',0,0,0,6,1.0,'');
INSERT INTO widget VALUES(198,'Form','/src/widgets/form.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(199,'TextFormField','/src/material/text_form_field.dart',0,0,0,1,4.0,'54,198');
INSERT INTO widget VALUES(200,'Stepper','/src/material/stepper.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(201,'AnimatedSize','/src/widgets/animated_size.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(202,'Builder','/src/widgets/basic.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(203,'OrientationBuilder','/src/widgets/orientation_builder.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(204,'PreferredSize','/src/widgets/preferred_size.dart',0,0,0,0,2.0,'57,64');
INSERT INTO widget VALUES(205,'TabPageSelector','/src/material/tabs.dart',0,0,0,0,2.0,'206,59');
INSERT INTO widget VALUES(206,'TabPageSelectorIndicator','/src/material/tabs.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(207,'SafeArea','/src/widgets/safe_area.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(208,'Title','/src/widgets/title.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(209,'DecoratedSliver','/src/widgets/decorated_sliver.dart',0,0,0,4,4.0,'');
INSERT INTO widget VALUES(210,'PageStorage','/src/widgets/page_storage.dart',0,0,0,0,3.0,'52,165');
INSERT INTO widget VALUES(211,'MaterialBanner','/src/material/banner.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(212,'ModalBarrier','/src/widgets/modal_barrier.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(213,'HtmlElementView','/src/widgets/platform_view.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(214,'NavigationToolbar','/src/widgets/navigation_toolbar.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(215,'CheckedModeBanner','/src/widgets/banner.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(216,'CupertinoPageTransition','/src/cupertino/route.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(217,'CupertinoPopupSurface','/src/cupertino/dialog.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(218,'CupertinoNavigationBarBackButton','/src/cupertino/nav_bar.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(219,'CupertinoFullscreenDialogTransition','/src/cupertino/route.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(220,'NotificationListener','/src/widgets/notification_listener.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(221,'DraggableScrollableActuator','/src/widgets/draggable_scrollable_sheet.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(222,'FormField','/src/widgets/form.dart',0,0,0,1,2.0,'198,199,223');
INSERT INTO widget VALUES(223,'DropdownButtonFormField','/src/material/dropdown.dart',0,0,0,1,2.0,'55,222');
INSERT INTO widget VALUES(224,'AnimatedTheme','/src/material/theme.dart',0,0,0,1,2.0,'');
INSERT INTO widget VALUES(225,'AnimatedPhysicalModel','/src/widgets/implicit_animations.dart',0,0,0,1,2.0,'');
INSERT INTO widget VALUES(226,'TweenAnimationBuilder','/src/widgets/tween_animation_builder.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(227,'AnimatedModalBarrier','/src/widgets/modal_barrier.dart',0,0,0,1,1.0,'');
INSERT INTO widget VALUES(228,'AnimatedBuilder','/src/widgets/transitions.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(229,'CupertinoTabView','/src/cupertino/tab_view.dart',0,0,0,1,3.0,'65,158');
INSERT INTO widget VALUES(230,'DefaultTabController','/src/material/tab_controller.dart',0,0,0,1,3.0,'148,59');
INSERT INTO widget VALUES(231,'InputDecorator','/src/material/input_decorator.dart',0,0,0,1,2.0,'');
INSERT INTO widget VALUES(232,'Navigator','/src/widgets/navigator.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(233,'StatusTransitionWidget','/src/widgets/status_transitions.dart',0,0,0,1,1.0,'');
INSERT INTO widget VALUES(234,'WidgetInspector','/src/widgets/widget_inspector.dart',0,0,0,1,2.0,'');
INSERT INTO widget VALUES(235,'PaginatedDataTable','/src/material/paginated_data_table.dart',0,0,0,1,4.0,'110,102');
INSERT INTO widget VALUES(236,'WidgetsApp','/src/widgets/app.dart',0,0,0,1,2.0,'65,156');
INSERT INTO widget VALUES(237,'CarouselView','/src/material/carousel.dart',0,0,0,1,4.0,'253,340,160');
INSERT INTO widget VALUES(238,'CupertinoCheckbox','/src/cupertino/checkbox.dart',0,0,0,1,4.0,'39,17');
INSERT INTO widget VALUES(239,'AutomaticKeepAlive','/src/widgets/automatic_keep_alive.dart',0,0,0,1,1.0,'59,162,163,165,185,188');
INSERT INTO widget VALUES(240,'CupertinoRadio','/src/cupertino/radio.dart',0,0,0,1,4.0,'19,45');
INSERT INTO widget VALUES(241,'UndoHistory','/src/widgets/undo_history.dart',0,0,0,1,2.0,'54');
INSERT INTO widget VALUES(242,'StatefulBuilder','/src/widgets/basic.dart',0,0,0,1,3.0,'202,203,280,255');
INSERT INTO widget VALUES(243,'UniqueWidget','/src/widgets/unique_widget.dart',0,0,0,1,1.0,'');
INSERT INTO widget VALUES(244,'EditableText','/src/widgets/editable_text.dart',0,0,0,1,2.0,'2,54');
INSERT INTO widget VALUES(245,'CupertinoTextField','/src/cupertino/text_field.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(246,'TickerMode','/src/widgets/ticker_provider.dart',0,0,0,1,2.0,'346');
INSERT INTO widget VALUES(247,'AnimatedSlide','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'120,201');
INSERT INTO widget VALUES(248,'RawGestureDetector','/src/widgets/gesture_detector.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(249,'AnimatedScale','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'120,247,201');
INSERT INTO widget VALUES(250,'GlowingOverscrollIndicator','/src/widgets/overscroll_indicator.dart',0,0,0,1,1.0,'');
INSERT INTO widget VALUES(251,'NestedScrollView','/src/widgets/nested_scroll_view.dart',0,0,0,4,4.0,'183,344');
INSERT INTO widget VALUES(252,'DraggableScrollableSheet','/src/widgets/draggable_scrollable_sheet.dart',0,0,0,1,2.0,'221,142');
INSERT INTO widget VALUES(253,'Scrollable','/src/widgets/scrollable.dart',0,0,0,1,4.0,'340,349');
INSERT INTO widget VALUES(254,'RawKeyboardListener','/src/widgets/raw_keyboard_listener.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(255,'ValueListenableBuilder','/src/widgets/value_listenable_builder.dart',0,0,0,1,5.0,'');
INSERT INTO widget VALUES(256,'CupertinoSlidingSegmentedControl','/src/cupertino/sliding_segmented_control.dart',0,0,0,1,3.0,'33,262');
INSERT INTO widget VALUES(257,'DrawerController','/src/material/drawer.dart',0,0,0,1,3.0,'154,64');
INSERT INTO widget VALUES(258,'Badge','/src/material/badge.dart',0,0,0,0,2.0,'');
INSERT INTO widget VALUES(259,'AnimatedRotation','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'247,249');
INSERT INTO widget VALUES(260,'AnimatedFractionallySizedBox','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'82,120,123,121');
INSERT INTO widget VALUES(261,'MergeableMaterial','/src/material/mergeable_material.dart',0,0,0,1,1.0,'');
INSERT INTO widget VALUES(262,'CupertinoSegmentedControl','/src/cupertino/segmented_control.dart',0,0,0,1,4.0,'33,256');
INSERT INTO widget VALUES(263,'FractionalTranslation','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(264,'RepaintBoundary','/src/widgets/basic.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(265,'CompositedTransformFollower','/src/widgets/basic.dart',0,0,0,2,3.0,'266,182');
INSERT INTO widget VALUES(266,'CompositedTransformTarget','/src/widgets/basic.dart',0,0,0,2,3.0,'265,182');
INSERT INTO widget VALUES(267,'ColoredBox','/src/widgets/basic.dart',0,0,0,2,2.0,'');
INSERT INTO widget VALUES(268,'SliverMainAxisGroup','/src/widgets/sliver.dart',0,0,0,4,4.0,'');
INSERT INTO widget VALUES(269,'SliverCrossAxisGroup','/src/widgets/sliver.dart',0,0,0,4,4.0,'268,270,271');
INSERT INTO widget VALUES(270,'SliverConstrainedCrossAxis','/src/widgets/sliver.dart',0,0,0,4,3.0,'269,271');
INSERT INTO widget VALUES(271,'SliverCrossAxisExpanded','/src/widgets/sliver.dart',0,0,0,4,3.0,'269,270');
INSERT INTO widget VALUES(272,'BackButtonIcon','/src/material/action_buttons.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(273,'DrawerButtonIcon','/src/material/action_buttons.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(274,'CloseButtonIcon','/src/material/action_buttons.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(275,'EndDrawerButtonIcon','/src/material/action_buttons.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(276,'DrawerButton','/src/material/action_buttons.dart',0,0,0,0,1.0,'273,361');
INSERT INTO widget VALUES(277,'ShaderMask','/src/widgets/basic.dart',0,0,0,2,4.0,'88,38');
INSERT INTO widget VALUES(278,'BackdropFilter','/src/widgets/basic.dart',0,0,0,2,4.0,'88,97,67');
INSERT INTO widget VALUES(279,'PhysicalShape','/src/widgets/basic.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(280,'TapRegion','/src/widgets/tap_region.dart',0,0,0,2,4.0,'146,54');
INSERT INTO widget VALUES(281,'TextFieldTapRegion','/src/widgets/tap_region.dart',0,0,0,2,3.0,'280,54,245');
INSERT INTO widget VALUES(282,'Focus','/src/widgets/focus_scope.dart',0,0,0,1,5.0,'283,284');
INSERT INTO widget VALUES(283,'CallbackShortcuts','/src/widgets/shortcuts.dart',0,0,0,2,3.0,'282,284');
INSERT INTO widget VALUES(284,'KeyboardListener','/src/widgets/keyboard_listener.dart',0,0,0,1,5.0,'282,283');
INSERT INTO widget VALUES(285,'CustomSingleChildLayout','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(286,'AbstractLayoutBuilder','/src/widgets/layout_builder.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(287,'LayoutBuilder','/src/widgets/layout_builder.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(288,'AnnotatedRegion','/src/widgets/annotated_region.dart',0,0,0,2,2.0,'');
INSERT INTO widget VALUES(289,'RenderObjectToWidgetAdapter','/src/widgets/adapter.dart',0,0,0,6,1.0,'');
INSERT INTO widget VALUES(290,'Localizations','/src/widgets/localizations.dart',0,0,0,1,4.0,'65,346');
INSERT INTO widget VALUES(291,'ListWheelViewport','/src/widgets/list_wheel_scroll_view.dart',0,0,0,6,4.0,'179,139,137,253');
INSERT INTO widget VALUES(292,'IgnorePointer','/src/widgets/basic.dart',0,0,0,2,4.0,'295,146,149,150');
INSERT INTO widget VALUES(293,'MouseRegion','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(294,'SizeChangedLayoutNotifier','/src/widgets/size_changed_layout_notifier.dart',0,0,0,2,2.0,'');
INSERT INTO widget VALUES(295,'AbsorbPointer','/src/widgets/basic.dart',0,0,0,2,4.0,'146,149,150,292');
INSERT INTO widget VALUES(296,'PhysicalModel','/src/widgets/basic.dart',0,0,0,2,3.0,'279,69');
INSERT INTO widget VALUES(297,'IntrinsicWidth','/src/widgets/basic.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(298,'IntrinsicHeight','/src/widgets/basic.dart',0,0,0,2,4.0,'');
INSERT INTO widget VALUES(299,'CupertinoTextSelectionToolbar','/src/cupertino/text_selection_toolbar.dart',0,0,0,2,1.0,'');
INSERT INTO widget VALUES(300,'ActionIconTheme','/src/material/action_icons_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(301,'SliverAnimatedList','/src/widgets/animated_scroll_view.dart',0,0,0,4,3.0,'183,251');
INSERT INTO widget VALUES(302,'CupertinoSliverNavigationBar','/src/cupertino/nav_bar.dart',0,0,0,4,2.0,'183,251');
INSERT INTO widget VALUES(303,'CupertinoSliverRefreshControl','/src/cupertino/refresh.dart',0,0,0,4,4.0,'183,251');
INSERT INTO widget VALUES(304,'SliverLayoutBuilder','/src/widgets/sliver_layout_builder.dart',0,0,0,4,4.0,'183,251');
INSERT INTO widget VALUES(305,'SliverIgnorePointer','/src/widgets/sliver.dart',0,0,0,4,3.0,'183,251');
INSERT INTO widget VALUES(306,'SliverFillRemaining','/src/widgets/sliver_fill.dart',0,0,0,4,4.0,'183,251');
INSERT INTO widget VALUES(307,'SliverOverlapAbsorber','/src/widgets/nested_scroll_view.dart',0,0,0,4,3.0,'251,308');
INSERT INTO widget VALUES(308,'SliverOverlapInjector','/src/widgets/nested_scroll_view.dart',0,0,0,4,3.0,'251,307');
INSERT INTO widget VALUES(309,'PinnedHeaderSliver','/src/widgets/pinned_header_sliver.dart',0,0,0,4,4.0,'190');
INSERT INTO widget VALUES(310,'ActionListener','/src/widgets/actions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(311,'Actions','/src/widgets/actions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(312,'PerformanceOverlay','/src/widgets/performance_overlay.dart',0,0,0,6,2.0,'');
INSERT INTO widget VALUES(313,'RawImage','/src/widgets/basic.dart',0,0,0,6,2.0,'');
INSERT INTO widget VALUES(314,'SliverPrototypeExtentList','/src/widgets/sliver_prototype_extent_list.dart',0,0,0,4,2.0,'185,186');
INSERT INTO widget VALUES(315,'LayoutId','/src/widgets/basic.dart',0,0,0,5,2.0,'');
INSERT INTO widget VALUES(316,'KeepAlive','/src/widgets/sliver.dart',0,0,0,5,1.0,'');
INSERT INTO widget VALUES(317,'TableCell','/src/widgets/table.dart',0,0,0,5,1.0,'');
INSERT INTO widget VALUES(318,'AdaptiveTextSelectionToolbar','/src/material/adaptive_text_selection_toolbar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(319,'Directionality','/src/widgets/basic.dart',0,0,0,5,2.0,'2,94');
INSERT INTO widget VALUES(320,'DefaultAssetBundle','/src/widgets/basic.dart',0,0,0,5,2.0,'');
INSERT INTO widget VALUES(321,'AndroidView','/src/widgets/platform_view.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(322,'AndroidViewSurface','/src/widgets/platform_view.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(323,'AnimatedGrid','/src/widgets/animated_scroll_view.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(324,'DefaultTextStyle','/src/widgets/text.dart',0,0,0,5,3.0,'2,114,124');
INSERT INTO widget VALUES(325,'IconTheme','/src/widgets/icon_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(326,'ButtonTheme','/src/material/button_theme.dart',0,0,0,5,3.0,'23,25,26,27');
INSERT INTO widget VALUES(327,'MaterialBannerTheme','/src/material/banner_theme.dart',0,0,0,5,2.0,'');
INSERT INTO widget VALUES(328,'ChipTheme','/src/material/chip_theme.dart',0,0,0,5,3.0,'11,153,12,13,14,15');
INSERT INTO widget VALUES(329,'DividerTheme','/src/material/divider_theme.dart',0,0,0,5,3.0,'34,35');
INSERT INTO widget VALUES(330,'PopupMenuTheme','/src/material/popup_menu_theme.dart',0,0,0,5,2.0,'');
INSERT INTO widget VALUES(331,'SliderTheme','/src/material/slider_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(332,'ToggleButtonsTheme','/src/material/toggle_buttons_theme.dart',0,0,0,5,2.0,'');
INSERT INTO widget VALUES(333,'TooltipTheme','/src/material/tooltip_theme.dart',0,0,0,5,2.0,'');
INSERT INTO widget VALUES(334,'ListTileTheme','/src/material/list_tile_theme.dart',0,0,0,5,2.0,'');
INSERT INTO widget VALUES(335,'PrimaryScrollController','/src/widgets/primary_scroll_controller.dart',0,0,0,5,1.0,'349,344,164');
INSERT INTO widget VALUES(336,'InheritedModel','/src/widgets/inherited_model.dart',0,0,0,5,4.0,'346');
INSERT INTO widget VALUES(337,'CupertinoUserInterfaceLevel','/src/cupertino/interface_level.dart',0,0,0,5,1.0,'');
INSERT INTO widget VALUES(338,'ButtonBarTheme','/src/material/button_bar_theme.dart',0,0,0,5,2.0,'');
INSERT INTO widget VALUES(339,'DateRangePickerDialog','/src/material/date_picker.dart',0,0,0,1,4.0,'135,136,137');
INSERT INTO widget VALUES(340,'Viewport','/src/widgets/viewport.dart',0,0,0,3,1.0,'253,349');
INSERT INTO widget VALUES(341,'CustomMultiChildLayout','/src/widgets/basic.dart',0,0,0,3,4.0,'315,285');
INSERT INTO widget VALUES(342,'ListBody','/src/widgets/basic.dart',0,0,0,3,4.0,'');
INSERT INTO widget VALUES(343,'ShrinkWrappingViewport','/src/widgets/viewport.dart',0,0,0,3,1.0,'349,162,163');
INSERT INTO widget VALUES(344,'NestedScrollViewViewport','/src/widgets/nested_scroll_view.dart',0,0,0,3,1.0,'');
INSERT INTO widget VALUES(345,'InheritedTheme','/src/widgets/inherited_theme.dart',0,0,0,5,1.0,'324,326,328,329');
INSERT INTO widget VALUES(346,'InheritedWidget','/src/widgets/framework.dart',0,0,0,5,4.0,'167,319,328,324,331');
INSERT INTO widget VALUES(347,'ParentDataWidget','/src/widgets/framework.dart',0,0,0,5,1.0,'106,109,108,315');
INSERT INTO widget VALUES(348,'SliverWithKeepAliveWidget','/src/widgets/sliver.dart',0,0,0,4,1.0,'316,239,188,185,314,186');
INSERT INTO widget VALUES(349,'ScrollView','/src/widgets/scroll_view.dart',0,0,0,0,2.0,'183,162,163,253,340');
INSERT INTO widget VALUES(350,'BoxScrollView','/src/widgets/scroll_view.dart',0,0,0,0,1.0,'183,162,163');
INSERT INTO widget VALUES(351,'InteractiveViewer','/src/widgets/interactive_viewer.dart',0,0,0,1,4.0,'147,146,78');
INSERT INTO widget VALUES(352,'CupertinoDialogAction','/src/cupertino/dialog.dart',0,0,0,0,1.0,'');
INSERT INTO widget VALUES(353,'TextButton','/src/material/text_button.dart',0,0,0,1,3.0,'354,355');
INSERT INTO widget VALUES(354,'ElevatedButton','/src/material/elevated_button.dart',0,0,0,1,3.0,'353,26,355');
INSERT INTO widget VALUES(355,'OutlinedButton','/src/material/outlined_button.dart',0,0,0,1,3.0,'353,27,354');
INSERT INTO widget VALUES(356,'Autocomplete','/src/material/autocomplete.dart',0,0,0,0,4.0,'54,199');
INSERT INTO widget VALUES(357,'ImageFiltered','/src/widgets/image_filter.dart',0,0,0,2,4.0,'278,88');
INSERT INTO widget VALUES(358,'NavigationRail','/src/material/navigation_rail.dart',0,0,0,1,4.0,'60,61');
INSERT INTO widget VALUES(359,'FilledButton','/src/material/filled_button.dart',0,0,0,1,4.0,'354,355,353');
INSERT INTO widget VALUES(360,'RawMagnifier','/src/widgets/magnifier.dart',0,0,0,0,4.0,'');
INSERT INTO widget VALUES(361,'EndDrawerButton','/src/material/action_buttons.dart',0,0,0,0,1.0,'275,276');
INSERT INTO widget VALUES(362,'AnimatedWidget','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(363,'AppKitView','/src/widgets/platform_view.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(364,'AutocompleteHighlightedOption','/src/widgets/autocomplete.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(365,'AutofillGroup','/src/widgets/autofill.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(366,'BackButtonListener','/src/widgets/router.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(367,'BackdropGroup','/src/widgets/basic.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(368,'BadgeTheme','/src/material/badge_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(369,'BlockSemantics','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(370,'DropdownMenu','/src/material/dropdown_menu.dart',0,0,0,1,4.0,'');
INSERT INTO widget VALUES(371,'BottomNavigationBarTheme','/src/material/bottom_navigation_bar_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(372,'ButtonStyleButton','/src/material/button_style_button.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(373,'CalendarDatePicker','/src/material/calendar_date_picker.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(374,'CardTheme','/src/material/card_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(375,'CheckboxMenuButton','/src/material/menu_anchor.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(376,'CheckboxTheme','/src/material/checkbox_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(377,'CheckedPopupMenuItem','/src/material/popup_menu.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(378,'ClipRSuperellipse','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(379,'ConstrainedLayoutBuilder','/src/widgets/layout_builder.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(380,'ConstraintsTransformBox','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(381,'CupertinoAdaptiveTextSelectionToolbar','/src/cupertino/adaptive_text_selection_toolbar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(382,'CupertinoDesktopTextSelectionToolbar','/src/cupertino/desktop_text_selection_toolbar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(383,'CupertinoDesktopTextSelectionToolbarButton','/src/cupertino/desktop_text_selection_toolbar_button.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(384,'CupertinoFormRow','/src/cupertino/form_row.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(385,'CupertinoFormSection','/src/cupertino/form_section.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(386,'CupertinoListSection','/src/cupertino/list_section.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(387,'CupertinoListTile','/src/cupertino/list_tile.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(388,'CupertinoListTileChevron','/src/cupertino/list_tile.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(389,'CupertinoMagnifier','/src/cupertino/magnifier.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(390,'CupertinoPageScaffoldBackgroundColor','/src/cupertino/page_scaffold.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(391,'CupertinoPickerDefaultSelectionOverlay','/src/cupertino/picker.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(392,'CupertinoSearchTextField','/src/cupertino/search_field.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(393,'CupertinoSheetTransition','/src/cupertino/sheet.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(394,'CupertinoSpellCheckSuggestionsToolbar','/src/cupertino/spell_check_suggestions_toolbar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(395,'CupertinoTextFormFieldRow','/src/cupertino/text_form_field_row.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(396,'CupertinoTextMagnifier','/src/cupertino/magnifier.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(397,'CupertinoTextSelectionToolbarButton','/src/cupertino/text_selection_toolbar_button.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(398,'DataTableTheme','/src/material/data_table_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(399,'DatePickerDialog','/src/material/date_picker.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(400,'DatePickerTheme','/src/material/date_picker_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(401,'DefaultSelectionStyle','/src/widgets/default_selection_style.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(402,'DefaultTextEditingShortcuts','/src/widgets/default_text_editing_shortcuts.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(403,'DefaultTextHeightBehavior','/src/widgets/text.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(404,'DesktopTextSelectionToolbar','/src/material/desktop_text_selection_toolbar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(405,'DesktopTextSelectionToolbarButton','/src/material/desktop_text_selection_toolbar_button.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(406,'DialogTheme','/src/material/dialog_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(407,'DisplayFeatureSubScreen','/src/widgets/display_feature_sub_screen.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(408,'DragBoundary','/src/widgets/drag_boundary.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(409,'DrawerTheme','/src/material/drawer_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(410,'DropdownMenuItem','/src/material/dropdown.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(411,'DropdownMenuTheme','/src/material/dropdown_menu_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(412,'DualTransitionBuilder','/src/widgets/dual_transition_builder.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(413,'ElevatedButtonTheme','/src/material/elevated_button_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(414,'ExcludeFocus','/src/widgets/focus_scope.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(415,'ExcludeFocusTraversal','/src/widgets/focus_traversal.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(416,'ExcludeSemantics','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(417,'Expansible','/src/widgets/expansible.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(418,'ExpansionTileTheme','/src/material/expansion_tile_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(419,'FilledButtonTheme','/src/material/filled_button_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(420,'FlexibleSpaceBarSettings','/src/material/flexible_space_bar.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(421,'FocusScope','/src/widgets/focus_scope.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(422,'FocusTraversalGroup','/src/widgets/focus_traversal.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(423,'FocusTraversalOrder','/src/widgets/focus_traversal.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(424,'FocusableActionDetector','/src/widgets/actions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(425,'HeroControllerScope','/src/widgets/navigator.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(426,'HeroMode','/src/widgets/heroes.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(427,'IconButtonTheme','/src/material/icon_button_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(428,'IgnoreBaseline','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(429,'ImgElementPlatformView','/src/widgets/_web_image_web.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(430,'ImplicitlyAnimatedWidget','/src/widgets/implicit_animations.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(431,'IndexedSemantics','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(432,'InheritedCupertinoTheme','/src/cupertino/theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(433,'InheritedNotifier','/src/widgets/inherited_notifier.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(434,'InputDatePickerFormField','/src/material/input_date_picker_form_field.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(435,'InspectorButton','/src/widgets/widget_inspector.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(436,'KeyedSubtree','/src/widgets/basic.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(437,'LeafRenderObjectWidget','/src/widgets/framework.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(438,'ListenableBuilder','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(439,'LookupBoundary','/src/widgets/lookup_boundary.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(440,'Magnifier','/src/material/magnifier.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(441,'MatrixTransition','/src/widgets/transitions.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(442,'MenuAcceleratorCallbackBinding','/src/material/menu_anchor.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(443,'MenuAcceleratorLabel','/src/material/menu_anchor.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(444,'MenuAnchor','/src/material/menu_anchor.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(445,'MenuBar','/src/material/menu_anchor.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(446,'MenuBarTheme','/src/material/menu_bar_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(447,'MenuButtonTheme','/src/material/menu_button_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(448,'MenuItemButton','/src/material/menu_anchor.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(449,'MenuTheme','/src/material/menu_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(450,'MergeSemantics','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(451,'MetaData','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(452,'MultiChildRenderObjectWidget','/src/widgets/framework.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(453,'NavigationBar','/src/material/navigation_bar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(454,'NavigationBarTheme','/src/material/navigation_bar_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(455,'NavigationDestination','/src/material/navigation_bar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(456,'NavigationDrawer','/src/material/navigation_drawer.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(457,'NavigationDrawerDestination','/src/material/navigation_drawer.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(458,'NavigationDrawerTheme','/src/material/navigation_drawer_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(459,'NavigationIndicator','/src/material/navigation_bar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(460,'NavigationRailTheme','/src/material/navigation_rail_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(461,'NavigatorPopHandler','/src/widgets/navigator_pop_handler.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(462,'ObstructingPreferredSizeWidget','/src/cupertino/page_scaffold.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(463,'OutlinedButtonTheme','/src/material/outlined_button_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(464,'OverflowBar','/src/widgets/overflow_bar.dart',0,0,0,3,3.0,'');
INSERT INTO widget VALUES(465,'OverlayPortal','/src/widgets/overlay.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(466,'PlatformMenuBar','/src/widgets/platform_menu_bar.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(467,'PlatformSelectableRegionContextMenu','/src/widgets/_platform_selectable_region_context_menu_web.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(468,'PlatformViewLink','/src/widgets/platform_view.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(469,'PlatformViewSurface','/src/widgets/platform_view.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(470,'PopScope','/src/widgets/pop_scope.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(471,'PopupMenuEntry','/src/material/popup_menu.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(472,'PopupMenuItem','/src/material/popup_menu.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(473,'PreferredSizeWidget','/src/widgets/preferred_size.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(474,'ProgressIndicator','/src/material/progress_indicator.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(475,'ProgressIndicatorTheme','/src/material/progress_indicator_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(476,'ProxyWidget','/src/widgets/framework.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(477,'RadioMenuButton','/src/material/menu_anchor.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(478,'RadioTheme','/src/material/radio_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(479,'RawAutocomplete','/src/widgets/autocomplete.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(480,'RawMenuAnchor','/src/widgets/raw_menu_anchor.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(481,'RawMenuAnchorGroup','/src/widgets/raw_menu_anchor.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(482,'RawScrollbar','/src/widgets/scrollbar.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(483,'RawView','/src/widgets/view.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(484,'RawWebImage','/src/widgets/_web_image_web.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(485,'RefreshProgressIndicator','/src/material/progress_indicator.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(486,'RenderObjectWidget','/src/widgets/framework.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(487,'ReorderableDelayedDragStartListener','/src/widgets/reorderable_list.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(488,'ReorderableDragStartListener','/src/widgets/reorderable_list.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(489,'ReorderableList','/src/widgets/reorderable_list.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(490,'RestorationScope','/src/widgets/restoration.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(491,'RootRestorationScope','/src/widgets/restoration.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(492,'RootWidget','/src/widgets/binding.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(493,'Router','/src/widgets/router.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(494,'ScaffoldMessenger','/src/material/scaffold.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(495,'ScrollNotificationObserver','/src/widgets/scroll_notification_observer.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(496,'ScrollbarTheme','/src/material/scrollbar_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(497,'SearchAnchor','/src/material/search_anchor.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(498,'SearchBar','/src/material/search_anchor.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(499,'SearchBarTheme','/src/material/search_bar_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(500,'SearchViewTheme','/src/material/search_view_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(501,'SegmentedButton','/src/material/segmented_button.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(502,'SegmentedButtonTheme','/src/material/segmented_button_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(503,'SelectableRegion','/src/widgets/selectable_region.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(504,'SelectableRegionSelectionStatusScope','/src/widgets/selectable_region.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(505,'SelectionArea','/src/material/selection_area.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(506,'SelectionContainer','/src/widgets/selection_container.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(507,'SelectionListener','/src/widgets/selectable_region.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(508,'SelectionRegistrarScope','/src/widgets/selection_container.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(509,'Semantics','/src/widgets/basic.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(510,'SemanticsDebugger','/src/widgets/semantics_debugger.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(511,'SharedAppData','/src/widgets/shared_app_data.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(512,'ShortcutRegistrar','/src/widgets/shortcuts.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(513,'Shortcuts','/src/widgets/shortcuts.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(514,'SingleChildRenderObjectWidget','/src/widgets/framework.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(515,'SliverAnimatedGrid','/src/widgets/animated_scroll_view.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(516,'SliverAnimatedOpacity','/src/widgets/implicit_animations.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(517,'SliverEnsureSemantics','/src/widgets/sliver.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(518,'SliverFadeTransition','/src/widgets/transitions.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(519,'SliverFloatingHeader','/src/widgets/sliver_floating_header.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(520,'SliverMultiBoxAdaptorWidget','/src/widgets/sliver.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(521,'SliverOffstage','/src/widgets/sliver.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(522,'SliverReorderableList','/src/widgets/reorderable_list.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(523,'SliverResizingHeader','/src/widgets/sliver_resizing_header.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(524,'SliverSafeArea','/src/widgets/safe_area.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(525,'SliverVariedExtentList','/src/widgets/sliver.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(526,'SliverVisibility','/src/widgets/visibility.dart',0,0,0,4,3.0,'');
INSERT INTO widget VALUES(527,'SlottedMultiChildRenderObjectWidget','/src/widgets/slotted_render_object_widget.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(528,'SnapshotWidget','/src/widgets/snapshot_widget.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(529,'SpellCheckSuggestionsToolbar','/src/material/spell_check_suggestions_toolbar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(530,'StatefulWidget','/src/widgets/framework.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(531,'StatelessWidget','/src/widgets/framework.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(532,'StreamBuilderBase','/src/widgets/async.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(533,'StretchingOverscrollIndicator','/src/widgets/overscroll_indicator.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(534,'SubmenuButton','/src/material/menu_anchor.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(535,'SwitchTheme','/src/material/switch_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(536,'SystemContextMenu','/src/widgets/system_context_menu.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(537,'TabBarTheme','/src/material/tab_bar_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(538,'TapRegionSurface','/src/widgets/tap_region.dart',0,0,0,2,3.0,'');
INSERT INTO widget VALUES(539,'TextButtonTheme','/src/material/text_button_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(540,'TextMagnifier','/src/material/magnifier.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(541,'TextSelectionGestureDetector','/src/widgets/text_selection.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(542,'TextSelectionTheme','/src/material/text_selection_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(543,'TextSelectionToolbar','/src/material/text_selection_toolbar.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(544,'TextSelectionToolbarTextButton','/src/material/text_selection_toolbar_text_button.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(545,'Texture','/src/widgets/texture.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(546,'TimePickerDialog','/src/material/time_picker.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(547,'TimePickerTheme','/src/material/time_picker_theme.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(548,'TooltipVisibility','/src/material/tooltip_visibility.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(549,'TreeSliver','/src/widgets/sliver_tree.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(550,'TwoDimensionalScrollView','/src/widgets/two_dimensional_scroll_view.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(551,'TwoDimensionalScrollable','/src/widgets/scrollable.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(552,'TwoDimensionalViewport','/src/widgets/two_dimensional_viewport.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(553,'UiKitView','/src/widgets/platform_view.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(554,'UnmanagedRestorationScope','/src/widgets/restoration.dart',0,0,0,5,3.0,'');
INSERT INTO widget VALUES(555,'View','/src/widgets/view.dart',0,0,0,1,3.0,'');
INSERT INTO widget VALUES(556,'ViewAnchor','/src/widgets/view.dart',0,0,0,0,3.0,'');
INSERT INTO widget VALUES(557,'ViewCollection','/src/widgets/view.dart',0,0,0,6,3.0,'');
INSERT INTO widget VALUES(558,'WidgetToRenderBoxAdapter','/src/widgets/basic.dart',0,0,0,6,3.0,'');
CREATE TABLE widget_inheritance (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        widget_id INTEGER NOT NULL,
        parent_name TEXT NOT NULL,
        inheritance_order INTEGER NOT NULL
      );
INSERT INTO widget_inheritance VALUES(1,130,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(2,130,'Widget',1);
INSERT INTO widget_inheritance VALUES(3,193,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(4,193,'Widget',1);
INSERT INTO widget_inheritance VALUES(5,295,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(6,295,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(7,295,'Widget',2);
INSERT INTO widget_inheritance VALUES(8,286,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(9,286,'Widget',1);
INSERT INTO widget_inheritance VALUES(10,13,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(11,13,'Widget',1);
INSERT INTO widget_inheritance VALUES(12,300,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(13,300,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(14,300,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(15,300,'Widget',3);
INSERT INTO widget_inheritance VALUES(16,310,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(17,310,'Widget',1);
INSERT INTO widget_inheritance VALUES(18,311,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(19,311,'Widget',1);
INSERT INTO widget_inheritance VALUES(20,318,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(21,318,'Widget',1);
INSERT INTO widget_inheritance VALUES(22,127,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(23,127,'Widget',1);
INSERT INTO widget_inheritance VALUES(24,85,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(25,85,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(26,85,'Widget',2);
INSERT INTO widget_inheritance VALUES(27,111,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(28,111,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(29,111,'Widget',2);
INSERT INTO widget_inheritance VALUES(30,321,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(31,321,'Widget',1);
INSERT INTO widget_inheritance VALUES(32,322,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(33,322,'Widget',1);
INSERT INTO widget_inheritance VALUES(34,120,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(35,120,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(36,120,'Widget',2);
INSERT INTO widget_inheritance VALUES(37,228,'ListenableBuilder',0);
INSERT INTO widget_inheritance VALUES(38,228,'AnimatedWidget',1);
INSERT INTO widget_inheritance VALUES(39,228,'StatefulWidget',2);
INSERT INTO widget_inheritance VALUES(40,228,'Widget',3);
INSERT INTO widget_inheritance VALUES(41,123,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(42,123,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(43,123,'Widget',2);
INSERT INTO widget_inheritance VALUES(44,100,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(45,100,'Widget',1);
INSERT INTO widget_inheritance VALUES(46,124,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(47,124,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(48,124,'Widget',2);
INSERT INTO widget_inheritance VALUES(49,260,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(50,260,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(51,260,'Widget',2);
INSERT INTO widget_inheritance VALUES(52,323,'_AnimatedScrollView',0);
INSERT INTO widget_inheritance VALUES(53,323,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(54,323,'Widget',2);
INSERT INTO widget_inheritance VALUES(55,125,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(56,125,'Widget',1);
INSERT INTO widget_inheritance VALUES(57,117,'_AnimatedScrollView',0);
INSERT INTO widget_inheritance VALUES(58,117,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(59,117,'Widget',2);
INSERT INTO widget_inheritance VALUES(60,227,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(61,227,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(62,227,'Widget',2);
INSERT INTO widget_inheritance VALUES(63,118,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(64,118,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(65,118,'Widget',2);
INSERT INTO widget_inheritance VALUES(66,119,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(67,119,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(68,119,'Widget',2);
INSERT INTO widget_inheritance VALUES(69,225,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(70,225,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(71,225,'Widget',2);
INSERT INTO widget_inheritance VALUES(72,121,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(73,121,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(74,121,'Widget',2);
INSERT INTO widget_inheritance VALUES(75,122,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(76,122,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(77,122,'Widget',2);
INSERT INTO widget_inheritance VALUES(78,259,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(79,259,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(80,259,'Widget',2);
INSERT INTO widget_inheritance VALUES(81,249,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(82,249,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(83,249,'Widget',2);
INSERT INTO widget_inheritance VALUES(84,201,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(85,201,'Widget',1);
INSERT INTO widget_inheritance VALUES(86,247,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(87,247,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(88,247,'Widget',2);
INSERT INTO widget_inheritance VALUES(89,116,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(90,116,'Widget',1);
INSERT INTO widget_inheritance VALUES(91,224,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(92,224,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(93,224,'Widget',2);
INSERT INTO widget_inheritance VALUES(94,362,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(95,362,'Widget',1);
INSERT INTO widget_inheritance VALUES(96,288,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(97,288,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(98,288,'Widget',2);
INSERT INTO widget_inheritance VALUES(99,57,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(100,57,'Widget',1);
INSERT INTO widget_inheritance VALUES(101,363,'_DarwinView',0);
INSERT INTO widget_inheritance VALUES(102,363,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(103,363,'Widget',2);
INSERT INTO widget_inheritance VALUES(104,77,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(105,77,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(106,77,'Widget',2);
INSERT INTO widget_inheritance VALUES(107,356,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(108,356,'Widget',1);
INSERT INTO widget_inheritance VALUES(109,364,'InheritedNotifier',0);
INSERT INTO widget_inheritance VALUES(110,364,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(111,364,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(112,364,'Widget',3);
INSERT INTO widget_inheritance VALUES(113,365,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(114,365,'Widget',1);
INSERT INTO widget_inheritance VALUES(115,239,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(116,239,'Widget',1);
INSERT INTO widget_inheritance VALUES(117,31,'_ActionButton',0);
INSERT INTO widget_inheritance VALUES(118,31,'IconButton',1);
INSERT INTO widget_inheritance VALUES(119,31,'StatelessWidget',2);
INSERT INTO widget_inheritance VALUES(120,31,'Widget',3);
INSERT INTO widget_inheritance VALUES(121,272,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(122,272,'Widget',1);
INSERT INTO widget_inheritance VALUES(123,366,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(124,366,'Widget',1);
INSERT INTO widget_inheritance VALUES(125,278,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(126,278,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(127,278,'Widget',2);
INSERT INTO widget_inheritance VALUES(128,367,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(129,367,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(130,367,'Widget',2);
INSERT INTO widget_inheritance VALUES(131,258,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(132,258,'Widget',1);
INSERT INTO widget_inheritance VALUES(133,368,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(134,368,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(135,368,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(136,368,'Widget',3);
INSERT INTO widget_inheritance VALUES(137,5,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(138,5,'Widget',1);
INSERT INTO widget_inheritance VALUES(139,75,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(140,75,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(141,75,'Widget',2);
INSERT INTO widget_inheritance VALUES(142,369,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(143,369,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(144,369,'Widget',2);
INSERT INTO widget_inheritance VALUES(145,61,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(146,61,'Widget',1);
INSERT INTO widget_inheritance VALUES(147,60,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(148,60,'Widget',1);
INSERT INTO widget_inheritance VALUES(149,371,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(150,371,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(151,371,'Widget',2);
INSERT INTO widget_inheritance VALUES(152,142,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(153,142,'Widget',1);
INSERT INTO widget_inheritance VALUES(154,350,'ScrollView',0);
INSERT INTO widget_inheritance VALUES(155,350,'StatelessWidget',1);
INSERT INTO widget_inheritance VALUES(156,350,'Widget',2);
INSERT INTO widget_inheritance VALUES(157,202,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(158,202,'Widget',1);
INSERT INTO widget_inheritance VALUES(159,29,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(160,29,'Widget',1);
INSERT INTO widget_inheritance VALUES(161,338,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(162,338,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(163,338,'Widget',2);
INSERT INTO widget_inheritance VALUES(164,372,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(165,372,'Widget',1);
INSERT INTO widget_inheritance VALUES(166,326,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(167,326,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(168,326,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(169,326,'Widget',3);
INSERT INTO widget_inheritance VALUES(170,373,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(171,373,'Widget',1);
INSERT INTO widget_inheritance VALUES(172,283,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(173,283,'Widget',1);
INSERT INTO widget_inheritance VALUES(174,3,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(175,3,'Widget',1);
INSERT INTO widget_inheritance VALUES(176,374,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(177,374,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(178,374,'Widget',2);
INSERT INTO widget_inheritance VALUES(179,237,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(180,237,'Widget',1);
INSERT INTO widget_inheritance VALUES(181,86,'Align',0);
INSERT INTO widget_inheritance VALUES(182,86,'SingleChildRenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(183,86,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(184,86,'Widget',3);
INSERT INTO widget_inheritance VALUES(185,39,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(186,39,'Widget',1);
INSERT INTO widget_inheritance VALUES(187,17,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(188,17,'Widget',1);
INSERT INTO widget_inheritance VALUES(189,375,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(190,375,'Widget',1);
INSERT INTO widget_inheritance VALUES(191,376,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(192,376,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(193,376,'Widget',2);
INSERT INTO widget_inheritance VALUES(194,215,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(195,215,'Widget',1);
INSERT INTO widget_inheritance VALUES(196,377,'PopupMenuItem',0);
INSERT INTO widget_inheritance VALUES(197,377,'PopupMenuEntry',1);
INSERT INTO widget_inheritance VALUES(198,377,'StatefulWidget',2);
INSERT INTO widget_inheritance VALUES(199,377,'Widget',3);
INSERT INTO widget_inheritance VALUES(200,11,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(201,11,'Widget',1);
INSERT INTO widget_inheritance VALUES(202,328,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(203,328,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(204,328,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(205,328,'Widget',3);
INSERT INTO widget_inheritance VALUES(206,12,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(207,12,'Widget',1);
INSERT INTO widget_inheritance VALUES(208,9,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(209,9,'Widget',1);
INSERT INTO widget_inheritance VALUES(210,46,'ProgressIndicator',0);
INSERT INTO widget_inheritance VALUES(211,46,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(212,46,'Widget',2);
INSERT INTO widget_inheritance VALUES(213,66,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(214,66,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(215,66,'Widget',2);
INSERT INTO widget_inheritance VALUES(216,69,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(217,69,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(218,69,'Widget',2);
INSERT INTO widget_inheritance VALUES(219,67,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(220,67,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(221,67,'Widget',2);
INSERT INTO widget_inheritance VALUES(222,68,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(223,68,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(224,68,'Widget',2);
INSERT INTO widget_inheritance VALUES(225,378,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(226,378,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(227,378,'Widget',2);
INSERT INTO widget_inheritance VALUES(228,32,'_ActionButton',0);
INSERT INTO widget_inheritance VALUES(229,32,'IconButton',1);
INSERT INTO widget_inheritance VALUES(230,32,'StatelessWidget',2);
INSERT INTO widget_inheritance VALUES(231,32,'Widget',3);
INSERT INTO widget_inheritance VALUES(232,274,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(233,274,'Widget',1);
INSERT INTO widget_inheritance VALUES(234,267,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(235,267,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(236,267,'Widget',2);
INSERT INTO widget_inheritance VALUES(237,88,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(238,88,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(239,88,'Widget',2);
INSERT INTO widget_inheritance VALUES(240,96,'Flex',0);
INSERT INTO widget_inheritance VALUES(241,96,'MultiChildRenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(242,96,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(243,96,'Widget',3);
INSERT INTO widget_inheritance VALUES(244,265,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(245,265,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(246,265,'Widget',2);
INSERT INTO widget_inheritance VALUES(247,266,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(248,266,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(249,266,'Widget',2);
INSERT INTO widget_inheritance VALUES(250,80,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(251,80,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(252,80,'Widget',2);
INSERT INTO widget_inheritance VALUES(253,379,'AbstractLayoutBuilder',0);
INSERT INTO widget_inheritance VALUES(254,379,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(255,379,'Widget',2);
INSERT INTO widget_inheritance VALUES(256,380,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(257,380,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(258,380,'Widget',2);
INSERT INTO widget_inheritance VALUES(259,1,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(260,1,'Widget',1);
INSERT INTO widget_inheritance VALUES(261,131,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(262,131,'Widget',1);
INSERT INTO widget_inheritance VALUES(263,132,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(264,132,'Widget',1);
INSERT INTO widget_inheritance VALUES(265,48,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(266,48,'Widget',1);
INSERT INTO widget_inheritance VALUES(267,381,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(268,381,'Widget',1);
INSERT INTO widget_inheritance VALUES(269,129,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(270,129,'Widget',1);
INSERT INTO widget_inheritance VALUES(271,156,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(272,156,'Widget',1);
INSERT INTO widget_inheritance VALUES(273,24,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(274,24,'Widget',1);
INSERT INTO widget_inheritance VALUES(275,238,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(276,238,'Widget',1);
INSERT INTO widget_inheritance VALUES(277,143,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(278,143,'Widget',1);
INSERT INTO widget_inheritance VALUES(279,144,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(280,144,'Widget',1);
INSERT INTO widget_inheritance VALUES(281,137,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(282,137,'Widget',1);
INSERT INTO widget_inheritance VALUES(283,382,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(284,382,'Widget',1);
INSERT INTO widget_inheritance VALUES(285,383,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(286,383,'Widget',1);
INSERT INTO widget_inheritance VALUES(287,352,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(288,352,'Widget',1);
INSERT INTO widget_inheritance VALUES(289,384,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(290,384,'Widget',1);
INSERT INTO widget_inheritance VALUES(291,385,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(292,385,'Widget',1);
INSERT INTO widget_inheritance VALUES(293,219,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(294,219,'Widget',1);
INSERT INTO widget_inheritance VALUES(295,386,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(296,386,'Widget',1);
INSERT INTO widget_inheritance VALUES(297,387,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(298,387,'Widget',1);
INSERT INTO widget_inheritance VALUES(299,388,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(300,388,'Widget',1);
INSERT INTO widget_inheritance VALUES(301,389,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(302,389,'Widget',1);
INSERT INTO widget_inheritance VALUES(303,62,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(304,62,'Widget',1);
INSERT INTO widget_inheritance VALUES(305,218,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(306,218,'Widget',1);
INSERT INTO widget_inheritance VALUES(307,157,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(308,157,'Widget',1);
INSERT INTO widget_inheritance VALUES(309,390,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(310,390,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(311,390,'Widget',2);
INSERT INTO widget_inheritance VALUES(312,216,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(313,216,'Widget',1);
INSERT INTO widget_inheritance VALUES(314,139,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(315,139,'Widget',1);
INSERT INTO widget_inheritance VALUES(316,391,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(317,391,'Widget',1);
INSERT INTO widget_inheritance VALUES(318,217,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(319,217,'Widget',1);
INSERT INTO widget_inheritance VALUES(320,240,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(321,240,'Widget',1);
INSERT INTO widget_inheritance VALUES(322,195,'RawScrollbar',0);
INSERT INTO widget_inheritance VALUES(323,195,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(324,195,'Widget',2);
INSERT INTO widget_inheritance VALUES(325,392,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(326,392,'Widget',1);
INSERT INTO widget_inheritance VALUES(327,262,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(328,262,'Widget',1);
INSERT INTO widget_inheritance VALUES(329,393,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(330,393,'Widget',1);
INSERT INTO widget_inheritance VALUES(331,43,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(332,43,'Widget',1);
INSERT INTO widget_inheritance VALUES(333,256,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(334,256,'Widget',1);
INSERT INTO widget_inheritance VALUES(335,302,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(336,302,'Widget',1);
INSERT INTO widget_inheritance VALUES(337,303,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(338,303,'Widget',1);
INSERT INTO widget_inheritance VALUES(339,394,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(340,394,'Widget',1);
INSERT INTO widget_inheritance VALUES(341,41,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(342,41,'Widget',1);
INSERT INTO widget_inheritance VALUES(343,63,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(344,63,'Widget',1);
INSERT INTO widget_inheritance VALUES(345,158,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(346,158,'Widget',1);
INSERT INTO widget_inheritance VALUES(347,229,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(348,229,'Widget',1);
INSERT INTO widget_inheritance VALUES(349,245,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(350,245,'Widget',1);
INSERT INTO widget_inheritance VALUES(351,395,'FormField',0);
INSERT INTO widget_inheritance VALUES(352,395,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(353,395,'Widget',2);
INSERT INTO widget_inheritance VALUES(354,396,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(355,396,'Widget',1);
INSERT INTO widget_inheritance VALUES(356,299,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(357,299,'Widget',1);
INSERT INTO widget_inheritance VALUES(358,397,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(359,397,'Widget',1);
INSERT INTO widget_inheritance VALUES(360,169,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(361,169,'Widget',1);
INSERT INTO widget_inheritance VALUES(362,138,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(363,138,'Widget',1);
INSERT INTO widget_inheritance VALUES(364,337,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(365,337,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(366,337,'Widget',2);
INSERT INTO widget_inheritance VALUES(367,341,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(368,341,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(369,341,'Widget',2);
INSERT INTO widget_inheritance VALUES(370,166,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(371,166,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(372,166,'Widget',2);
INSERT INTO widget_inheritance VALUES(373,183,'ScrollView',0);
INSERT INTO widget_inheritance VALUES(374,183,'StatelessWidget',1);
INSERT INTO widget_inheritance VALUES(375,183,'Widget',2);
INSERT INTO widget_inheritance VALUES(376,285,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(377,285,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(378,285,'Widget',2);
INSERT INTO widget_inheritance VALUES(379,102,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(380,102,'Widget',1);
INSERT INTO widget_inheritance VALUES(381,398,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(382,398,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(383,398,'Widget',2);
INSERT INTO widget_inheritance VALUES(384,399,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(385,399,'Widget',1);
INSERT INTO widget_inheritance VALUES(386,400,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(387,400,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(388,400,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(389,400,'Widget',3);
INSERT INTO widget_inheritance VALUES(390,339,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(391,339,'Widget',1);
INSERT INTO widget_inheritance VALUES(392,70,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(393,70,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(394,70,'Widget',2);
INSERT INTO widget_inheritance VALUES(395,113,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(396,113,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(397,113,'Widget',2);
INSERT INTO widget_inheritance VALUES(398,209,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(399,209,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(400,209,'Widget',2);
INSERT INTO widget_inheritance VALUES(401,320,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(402,320,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(403,320,'Widget',2);
INSERT INTO widget_inheritance VALUES(404,401,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(405,401,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(406,401,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(407,401,'Widget',3);
INSERT INTO widget_inheritance VALUES(408,230,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(409,230,'Widget',1);
INSERT INTO widget_inheritance VALUES(410,402,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(411,402,'Widget',1);
INSERT INTO widget_inheritance VALUES(412,403,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(413,403,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(414,403,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(415,403,'Widget',3);
INSERT INTO widget_inheritance VALUES(416,324,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(417,324,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(418,324,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(419,324,'Widget',3);
INSERT INTO widget_inheritance VALUES(420,114,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(421,114,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(422,114,'Widget',2);
INSERT INTO widget_inheritance VALUES(423,404,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(424,404,'Widget',1);
INSERT INTO widget_inheritance VALUES(425,405,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(426,405,'Widget',1);
INSERT INTO widget_inheritance VALUES(427,126,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(428,126,'Widget',1);
INSERT INTO widget_inheritance VALUES(429,406,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(430,406,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(431,406,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(432,406,'Widget',3);
INSERT INTO widget_inheritance VALUES(433,319,'_UbiquitousInheritedWidget',0);
INSERT INTO widget_inheritance VALUES(434,319,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(435,319,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(436,319,'Widget',3);
INSERT INTO widget_inheritance VALUES(437,176,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(438,176,'Widget',1);
INSERT INTO widget_inheritance VALUES(439,407,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(440,407,'Widget',1);
INSERT INTO widget_inheritance VALUES(441,34,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(442,34,'Widget',1);
INSERT INTO widget_inheritance VALUES(443,329,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(444,329,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(445,329,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(446,329,'Widget',3);
INSERT INTO widget_inheritance VALUES(447,408,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(448,408,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(449,408,'Widget',2);
INSERT INTO widget_inheritance VALUES(450,103,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(451,103,'Widget',1);
INSERT INTO widget_inheritance VALUES(452,221,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(453,221,'Widget',1);
INSERT INTO widget_inheritance VALUES(454,252,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(455,252,'Widget',1);
INSERT INTO widget_inheritance VALUES(456,104,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(457,104,'Widget',1);
INSERT INTO widget_inheritance VALUES(458,154,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(459,154,'Widget',1);
INSERT INTO widget_inheritance VALUES(460,276,'_ActionButton',0);
INSERT INTO widget_inheritance VALUES(461,276,'IconButton',1);
INSERT INTO widget_inheritance VALUES(462,276,'StatelessWidget',2);
INSERT INTO widget_inheritance VALUES(463,276,'Widget',3);
INSERT INTO widget_inheritance VALUES(464,273,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(465,273,'Widget',1);
INSERT INTO widget_inheritance VALUES(466,257,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(467,257,'Widget',1);
INSERT INTO widget_inheritance VALUES(468,155,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(469,155,'Widget',1);
INSERT INTO widget_inheritance VALUES(470,409,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(471,409,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(472,409,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(473,409,'Widget',3);
INSERT INTO widget_inheritance VALUES(474,55,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(475,55,'Widget',1);
INSERT INTO widget_inheritance VALUES(476,223,'FormField',0);
INSERT INTO widget_inheritance VALUES(477,223,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(478,223,'Widget',2);
INSERT INTO widget_inheritance VALUES(479,181,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(480,181,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(481,181,'Widget',2);
INSERT INTO widget_inheritance VALUES(482,370,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(483,370,'Widget',1);
INSERT INTO widget_inheritance VALUES(484,410,'_DropdownMenuItemContainer',0);
INSERT INTO widget_inheritance VALUES(485,410,'StatelessWidget',1);
INSERT INTO widget_inheritance VALUES(486,410,'Widget',2);
INSERT INTO widget_inheritance VALUES(487,411,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(488,411,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(489,411,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(490,411,'Widget',3);
INSERT INTO widget_inheritance VALUES(491,412,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(492,412,'Widget',1);
INSERT INTO widget_inheritance VALUES(493,244,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(494,244,'Widget',1);
INSERT INTO widget_inheritance VALUES(495,354,'ButtonStyleButton',0);
INSERT INTO widget_inheritance VALUES(496,354,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(497,354,'Widget',2);
INSERT INTO widget_inheritance VALUES(498,413,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(499,413,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(500,413,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(501,413,'Widget',3);
INSERT INTO widget_inheritance VALUES(502,361,'_ActionButton',0);
INSERT INTO widget_inheritance VALUES(503,361,'IconButton',1);
INSERT INTO widget_inheritance VALUES(504,361,'StatelessWidget',2);
INSERT INTO widget_inheritance VALUES(505,361,'Widget',3);
INSERT INTO widget_inheritance VALUES(506,275,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(507,275,'Widget',1);
INSERT INTO widget_inheritance VALUES(508,197,'LeafRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(509,197,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(510,197,'Widget',2);
INSERT INTO widget_inheritance VALUES(511,414,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(512,414,'Widget',1);
INSERT INTO widget_inheritance VALUES(513,415,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(514,415,'Widget',1);
INSERT INTO widget_inheritance VALUES(515,416,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(516,416,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(517,416,'Widget',2);
INSERT INTO widget_inheritance VALUES(518,106,'Flexible',0);
INSERT INTO widget_inheritance VALUES(519,106,'ParentDataWidget',1);
INSERT INTO widget_inheritance VALUES(520,106,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(521,106,'Widget',3);
INSERT INTO widget_inheritance VALUES(522,51,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(523,51,'Widget',1);
INSERT INTO widget_inheritance VALUES(524,417,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(525,417,'Widget',1);
INSERT INTO widget_inheritance VALUES(526,178,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(527,178,'Widget',1);
INSERT INTO widget_inheritance VALUES(528,52,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(529,52,'Widget',1);
INSERT INTO widget_inheritance VALUES(530,418,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(531,418,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(532,418,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(533,418,'Widget',3);
INSERT INTO widget_inheritance VALUES(534,8,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(535,8,'Widget',1);
INSERT INTO widget_inheritance VALUES(536,89,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(537,89,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(538,89,'Widget',2);
INSERT INTO widget_inheritance VALUES(539,359,'ButtonStyleButton',0);
INSERT INTO widget_inheritance VALUES(540,359,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(541,359,'Widget',2);
INSERT INTO widget_inheritance VALUES(542,419,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(543,419,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(544,419,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(545,419,'Widget',3);
INSERT INTO widget_inheritance VALUES(546,15,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(547,15,'Widget',1);
INSERT INTO widget_inheritance VALUES(548,87,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(549,87,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(550,87,'Widget',2);
INSERT INTO widget_inheritance VALUES(551,94,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(552,94,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(553,94,'Widget',2);
INSERT INTO widget_inheritance VALUES(554,109,'ParentDataWidget',0);
INSERT INTO widget_inheritance VALUES(555,109,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(556,109,'Widget',2);
INSERT INTO widget_inheritance VALUES(557,196,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(558,196,'Widget',1);
INSERT INTO widget_inheritance VALUES(559,420,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(560,420,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(561,420,'Widget',2);
INSERT INTO widget_inheritance VALUES(562,28,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(563,28,'Widget',1);
INSERT INTO widget_inheritance VALUES(564,99,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(565,99,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(566,99,'Widget',2);
INSERT INTO widget_inheritance VALUES(567,4,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(568,4,'Widget',1);
INSERT INTO widget_inheritance VALUES(569,282,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(570,282,'Widget',1);
INSERT INTO widget_inheritance VALUES(571,424,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(572,424,'Widget',1);
INSERT INTO widget_inheritance VALUES(573,421,'Focus',0);
INSERT INTO widget_inheritance VALUES(574,421,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(575,421,'Widget',2);
INSERT INTO widget_inheritance VALUES(576,422,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(577,422,'Widget',1);
INSERT INTO widget_inheritance VALUES(578,423,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(579,423,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(580,423,'Widget',2);
INSERT INTO widget_inheritance VALUES(581,198,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(582,198,'Widget',1);
INSERT INTO widget_inheritance VALUES(583,222,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(584,222,'Widget',1);
INSERT INTO widget_inheritance VALUES(585,82,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(586,82,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(587,82,'Widget',2);
INSERT INTO widget_inheritance VALUES(588,263,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(589,263,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(590,263,'Widget',2);
INSERT INTO widget_inheritance VALUES(591,172,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(592,172,'Widget',1);
INSERT INTO widget_inheritance VALUES(593,146,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(594,146,'Widget',1);
INSERT INTO widget_inheritance VALUES(595,250,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(596,250,'Widget',1);
INSERT INTO widget_inheritance VALUES(597,37,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(598,37,'Widget',1);
INSERT INTO widget_inheritance VALUES(599,21,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(600,21,'Widget',1);
INSERT INTO widget_inheritance VALUES(601,20,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(602,20,'Widget',1);
INSERT INTO widget_inheritance VALUES(603,163,'BoxScrollView',0);
INSERT INTO widget_inheritance VALUES(604,163,'ScrollView',1);
INSERT INTO widget_inheritance VALUES(605,163,'StatelessWidget',2);
INSERT INTO widget_inheritance VALUES(606,163,'Widget',3);
INSERT INTO widget_inheritance VALUES(607,171,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(608,171,'Widget',1);
INSERT INTO widget_inheritance VALUES(609,425,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(610,425,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(611,425,'Widget',2);
INSERT INTO widget_inheritance VALUES(612,426,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(613,426,'Widget',1);
INSERT INTO widget_inheritance VALUES(614,213,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(615,213,'Widget',1);
INSERT INTO widget_inheritance VALUES(616,6,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(617,6,'Widget',1);
INSERT INTO widget_inheritance VALUES(618,30,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(619,30,'Widget',1);
INSERT INTO widget_inheritance VALUES(620,427,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(621,427,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(622,427,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(623,427,'Widget',3);
INSERT INTO widget_inheritance VALUES(624,325,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(625,325,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(626,325,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(627,325,'Widget',3);
INSERT INTO widget_inheritance VALUES(628,428,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(629,428,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(630,428,'Widget',2);
INSERT INTO widget_inheritance VALUES(631,292,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(632,292,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(633,292,'Widget',2);
INSERT INTO widget_inheritance VALUES(634,38,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(635,38,'Widget',1);
INSERT INTO widget_inheritance VALUES(636,357,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(637,357,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(638,357,'Widget',2);
INSERT INTO widget_inheritance VALUES(639,7,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(640,7,'Widget',1);
INSERT INTO widget_inheritance VALUES(641,429,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(642,429,'Widget',1);
INSERT INTO widget_inheritance VALUES(643,430,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(644,430,'Widget',1);
INSERT INTO widget_inheritance VALUES(645,431,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(646,431,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(647,431,'Widget',2);
INSERT INTO widget_inheritance VALUES(648,161,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(649,161,'Widget',1);
INSERT INTO widget_inheritance VALUES(650,432,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(651,432,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(652,432,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(653,432,'Widget',3);
INSERT INTO widget_inheritance VALUES(654,336,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(655,336,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(656,336,'Widget',2);
INSERT INTO widget_inheritance VALUES(657,433,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(658,433,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(659,433,'Widget',2);
INSERT INTO widget_inheritance VALUES(660,345,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(661,345,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(662,345,'Widget',2);
INSERT INTO widget_inheritance VALUES(663,346,'ProxyWidget',0);
INSERT INTO widget_inheritance VALUES(664,346,'Widget',1);
INSERT INTO widget_inheritance VALUES(665,152,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(666,152,'Widget',1);
INSERT INTO widget_inheritance VALUES(667,149,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(668,149,'Widget',1);
INSERT INTO widget_inheritance VALUES(669,150,'InkResponse',0);
INSERT INTO widget_inheritance VALUES(670,150,'StatelessWidget',1);
INSERT INTO widget_inheritance VALUES(671,150,'Widget',2);
INSERT INTO widget_inheritance VALUES(672,14,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(673,14,'Widget',1);
INSERT INTO widget_inheritance VALUES(674,434,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(675,434,'Widget',1);
INSERT INTO widget_inheritance VALUES(676,231,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(677,231,'Widget',1);
INSERT INTO widget_inheritance VALUES(678,435,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(679,435,'Widget',1);
INSERT INTO widget_inheritance VALUES(680,351,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(681,351,'Widget',1);
INSERT INTO widget_inheritance VALUES(682,298,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(683,298,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(684,298,'Widget',2);
INSERT INTO widget_inheritance VALUES(685,297,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(686,297,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(687,297,'Widget',2);
INSERT INTO widget_inheritance VALUES(688,316,'ParentDataWidget',0);
INSERT INTO widget_inheritance VALUES(689,316,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(690,316,'Widget',2);
INSERT INTO widget_inheritance VALUES(691,284,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(692,284,'Widget',1);
INSERT INTO widget_inheritance VALUES(693,436,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(694,436,'Widget',1);
INSERT INTO widget_inheritance VALUES(695,287,'ConstrainedLayoutBuilder',0);
INSERT INTO widget_inheritance VALUES(696,287,'AbstractLayoutBuilder',1);
INSERT INTO widget_inheritance VALUES(697,287,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(698,287,'Widget',3);
INSERT INTO widget_inheritance VALUES(699,315,'ParentDataWidget',0);
INSERT INTO widget_inheritance VALUES(700,315,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(701,315,'Widget',2);
INSERT INTO widget_inheritance VALUES(702,437,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(703,437,'Widget',1);
INSERT INTO widget_inheritance VALUES(704,145,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(705,145,'Widget',1);
INSERT INTO widget_inheritance VALUES(706,79,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(707,79,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(708,79,'Widget',2);
INSERT INTO widget_inheritance VALUES(709,47,'ProgressIndicator',0);
INSERT INTO widget_inheritance VALUES(710,47,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(711,47,'Widget',2);
INSERT INTO widget_inheritance VALUES(712,342,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(713,342,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(714,342,'Widget',2);
INSERT INTO widget_inheritance VALUES(715,438,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(716,438,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(717,438,'Widget',2);
INSERT INTO widget_inheritance VALUES(718,147,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(719,147,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(720,147,'Widget',2);
INSERT INTO widget_inheritance VALUES(721,16,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(722,16,'Widget',1);
INSERT INTO widget_inheritance VALUES(723,334,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(724,334,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(725,334,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(726,334,'Widget',3);
INSERT INTO widget_inheritance VALUES(727,162,'BoxScrollView',0);
INSERT INTO widget_inheritance VALUES(728,162,'ScrollView',1);
INSERT INTO widget_inheritance VALUES(729,162,'StatelessWidget',2);
INSERT INTO widget_inheritance VALUES(730,162,'Widget',3);
INSERT INTO widget_inheritance VALUES(731,179,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(732,179,'Widget',1);
INSERT INTO widget_inheritance VALUES(733,291,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(734,291,'Widget',1);
INSERT INTO widget_inheritance VALUES(735,290,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(736,290,'Widget',1);
INSERT INTO widget_inheritance VALUES(737,105,'Draggable',0);
INSERT INTO widget_inheritance VALUES(738,105,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(739,105,'Widget',2);
INSERT INTO widget_inheritance VALUES(740,439,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(741,439,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(742,439,'Widget',2);
INSERT INTO widget_inheritance VALUES(743,440,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(744,440,'Widget',1);
INSERT INTO widget_inheritance VALUES(745,160,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(746,160,'Widget',1);
INSERT INTO widget_inheritance VALUES(747,65,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(748,65,'Widget',1);
INSERT INTO widget_inheritance VALUES(749,211,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(750,211,'Widget',1);
INSERT INTO widget_inheritance VALUES(751,327,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(752,327,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(753,327,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(754,327,'Widget',3);
INSERT INTO widget_inheritance VALUES(755,23,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(756,23,'Widget',1);
INSERT INTO widget_inheritance VALUES(757,441,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(758,441,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(759,441,'Widget',2);
INSERT INTO widget_inheritance VALUES(760,167,'InheritedModel',0);
INSERT INTO widget_inheritance VALUES(761,167,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(762,167,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(763,167,'Widget',3);
INSERT INTO widget_inheritance VALUES(764,442,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(765,442,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(766,442,'Widget',2);
INSERT INTO widget_inheritance VALUES(767,443,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(768,443,'Widget',1);
INSERT INTO widget_inheritance VALUES(769,444,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(770,444,'Widget',1);
INSERT INTO widget_inheritance VALUES(771,445,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(772,445,'Widget',1);
INSERT INTO widget_inheritance VALUES(773,446,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(774,446,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(775,446,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(776,446,'Widget',3);
INSERT INTO widget_inheritance VALUES(777,447,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(778,447,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(779,447,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(780,447,'Widget',3);
INSERT INTO widget_inheritance VALUES(781,448,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(782,448,'Widget',1);
INSERT INTO widget_inheritance VALUES(783,449,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(784,449,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(785,449,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(786,449,'Widget',3);
INSERT INTO widget_inheritance VALUES(787,261,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(788,261,'Widget',1);
INSERT INTO widget_inheritance VALUES(789,450,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(790,450,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(791,450,'Widget',2);
INSERT INTO widget_inheritance VALUES(792,451,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(793,451,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(794,451,'Widget',2);
INSERT INTO widget_inheritance VALUES(795,212,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(796,212,'Widget',1);
INSERT INTO widget_inheritance VALUES(797,293,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(798,293,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(799,293,'Widget',2);
INSERT INTO widget_inheritance VALUES(800,452,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(801,452,'Widget',1);
INSERT INTO widget_inheritance VALUES(802,453,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(803,453,'Widget',1);
INSERT INTO widget_inheritance VALUES(804,454,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(805,454,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(806,454,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(807,454,'Widget',3);
INSERT INTO widget_inheritance VALUES(808,455,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(809,455,'Widget',1);
INSERT INTO widget_inheritance VALUES(810,456,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(811,456,'Widget',1);
INSERT INTO widget_inheritance VALUES(812,457,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(813,457,'Widget',1);
INSERT INTO widget_inheritance VALUES(814,458,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(815,458,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(816,458,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(817,458,'Widget',3);
INSERT INTO widget_inheritance VALUES(818,459,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(819,459,'Widget',1);
INSERT INTO widget_inheritance VALUES(820,358,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(821,358,'Widget',1);
INSERT INTO widget_inheritance VALUES(822,460,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(823,460,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(824,460,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(825,460,'Widget',3);
INSERT INTO widget_inheritance VALUES(826,214,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(827,214,'Widget',1);
INSERT INTO widget_inheritance VALUES(828,232,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(829,232,'Widget',1);
INSERT INTO widget_inheritance VALUES(830,461,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(831,461,'Widget',1);
INSERT INTO widget_inheritance VALUES(832,251,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(833,251,'Widget',1);
INSERT INTO widget_inheritance VALUES(834,344,'Viewport',0);
INSERT INTO widget_inheritance VALUES(835,344,'MultiChildRenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(836,344,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(837,344,'Widget',3);
INSERT INTO widget_inheritance VALUES(838,220,'ProxyWidget',0);
INSERT INTO widget_inheritance VALUES(839,220,'Widget',1);
INSERT INTO widget_inheritance VALUES(840,462,'Object',0);
INSERT INTO widget_inheritance VALUES(841,462,'PreferredSizeWidget',1);
INSERT INTO widget_inheritance VALUES(842,462,'Widget',2);
INSERT INTO widget_inheritance VALUES(843,71,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(844,71,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(845,71,'Widget',2);
INSERT INTO widget_inheritance VALUES(846,73,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(847,73,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(848,73,'Widget',2);
INSERT INTO widget_inheritance VALUES(849,203,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(850,203,'Widget',1);
INSERT INTO widget_inheritance VALUES(851,355,'ButtonStyleButton',0);
INSERT INTO widget_inheritance VALUES(852,355,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(853,355,'Widget',2);
INSERT INTO widget_inheritance VALUES(854,463,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(855,463,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(856,463,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(857,463,'Widget',3);
INSERT INTO widget_inheritance VALUES(858,464,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(859,464,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(860,464,'Widget',2);
INSERT INTO widget_inheritance VALUES(861,83,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(862,83,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(863,83,'Widget',2);
INSERT INTO widget_inheritance VALUES(864,182,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(865,182,'Widget',1);
INSERT INTO widget_inheritance VALUES(866,465,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(867,465,'Widget',1);
INSERT INTO widget_inheritance VALUES(868,74,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(869,74,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(870,74,'Widget',2);
INSERT INTO widget_inheritance VALUES(871,210,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(872,210,'Widget',1);
INSERT INTO widget_inheritance VALUES(873,165,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(874,165,'Widget',1);
INSERT INTO widget_inheritance VALUES(875,235,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(876,235,'Widget',1);
INSERT INTO widget_inheritance VALUES(877,347,'ProxyWidget',0);
INSERT INTO widget_inheritance VALUES(878,347,'Widget',1);
INSERT INTO widget_inheritance VALUES(879,312,'LeafRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(880,312,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(881,312,'Widget',2);
INSERT INTO widget_inheritance VALUES(882,296,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(883,296,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(884,296,'Widget',2);
INSERT INTO widget_inheritance VALUES(885,279,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(886,279,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(887,279,'Widget',2);
INSERT INTO widget_inheritance VALUES(888,309,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(889,309,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(890,309,'Widget',2);
INSERT INTO widget_inheritance VALUES(891,36,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(892,36,'Widget',1);
INSERT INTO widget_inheritance VALUES(893,466,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(894,466,'Widget',1);
INSERT INTO widget_inheritance VALUES(895,467,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(896,467,'Widget',1);
INSERT INTO widget_inheritance VALUES(897,468,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(898,468,'Widget',1);
INSERT INTO widget_inheritance VALUES(899,469,'LeafRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(900,469,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(901,469,'Widget',2);
INSERT INTO widget_inheritance VALUES(902,470,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(903,470,'Widget',1);
INSERT INTO widget_inheritance VALUES(904,56,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(905,56,'Widget',1);
INSERT INTO widget_inheritance VALUES(906,174,'PopupMenuEntry',0);
INSERT INTO widget_inheritance VALUES(907,174,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(908,174,'Widget',2);
INSERT INTO widget_inheritance VALUES(909,471,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(910,471,'Widget',1);
INSERT INTO widget_inheritance VALUES(911,472,'PopupMenuEntry',0);
INSERT INTO widget_inheritance VALUES(912,472,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(913,472,'Widget',2);
INSERT INTO widget_inheritance VALUES(914,330,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(915,330,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(916,330,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(917,330,'Widget',3);
INSERT INTO widget_inheritance VALUES(918,108,'ParentDataWidget',0);
INSERT INTO widget_inheritance VALUES(919,108,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(920,108,'Widget',2);
INSERT INTO widget_inheritance VALUES(921,159,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(922,159,'Widget',1);
INSERT INTO widget_inheritance VALUES(923,93,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(924,93,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(925,93,'Widget',2);
INSERT INTO widget_inheritance VALUES(926,204,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(927,204,'Widget',1);
INSERT INTO widget_inheritance VALUES(928,473,'Object',0);
INSERT INTO widget_inheritance VALUES(929,473,'Widget',1);
INSERT INTO widget_inheritance VALUES(930,335,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(931,335,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(932,335,'Widget',2);
INSERT INTO widget_inheritance VALUES(933,474,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(934,474,'Widget',1);
INSERT INTO widget_inheritance VALUES(935,475,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(936,475,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(937,475,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(938,475,'Widget',3);
INSERT INTO widget_inheritance VALUES(939,476,'Widget',0);
INSERT INTO widget_inheritance VALUES(940,45,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(941,45,'Widget',1);
INSERT INTO widget_inheritance VALUES(942,19,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(943,19,'Widget',1);
INSERT INTO widget_inheritance VALUES(944,477,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(945,477,'Widget',1);
INSERT INTO widget_inheritance VALUES(946,478,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(947,478,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(948,478,'Widget',2);
INSERT INTO widget_inheritance VALUES(949,44,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(950,44,'Widget',1);
INSERT INTO widget_inheritance VALUES(951,479,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(952,479,'Widget',1);
INSERT INTO widget_inheritance VALUES(953,153,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(954,153,'Widget',1);
INSERT INTO widget_inheritance VALUES(955,248,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(956,248,'Widget',1);
INSERT INTO widget_inheritance VALUES(957,313,'LeafRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(958,313,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(959,313,'Widget',2);
INSERT INTO widget_inheritance VALUES(960,254,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(961,254,'Widget',1);
INSERT INTO widget_inheritance VALUES(962,360,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(963,360,'Widget',1);
INSERT INTO widget_inheritance VALUES(964,175,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(965,175,'Widget',1);
INSERT INTO widget_inheritance VALUES(966,480,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(967,480,'Widget',1);
INSERT INTO widget_inheritance VALUES(968,481,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(969,481,'Widget',1);
INSERT INTO widget_inheritance VALUES(970,482,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(971,482,'Widget',1);
INSERT INTO widget_inheritance VALUES(972,483,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(973,483,'Widget',1);
INSERT INTO widget_inheritance VALUES(974,484,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(975,484,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(976,484,'Widget',2);
INSERT INTO widget_inheritance VALUES(977,49,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(978,49,'Widget',1);
INSERT INTO widget_inheritance VALUES(979,485,'CircularProgressIndicator',0);
INSERT INTO widget_inheritance VALUES(980,485,'ProgressIndicator',1);
INSERT INTO widget_inheritance VALUES(981,485,'StatefulWidget',2);
INSERT INTO widget_inheritance VALUES(982,485,'Widget',3);
INSERT INTO widget_inheritance VALUES(983,115,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(984,115,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(985,115,'Widget',2);
INSERT INTO widget_inheritance VALUES(986,289,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(987,289,'Widget',1);
INSERT INTO widget_inheritance VALUES(988,486,'Widget',0);
INSERT INTO widget_inheritance VALUES(989,487,'ReorderableDragStartListener',0);
INSERT INTO widget_inheritance VALUES(990,487,'StatelessWidget',1);
INSERT INTO widget_inheritance VALUES(991,487,'Widget',2);
INSERT INTO widget_inheritance VALUES(992,488,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(993,488,'Widget',1);
INSERT INTO widget_inheritance VALUES(994,489,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(995,489,'Widget',1);
INSERT INTO widget_inheritance VALUES(996,177,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(997,177,'Widget',1);
INSERT INTO widget_inheritance VALUES(998,264,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(999,264,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1000,264,'Widget',2);
INSERT INTO widget_inheritance VALUES(1001,490,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1002,490,'Widget',1);
INSERT INTO widget_inheritance VALUES(1003,101,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1004,101,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1005,101,'Widget',2);
INSERT INTO widget_inheritance VALUES(1006,491,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1007,491,'Widget',1);
INSERT INTO widget_inheritance VALUES(1008,492,'Widget',0);
INSERT INTO widget_inheritance VALUES(1009,72,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1010,72,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1011,72,'Widget',2);
INSERT INTO widget_inheritance VALUES(1012,90,'MatrixTransition',0);
INSERT INTO widget_inheritance VALUES(1013,90,'AnimatedWidget',1);
INSERT INTO widget_inheritance VALUES(1014,90,'StatefulWidget',2);
INSERT INTO widget_inheritance VALUES(1015,90,'Widget',3);
INSERT INTO widget_inheritance VALUES(1016,493,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1017,493,'Widget',1);
INSERT INTO widget_inheritance VALUES(1018,95,'Flex',0);
INSERT INTO widget_inheritance VALUES(1019,95,'MultiChildRenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1020,95,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(1021,95,'Widget',3);
INSERT INTO widget_inheritance VALUES(1022,207,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1023,207,'Widget',1);
INSERT INTO widget_inheritance VALUES(1024,64,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1025,64,'Widget',1);
INSERT INTO widget_inheritance VALUES(1026,494,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1027,494,'Widget',1);
INSERT INTO widget_inheritance VALUES(1028,91,'MatrixTransition',0);
INSERT INTO widget_inheritance VALUES(1029,91,'AnimatedWidget',1);
INSERT INTO widget_inheritance VALUES(1030,91,'StatefulWidget',2);
INSERT INTO widget_inheritance VALUES(1031,91,'Widget',3);
INSERT INTO widget_inheritance VALUES(1032,253,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1033,253,'Widget',1);
INSERT INTO widget_inheritance VALUES(1034,194,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1035,194,'Widget',1);
INSERT INTO widget_inheritance VALUES(1036,496,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1037,496,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1038,496,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1039,496,'Widget',3);
INSERT INTO widget_inheritance VALUES(1040,180,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(1041,180,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(1042,180,'Widget',2);
INSERT INTO widget_inheritance VALUES(1043,495,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1044,495,'Widget',1);
INSERT INTO widget_inheritance VALUES(1045,349,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1046,349,'Widget',1);
INSERT INTO widget_inheritance VALUES(1047,497,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1048,497,'Widget',1);
INSERT INTO widget_inheritance VALUES(1049,498,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1050,498,'Widget',1);
INSERT INTO widget_inheritance VALUES(1051,499,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(1052,499,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(1053,499,'Widget',2);
INSERT INTO widget_inheritance VALUES(1054,500,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1055,500,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1056,500,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1057,500,'Widget',3);
INSERT INTO widget_inheritance VALUES(1058,501,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1059,501,'Widget',1);
INSERT INTO widget_inheritance VALUES(1060,502,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1061,502,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1062,502,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1063,502,'Widget',3);
INSERT INTO widget_inheritance VALUES(1064,503,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1065,503,'Widget',1);
INSERT INTO widget_inheritance VALUES(1066,504,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(1067,504,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(1068,504,'Widget',2);
INSERT INTO widget_inheritance VALUES(1069,53,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1070,53,'Widget',1);
INSERT INTO widget_inheritance VALUES(1071,505,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1072,505,'Widget',1);
INSERT INTO widget_inheritance VALUES(1073,506,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1074,506,'Widget',1);
INSERT INTO widget_inheritance VALUES(1075,507,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1076,507,'Widget',1);
INSERT INTO widget_inheritance VALUES(1077,508,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(1078,508,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(1079,508,'Widget',2);
INSERT INTO widget_inheritance VALUES(1080,509,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1081,509,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1082,509,'Widget',2);
INSERT INTO widget_inheritance VALUES(1083,510,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1084,510,'Widget',1);
INSERT INTO widget_inheritance VALUES(1085,277,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1086,277,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1087,277,'Widget',2);
INSERT INTO widget_inheritance VALUES(1088,511,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1089,511,'Widget',1);
INSERT INTO widget_inheritance VALUES(1090,512,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1091,512,'Widget',1);
INSERT INTO widget_inheritance VALUES(1092,513,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1093,513,'Widget',1);
INSERT INTO widget_inheritance VALUES(1094,343,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1095,343,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1096,343,'Widget',2);
INSERT INTO widget_inheritance VALUES(1097,128,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1098,128,'Widget',1);
INSERT INTO widget_inheritance VALUES(1099,133,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1100,133,'Widget',1);
INSERT INTO widget_inheritance VALUES(1101,514,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1102,514,'Widget',1);
INSERT INTO widget_inheritance VALUES(1103,164,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1104,164,'Widget',1);
INSERT INTO widget_inheritance VALUES(1105,294,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1106,294,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1107,294,'Widget',2);
INSERT INTO widget_inheritance VALUES(1108,76,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1109,76,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1110,76,'Widget',2);
INSERT INTO widget_inheritance VALUES(1111,84,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1112,84,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1113,84,'Widget',2);
INSERT INTO widget_inheritance VALUES(1114,92,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(1115,92,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1116,92,'Widget',2);
INSERT INTO widget_inheritance VALUES(1117,42,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1118,42,'Widget',1);
INSERT INTO widget_inheritance VALUES(1119,331,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1120,331,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1121,331,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1122,331,'Widget',3);
INSERT INTO widget_inheritance VALUES(1123,112,'AnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(1124,112,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1125,112,'Widget',2);
INSERT INTO widget_inheritance VALUES(1126,515,'_SliverAnimatedMultiBoxAdaptor',0);
INSERT INTO widget_inheritance VALUES(1127,515,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1128,515,'Widget',2);
INSERT INTO widget_inheritance VALUES(1129,301,'_SliverAnimatedMultiBoxAdaptor',0);
INSERT INTO widget_inheritance VALUES(1130,301,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1131,301,'Widget',2);
INSERT INTO widget_inheritance VALUES(1132,516,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(1133,516,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1134,516,'Widget',2);
INSERT INTO widget_inheritance VALUES(1135,184,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1136,184,'Widget',1);
INSERT INTO widget_inheritance VALUES(1137,270,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1138,270,'Widget',1);
INSERT INTO widget_inheritance VALUES(1139,271,'ParentDataWidget',0);
INSERT INTO widget_inheritance VALUES(1140,271,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(1141,271,'Widget',2);
INSERT INTO widget_inheritance VALUES(1142,269,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1143,269,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1144,269,'Widget',2);
INSERT INTO widget_inheritance VALUES(1145,517,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1146,517,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1147,517,'Widget',2);
INSERT INTO widget_inheritance VALUES(1148,518,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1149,518,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1150,518,'Widget',2);
INSERT INTO widget_inheritance VALUES(1151,306,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1152,306,'Widget',1);
INSERT INTO widget_inheritance VALUES(1153,187,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1154,187,'Widget',1);
INSERT INTO widget_inheritance VALUES(1155,186,'SliverMultiBoxAdaptorWidget',0);
INSERT INTO widget_inheritance VALUES(1156,186,'SliverWithKeepAliveWidget',1);
INSERT INTO widget_inheritance VALUES(1157,186,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(1158,186,'Widget',3);
INSERT INTO widget_inheritance VALUES(1159,519,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1160,519,'Widget',1);
INSERT INTO widget_inheritance VALUES(1161,188,'SliverMultiBoxAdaptorWidget',0);
INSERT INTO widget_inheritance VALUES(1162,188,'SliverWithKeepAliveWidget',1);
INSERT INTO widget_inheritance VALUES(1163,188,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(1164,188,'Widget',3);
INSERT INTO widget_inheritance VALUES(1165,305,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1166,305,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1167,305,'Widget',2);
INSERT INTO widget_inheritance VALUES(1168,304,'ConstrainedLayoutBuilder',0);
INSERT INTO widget_inheritance VALUES(1169,304,'AbstractLayoutBuilder',1);
INSERT INTO widget_inheritance VALUES(1170,304,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(1171,304,'Widget',3);
INSERT INTO widget_inheritance VALUES(1172,185,'SliverMultiBoxAdaptorWidget',0);
INSERT INTO widget_inheritance VALUES(1173,185,'SliverWithKeepAliveWidget',1);
INSERT INTO widget_inheritance VALUES(1174,185,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(1175,185,'Widget',3);
INSERT INTO widget_inheritance VALUES(1176,268,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1177,268,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1178,268,'Widget',2);
INSERT INTO widget_inheritance VALUES(1179,520,'SliverWithKeepAliveWidget',0);
INSERT INTO widget_inheritance VALUES(1180,520,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1181,520,'Widget',2);
INSERT INTO widget_inheritance VALUES(1182,521,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1183,521,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1184,521,'Widget',2);
INSERT INTO widget_inheritance VALUES(1185,192,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1186,192,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1187,192,'Widget',2);
INSERT INTO widget_inheritance VALUES(1188,307,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1189,307,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1190,307,'Widget',2);
INSERT INTO widget_inheritance VALUES(1191,308,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1192,308,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1193,308,'Widget',2);
INSERT INTO widget_inheritance VALUES(1194,191,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1195,191,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1196,191,'Widget',2);
INSERT INTO widget_inheritance VALUES(1197,190,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1198,190,'Widget',1);
INSERT INTO widget_inheritance VALUES(1199,314,'SliverMultiBoxAdaptorWidget',0);
INSERT INTO widget_inheritance VALUES(1200,314,'SliverWithKeepAliveWidget',1);
INSERT INTO widget_inheritance VALUES(1201,314,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(1202,314,'Widget',3);
INSERT INTO widget_inheritance VALUES(1203,522,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1204,522,'Widget',1);
INSERT INTO widget_inheritance VALUES(1205,523,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1206,523,'Widget',1);
INSERT INTO widget_inheritance VALUES(1207,524,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1208,524,'Widget',1);
INSERT INTO widget_inheritance VALUES(1209,189,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1210,189,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1211,189,'Widget',2);
INSERT INTO widget_inheritance VALUES(1212,525,'SliverMultiBoxAdaptorWidget',0);
INSERT INTO widget_inheritance VALUES(1213,525,'SliverWithKeepAliveWidget',1);
INSERT INTO widget_inheritance VALUES(1214,525,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(1215,525,'Widget',3);
INSERT INTO widget_inheritance VALUES(1216,526,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1217,526,'Widget',1);
INSERT INTO widget_inheritance VALUES(1218,348,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1219,348,'Widget',1);
INSERT INTO widget_inheritance VALUES(1220,527,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1221,527,'Widget',1);
INSERT INTO widget_inheritance VALUES(1222,140,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1223,140,'Widget',1);
INSERT INTO widget_inheritance VALUES(1224,141,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1225,141,'Widget',1);
INSERT INTO widget_inheritance VALUES(1226,528,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1227,528,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1228,528,'Widget',2);
INSERT INTO widget_inheritance VALUES(1229,107,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1230,107,'Widget',1);
INSERT INTO widget_inheritance VALUES(1231,529,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1232,529,'Widget',1);
INSERT INTO widget_inheritance VALUES(1233,97,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1234,97,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1235,97,'Widget',2);
INSERT INTO widget_inheritance VALUES(1236,242,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1237,242,'Widget',1);
INSERT INTO widget_inheritance VALUES(1238,530,'Widget',0);
INSERT INTO widget_inheritance VALUES(1239,531,'Widget',0);
INSERT INTO widget_inheritance VALUES(1240,233,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1241,233,'Widget',1);
INSERT INTO widget_inheritance VALUES(1242,200,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1243,200,'Widget',1);
INSERT INTO widget_inheritance VALUES(1244,173,'StreamBuilderBase',0);
INSERT INTO widget_inheritance VALUES(1245,173,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1246,173,'Widget',2);
INSERT INTO widget_inheritance VALUES(1247,532,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1248,532,'Widget',1);
INSERT INTO widget_inheritance VALUES(1249,533,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1250,533,'Widget',1);
INSERT INTO widget_inheritance VALUES(1251,534,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1252,534,'Widget',1);
INSERT INTO widget_inheritance VALUES(1253,40,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1254,40,'Widget',1);
INSERT INTO widget_inheritance VALUES(1255,18,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1256,18,'Widget',1);
INSERT INTO widget_inheritance VALUES(1257,535,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(1258,535,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(1259,535,'Widget',2);
INSERT INTO widget_inheritance VALUES(1260,536,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1261,536,'Widget',1);
INSERT INTO widget_inheritance VALUES(1262,148,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1263,148,'Widget',1);
INSERT INTO widget_inheritance VALUES(1264,58,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1265,58,'Widget',1);
INSERT INTO widget_inheritance VALUES(1266,537,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1267,537,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1268,537,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1269,537,'Widget',3);
INSERT INTO widget_inheritance VALUES(1270,59,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1271,59,'Widget',1);
INSERT INTO widget_inheritance VALUES(1272,110,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1273,110,'Widget',1);
INSERT INTO widget_inheritance VALUES(1274,317,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1275,317,'Widget',1);
INSERT INTO widget_inheritance VALUES(1276,151,'InkResponse',0);
INSERT INTO widget_inheritance VALUES(1277,151,'StatelessWidget',1);
INSERT INTO widget_inheritance VALUES(1278,151,'Widget',2);
INSERT INTO widget_inheritance VALUES(1279,205,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1280,205,'Widget',1);
INSERT INTO widget_inheritance VALUES(1281,206,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1282,206,'Widget',1);
INSERT INTO widget_inheritance VALUES(1283,280,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1284,280,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1285,280,'Widget',2);
INSERT INTO widget_inheritance VALUES(1286,538,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1287,538,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1288,538,'Widget',2);
INSERT INTO widget_inheritance VALUES(1289,2,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1290,2,'Widget',1);
INSERT INTO widget_inheritance VALUES(1291,353,'ButtonStyleButton',0);
INSERT INTO widget_inheritance VALUES(1292,353,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1293,353,'Widget',2);
INSERT INTO widget_inheritance VALUES(1294,539,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1295,539,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1296,539,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1297,539,'Widget',3);
INSERT INTO widget_inheritance VALUES(1298,54,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1299,54,'Widget',1);
INSERT INTO widget_inheritance VALUES(1300,281,'TapRegion',0);
INSERT INTO widget_inheritance VALUES(1301,281,'SingleChildRenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1302,281,'RenderObjectWidget',2);
INSERT INTO widget_inheritance VALUES(1303,281,'Widget',3);
INSERT INTO widget_inheritance VALUES(1304,199,'FormField',0);
INSERT INTO widget_inheritance VALUES(1305,199,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1306,199,'Widget',2);
INSERT INTO widget_inheritance VALUES(1307,540,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1308,540,'Widget',1);
INSERT INTO widget_inheritance VALUES(1309,541,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1310,541,'Widget',1);
INSERT INTO widget_inheritance VALUES(1311,542,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1312,542,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1313,542,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1314,542,'Widget',3);
INSERT INTO widget_inheritance VALUES(1315,543,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1316,543,'Widget',1);
INSERT INTO widget_inheritance VALUES(1317,544,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1318,544,'Widget',1);
INSERT INTO widget_inheritance VALUES(1319,545,'LeafRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1320,545,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1321,545,'Widget',2);
INSERT INTO widget_inheritance VALUES(1322,168,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1323,168,'Widget',1);
INSERT INTO widget_inheritance VALUES(1324,246,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1325,246,'Widget',1);
INSERT INTO widget_inheritance VALUES(1326,546,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1327,546,'Widget',1);
INSERT INTO widget_inheritance VALUES(1328,547,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1329,547,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1330,547,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1331,547,'Widget',3);
INSERT INTO widget_inheritance VALUES(1332,208,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1333,208,'Widget',1);
INSERT INTO widget_inheritance VALUES(1334,33,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1335,33,'Widget',1);
INSERT INTO widget_inheritance VALUES(1336,332,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1337,332,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1338,332,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1339,332,'Widget',3);
INSERT INTO widget_inheritance VALUES(1340,50,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1341,50,'Widget',1);
INSERT INTO widget_inheritance VALUES(1342,333,'InheritedTheme',0);
INSERT INTO widget_inheritance VALUES(1343,333,'InheritedWidget',1);
INSERT INTO widget_inheritance VALUES(1344,333,'ProxyWidget',2);
INSERT INTO widget_inheritance VALUES(1345,333,'Widget',3);
INSERT INTO widget_inheritance VALUES(1346,548,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1347,548,'Widget',1);
INSERT INTO widget_inheritance VALUES(1348,78,'SingleChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1349,78,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1350,78,'Widget',2);
INSERT INTO widget_inheritance VALUES(1351,549,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1352,549,'Widget',1);
INSERT INTO widget_inheritance VALUES(1353,226,'ImplicitlyAnimatedWidget',0);
INSERT INTO widget_inheritance VALUES(1354,226,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1355,226,'Widget',2);
INSERT INTO widget_inheritance VALUES(1356,551,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1357,551,'Widget',1);
INSERT INTO widget_inheritance VALUES(1358,550,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1359,550,'Widget',1);
INSERT INTO widget_inheritance VALUES(1360,552,'RenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1361,552,'Widget',1);
INSERT INTO widget_inheritance VALUES(1362,553,'_DarwinView',0);
INSERT INTO widget_inheritance VALUES(1363,553,'StatefulWidget',1);
INSERT INTO widget_inheritance VALUES(1364,553,'Widget',2);
INSERT INTO widget_inheritance VALUES(1365,81,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1366,81,'Widget',1);
INSERT INTO widget_inheritance VALUES(1367,241,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1368,241,'Widget',1);
INSERT INTO widget_inheritance VALUES(1369,243,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1370,243,'Widget',1);
INSERT INTO widget_inheritance VALUES(1371,554,'InheritedWidget',0);
INSERT INTO widget_inheritance VALUES(1372,554,'ProxyWidget',1);
INSERT INTO widget_inheritance VALUES(1373,554,'Widget',2);
INSERT INTO widget_inheritance VALUES(1374,22,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1375,22,'Widget',1);
INSERT INTO widget_inheritance VALUES(1376,255,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1377,255,'Widget',1);
INSERT INTO widget_inheritance VALUES(1378,35,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1379,35,'Widget',1);
INSERT INTO widget_inheritance VALUES(1380,555,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1381,555,'Widget',1);
INSERT INTO widget_inheritance VALUES(1382,556,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1383,556,'Widget',1);
INSERT INTO widget_inheritance VALUES(1384,557,'_MultiChildComponentWidget',0);
INSERT INTO widget_inheritance VALUES(1385,557,'Widget',1);
INSERT INTO widget_inheritance VALUES(1386,340,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1387,340,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1388,340,'Widget',2);
INSERT INTO widget_inheritance VALUES(1389,10,'StatelessWidget',0);
INSERT INTO widget_inheritance VALUES(1390,10,'Widget',1);
INSERT INTO widget_inheritance VALUES(1391,234,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1392,234,'Widget',1);
INSERT INTO widget_inheritance VALUES(1393,236,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1394,236,'Widget',1);
INSERT INTO widget_inheritance VALUES(1395,558,'LeafRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1396,558,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1397,558,'Widget',2);
INSERT INTO widget_inheritance VALUES(1398,170,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1399,170,'Widget',1);
INSERT INTO widget_inheritance VALUES(1400,98,'MultiChildRenderObjectWidget',0);
INSERT INTO widget_inheritance VALUES(1401,98,'RenderObjectWidget',1);
INSERT INTO widget_inheritance VALUES(1402,98,'Widget',2);
INSERT INTO widget_inheritance VALUES(1403,136,'StatefulWidget',0);
INSERT INTO widget_inheritance VALUES(1404,136,'Widget',1);
CREATE TABLE widget_fields (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        widget_id INTEGER NOT NULL,
        field_name TEXT NOT NULL,
        field_type TEXT NOT NULL,
        field_desc TEXT,
        field_desc_zh TEXT,
        field_order INTEGER NOT NULL,
        is_required INTEGER NOT NULL DEFAULT 0
      );
INSERT INTO widget_fields VALUES(1,130,'applicationName','String?','The name of the application.','应用程序的名称。',0,0);
INSERT INTO widget_fields VALUES(2,130,'applicationVersion','String?','The version of this build of the application.','此应用程序构建的版本。',1,0);
INSERT INTO widget_fields VALUES(3,130,'applicationIcon','Widget?','The icon to show next to the application name.','显示在应用程序名称旁边的图标。',2,0);
INSERT INTO widget_fields VALUES(4,130,'applicationLegalese','String?','A string to show in small print.','以小字体显示的字符串。',3,0);
INSERT INTO widget_fields VALUES(5,130,'children','List<Widget>?','Widgets to add to the dialog box after the name, version, and legalese.','在名称、版本和法律声明之后添加到对话框的小部件。',4,0);
INSERT INTO widget_fields VALUES(6,193,'icon','Widget?','The icon to show for this drawer item.','为此抽屉项显示的图标。',0,0);
INSERT INTO widget_fields VALUES(7,193,'child','Widget?','The label to show on this drawer item.','在此抽屉项上显示的标签。',1,0);
INSERT INTO widget_fields VALUES(8,193,'applicationName','String?','The name of the application.','应用程序的名称。',2,0);
INSERT INTO widget_fields VALUES(9,193,'applicationVersion','String?','The version of this build of the application.','应用程序此构建的版本。',3,0);
INSERT INTO widget_fields VALUES(10,193,'applicationIcon','Widget?','The icon to show next to the application name in the [AboutDialog].','在 [AboutDialog] 中应用程序名称旁边显示的图标。',4,0);
INSERT INTO widget_fields VALUES(11,193,'applicationLegalese','String?','A string to show in small print in the [AboutDialog].','在 [AboutDialog] 中以小字体显示的字符串。',5,0);
INSERT INTO widget_fields VALUES(12,193,'aboutBoxChildren','List<Widget>?','Widgets to add to the [AboutDialog] after the name, version, and legalese.','在名称、版本和法律声明之后添加到 [AboutDialog] 的小部件。',6,0);
INSERT INTO widget_fields VALUES(13,193,'dense','bool?','Whether this list tile is part of a vertically dense list.','此列表瓦片是否是垂直密集列表的一部分。',7,0);
INSERT INTO widget_fields VALUES(14,295,'absorbing','bool','Whether this widget absorbs pointers during hit testing.','此小部件是否在命中测试期间吸收指针。',0,1);
INSERT INTO widget_fields VALUES(15,295,'ignoringSemantics','bool?','Whether the semantics of this render object is ignored when compiling the semantics tree.','编译语义树时是否忽略此渲染对象的语义。',1,0);
INSERT INTO widget_fields VALUES(16,13,'avatar','Widget?',NULL,NULL,0,0);
INSERT INTO widget_fields VALUES(17,13,'label','Widget',NULL,NULL,1,1);
INSERT INTO widget_fields VALUES(18,13,'labelStyle','TextStyle?',NULL,NULL,2,0);
INSERT INTO widget_fields VALUES(19,13,'labelPadding','EdgeInsetsGeometry?',NULL,NULL,3,0);
INSERT INTO widget_fields VALUES(20,13,'onPressed','VoidCallback?',NULL,NULL,4,0);
INSERT INTO widget_fields VALUES(21,13,'pressElevation','double?',NULL,NULL,5,0);
INSERT INTO widget_fields VALUES(22,13,'tooltip','String?',NULL,NULL,6,0);
INSERT INTO widget_fields VALUES(23,13,'side','BorderSide?',NULL,NULL,7,0);
INSERT INTO widget_fields VALUES(24,13,'shape','OutlinedBorder?',NULL,NULL,8,0);
INSERT INTO widget_fields VALUES(25,13,'clipBehavior','Clip',NULL,NULL,9,1);
INSERT INTO widget_fields VALUES(26,13,'focusNode','FocusNode?',NULL,NULL,10,0);
INSERT INTO widget_fields VALUES(27,13,'autofocus','bool',NULL,NULL,11,1);
INSERT INTO widget_fields VALUES(28,13,'color','MaterialStateProperty<Color?>?',NULL,NULL,12,0);
INSERT INTO widget_fields VALUES(29,13,'backgroundColor','Color?',NULL,NULL,13,0);
INSERT INTO widget_fields VALUES(30,13,'disabledColor','Color?',NULL,NULL,14,0);
INSERT INTO widget_fields VALUES(31,13,'padding','EdgeInsetsGeometry?',NULL,NULL,15,0);
INSERT INTO widget_fields VALUES(32,13,'visualDensity','VisualDensity?',NULL,NULL,16,0);
INSERT INTO widget_fields VALUES(33,13,'materialTapTargetSize','MaterialTapTargetSize?',NULL,NULL,17,0);
INSERT INTO widget_fields VALUES(34,13,'elevation','double?',NULL,NULL,18,0);
INSERT INTO widget_fields VALUES(35,13,'shadowColor','Color?',NULL,NULL,19,0);
INSERT INTO widget_fields VALUES(36,13,'surfaceTintColor','Color?',NULL,NULL,20,0);
INSERT INTO widget_fields VALUES(37,13,'iconTheme','IconThemeData?',NULL,NULL,21,0);
INSERT INTO widget_fields VALUES(38,13,'avatarBoxConstraints','BoxConstraints?',NULL,NULL,22,0);
INSERT INTO widget_fields VALUES(39,13,'chipAnimationStyle','ChipAnimationStyle?',NULL,NULL,23,0);
INSERT INTO widget_fields VALUES(40,13,'mouseCursor','MouseCursor?',NULL,NULL,24,0);
INSERT INTO widget_fields VALUES(41,300,'data','ActionIconThemeData','Specifies the default icon overrides for descendant [BackButtonIcon], [CloseButtonIcon], [DrawerButtonIcon], and [EndDrawerButtonIcon] widgets.','指定后代 [BackButtonIcon]、[CloseButtonIcon]、[DrawerButtonIcon] 和 [EndDrawerButtonIcon] 小部件的默认图标覆盖。',0,1);
INSERT INTO widget_fields VALUES(42,310,'listener','ActionListenerCallback','The [ActionListenerCallback] callback to register with the [action].','要向 [action] 注册的 [ActionListenerCallback] 回调。',0,1);
INSERT INTO widget_fields VALUES(43,310,'action','Action<Intent>','The [Action] that the callback will be registered with.','回调将注册到的 [Action]。',1,1);
INSERT INTO widget_fields VALUES(44,310,'child','Widget','{@macro flutter.widgets.ProxyWidget.child}','{@macro flutter.widgets.ProxyWidget.child}',2,1);
INSERT INTO widget_fields VALUES(45,311,'dispatcher','ActionDispatcher?','The [ActionDispatcher] object that invokes actions.','调用操作的 [ActionDispatcher] 对象。',0,0);
INSERT INTO widget_fields VALUES(46,311,'actions','Map<Type, Action<Intent>>','{@template flutter.widgets.actions.actions} A map of [Intent] keys to [Action<Intent>] objects that defines which actions this widget knows about.','{@template flutter.widgets.actions.actions} [Intent] 键到 [Action<Intent>] 对象的映射，定义此小部件了解的操作。',1,1);
INSERT INTO widget_fields VALUES(47,311,'child','Widget','{@macro flutter.widgets.ProxyWidget.child}','{@macro flutter.widgets.ProxyWidget.child}',2,1);
INSERT INTO widget_fields VALUES(48,318,'buttonItems','List<ContextMenuButtonItem>?','{@template flutter.material.AdaptiveTextSelectionToolbar.buttonItems} The [ContextMenuButtonItem]s that will be turned into the correct button widgets for the current platform. {@endtemplate}','{@template flutter.material.AdaptiveTextSelectionToolbar.buttonItems} 将转换为当前平台正确按钮小部件的 [ContextMenuButtonItem]。{@endtemplate}',0,0);
INSERT INTO widget_fields VALUES(49,318,'children','List<Widget>?','The children of the toolbar, typically buttons.','工具栏的子项，通常是按钮。',1,0);
INSERT INTO widget_fields VALUES(50,318,'anchors','TextSelectionToolbarAnchors','{@template flutter.material.AdaptiveTextSelectionToolbar.anchors} The location on which to anchor the menu. {@endtemplate}','{@template flutter.material.AdaptiveTextSelectionToolbar.anchors} 锚定菜单的位置。{@endtemplate}',2,1);
INSERT INTO widget_fields VALUES(51,127,'icon','Widget?','An optional icon to display at the top of the dialog.','在对话框顶部显示的可选图标。',0,0);
INSERT INTO widget_fields VALUES(52,127,'iconColor','Color?','Color for the [Icon] in the [icon] of this [AlertDialog].','此 [AlertDialog] 的 [icon] 中 [Icon] 的颜色。',1,0);
INSERT INTO widget_fields VALUES(53,127,'iconPadding','EdgeInsetsGeometry?','Padding around the [icon].','[icon] 周围的内边距。',2,0);
INSERT INTO widget_fields VALUES(54,127,'title','Widget?','The (optional) title of the dialog is displayed in a large font at the top of the dialog, below the (optional) [icon].','对话框的（可选）标题以大字体显示在对话框顶部，位于（可选）[icon] 下方。',3,0);
INSERT INTO widget_fields VALUES(55,127,'titlePadding','EdgeInsetsGeometry?','Padding around the title.','标题周围的内边距。',4,0);
INSERT INTO widget_fields VALUES(56,127,'titleTextStyle','TextStyle?','Style for the text in the [title] of this [AlertDialog].','此 [AlertDialog] 的 [title] 中文本的样式。',5,0);
INSERT INTO widget_fields VALUES(57,127,'content','Widget?','The (optional) content of the dialog is displayed in the center of the dialog in a lighter font.','对话框的（可选）内容以较浅的字体显示在对话框中心。',6,0);
INSERT INTO widget_fields VALUES(58,127,'contentPadding','EdgeInsetsGeometry?','Padding around the content.','内容周围的内边距。',7,0);
INSERT INTO widget_fields VALUES(59,127,'contentTextStyle','TextStyle?','Style for the text in the [content] of this [AlertDialog].','此 [AlertDialog] 的 [content] 中文本的样式。',8,0);
INSERT INTO widget_fields VALUES(60,127,'actions','List<Widget>?','The (optional) set of actions that are displayed at the bottom of the dialog with an [OverflowBar].','显示在对话框底部的（可选）操作集合，使用 [OverflowBar]。',9,0);
INSERT INTO widget_fields VALUES(61,127,'actionsPadding','EdgeInsetsGeometry?','Padding around the set of [actions] at the bottom of the dialog.','对话框底部 [actions] 集合周围的内边距。',10,0);
INSERT INTO widget_fields VALUES(62,127,'actionsAlignment','MainAxisAlignment?','Defines the horizontal layout of the [actions] according to the same rules as for [Row.mainAxisAlignment].','根据与 [Row.mainAxisAlignment] 相同的规则定义 [actions] 的水平布局。',11,0);
INSERT INTO widget_fields VALUES(63,127,'actionsOverflowAlignment','OverflowBarAlignment?','The horizontal alignment of [actions] within the vertical "overflow" layout.','垂直\',12,0);
INSERT INTO widget_fields VALUES(64,127,'actionsOverflowDirection','VerticalDirection?','The vertical direction of [actions] if the children overflow horizontally.','如果子项水平溢出，[actions] 的垂直方向。',13,0);
INSERT INTO widget_fields VALUES(65,127,'actionsOverflowButtonSpacing','double?','The spacing between [actions] when the [OverflowBar] switches to a column layout because the actions don''t fit horizontally.','当 [OverflowBar] 因操作无法水平放置而切换到列布局时，[actions] 之间的间距。',14,0);
INSERT INTO widget_fields VALUES(66,127,'buttonPadding','EdgeInsetsGeometry?','The padding that surrounds each button in [actions].','[actions] 中每个按钮周围的内边距。',15,0);
INSERT INTO widget_fields VALUES(67,127,'backgroundColor','Color?','{@macro flutter.material.dialog.backgroundColor}','{@macro flutter.material.dialog.backgroundColor}',16,0);
INSERT INTO widget_fields VALUES(68,127,'elevation','double?','{@macro flutter.material.dialog.elevation}','{@macro flutter.material.dialog.elevation}',17,0);
INSERT INTO widget_fields VALUES(69,127,'shadowColor','Color?','{@macro flutter.material.dialog.shadowColor}','{@macro flutter.material.dialog.shadowColor}',18,0);
INSERT INTO widget_fields VALUES(70,127,'surfaceTintColor','Color?','{@macro flutter.material.dialog.surfaceTintColor}','{@macro flutter.material.dialog.surfaceTintColor}',19,0);
INSERT INTO widget_fields VALUES(71,127,'semanticLabel','String?','The semantic label of the dialog used by accessibility frameworks to announce screen transitions when the dialog is opened and closed.','辅助功能框架用于在对话框打开和关闭时宣布屏幕转换的对话框语义标签。',20,0);
INSERT INTO widget_fields VALUES(72,127,'insetPadding','EdgeInsets?','{@macro flutter.material.dialog.insetPadding}','{@macro flutter.material.dialog.insetPadding}',21,0);
INSERT INTO widget_fields VALUES(73,127,'clipBehavior','Clip?','{@macro flutter.material.dialog.clipBehavior}','{@macro flutter.material.dialog.clipBehavior}',22,0);
INSERT INTO widget_fields VALUES(74,127,'shape','ShapeBorder?','{@macro flutter.material.dialog.shape}','{@macro flutter.material.dialog.shape}',23,0);
INSERT INTO widget_fields VALUES(75,127,'alignment','AlignmentGeometry?','{@macro flutter.material.dialog.alignment}','{@macro flutter.material.dialog.alignment}',24,0);
INSERT INTO widget_fields VALUES(76,127,'scrollable','bool','Determines whether the [title] and [content] widgets are wrapped in a scrollable.','确定 [title] 和 [content] 小部件是否包装在可滚动容器中。',25,1);
INSERT INTO widget_fields VALUES(77,85,'alignment','AlignmentGeometry','How to align the child.','如何对齐子项。',0,1);
INSERT INTO widget_fields VALUES(78,85,'widthFactor','double?','If non-null, sets its width to the child''s width multiplied by this factor.','如果非空，将其宽度设置为子项宽度乘以此因子。',1,0);
INSERT INTO widget_fields VALUES(79,85,'heightFactor','double?','If non-null, sets its height to the child''s height multiplied by this factor.','如果非空，将其高度设置为子项高度乘以此因子。',2,0);
INSERT INTO widget_fields VALUES(80,111,'widthFactor','double?','If non-null, the child''s width factor, see [Align.widthFactor].','如果非空，子项的宽度因子，参见 [Align.widthFactor]。',0,0);
INSERT INTO widget_fields VALUES(81,111,'heightFactor','double?','If non-null, the child''s height factor, see [Align.heightFactor].','如果非空，子项的高度因子，参见 [Align.heightFactor]。',1,0);
INSERT INTO widget_fields VALUES(82,111,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',2,1);
INSERT INTO widget_fields VALUES(83,321,'viewType','String','The unique identifier for Android view type to be embedded by this widget.','此小部件要嵌入的 Android 视图类型的唯一标识符。',0,1);
INSERT INTO widget_fields VALUES(84,321,'onPlatformViewCreated','PlatformViewCreatedCallback?','{@template flutter.widgets.AndroidView.onPlatformViewCreated} Callback to invoke after the platform view has been created.','{@template flutter.widgets.AndroidView.onPlatformViewCreated} 平台视图创建后调用的回调。',1,0);
INSERT INTO widget_fields VALUES(85,321,'hitTestBehavior','PlatformViewHitTestBehavior','{@template flutter.widgets.AndroidView.hitTestBehavior} How this widget should behave during hit testing.','{@template flutter.widgets.AndroidView.hitTestBehavior} 此小部件在命中测试期间的行为方式。',2,1);
INSERT INTO widget_fields VALUES(86,321,'layoutDirection','TextDirection?','{@template flutter.widgets.AndroidView.layoutDirection} The text direction to use for the embedded view.','{@template flutter.widgets.AndroidView.layoutDirection} 嵌入视图使用的文本方向。',3,0);
INSERT INTO widget_fields VALUES(87,321,'gestureRecognizers','Set<Factory<OneSequenceGestureRecognizer>>?','Which gestures should be forwarded to the Android view.','哪些手势应转发到 Android 视图。',4,0);
INSERT INTO widget_fields VALUES(88,321,'creationParams','dynamic','Passed as the args argument of [PlatformViewFactory#create](/javadoc/io/flutter/plugin/platform/PlatformViewFactory.html#create-android.content.Context-int-java.lang.Object-)','作为 [PlatformViewFactory#create](/javadoc/io/flutter/plugin/platform/PlatformViewFactory.html#create-android.content.Context-int-java.lang.Object-) 的 args 参数传递',5,1);
INSERT INTO widget_fields VALUES(89,321,'creationParamsCodec','MessageCodec<dynamic>?','The codec used to encode `creationParams` before sending it to the platform side. It should match the codec passed to the constructor of [PlatformViewFactory](/javadoc/io/flutter/plugin/platform/PlatformViewFactory.html#PlatformViewFactory-io.flutter.plugin.common.MessageCodec-).','在将 `creationParams` 发送到平台端之前用于编码的编解码器。它应与传递给 [PlatformViewFactory](/javadoc/io/flutter/plugin/platform/PlatformViewFactory.html#PlatformViewFactory-io.flutter.plugin.common.MessageCodec-) 构造函数的编解码器匹配。',6,0);
INSERT INTO widget_fields VALUES(90,321,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',7,1);
INSERT INTO widget_fields VALUES(91,322,'controller','AndroidViewController','The controller for the platform view integrated by this [AndroidViewSurface].','此 [AndroidViewSurface] 集成的平台视图的控制器。',0,1);
INSERT INTO widget_fields VALUES(92,322,'gestureRecognizers','Set<Factory<OneSequenceGestureRecognizer>>','Which gestures should be forwarded to the PlatformView.','哪些手势应转发到 PlatformView。',1,1);
INSERT INTO widget_fields VALUES(93,322,'hitTestBehavior','PlatformViewHitTestBehavior','{@macro flutter.widgets.AndroidView.hitTestBehavior}','{@macro flutter.widgets.AndroidView.hitTestBehavior}',2,1);
INSERT INTO widget_fields VALUES(94,120,'alignment','AlignmentGeometry','How to align the child.','如何对齐子项。',0,1);
INSERT INTO widget_fields VALUES(95,120,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,0);
INSERT INTO widget_fields VALUES(96,120,'heightFactor','double?','If non-null, sets its height to the child''s height multiplied by this factor.','如果非空，将其高度设置为子项高度乘以此因子。',2,0);
INSERT INTO widget_fields VALUES(97,120,'widthFactor','double?','If non-null, sets its width to the child''s width multiplied by this factor.','如果非空，将其宽度设置为子项宽度乘以此因子。',3,0);
INSERT INTO widget_fields VALUES(98,123,'child','Widget?','The [child] contained by the container.','容器包含的 [child]。',0,0);
INSERT INTO widget_fields VALUES(99,123,'alignment','AlignmentGeometry?','Align the [child] within the container.','在容器内对齐 [child]。',1,0);
INSERT INTO widget_fields VALUES(100,123,'padding','EdgeInsetsGeometry?','Empty space to inscribe inside the [decoration]. The [child], if any, is placed inside this padding.','在 [decoration] 内部刻画的空白空间。[child]（如果有）放置在此内边距内。',2,0);
INSERT INTO widget_fields VALUES(101,123,'decoration','Decoration?','The decoration to paint behind the [child].','在 [child] 后面绘制的装饰。',3,0);
INSERT INTO widget_fields VALUES(102,123,'foregroundDecoration','Decoration?','The decoration to paint in front of the child.','在子项前面绘制的装饰。',4,0);
INSERT INTO widget_fields VALUES(103,123,'constraints','BoxConstraints?','Additional constraints to apply to the child.','应用于子项的附加约束。',5,0);
INSERT INTO widget_fields VALUES(104,123,'margin','EdgeInsetsGeometry?','Empty space to surround the [decoration] and [child].','围绕 [decoration] 和 [child] 的空白空间。',6,0);
INSERT INTO widget_fields VALUES(105,123,'transform','Matrix4?','The transformation matrix to apply before painting the container.','在绘制容器之前应用的变换矩阵。',7,0);
INSERT INTO widget_fields VALUES(106,123,'transformAlignment','AlignmentGeometry?','The alignment of the origin, relative to the size of the container, if [transform] is specified.','如果指定了 [transform]，相对于容器大小的原点对齐方式。',8,0);
INSERT INTO widget_fields VALUES(107,123,'clipBehavior','Clip','The clip behavior when [AnimatedContainer.decoration] is not null.','当 [AnimatedContainer.decoration] 不为空时的裁剪行为。',9,1);
INSERT INTO widget_fields VALUES(108,100,'firstChild','Widget','The child that is visible when [crossFadeState] is [CrossFadeState.showFirst]. It fades out when transitioning [crossFadeState] from [CrossFadeState.showFirst] to [CrossFadeState.showSecond] and vice versa.','当 [crossFadeState] 为 [CrossFadeState.showFirst] 时可见的子项。当 [crossFadeState] 从 [CrossFadeState.showFirst] 转换到 [CrossFadeState.showSecond] 时淡出，反之亦然。',0,1);
INSERT INTO widget_fields VALUES(109,100,'secondChild','Widget','The child that is visible when [crossFadeState] is [CrossFadeState.showSecond]. It fades in when transitioning [crossFadeState] from [CrossFadeState.showFirst] to [CrossFadeState.showSecond] and vice versa.','当 [crossFadeState] 为 [CrossFadeState.showSecond] 时可见的子项。当 [crossFadeState] 从 [CrossFadeState.showFirst] 转换到 [CrossFadeState.showSecond] 时淡入，反之亦然。',1,1);
INSERT INTO widget_fields VALUES(110,100,'crossFadeState','CrossFadeState','The child that will be shown when the animation has completed.','动画完成时将显示的子项。',2,1);
INSERT INTO widget_fields VALUES(111,100,'duration','Duration','The duration of the whole orchestrated animation.','整个编排动画的持续时间。',3,1);
INSERT INTO widget_fields VALUES(112,100,'reverseDuration','Duration?','The duration of the whole orchestrated animation when running in reverse.','反向运行时整个编排动画的持续时间。',4,0);
INSERT INTO widget_fields VALUES(113,100,'firstCurve','Curve','The fade curve of the first child.','第一个子项的淡入淡出曲线。',5,1);
INSERT INTO widget_fields VALUES(114,100,'secondCurve','Curve','The fade curve of the second child.','第二个子项的淡入淡出曲线。',6,1);
INSERT INTO widget_fields VALUES(115,100,'sizeCurve','Curve','The curve of the animation between the two children''s sizes.','两个子项大小之间动画的曲线。',7,1);
INSERT INTO widget_fields VALUES(116,100,'alignment','AlignmentGeometry','How the children should be aligned while the size is animating.','在大小进行动画时子项应如何对齐。',8,1);
INSERT INTO widget_fields VALUES(117,100,'layoutBuilder','AnimatedCrossFadeBuilder','A builder that positions the [firstChild] and [secondChild] widgets.','定位 [firstChild] 和 [secondChild] 小部件的构建器。',9,1);
INSERT INTO widget_fields VALUES(118,100,'excludeBottomFocus','bool','When true, this is equivalent to wrapping the bottom widget with an [ExcludeFocus] widget while it is at the bottom of the cross-fade stack.','当为 true 时，这等同于在底部小部件位于交叉淡入淡出堆栈底部时用 [ExcludeFocus] 小部件包装它。',10,1);
INSERT INTO widget_fields VALUES(119,124,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(120,124,'style','TextStyle','The target text style.','目标文本样式。',1,1);
INSERT INTO widget_fields VALUES(121,124,'textAlign','TextAlign?','How the text should be aligned horizontally.','文本应如何水平对齐。',2,0);
INSERT INTO widget_fields VALUES(122,124,'softWrap','bool','Whether the text should break at soft line breaks.','文本是否应在软换行符处换行。',3,1);
INSERT INTO widget_fields VALUES(123,124,'overflow','TextOverflow','How visual overflow should be handled.','应如何处理视觉溢出。',4,1);
INSERT INTO widget_fields VALUES(124,124,'maxLines','int?','An optional maximum number of lines for the text to span, wrapping if necessary.','文本跨越的可选最大行数，必要时换行。',5,0);
INSERT INTO widget_fields VALUES(125,124,'textWidthBasis','TextWidthBasis','The strategy to use when calculating the width of the Text.','计算文本宽度时使用的策略。',6,1);
INSERT INTO widget_fields VALUES(126,124,'textHeightBehavior','ui.TextHeightBehavior?','{@macro dart.ui.textHeightBehavior}','{@macro dart.ui.textHeightBehavior}',7,0);
INSERT INTO widget_fields VALUES(127,260,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(128,260,'heightFactor','double?','{@macro flutter.widgets.basic.fractionallySizedBox.heightFactor}','{@macro flutter.widgets.basic.fractionallySizedBox.heightFactor}',1,0);
INSERT INTO widget_fields VALUES(129,260,'widthFactor','double?','{@macro flutter.widgets.basic.fractionallySizedBox.widthFactor}','{@macro flutter.widgets.basic.fractionallySizedBox.widthFactor}',2,0);
INSERT INTO widget_fields VALUES(130,260,'alignment','AlignmentGeometry','{@macro flutter.widgets.basic.fractionallySizedBox.alignment}','{@macro flutter.widgets.basic.fractionallySizedBox.alignment}',3,1);
INSERT INTO widget_fields VALUES(131,323,'gridDelegate','SliverGridDelegate','{@template flutter.widgets.AnimatedGrid.gridDelegate} A delegate that controls the layout of the children within the [AnimatedGrid].','{@template flutter.widgets.AnimatedGrid.gridDelegate} 控制 [AnimatedGrid] 内子项布局的委托。',0,1);
INSERT INTO widget_fields VALUES(132,125,'progress','Animation<double>','The animation progress for the animated icon.','动画图标的动画进度。',0,1);
INSERT INTO widget_fields VALUES(133,125,'color','Color?','The color to use when drawing the icon.','绘制图标时使用的颜色。',1,0);
INSERT INTO widget_fields VALUES(134,125,'size','double?','The size of the icon in logical pixels.','图标的逻辑像素大小。',2,0);
INSERT INTO widget_fields VALUES(135,125,'icon','AnimatedIconData','The icon to display. Available icons are listed in [AnimatedIcons].','要显示的图标。可用图标列在 [AnimatedIcons] 中。',3,1);
INSERT INTO widget_fields VALUES(136,125,'semanticLabel','String?','Semantic label for the icon.','图标的语义标签。',4,0);
INSERT INTO widget_fields VALUES(137,125,'textDirection','TextDirection?','The text direction to use for rendering the icon.','用于渲染图标的文本方向。',5,0);
INSERT INTO widget_fields VALUES(138,227,'dismissible','bool','Whether touching the barrier will pop the current route off the [Navigator].','触摸屏障是否会从 [Navigator] 中弹出当前路由。',0,1);
INSERT INTO widget_fields VALUES(139,227,'semanticsLabel','String?','Semantics label used for the barrier if it is [dismissible].','如果屏障是 [dismissible] 的，用于屏障的语义标签。',1,0);
INSERT INTO widget_fields VALUES(140,227,'barrierSemanticsDismissible','bool?','Whether the modal barrier semantics are included in the semantics tree.','模态屏障语义是否包含在语义树中。',2,0);
INSERT INTO widget_fields VALUES(141,227,'onDismiss','VoidCallback?','{@macro flutter.widgets.ModalBarrier.onDismiss}','{@macro flutter.widgets.ModalBarrier.onDismiss}',3,0);
INSERT INTO widget_fields VALUES(142,227,'clipDetailsNotifier','ValueNotifier<EdgeInsets>?','{@macro flutter.widgets.ModalBarrier.clipDetailsNotifier}','{@macro flutter.widgets.ModalBarrier.clipDetailsNotifier}',4,0);
INSERT INTO widget_fields VALUES(143,227,'semanticsOnTapHint','String?','This hint text instructs users what they are able to do when they tap on the [ModalBarrier]','此提示文本指示用户在点击 [ModalBarrier] 时能够执行的操作',5,0);
INSERT INTO widget_fields VALUES(144,118,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(145,118,'opacity','double','The target opacity.','目标不透明度。',1,1);
INSERT INTO widget_fields VALUES(146,118,'alwaysIncludeSemantics','bool','Whether the semantic information of the children is always included.','是否始终包含子项的语义信息。',2,1);
INSERT INTO widget_fields VALUES(147,119,'padding','EdgeInsetsGeometry','The amount of space by which to inset the child.','子项的插入空间量。',0,1);
INSERT INTO widget_fields VALUES(148,119,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,0);
INSERT INTO widget_fields VALUES(149,225,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(150,225,'shape','BoxShape','The type of shape.','形状的类型。',1,1);
INSERT INTO widget_fields VALUES(151,225,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',2,1);
INSERT INTO widget_fields VALUES(152,225,'borderRadius','BorderRadius?','The target border radius of the rounded corners for a rectangle shape.','矩形形状圆角的目标边框半径。',3,0);
INSERT INTO widget_fields VALUES(153,225,'elevation','double','The target z-coordinate relative to the parent at which to place this physical object.','相对于父级放置此物理对象的目标 z 坐标。',4,1);
INSERT INTO widget_fields VALUES(154,225,'color','Color','The target background color.','目标背景颜色。',5,1);
INSERT INTO widget_fields VALUES(155,225,'animateColor','bool','Whether the color should be animated.','颜色是否应该动画。',6,1);
INSERT INTO widget_fields VALUES(156,225,'shadowColor','Color','The target shadow color.','目标阴影颜色。',7,1);
INSERT INTO widget_fields VALUES(157,225,'animateShadowColor','bool','Whether the shadow color should be animated.','阴影颜色是否应该动画。',8,1);
INSERT INTO widget_fields VALUES(158,121,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(159,121,'left','double?','The offset of the child''s left edge from the left of the stack.','子项左边缘距离堆栈左侧的偏移量。',1,0);
INSERT INTO widget_fields VALUES(160,121,'top','double?','The offset of the child''s top edge from the top of the stack.','子项顶部边缘距离堆栈顶部的偏移量。',2,0);
INSERT INTO widget_fields VALUES(161,121,'right','double?','The offset of the child''s right edge from the right of the stack.','子项右边缘距离堆栈右侧的偏移量。',3,0);
INSERT INTO widget_fields VALUES(162,121,'bottom','double?','The offset of the child''s bottom edge from the bottom of the stack.','子项底部边缘距离堆栈底部的偏移量。',4,0);
INSERT INTO widget_fields VALUES(163,121,'width','double?','The child''s width.','子项的宽度。',5,0);
INSERT INTO widget_fields VALUES(164,121,'height','double?','The child''s height.','子项的高度。',6,0);
INSERT INTO widget_fields VALUES(165,122,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(166,122,'start','double?','The offset of the child''s start edge from the start of the stack.','子项起始边缘距离堆栈起始位置的偏移量。',1,0);
INSERT INTO widget_fields VALUES(167,122,'top','double?','The offset of the child''s top edge from the top of the stack.','子项顶部边缘距离堆栈顶部的偏移量。',2,0);
INSERT INTO widget_fields VALUES(168,122,'end','double?','The offset of the child''s end edge from the end of the stack.','子项结束边缘距离堆栈结束位置的偏移量。',3,0);
INSERT INTO widget_fields VALUES(169,122,'bottom','double?','The offset of the child''s bottom edge from the bottom of the stack.','子项底部边缘距离堆栈底部的偏移量。',4,0);
INSERT INTO widget_fields VALUES(170,122,'width','double?','The child''s width.','子项的宽度。',5,0);
INSERT INTO widget_fields VALUES(171,122,'height','double?','The child''s height.','子项的高度。',6,0);
INSERT INTO widget_fields VALUES(172,259,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(173,259,'turns','double','The animation that controls the rotation of the child.','控制子项旋转的动画。',1,1);
INSERT INTO widget_fields VALUES(174,259,'alignment','Alignment','The alignment of the origin of the coordinate system in which the rotation takes place, relative to the size of the box.','旋转发生的坐标系原点相对于盒子大小的对齐方式。',2,1);
INSERT INTO widget_fields VALUES(175,259,'filterQuality','FilterQuality?','The filter quality with which to apply the transform as a bitmap operation.','作为位图操作应用变换的滤镜质量。',3,0);
INSERT INTO widget_fields VALUES(176,249,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(177,249,'scale','double','The target scale.','目标缩放。',1,1);
INSERT INTO widget_fields VALUES(178,249,'alignment','Alignment','The alignment of the origin of the coordinate system in which the scale takes place, relative to the size of the box.','缩放发生的坐标系原点相对于盒子大小的对齐方式。',2,1);
INSERT INTO widget_fields VALUES(179,249,'filterQuality','FilterQuality?','The filter quality with which to apply the transform as a bitmap operation.','作为位图操作应用变换的滤镜质量。',3,0);
INSERT INTO widget_fields VALUES(180,201,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(181,201,'alignment','AlignmentGeometry','The alignment of the child within the parent when the parent is not yet the same size as the child.','当父级尚未与子级大小相同时，子级在父级内的对齐方式。',1,1);
INSERT INTO widget_fields VALUES(182,201,'curve','Curve','The animation curve when transitioning this widget''s size to match the child''s size.','过渡此小部件大小以匹配子项大小时的动画曲线。',2,1);
INSERT INTO widget_fields VALUES(183,201,'duration','Duration','The duration when transitioning this widget''s size to match the child''s size.','过渡此小部件大小以匹配子项大小时的持续时间。',3,1);
INSERT INTO widget_fields VALUES(184,201,'reverseDuration','Duration?','The duration when transitioning this widget''s size to match the child''s size when going in reverse.','反向过渡此小部件大小以匹配子项大小时的持续时间。',4,0);
INSERT INTO widget_fields VALUES(185,201,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',5,1);
INSERT INTO widget_fields VALUES(186,201,'onEnd','VoidCallback?','Called every time an animation completes.','每次动画完成时调用。',6,0);
INSERT INTO widget_fields VALUES(187,247,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(188,247,'offset','Offset','The target offset. The child will be translated horizontally by `width * dx` and vertically by `height * dy`','目标偏移量。子项将水平平移 `width * dx`，垂直平移 `height * dy`',1,1);
INSERT INTO widget_fields VALUES(189,116,'child','Widget?','The current child widget to display. If there was a previous child, then that child will be faded out using the [switchOutCurve], while the new child is faded in with the [switchInCurve], over the [duration].','要显示的当前子小部件。如果之前有子项，则该子项将使用 [switchOutCurve] 淡出，而新子项将使用 [switchInCurve] 在 [duration] 内淡入。',0,0);
INSERT INTO widget_fields VALUES(190,116,'duration','Duration','The duration of the transition from the old [child] value to the new one.','从旧 [child] 值到新值的过渡持续时间。',1,1);
INSERT INTO widget_fields VALUES(191,116,'reverseDuration','Duration?','The duration of the transition from the new [child] value to the old one.','从新 [child] 值到旧值的过渡持续时间。',2,0);
INSERT INTO widget_fields VALUES(192,116,'switchInCurve','Curve','The animation curve to use when transitioning in a new [child].','过渡新 [child] 时使用的动画曲线。',3,1);
INSERT INTO widget_fields VALUES(193,116,'switchOutCurve','Curve','The animation curve to use when transitioning a previous [child] out.','过渡之前的 [child] 时使用的动画曲线。',4,1);
INSERT INTO widget_fields VALUES(194,116,'transitionBuilder','AnimatedSwitcherTransitionBuilder','A function that wraps a new [child] with an animation that transitions the [child] in when the animation runs in the forward direction and out when the animation runs in the reverse direction. This is only called when a new [child] is set (not for each build), or when a new [transitionBuilder] is set. If a new [transitionBuilder] is set, then the transition is rebuilt for the current child and all previous children using the new [transitionBuilder]. The function must not return null.','一个函数，用动画包装新的 [child]，当动画正向运行时过渡 [child] 进入，当动画反向运行时过渡出去。仅在设置新 [child] 时（不是每次构建时）或设置新 [transitionBuilder] 时调用。如果设置了新的 [transitionBuilder]，则使用新的 [transitionBuilder] 为当前子项和所有之前的子项重建过渡。该函数不得返回 null。',5,1);
INSERT INTO widget_fields VALUES(195,116,'layoutBuilder','AnimatedSwitcherLayoutBuilder','A function that wraps all of the children that are transitioning out, and the [child] that''s transitioning in, with a widget that lays all of them out. This is called every time this widget is built. The function must not return null.','一个函数，用小部件包装所有正在过渡出去的子项和正在过渡进入的 [child]，该小部件布局所有这些子项。每次构建此小部件时都会调用此函数。该函数不得返回 null。',6,1);
INSERT INTO widget_fields VALUES(196,224,'data','ThemeData','Specifies the color and typography values for descendant widgets.','为后代小部件指定颜色和排版值。',0,1);
INSERT INTO widget_fields VALUES(197,224,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,1);
INSERT INTO widget_fields VALUES(198,362,'listenable','Listenable','The [Listenable] to which this widget is listening.','此小部件正在监听的 [Listenable]。',0,1);
INSERT INTO widget_fields VALUES(199,288,'value','T','A value which can be retrieved using [Layer.find].','可以使用 [Layer.find] 检索的值。',0,1);
INSERT INTO widget_fields VALUES(200,288,'sized','bool','If false, the layer pushed into the tree will not be provided with a size.','如果为 false，推入树中的图层将不会提供大小。',1,1);
INSERT INTO widget_fields VALUES(201,57,'leading','Widget?','{@template flutter.material.appbar.leading} A widget to display before the toolbar''s [title].','{@template flutter.material.appbar.leading} 在工具栏 [title] 之前显示的小部件。',0,0);
INSERT INTO widget_fields VALUES(202,57,'automaticallyImplyLeading','bool','{@template flutter.material.appbar.automaticallyImplyLeading} Controls whether we should try to imply the leading widget if null.','{@template flutter.material.appbar.automaticallyImplyLeading} 控制当 leading 为 null 时是否应尝试推断 leading 小部件。',1,1);
INSERT INTO widget_fields VALUES(203,57,'title','Widget?','{@template flutter.material.appbar.title} The primary widget displayed in the app bar.','{@template flutter.material.appbar.title} 在应用栏中显示的主要小部件。',2,0);
INSERT INTO widget_fields VALUES(204,57,'actions','List<Widget>?','{@template flutter.material.appbar.actions} A list of Widgets to display in a row after the [title] widget.','{@template flutter.material.appbar.actions} 在 [title] 小部件之后以行形式显示的小部件列表。',3,0);
INSERT INTO widget_fields VALUES(205,57,'flexibleSpace','Widget?','{@template flutter.material.appbar.flexibleSpace} This widget is stacked behind the toolbar and the tab bar. Its height will be the same as the app bar''s overall height.','{@template flutter.material.appbar.flexibleSpace} 此小部件堆叠在工具栏和选项卡栏后面。其高度将与应用栏的整体高度相同。',4,0);
INSERT INTO widget_fields VALUES(206,57,'bottom','PreferredSizeWidget?','{@template flutter.material.appbar.bottom} This widget appears across the bottom of the app bar.','{@template flutter.material.appbar.bottom} 此小部件出现在应用栏底部。',5,0);
INSERT INTO widget_fields VALUES(207,57,'elevation','double?','{@template flutter.material.appbar.elevation} The z-coordinate at which to place this app bar relative to its parent.','{@template flutter.material.appbar.elevation} 相对于其父级放置此应用栏的 z 坐标。',6,0);
INSERT INTO widget_fields VALUES(208,57,'scrolledUnderElevation','double?','{@template flutter.material.appbar.scrolledUnderElevation} The elevation that will be used if this app bar has something scrolled underneath it.','{@template flutter.material.appbar.scrolledUnderElevation} 如果此应用栏下方有滚动内容，将使用的高度。',7,0);
INSERT INTO widget_fields VALUES(209,57,'notificationPredicate','ScrollNotificationPredicate','A check that specifies which child''s [ScrollNotification]s should be listened to.','指定应监听哪个子项的 [ScrollNotification] 的检查。',8,1);
INSERT INTO widget_fields VALUES(210,57,'shadowColor','Color?','{@template flutter.material.appbar.shadowColor} The color of the shadow below the app bar.','{@template flutter.material.appbar.shadowColor} 应用栏下方阴影的颜色。',9,0);
INSERT INTO widget_fields VALUES(211,57,'surfaceTintColor','Color?','{@template flutter.material.appbar.surfaceTintColor} The color of the surface tint overlay applied to the app bar''s background color to indicate elevation.','{@template flutter.material.appbar.surfaceTintColor} 应用于应用栏背景颜色以指示高度的表面色调叠加的颜色。',10,0);
INSERT INTO widget_fields VALUES(212,57,'shape','ShapeBorder?','{@template flutter.material.appbar.shape} The shape of the app bar''s [Material] as well as its shadow.','{@template flutter.material.appbar.shape} 应用栏 [Material] 及其阴影的形状。',11,0);
INSERT INTO widget_fields VALUES(213,57,'backgroundColor','Color?','{@template flutter.material.appbar.backgroundColor} The fill color to use for an app bar''s [Material].','{@template flutter.material.appbar.backgroundColor} 用于应用栏 [Material] 的填充颜色。',12,0);
INSERT INTO widget_fields VALUES(214,57,'foregroundColor','Color?','{@template flutter.material.appbar.foregroundColor} The default color for [Text] and [Icon]s within the app bar.','{@template flutter.material.appbar.foregroundColor} 应用栏内 [Text] 和 [Icon] 的默认颜色。',13,0);
INSERT INTO widget_fields VALUES(215,57,'iconTheme','IconThemeData?','{@template flutter.material.appbar.iconTheme} The color, opacity, and size to use for toolbar icons.','{@template flutter.material.appbar.iconTheme} 用于工具栏图标的颜色、不透明度和大小。',14,0);
INSERT INTO widget_fields VALUES(216,57,'actionsIconTheme','IconThemeData?','{@template flutter.material.appbar.actionsIconTheme} The color, opacity, and size to use for the icons that appear in the app bar''s [actions].','{@template flutter.material.appbar.actionsIconTheme} 用于应用栏 [actions] 中出现的图标的颜色、不透明度和大小。',15,0);
INSERT INTO widget_fields VALUES(217,57,'primary','bool','{@template flutter.material.appbar.primary} Whether this app bar is being displayed at the top of the screen.','{@template flutter.material.appbar.primary} 此应用栏是否显示在屏幕顶部。',16,1);
INSERT INTO widget_fields VALUES(218,57,'centerTitle','bool?','{@template flutter.material.appbar.centerTitle} Whether the title should be centered.','{@template flutter.material.appbar.centerTitle} 标题是否应居中。',17,0);
INSERT INTO widget_fields VALUES(219,57,'excludeHeaderSemantics','bool','{@template flutter.material.appbar.excludeHeaderSemantics} Whether the title should be wrapped with header [Semantics].','{@template flutter.material.appbar.excludeHeaderSemantics} 标题是否应用标题 [Semantics] 包装。',18,1);
INSERT INTO widget_fields VALUES(220,57,'titleSpacing','double?','{@template flutter.material.appbar.titleSpacing} The spacing around [title] content on the horizontal axis. This spacing is applied even if there is no [leading] content or [actions]. If you want [title] to take all the space available, set this value to 0.0.','{@template flutter.material.appbar.titleSpacing} 水平轴上 [title] 内容周围的间距。即使没有 [leading] 内容或 [actions]，也会应用此间距。如果希望 [title] 占用所有可用空间，请将此值设置为 0.0。',19,0);
INSERT INTO widget_fields VALUES(221,57,'toolbarOpacity','double','{@template flutter.material.appbar.toolbarOpacity} How opaque the toolbar part of the app bar is.','{@template flutter.material.appbar.toolbarOpacity} 应用栏工具栏部分的不透明度。',20,1);
INSERT INTO widget_fields VALUES(222,57,'bottomOpacity','double','{@template flutter.material.appbar.bottomOpacity} How opaque the bottom part of the app bar is.','{@template flutter.material.appbar.bottomOpacity} 应用栏底部部分的不透明度。',21,1);
INSERT INTO widget_fields VALUES(223,57,'preferredSize','Size','{@template flutter.material.appbar.preferredSize} A size whose height is the sum of [toolbarHeight] and the [bottom] widget''s preferred height.','{@template flutter.material.appbar.preferredSize} 高度为 [toolbarHeight] 和 [bottom] 小部件首选高度之和的大小。',22,1);
INSERT INTO widget_fields VALUES(224,57,'toolbarHeight','double?','{@template flutter.material.appbar.toolbarHeight} Defines the height of the toolbar component of an [AppBar].','{@template flutter.material.appbar.toolbarHeight} 定义 [AppBar] 工具栏组件的高度。',23,0);
INSERT INTO widget_fields VALUES(225,57,'leadingWidth','double?','{@template flutter.material.appbar.leadingWidth} Defines the width of [AppBar.leading] widget.','{@template flutter.material.appbar.leadingWidth} 定义 [AppBar.leading] 小部件的宽度。',24,0);
INSERT INTO widget_fields VALUES(226,57,'toolbarTextStyle','TextStyle?','{@template flutter.material.appbar.toolbarTextStyle} The default text style for the AppBar''s [leading], and [actions] widgets, but not its [title].','{@template flutter.material.appbar.toolbarTextStyle} AppBar 的 [leading] 和 [actions] 小部件的默认文本样式，但不包括其 [title]。',25,0);
INSERT INTO widget_fields VALUES(227,57,'titleTextStyle','TextStyle?','{@template flutter.material.appbar.titleTextStyle} The default text style for the AppBar''s [title] widget.','{@template flutter.material.appbar.titleTextStyle} AppBar 的 [title] 小部件的默认文本样式。',26,0);
INSERT INTO widget_fields VALUES(228,57,'systemOverlayStyle','SystemUiOverlayStyle?','{@template flutter.material.appbar.systemOverlayStyle} Specifies the style to use for the system overlays (e.g. the status bar on Android or iOS, the system navigation bar on Android).','{@template flutter.material.appbar.systemOverlayStyle} 指定用于系统叠加层的样式（例如 Android 或 iOS 上的状态栏，Android 上的系统导航栏）。',27,0);
INSERT INTO widget_fields VALUES(229,57,'forceMaterialTransparency','bool','{@template flutter.material.appbar.forceMaterialTransparency} Forces the AppBar''s Material widget type to be [MaterialType.transparency] (instead of Material''s default type).','{@template flutter.material.appbar.forceMaterialTransparency} 强制 AppBar 的 Material 小部件类型为 [MaterialType.transparency]（而不是 Material 的默认类型）。',28,1);
INSERT INTO widget_fields VALUES(230,57,'useDefaultSemanticsOrder','bool','{@template flutter.material.appbar.useDefaultSemanticsOrder} Whether to use the default semantic ordering for the app bar''s children for accessibility traversal order.','{@template flutter.material.appbar.useDefaultSemanticsOrder} 是否对应用栏的子项使用默认语义顺序进行辅助功能遍历顺序。',29,1);
INSERT INTO widget_fields VALUES(231,57,'clipBehavior','Clip?','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',30,0);
INSERT INTO widget_fields VALUES(232,57,'actionsPadding','EdgeInsetsGeometry?','{@template flutter.material.appbar.actionsPadding} The padding between the [actions] and the end of the AppBar.','{@template flutter.material.appbar.actionsPadding} [actions] 和 AppBar 末端之间的内边距。',31,0);
INSERT INTO widget_fields VALUES(233,77,'aspectRatio','double','The aspect ratio to attempt to use.','尝试使用的宽高比。',0,1);
INSERT INTO widget_fields VALUES(234,356,'displayStringForOption','AutocompleteOptionToString<T>','{@macro flutter.widgets.RawAutocomplete.displayStringForOption}','{@macro flutter.widgets.RawAutocomplete.displayStringForOption}',0,1);
INSERT INTO widget_fields VALUES(235,356,'fieldViewBuilder','AutocompleteFieldViewBuilder','{@macro flutter.widgets.RawAutocomplete.fieldViewBuilder}','{@macro flutter.widgets.RawAutocomplete.fieldViewBuilder}',1,1);
INSERT INTO widget_fields VALUES(236,356,'onSelected','AutocompleteOnSelected<T>?','{@macro flutter.widgets.RawAutocomplete.onSelected}','{@macro flutter.widgets.RawAutocomplete.onSelected}',2,0);
INSERT INTO widget_fields VALUES(237,356,'optionsBuilder','AutocompleteOptionsBuilder<T>','{@macro flutter.widgets.RawAutocomplete.optionsBuilder}','{@macro flutter.widgets.RawAutocomplete.optionsBuilder}',3,1);
INSERT INTO widget_fields VALUES(238,356,'optionsViewBuilder','AutocompleteOptionsViewBuilder<T>?','{@macro flutter.widgets.RawAutocomplete.optionsViewBuilder}','{@macro flutter.widgets.RawAutocomplete.optionsViewBuilder}',4,0);
INSERT INTO widget_fields VALUES(239,356,'optionsViewOpenDirection','OptionsViewOpenDirection','{@macro flutter.widgets.RawAutocomplete.optionsViewOpenDirection}','{@macro flutter.widgets.RawAutocomplete.optionsViewOpenDirection}',5,1);
INSERT INTO widget_fields VALUES(240,356,'optionsMaxHeight','double','The maximum height used for the default Material options list widget.','用于默认 Material 选项列表小部件的最大高度。',6,1);
INSERT INTO widget_fields VALUES(241,356,'initialValue','TextEditingValue?','{@macro flutter.widgets.RawAutocomplete.initialValue}','{@macro flutter.widgets.RawAutocomplete.initialValue}',7,0);
INSERT INTO widget_fields VALUES(242,365,'child','Widget','{@macro flutter.widgets.ProxyWidget.child}','{@macro flutter.widgets.ProxyWidget.child}',0,1);
INSERT INTO widget_fields VALUES(243,365,'onDisposeAction','AutofillContextAction','The [AutofillContextAction] to be run when this [AutofillGroup] is the topmost [AutofillGroup] and it''s being disposed, in order to clean up the current autofill context.','当此 [AutofillGroup] 是最顶层的 [AutofillGroup] 且正在被释放时要运行的 [AutofillContextAction]，以清理当前自动填充上下文。',1,1);
INSERT INTO widget_fields VALUES(244,239,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(245,366,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(246,366,'onBackButtonPressed','ValueGetter<Future<bool>>','The callback function that will be called when the back button is pressed.','按下返回按钮时将调用的回调函数。',1,1);
INSERT INTO widget_fields VALUES(247,278,'filter','ui.ImageFilter','The image filter to apply to the existing painted content before painting the child.','在绘制子项之前应用于现有绘制内容的图像滤镜。',0,1);
INSERT INTO widget_fields VALUES(248,278,'blendMode','BlendMode','The blend mode to use to apply the filtered background content onto the background surface.','用于将过滤的背景内容应用到背景表面的混合模式。',1,1);
INSERT INTO widget_fields VALUES(249,278,'enabled','bool','Whether or not to apply the backdrop filter operation to the child of this widget.','是否对此小部件的子项应用背景滤镜操作。',2,1);
INSERT INTO widget_fields VALUES(250,278,'backdropGroupKey','BackdropKey?','The [BackdropKey] that identifies the backdrop this filter will apply to.','标识此滤镜将应用到的背景的 [BackdropKey]。',3,0);
INSERT INTO widget_fields VALUES(251,367,'backdropKey','BackdropKey','The backdrop key this backdrop group will use with shared child layers.','此背景组将与共享子层一起使用的背景键。',0,1);
INSERT INTO widget_fields VALUES(252,258,'backgroundColor','Color?','The badge''s fill color.','徽章的填充颜色。',0,0);
INSERT INTO widget_fields VALUES(253,258,'textColor','Color?','The color of the badge''s [label] text.','徽章 [label] 文本的颜色。',1,0);
INSERT INTO widget_fields VALUES(254,258,'smallSize','double?','The diameter of the badge if [label] is null.','如果 [label] 为 null，徽章的直径。',2,0);
INSERT INTO widget_fields VALUES(255,258,'largeSize','double?','The badge''s height if [label] is non-null.','如果 [label] 非空，徽章的高度。',3,0);
INSERT INTO widget_fields VALUES(256,258,'textStyle','TextStyle?','The [DefaultTextStyle] for the badge''s label.','徽章标签的 [DefaultTextStyle]。',4,0);
INSERT INTO widget_fields VALUES(257,258,'padding','EdgeInsetsGeometry?','The padding added to the badge''s label.','添加到徽章标签的内边距。',5,0);
INSERT INTO widget_fields VALUES(258,258,'alignment','AlignmentGeometry?','Combined with [offset] to determine the location of the [label] relative to the [child].','与 [offset] 结合确定 [label] 相对于 [child] 的位置。',6,0);
INSERT INTO widget_fields VALUES(259,258,'offset','Offset?','Combined with [alignment] to determine the location of the [label] relative to the [child].','与 [alignment] 结合确定 [label] 相对于 [child] 的位置。',7,0);
INSERT INTO widget_fields VALUES(260,258,'label','Widget?','The badge''s content, typically a [Text] widget that contains 1 to 4 characters.','徽章的内容，通常是包含 1 到 4 个字符的 [Text] 小部件。',8,0);
INSERT INTO widget_fields VALUES(261,258,'isLabelVisible','bool','If false, the badge''s [label] is not included.','如果为 false，则不包含徽章的 [label]。',9,1);
INSERT INTO widget_fields VALUES(262,258,'child','Widget?','The widget that the badge is stacked on top of.','徽章堆叠在其上方的小部件。',10,0);
INSERT INTO widget_fields VALUES(263,368,'data','BadgeThemeData','Specifies the default color and size overrides for descendant [Badge] widgets.','为后代 [Badge] 小部件指定默认颜色和大小覆盖。',0,1);
INSERT INTO widget_fields VALUES(264,5,'child','Widget?','The widget to show behind the banner.','在横幅后面显示的小部件。',0,0);
INSERT INTO widget_fields VALUES(265,5,'message','String','The message to show in the banner.','在横幅中显示的消息。',1,1);
INSERT INTO widget_fields VALUES(266,5,'textDirection','TextDirection?','The directionality of the text.','文本的方向性。',2,0);
INSERT INTO widget_fields VALUES(267,5,'location','BannerLocation','Where to show the banner (e.g., the upper right corner).','显示横幅的位置（例如，右上角）。',3,1);
INSERT INTO widget_fields VALUES(268,5,'layoutDirection','TextDirection?','The directionality of the layout.','布局的方向性。',4,0);
INSERT INTO widget_fields VALUES(269,5,'color','Color','The color of the banner.','横幅的颜色。',5,1);
INSERT INTO widget_fields VALUES(270,5,'textStyle','TextStyle','The style of the text shown on the banner.','横幅上显示的文本样式。',6,1);
INSERT INTO widget_fields VALUES(271,5,'shadow','BoxShadow','The shadow properties for the banner.','横幅的阴影属性。',7,1);
INSERT INTO widget_fields VALUES(272,75,'baseline','double','The number of logical pixels from the top of this box at which to position the child''s baseline.','从此盒子顶部开始的逻辑像素数，用于定位子项的基线。',0,1);
INSERT INTO widget_fields VALUES(273,75,'baselineType','TextBaseline','The type of baseline to use for positioning the child.','用于定位子项的基线类型。',1,1);
INSERT INTO widget_fields VALUES(274,369,'blocking','bool','Whether this widget is blocking semantics of all widget that were painted before it in the same semantic container.','此小部件是否阻止在同一语义容器中在其之前绘制的所有小部件的语义。',0,1);
INSERT INTO widget_fields VALUES(275,61,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(276,61,'padding','EdgeInsetsGeometry?','The amount of space to surround the child inside the bounds of the [BottomAppBar].','在 [BottomAppBar] 边界内围绕子项的空间量。',1,0);
INSERT INTO widget_fields VALUES(277,61,'color','Color?','The bottom app bar''s background color.','底部应用栏的背景颜色。',2,0);
INSERT INTO widget_fields VALUES(278,61,'elevation','double?','The z-coordinate at which to place this bottom app bar relative to its parent.','相对于其父级放置此底部应用栏的 z 坐标。',3,0);
INSERT INTO widget_fields VALUES(279,61,'shape','NotchedShape?','The notch that is made for the floating action button.','为浮动操作按钮制作的缺口。',4,0);
INSERT INTO widget_fields VALUES(280,61,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',5,1);
INSERT INTO widget_fields VALUES(281,61,'notchMargin','double','The margin between the [FloatingActionButton] and the [BottomAppBar]''s notch.','[FloatingActionButton] 和 [BottomAppBar] 缺口之间的边距。',6,1);
INSERT INTO widget_fields VALUES(282,61,'surfaceTintColor','Color?','A custom color for the Material 3 surface-tint elevation effect.','Material 3 表面色调高度效果的自定义颜色。',7,0);
INSERT INTO widget_fields VALUES(283,61,'shadowColor','Color?','The color of the shadow below the app bar.','应用栏下方阴影的颜色。',8,0);
INSERT INTO widget_fields VALUES(284,61,'height','double?','The double value used to indicate the height of the [BottomAppBar].','用于指示 [BottomAppBar] 高度的双精度值。',9,0);
INSERT INTO widget_fields VALUES(285,60,'items','List<BottomNavigationBarItem>','Defines the appearance of the button items that are arrayed within the bottom navigation bar.','定义排列在底部导航栏内的按钮项的外观。',0,1);
INSERT INTO widget_fields VALUES(286,60,'onTap','ValueChanged<int>?','Called when one of the [items] is tapped.','点击 [items] 中的一个时调用。',1,0);
INSERT INTO widget_fields VALUES(287,60,'currentIndex','int','The index into [items] for the current active [BottomNavigationBarItem].','当前活动 [BottomNavigationBarItem] 在 [items] 中的索引。',2,1);
INSERT INTO widget_fields VALUES(288,60,'elevation','double?','The z-coordinate of this [BottomNavigationBar].','此 [BottomNavigationBar] 的 z 坐标。',3,0);
INSERT INTO widget_fields VALUES(289,60,'type','BottomNavigationBarType?','Defines the layout and behavior of a [BottomNavigationBar].','定义 [BottomNavigationBar] 的布局和行为。',4,0);
INSERT INTO widget_fields VALUES(290,60,'backgroundColor','Color?','The color of the [BottomNavigationBar] itself.','[BottomNavigationBar] 本身的颜色。',5,0);
INSERT INTO widget_fields VALUES(291,60,'iconSize','double','The size of all of the [BottomNavigationBarItem] icons.','所有 [BottomNavigationBarItem] 图标的大小。',6,1);
INSERT INTO widget_fields VALUES(292,60,'selectedItemColor','Color?','The color of the selected [BottomNavigationBarItem.icon] and [BottomNavigationBarItem.label].','选中的 [BottomNavigationBarItem.icon] 和 [BottomNavigationBarItem.label] 的颜色。',7,0);
INSERT INTO widget_fields VALUES(293,60,'unselectedItemColor','Color?','The color of the unselected [BottomNavigationBarItem.icon] and [BottomNavigationBarItem.label]s.','未选中的 [BottomNavigationBarItem.icon] 和 [BottomNavigationBarItem.label] 的颜色。',8,0);
INSERT INTO widget_fields VALUES(294,60,'selectedIconTheme','IconThemeData?','The size, opacity, and color of the icon in the currently selected [BottomNavigationBarItem.icon].','当前选中的 [BottomNavigationBarItem.icon] 中图标的大小、不透明度和颜色。',9,0);
INSERT INTO widget_fields VALUES(295,60,'unselectedIconTheme','IconThemeData?','The size, opacity, and color of the icon in the currently unselected [BottomNavigationBarItem.icon]s.','当前未选中的 [BottomNavigationBarItem.icon] 中图标的大小、不透明度和颜色。',10,0);
INSERT INTO widget_fields VALUES(296,60,'selectedLabelStyle','TextStyle?','The [TextStyle] of the [BottomNavigationBarItem] labels when they are selected.','选中时 [BottomNavigationBarItem] 标签的 [TextStyle]。',11,0);
INSERT INTO widget_fields VALUES(297,60,'unselectedLabelStyle','TextStyle?','The [TextStyle] of the [BottomNavigationBarItem] labels when they are not selected.','未选中时 [BottomNavigationBarItem] 标签的 [TextStyle]。',12,0);
INSERT INTO widget_fields VALUES(298,60,'selectedFontSize','double','The font size of the [BottomNavigationBarItem] labels when they are selected.','选中时 [BottomNavigationBarItem] 标签的字体大小。',13,1);
INSERT INTO widget_fields VALUES(299,60,'unselectedFontSize','double','The font size of the [BottomNavigationBarItem] labels when they are not selected.','未选中时 [BottomNavigationBarItem] 标签的字体大小。',14,1);
INSERT INTO widget_fields VALUES(300,60,'showUnselectedLabels','bool?','Whether the labels are shown for the unselected [BottomNavigationBarItem]s.','是否为未选中的 [BottomNavigationBarItem] 显示标签。',15,0);
INSERT INTO widget_fields VALUES(301,60,'showSelectedLabels','bool?','Whether the labels are shown for the selected [BottomNavigationBarItem].','是否为选中的 [BottomNavigationBarItem] 显示标签。',16,0);
INSERT INTO widget_fields VALUES(302,60,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the items.','鼠标指针进入或悬停在项目上时的光标。',17,0);
INSERT INTO widget_fields VALUES(303,60,'enableFeedback','bool?','Whether detected gestures should provide acoustic and/or haptic feedback.','检测到的手势是否应提供声音和/或触觉反馈。',18,0);
INSERT INTO widget_fields VALUES(304,60,'landscapeLayout','BottomNavigationBarLandscapeLayout?','The arrangement of the bar''s [items] when the enclosing [MediaQueryData.orientation] is [Orientation.landscape].','当包围的 [MediaQueryData.orientation] 为 [Orientation.landscape] 时，栏的 [items] 的排列。',19,0);
INSERT INTO widget_fields VALUES(305,60,'useLegacyColorScheme','bool','This flag is controlling how [BottomNavigationBar] is going to use the colors provided by the [selectedIconTheme], [unselectedIconTheme], [selectedItemColor], [unselectedItemColor]. The default value is `true` as the new theming logic is a breaking change. To opt-in the new theming logic set the flag to `false`','此标志控制 [BottomNavigationBar] 如何使用 [selectedIconTheme]、[unselectedIconTheme]、[selectedItemColor]、[unselectedItemColor] 提供的颜色。默认值为 `true`，因为新的主题逻辑是一个破坏性更改。要选择新的主题逻辑，请将标志设置为 `false`',20,1);
INSERT INTO widget_fields VALUES(306,371,'data','BottomNavigationBarThemeData','The properties used for all descendant [BottomNavigationBar] widgets.','用于所有后代 [BottomNavigationBar] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(307,142,'animationController','AnimationController?','The animation controller that controls the bottom sheet''s entrance and exit animations.','控制底部表单进入和退出动画的动画控制器。',0,0);
INSERT INTO widget_fields VALUES(308,142,'onClosing','VoidCallback','Called when the bottom sheet begins to close.','底部表单开始关闭时调用。',1,1);
INSERT INTO widget_fields VALUES(309,142,'builder','WidgetBuilder','A builder for the contents of the sheet.','表单内容的构建器。',2,1);
INSERT INTO widget_fields VALUES(310,142,'enableDrag','bool','If true, the bottom sheet can be dragged up and down and dismissed by swiping downwards.','如果为 true，底部表单可以上下拖动并通过向下滑动来关闭。',3,1);
INSERT INTO widget_fields VALUES(311,142,'showDragHandle','bool?','Specifies whether a drag handle is shown.','指定是否显示拖动手柄。',4,0);
INSERT INTO widget_fields VALUES(312,142,'dragHandleColor','Color?','The bottom sheet drag handle''s color.','底部表单拖动手柄的颜色。',5,0);
INSERT INTO widget_fields VALUES(313,142,'dragHandleSize','Size?','Defaults to [BottomSheetThemeData.dragHandleSize]. If that is also null, defaults to Size(32, 4).','默认为 [BottomSheetThemeData.dragHandleSize]。如果也为 null，则默认为 Size(32, 4)。',6,0);
INSERT INTO widget_fields VALUES(314,142,'onDragStart','BottomSheetDragStartHandler?','Called when the user begins dragging the bottom sheet vertically, if [enableDrag] is true.','如果 [enableDrag] 为 true，当用户开始垂直拖动底部表单时调用。',7,0);
INSERT INTO widget_fields VALUES(315,142,'onDragEnd','BottomSheetDragEndHandler?','Called when the user stops dragging the bottom sheet, if [enableDrag] is true.','如果 [enableDrag] 为 true，当用户停止拖动底部表单时调用。',8,0);
INSERT INTO widget_fields VALUES(316,142,'backgroundColor','Color?','The bottom sheet''s background color.','底部表单的背景颜色。',9,0);
INSERT INTO widget_fields VALUES(317,142,'shadowColor','Color?','The color of the shadow below the sheet.','表单下方阴影的颜色。',10,0);
INSERT INTO widget_fields VALUES(318,142,'elevation','double?','The z-coordinate at which to place this material relative to its parent.','相对于其父级放置此材料的 z 坐标。',11,0);
INSERT INTO widget_fields VALUES(319,142,'shape','ShapeBorder?','The shape of the bottom sheet.','底部表单的形状。',12,0);
INSERT INTO widget_fields VALUES(320,142,'clipBehavior','Clip?','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',13,0);
INSERT INTO widget_fields VALUES(321,142,'constraints','BoxConstraints?','Defines minimum and maximum sizes for a [BottomSheet].','定义 [BottomSheet] 的最小和最大大小。',14,0);
INSERT INTO widget_fields VALUES(322,350,'padding','EdgeInsetsGeometry?','The amount of space by which to inset the children.','子项的插入空间量。',0,0);
INSERT INTO widget_fields VALUES(323,202,'builder','WidgetBuilder','Called to obtain the child widget.','调用以获取子小部件。',0,1);
INSERT INTO widget_fields VALUES(324,29,'alignment','MainAxisAlignment?','How the children should be placed along the horizontal axis.','子项应如何沿水平轴放置。',0,0);
INSERT INTO widget_fields VALUES(325,29,'mainAxisSize','MainAxisSize?','How much horizontal space is available. See [Row.mainAxisSize].','有多少水平空间可用。参见 [Row.mainAxisSize]。',1,0);
INSERT INTO widget_fields VALUES(326,29,'buttonTextTheme','ButtonTextTheme?','Overrides the surrounding [ButtonBarThemeData.buttonTextTheme] to define a button''s base colors, size, internal padding and shape.','覆盖周围的 [ButtonBarThemeData.buttonTextTheme] 以定义按钮的基本颜色、大小、内部内边距和形状。',2,0);
INSERT INTO widget_fields VALUES(327,29,'buttonMinWidth','double?','Overrides the surrounding [ButtonThemeData.minWidth] to define a button''s minimum width.','覆盖周围的 [ButtonThemeData.minWidth] 以定义按钮的最小宽度。',3,0);
INSERT INTO widget_fields VALUES(328,29,'buttonHeight','double?','Overrides the surrounding [ButtonThemeData.height] to define a button''s minimum height.','覆盖周围的 [ButtonThemeData.height] 以定义按钮的最小高度。',4,0);
INSERT INTO widget_fields VALUES(329,29,'buttonPadding','EdgeInsetsGeometry?','Overrides the surrounding [ButtonThemeData.padding] to define the padding for a button''s child (typically the button''s label).','覆盖周围的 [ButtonThemeData.padding] 以定义按钮子项（通常是按钮标签）的内边距。',5,0);
INSERT INTO widget_fields VALUES(330,29,'buttonAlignedDropdown','bool?','Overrides the surrounding [ButtonThemeData.alignedDropdown] to define whether a [DropdownButton] menu''s width will match the button''s width.','覆盖周围的 [ButtonThemeData.alignedDropdown] 以定义 [DropdownButton] 菜单的宽度是否与按钮宽度匹配。',6,0);
INSERT INTO widget_fields VALUES(331,29,'layoutBehavior','ButtonBarLayoutBehavior?','Defines whether a [ButtonBar] should size itself with a minimum size constraint or with padding.','定义 [ButtonBar] 是否应使用最小大小约束或内边距来调整自身大小。',7,0);
INSERT INTO widget_fields VALUES(332,29,'overflowDirection','VerticalDirection?','Defines the vertical direction of a [ButtonBar]''s children if it overflows.','定义 [ButtonBar] 子项溢出时的垂直方向。',8,0);
INSERT INTO widget_fields VALUES(333,29,'overflowButtonSpacing','double?','The spacing between buttons when the button bar overflows.','按钮栏溢出时按钮之间的间距。',9,0);
INSERT INTO widget_fields VALUES(334,29,'children','List<Widget>','The buttons to arrange horizontally.','要水平排列的按钮。',10,1);
INSERT INTO widget_fields VALUES(335,338,'data','ButtonBarThemeData','The properties used for all descendant [ButtonBar] widgets.','用于所有后代 [ButtonBar] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(336,372,'onPressed','VoidCallback?','Called when the button is tapped or otherwise activated.','点击或以其他方式激活按钮时调用。',0,0);
INSERT INTO widget_fields VALUES(337,372,'onLongPress','VoidCallback?','Called when the button is long-pressed.','长按按钮时调用。',1,0);
INSERT INTO widget_fields VALUES(338,372,'onHover','ValueChanged<bool>?','Called when a pointer enters or exits the button response area.','指针进入或退出按钮响应区域时调用。',2,0);
INSERT INTO widget_fields VALUES(339,372,'onFocusChange','ValueChanged<bool>?','Handler called when the focus changes.','焦点改变时调用的处理程序。',3,0);
INSERT INTO widget_fields VALUES(340,372,'style','ButtonStyle?','Customizes this button''s appearance.','自定义此按钮的外观。',4,0);
INSERT INTO widget_fields VALUES(341,372,'clipBehavior','Clip?','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',5,0);
INSERT INTO widget_fields VALUES(342,372,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',6,0);
INSERT INTO widget_fields VALUES(343,372,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',7,1);
INSERT INTO widget_fields VALUES(344,372,'statesController','MaterialStatesController?','{@macro flutter.material.inkwell.statesController}','{@macro flutter.material.inkwell.statesController}',8,0);
INSERT INTO widget_fields VALUES(345,372,'isSemanticButton','bool?','Determine whether this subtree represents a button.','确定此子树是否表示按钮。',9,0);
INSERT INTO widget_fields VALUES(346,372,'iconAlignment','IconAlignment?','{@macro flutter.material.ButtonStyleButton.iconAlignment}','{@macro flutter.material.ButtonStyleButton.iconAlignment}',10,0);
INSERT INTO widget_fields VALUES(347,372,'tooltip','String?','Text that describes the action that will occur when the button is pressed or hovered over.','描述按下或悬停按钮时将发生的操作的文本。',11,0);
INSERT INTO widget_fields VALUES(348,372,'child','Widget?','Typically the button''s label.','通常是按钮的标签。',12,0);
INSERT INTO widget_fields VALUES(349,326,'data','ButtonThemeData','Specifies the color and geometry of buttons.','指定按钮的颜色和几何形状。',0,1);
INSERT INTO widget_fields VALUES(350,373,'initialDate','DateTime?','The initially selected [DateTime] that the picker should display.','选择器应显示的初始选中 [DateTime]。',0,0);
INSERT INTO widget_fields VALUES(351,373,'firstDate','DateTime','The earliest allowable [DateTime] that the user can select.','用户可以选择的最早允许的 [DateTime]。',1,1);
INSERT INTO widget_fields VALUES(352,373,'lastDate','DateTime','The latest allowable [DateTime] that the user can select.','用户可以选择的最晚允许的 [DateTime]。',2,1);
INSERT INTO widget_fields VALUES(353,373,'currentDate','DateTime','The [DateTime] representing today. It will be highlighted in the day grid.','表示今天的 [DateTime]。它将在日期网格中突出显示。',3,1);
INSERT INTO widget_fields VALUES(354,373,'onDateChanged','ValueChanged<DateTime>','Called when the user selects a date in the picker.','用户在选择器中选择日期时调用。',4,1);
INSERT INTO widget_fields VALUES(355,373,'onDisplayedMonthChanged','ValueChanged<DateTime>?','Called when the user navigates to a new month/year in the picker.','用户在选择器中导航到新月份/年份时调用。',5,0);
INSERT INTO widget_fields VALUES(356,373,'initialCalendarMode','DatePickerMode','The initial display of the calendar picker.','日历选择器的初始显示。',6,1);
INSERT INTO widget_fields VALUES(357,373,'selectableDayPredicate','SelectableDayPredicate?','Function to provide full control over which dates in the calendar can be selected.','提供对日历中哪些日期可以选择的完全控制的函数。',7,0);
INSERT INTO widget_fields VALUES(358,373,'calendarDelegate','CalendarDelegate<DateTime>','{@macro flutter.material.calendar_date_picker.calendarDelegate}','{@macro flutter.material.calendar_date_picker.calendarDelegate}',8,1);
INSERT INTO widget_fields VALUES(359,283,'bindings','Map<ShortcutActivator, VoidCallback>','A map of key combinations to callbacks used to define the shortcut bindings.','用于定义快捷键绑定的键组合到回调的映射。',0,1);
INSERT INTO widget_fields VALUES(360,283,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,1);
INSERT INTO widget_fields VALUES(361,3,'color','Color?','The card''s background color.','卡片的背景颜色。',0,0);
INSERT INTO widget_fields VALUES(362,3,'shadowColor','Color?','The color to paint the shadow below the card.','绘制卡片下方阴影的颜色。',1,0);
INSERT INTO widget_fields VALUES(363,3,'surfaceTintColor','Color?','The color used as an overlay on [color] to indicate elevation.','用作 [color] 上的叠加层以指示高度的颜色。',2,0);
INSERT INTO widget_fields VALUES(364,3,'elevation','double?','The z-coordinate at which to place this card. This controls the size of the shadow below the card.','放置此卡片的 z 坐标。这控制卡片下方阴影的大小。',3,0);
INSERT INTO widget_fields VALUES(365,3,'shape','ShapeBorder?','The shape of the card''s [Material].','卡片 [Material] 的形状。',4,0);
INSERT INTO widget_fields VALUES(366,3,'borderOnForeground','bool','Whether to paint the [shape] border in front of the [child].','是否在 [child] 前面绘制 [shape] 边框。',5,1);
INSERT INTO widget_fields VALUES(367,3,'clipBehavior','Clip?','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',6,0);
INSERT INTO widget_fields VALUES(368,3,'margin','EdgeInsetsGeometry?','The empty space that surrounds the card.','围绕卡片的空白空间。',7,0);
INSERT INTO widget_fields VALUES(369,3,'semanticContainer','bool','Whether this widget represents a single semantic container, or if false a collection of individual semantic nodes.','此小部件是否表示单个语义容器，或者如果为 false，则表示单个语义节点的集合。',8,1);
INSERT INTO widget_fields VALUES(370,3,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',9,0);
INSERT INTO widget_fields VALUES(371,237,'padding','EdgeInsets?','The amount of space to surround each carousel item with.','围绕每个轮播项的空间量。',0,0);
INSERT INTO widget_fields VALUES(372,237,'backgroundColor','Color?','The background color for each carousel item.','每个轮播项的背景颜色。',1,0);
INSERT INTO widget_fields VALUES(373,237,'elevation','double?','The z-coordinate of each carousel item.','每个轮播项的 z 坐标。',2,0);
INSERT INTO widget_fields VALUES(374,237,'shape','ShapeBorder?','The shape of each carousel item''s [Material].','每个轮播项 [Material] 的形状。',3,0);
INSERT INTO widget_fields VALUES(375,237,'overlayColor','WidgetStateProperty<Color?>?','The highlight color to indicate the carousel items are in pressed, hovered or focused states.','指示轮播项处于按下、悬停或聚焦状态的高亮颜色。',4,0);
INSERT INTO widget_fields VALUES(376,237,'shrinkExtent','double','The minimum allowable extent (size) in the main axis for carousel items during scrolling transitions.','滚动过渡期间轮播项在主轴上的最小允许范围（大小）。',5,1);
INSERT INTO widget_fields VALUES(377,237,'itemSnapping','bool','Whether the carousel should keep scrolling to the next/previous items to maintain the original layout.','轮播是否应继续滚动到下一个/上一个项目以保持原始布局。',6,1);
INSERT INTO widget_fields VALUES(378,237,'controller','CarouselController?','An object that can be used to control the position to which this scroll view is scrolled.','可用于控制此滚动视图滚动到的位置的对象。',7,0);
INSERT INTO widget_fields VALUES(379,237,'scrollDirection','Axis','The [Axis] along which the scroll view''s offset increases with each item.','滚动视图的偏移量随每个项目增加的 [Axis]。',8,1);
INSERT INTO widget_fields VALUES(380,237,'reverse','bool','Whether the carousel list scrolls in the reading direction.','轮播列表是否按阅读方向滚动。',9,1);
INSERT INTO widget_fields VALUES(381,237,'consumeMaxWeight','bool','Whether the collapsed items are allowed to expand to the max size.','是否允许折叠的项目扩展到最大大小。',10,1);
INSERT INTO widget_fields VALUES(382,237,'onTap','ValueChanged<int>?','Called when one of the [children] is tapped.','点击 [children] 中的一个时调用。',11,0);
INSERT INTO widget_fields VALUES(383,237,'enableSplash','bool','Determines whether an [InkWell] will cover each Carousel item.','确定 [InkWell] 是否会覆盖每个轮播项。',12,1);
INSERT INTO widget_fields VALUES(384,237,'itemExtent','double?','The extent the children are forced to have in the main axis.','子项在主轴上被强制具有的范围。',13,0);
INSERT INTO widget_fields VALUES(385,237,'flexWeights','List<int>?','The weights that each visible child should occupy in the viewport.','每个可见子项应在视口中占据的权重。',14,0);
INSERT INTO widget_fields VALUES(386,237,'children','List<Widget>','The child widgets for the carousel.','轮播的子小部件。',15,1);
INSERT INTO widget_fields VALUES(387,39,'value','bool?','Whether this checkbox is checked.','此复选框是否被选中。',0,0);
INSERT INTO widget_fields VALUES(388,39,'onChanged','ValueChanged<bool?>?','Called when the value of the checkbox should change.','复选框的值应该改变时调用。',1,0);
INSERT INTO widget_fields VALUES(389,39,'mouseCursor','MouseCursor?','{@template flutter.material.checkbox.mouseCursor} The cursor for a mouse pointer when it enters or is hovering over the widget.','{@template flutter.material.checkbox.mouseCursor} 鼠标指针进入或悬停在小部件上时的光标。',2,0);
INSERT INTO widget_fields VALUES(390,39,'activeColor','Color?','The color to use when this checkbox is checked.','此复选框被选中时使用的颜色。',3,0);
INSERT INTO widget_fields VALUES(391,39,'fillColor','MaterialStateProperty<Color?>?','{@template flutter.material.checkbox.fillColor} The color that fills the checkbox, in all [WidgetState]s.','{@template flutter.material.checkbox.fillColor} 在所有 [WidgetState] 中填充复选框的颜色。',4,0);
INSERT INTO widget_fields VALUES(392,39,'checkColor','Color?','{@template flutter.material.checkbox.checkColor} The color to use for the check icon when this checkbox is checked. {@endtemplate}','{@template flutter.material.checkbox.checkColor} 此复选框被选中时用于勾选图标的颜色。{@endtemplate}',5,0);
INSERT INTO widget_fields VALUES(393,39,'tristate','bool','If true the checkbox''s [value] can be true, false, or null.','如果为 true，复选框的 [value] 可以是 true、false 或 null。',6,1);
INSERT INTO widget_fields VALUES(394,39,'materialTapTargetSize','MaterialTapTargetSize?','{@template flutter.material.checkbox.materialTapTargetSize} Configures the minimum size of the tap target. {@endtemplate}','{@template flutter.material.checkbox.materialTapTargetSize} 配置点击目标的最小大小。{@endtemplate}',7,0);
INSERT INTO widget_fields VALUES(395,39,'visualDensity','VisualDensity?','{@template flutter.material.checkbox.visualDensity} Defines how compact the checkbox''s layout will be. {@endtemplate}','{@template flutter.material.checkbox.visualDensity} 定义复选框布局的紧凑程度。{@endtemplate}',8,0);
INSERT INTO widget_fields VALUES(396,39,'focusColor','Color?','The color for the checkbox''s [Material] when it has the input focus.','复选框具有输入焦点时其 [Material] 的颜色。',9,0);
INSERT INTO widget_fields VALUES(397,39,'hoverColor','Color?','{@template flutter.material.checkbox.hoverColor} The color for the checkbox''s [Material] when a pointer is hovering over it.','{@template flutter.material.checkbox.hoverColor} 指针悬停在复选框上时其 [Material] 的颜色。',10,0);
INSERT INTO widget_fields VALUES(398,39,'overlayColor','MaterialStateProperty<Color?>?','{@template flutter.material.checkbox.overlayColor} The color for the checkbox''s [Material].','{@template flutter.material.checkbox.overlayColor} 复选框 [Material] 的颜色。',11,0);
INSERT INTO widget_fields VALUES(399,39,'splashRadius','double?','{@template flutter.material.checkbox.splashRadius} The splash radius of the circular [Material] ink response. {@endtemplate}','{@template flutter.material.checkbox.splashRadius} 圆形 [Material] 墨水响应的飞溅半径。{@endtemplate}',12,0);
INSERT INTO widget_fields VALUES(400,39,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',13,0);
INSERT INTO widget_fields VALUES(401,39,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',14,1);
INSERT INTO widget_fields VALUES(402,39,'shape','OutlinedBorder?','{@template flutter.material.checkbox.shape} The shape of the checkbox''s [Material]. {@endtemplate}','{@template flutter.material.checkbox.shape} 复选框 [Material] 的形状。{@endtemplate}',15,0);
INSERT INTO widget_fields VALUES(403,39,'side','BorderSide?','{@template flutter.material.checkbox.side} The color and width of the checkbox''s border.','{@template flutter.material.checkbox.side} 复选框边框的颜色和宽度。',16,0);
INSERT INTO widget_fields VALUES(404,39,'isError','bool','{@template flutter.material.checkbox.isError} True if this checkbox wants to show an error state.','{@template flutter.material.checkbox.isError} 如果此复选框想要显示错误状态，则为 true。',17,1);
INSERT INTO widget_fields VALUES(405,39,'semanticLabel','String?','{@template flutter.material.checkbox.semanticLabel} The semantic label for the checkbox that will be announced by screen readers.','{@template flutter.material.checkbox.semanticLabel} 屏幕阅读器将宣布的复选框语义标签。',18,0);
INSERT INTO widget_fields VALUES(406,17,'value','bool?','Whether this checkbox is checked.','此复选框是否被选中。',0,0);
INSERT INTO widget_fields VALUES(407,17,'onChanged','ValueChanged<bool?>?','Called when the value of the checkbox should change.','复选框的值应该改变时调用。',1,0);
INSERT INTO widget_fields VALUES(408,17,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',2,0);
INSERT INTO widget_fields VALUES(409,17,'activeColor','Color?','The color to use when this checkbox is checked.','此复选框被选中时使用的颜色。',3,0);
INSERT INTO widget_fields VALUES(410,17,'fillColor','MaterialStateProperty<Color?>?','The color that fills the checkbox.','填充复选框的颜色。',4,0);
INSERT INTO widget_fields VALUES(411,17,'checkColor','Color?','The color to use for the check icon when this checkbox is checked.','此复选框被选中时用于勾选图标的颜色。',5,0);
INSERT INTO widget_fields VALUES(412,17,'hoverColor','Color?','{@macro flutter.material.checkbox.hoverColor}','{@macro flutter.material.checkbox.hoverColor}',6,0);
INSERT INTO widget_fields VALUES(413,17,'overlayColor','MaterialStateProperty<Color?>?','The color for the checkbox''s [Material].','复选框 [Material] 的颜色。',7,0);
INSERT INTO widget_fields VALUES(414,17,'splashRadius','double?','{@macro flutter.material.checkbox.splashRadius}','{@macro flutter.material.checkbox.splashRadius}',8,0);
INSERT INTO widget_fields VALUES(415,17,'materialTapTargetSize','MaterialTapTargetSize?','{@macro flutter.material.checkbox.materialTapTargetSize}','{@macro flutter.material.checkbox.materialTapTargetSize}',9,0);
INSERT INTO widget_fields VALUES(416,17,'visualDensity','VisualDensity?','Defines how compact the list tile''s layout will be.','定义列表项布局的紧凑程度。',10,0);
INSERT INTO widget_fields VALUES(417,17,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',11,0);
INSERT INTO widget_fields VALUES(418,17,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',12,1);
INSERT INTO widget_fields VALUES(419,17,'shape','ShapeBorder?','{@macro flutter.material.ListTile.shape}','{@macro flutter.material.ListTile.shape}',13,0);
INSERT INTO widget_fields VALUES(420,17,'side','BorderSide?','{@macro flutter.material.checkbox.side}','{@macro flutter.material.checkbox.side}',14,0);
INSERT INTO widget_fields VALUES(421,17,'isError','bool','{@macro flutter.material.checkbox.isError}','{@macro flutter.material.checkbox.isError}',15,1);
INSERT INTO widget_fields VALUES(422,17,'tileColor','Color?','{@macro flutter.material.ListTile.tileColor}','{@macro flutter.material.ListTile.tileColor}',16,0);
INSERT INTO widget_fields VALUES(423,17,'title','Widget?','The primary content of the list tile.','列表项的主要内容。',17,0);
INSERT INTO widget_fields VALUES(424,17,'subtitle','Widget?','Additional content displayed below the title.','显示在标题下方的附加内容。',18,0);
INSERT INTO widget_fields VALUES(425,17,'secondary','Widget?','A widget to display on the opposite side of the tile from the checkbox.','显示在与复选框相对侧的小部件。',19,0);
INSERT INTO widget_fields VALUES(426,17,'isThreeLine','bool','Whether this list tile is intended to display three lines of text.','此列表项是否旨在显示三行文本。',20,1);
INSERT INTO widget_fields VALUES(427,17,'dense','bool?','Whether this list tile is part of a vertically dense list.','此列表项是否为垂直密集列表的一部分。',21,0);
INSERT INTO widget_fields VALUES(428,17,'selected','bool','Whether to render icons and text in the [activeColor].','是否以 [activeColor] 渲染图标和文本。',22,1);
INSERT INTO widget_fields VALUES(429,17,'controlAffinity','ListTileControlAffinity?','Where to place the control relative to the text.','控件相对于文本的放置位置。',23,0);
INSERT INTO widget_fields VALUES(430,17,'contentPadding','EdgeInsetsGeometry?','Defines insets surrounding the tile''s contents.','定义围绕项目内容的插入。',24,0);
INSERT INTO widget_fields VALUES(431,17,'tristate','bool','If true the checkbox''s [value] can be true, false, or null.','如果为 true，复选框的 [value] 可以是 true、false 或 null。',25,1);
INSERT INTO widget_fields VALUES(432,17,'checkboxShape','OutlinedBorder?','{@macro flutter.material.checkbox.shape}','{@macro flutter.material.checkbox.shape}',26,0);
INSERT INTO widget_fields VALUES(433,17,'selectedTileColor','Color?','If non-null, defines the background color when [CheckboxListTile.selected] is true.','如果非空，定义 [CheckboxListTile.selected] 为 true 时的背景颜色。',27,0);
INSERT INTO widget_fields VALUES(434,17,'onFocusChange','ValueChanged<bool>?','{@macro flutter.material.inkwell.onFocusChange}','{@macro flutter.material.inkwell.onFocusChange}',28,0);
INSERT INTO widget_fields VALUES(435,17,'enableFeedback','bool?','{@macro flutter.material.ListTile.enableFeedback}','{@macro flutter.material.ListTile.enableFeedback}',29,0);
INSERT INTO widget_fields VALUES(436,17,'enabled','bool?','Whether the CheckboxListTile is interactive.','CheckboxListTile 是否可交互。',30,0);
INSERT INTO widget_fields VALUES(437,17,'internalAddSemanticForOnTap','bool','Whether to add button:true to the semantics if onTap is provided. This is a temporary flag to help changing the behavior of ListTile onTap semantics.','如果提供了 onTap，是否向语义添加 button:true。这是一个临时标志，用于帮助更改 ListTile onTap 语义的行为。',31,1);
INSERT INTO widget_fields VALUES(438,17,'checkboxScaleFactor','double','Controls the scaling factor applied to the [Checkbox] within the [CheckboxListTile].','控制应用于 [CheckboxListTile] 内 [Checkbox] 的缩放因子。',32,1);
INSERT INTO widget_fields VALUES(439,17,'checkboxSemanticLabel','String?','{@macro flutter.material.checkbox.semanticLabel}','{@macro flutter.material.checkbox.semanticLabel}',33,0);
INSERT INTO widget_fields VALUES(440,375,'value','bool?','Whether this checkbox is checked.','此复选框是否被选中。',0,0);
INSERT INTO widget_fields VALUES(441,375,'tristate','bool','If true, then the checkbox''s [value] can be true, false, or null.','如果为 true，则复选框的 [value] 可以是 true、false 或 null。',1,1);
INSERT INTO widget_fields VALUES(442,375,'isError','bool','True if this checkbox wants to show an error state.','如果此复选框想要显示错误状态，则为 true。',2,1);
INSERT INTO widget_fields VALUES(443,375,'onChanged','ValueChanged<bool?>?','Called when the value of the checkbox should change.','复选框的值应该改变时调用。',3,0);
INSERT INTO widget_fields VALUES(444,375,'onHover','ValueChanged<bool>?','Called when a pointer enters or exits the button response area.','指针进入或退出按钮响应区域时调用。',4,0);
INSERT INTO widget_fields VALUES(445,375,'onFocusChange','ValueChanged<bool>?','Handler called when the focus changes.','焦点改变时调用的处理程序。',5,0);
INSERT INTO widget_fields VALUES(446,375,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',6,0);
INSERT INTO widget_fields VALUES(447,375,'shortcut','MenuSerializableShortcut?','The optional shortcut that selects this [MenuItemButton].','选择此 [MenuItemButton] 的可选快捷键。',7,0);
INSERT INTO widget_fields VALUES(448,375,'style','ButtonStyle?','Customizes this button''s appearance.','自定义此按钮的外观。',8,0);
INSERT INTO widget_fields VALUES(449,375,'statesController','MaterialStatesController?','{@macro flutter.material.inkwell.statesController}','{@macro flutter.material.inkwell.statesController}',9,0);
INSERT INTO widget_fields VALUES(450,375,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',10,1);
INSERT INTO widget_fields VALUES(451,375,'trailingIcon','Widget?','An optional icon to display after the [child] label.','在 [child] 标签后显示的可选图标。',11,0);
INSERT INTO widget_fields VALUES(452,375,'closeOnActivate','bool','{@macro flutter.material.menu_anchor.closeOnActivate}','{@macro flutter.material.menu_anchor.closeOnActivate}',12,1);
INSERT INTO widget_fields VALUES(453,375,'child','Widget?','The widget displayed in the center of this button.','显示在此按钮中心的小部件。',13,0);
INSERT INTO widget_fields VALUES(454,376,'data','CheckboxThemeData','The properties used for all descendant [Checkbox] widgets.','用于所有后代 [Checkbox] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(455,215,'child','Widget','The widget to show behind the banner.','在横幅后面显示的小部件。',0,1);
INSERT INTO widget_fields VALUES(456,377,'checked','bool','Whether to display a checkmark next to the menu item.','是否在菜单项旁边显示勾选标记。',0,1);
INSERT INTO widget_fields VALUES(457,11,'avatar','Widget?',NULL,NULL,0,0);
INSERT INTO widget_fields VALUES(458,11,'label','Widget',NULL,NULL,1,1);
INSERT INTO widget_fields VALUES(459,11,'labelStyle','TextStyle?',NULL,NULL,2,0);
INSERT INTO widget_fields VALUES(460,11,'labelPadding','EdgeInsetsGeometry?',NULL,NULL,3,0);
INSERT INTO widget_fields VALUES(461,11,'side','BorderSide?',NULL,NULL,4,0);
INSERT INTO widget_fields VALUES(462,11,'shape','OutlinedBorder?',NULL,NULL,5,0);
INSERT INTO widget_fields VALUES(463,11,'clipBehavior','Clip',NULL,NULL,6,1);
INSERT INTO widget_fields VALUES(464,11,'focusNode','FocusNode?',NULL,NULL,7,0);
INSERT INTO widget_fields VALUES(465,11,'autofocus','bool',NULL,NULL,8,1);
INSERT INTO widget_fields VALUES(466,11,'color','WidgetStateProperty<Color?>?',NULL,NULL,9,0);
INSERT INTO widget_fields VALUES(467,11,'backgroundColor','Color?',NULL,NULL,10,0);
INSERT INTO widget_fields VALUES(468,11,'padding','EdgeInsetsGeometry?',NULL,NULL,11,0);
INSERT INTO widget_fields VALUES(469,11,'visualDensity','VisualDensity?',NULL,NULL,12,0);
INSERT INTO widget_fields VALUES(470,11,'deleteIcon','Widget?',NULL,NULL,13,0);
INSERT INTO widget_fields VALUES(471,11,'onDeleted','VoidCallback?',NULL,NULL,14,0);
INSERT INTO widget_fields VALUES(472,11,'deleteIconColor','Color?',NULL,NULL,15,0);
INSERT INTO widget_fields VALUES(473,11,'deleteButtonTooltipMessage','String?',NULL,NULL,16,0);
INSERT INTO widget_fields VALUES(474,11,'materialTapTargetSize','MaterialTapTargetSize?',NULL,NULL,17,0);
INSERT INTO widget_fields VALUES(475,11,'elevation','double?',NULL,NULL,18,0);
INSERT INTO widget_fields VALUES(476,11,'shadowColor','Color?',NULL,NULL,19,0);
INSERT INTO widget_fields VALUES(477,11,'surfaceTintColor','Color?',NULL,NULL,20,0);
INSERT INTO widget_fields VALUES(478,11,'iconTheme','IconThemeData?',NULL,NULL,21,0);
INSERT INTO widget_fields VALUES(479,11,'avatarBoxConstraints','BoxConstraints?',NULL,NULL,22,0);
INSERT INTO widget_fields VALUES(480,11,'deleteIconBoxConstraints','BoxConstraints?',NULL,NULL,23,0);
INSERT INTO widget_fields VALUES(481,11,'chipAnimationStyle','ChipAnimationStyle?',NULL,NULL,24,0);
INSERT INTO widget_fields VALUES(482,11,'mouseCursor','MouseCursor?',NULL,NULL,25,0);
INSERT INTO widget_fields VALUES(483,328,'data','ChipThemeData','Specifies the color, shape, and text style values for descendant chip widgets.','为后代芯片小部件指定颜色、形状和文本样式值。',0,1);
INSERT INTO widget_fields VALUES(484,12,'avatar','Widget?',NULL,NULL,0,0);
INSERT INTO widget_fields VALUES(485,12,'label','Widget',NULL,NULL,1,1);
INSERT INTO widget_fields VALUES(486,12,'labelStyle','TextStyle?',NULL,NULL,2,0);
INSERT INTO widget_fields VALUES(487,12,'labelPadding','EdgeInsetsGeometry?',NULL,NULL,3,0);
INSERT INTO widget_fields VALUES(488,12,'onSelected','ValueChanged<bool>?',NULL,NULL,4,0);
INSERT INTO widget_fields VALUES(489,12,'pressElevation','double?',NULL,NULL,5,0);
INSERT INTO widget_fields VALUES(490,12,'selected','bool',NULL,NULL,6,1);
INSERT INTO widget_fields VALUES(491,12,'disabledColor','Color?',NULL,NULL,7,0);
INSERT INTO widget_fields VALUES(492,12,'selectedColor','Color?',NULL,NULL,8,0);
INSERT INTO widget_fields VALUES(493,12,'tooltip','String?',NULL,NULL,9,0);
INSERT INTO widget_fields VALUES(494,12,'side','BorderSide?',NULL,NULL,10,0);
INSERT INTO widget_fields VALUES(495,12,'shape','OutlinedBorder?',NULL,NULL,11,0);
INSERT INTO widget_fields VALUES(496,12,'clipBehavior','Clip',NULL,NULL,12,1);
INSERT INTO widget_fields VALUES(497,12,'focusNode','FocusNode?',NULL,NULL,13,0);
INSERT INTO widget_fields VALUES(498,12,'autofocus','bool',NULL,NULL,14,1);
INSERT INTO widget_fields VALUES(499,12,'color','MaterialStateProperty<Color?>?',NULL,NULL,15,0);
INSERT INTO widget_fields VALUES(500,12,'backgroundColor','Color?',NULL,NULL,16,0);
INSERT INTO widget_fields VALUES(501,12,'padding','EdgeInsetsGeometry?',NULL,NULL,17,0);
INSERT INTO widget_fields VALUES(502,12,'visualDensity','VisualDensity?',NULL,NULL,18,0);
INSERT INTO widget_fields VALUES(503,12,'materialTapTargetSize','MaterialTapTargetSize?',NULL,NULL,19,0);
INSERT INTO widget_fields VALUES(504,12,'elevation','double?',NULL,NULL,20,0);
INSERT INTO widget_fields VALUES(505,12,'shadowColor','Color?',NULL,NULL,21,0);
INSERT INTO widget_fields VALUES(506,12,'surfaceTintColor','Color?',NULL,NULL,22,0);
INSERT INTO widget_fields VALUES(507,12,'selectedShadowColor','Color?',NULL,NULL,23,0);
INSERT INTO widget_fields VALUES(508,12,'showCheckmark','bool?',NULL,NULL,24,0);
INSERT INTO widget_fields VALUES(509,12,'checkmarkColor','Color?',NULL,NULL,25,0);
INSERT INTO widget_fields VALUES(510,12,'avatarBorder','ShapeBorder',NULL,NULL,26,1);
INSERT INTO widget_fields VALUES(511,12,'iconTheme','IconThemeData?',NULL,NULL,27,0);
INSERT INTO widget_fields VALUES(512,12,'avatarBoxConstraints','BoxConstraints?',NULL,NULL,28,0);
INSERT INTO widget_fields VALUES(513,12,'chipAnimationStyle','ChipAnimationStyle?',NULL,NULL,29,0);
INSERT INTO widget_fields VALUES(514,12,'mouseCursor','MouseCursor?',NULL,NULL,30,0);
INSERT INTO widget_fields VALUES(515,9,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(516,9,'backgroundColor','Color?','The color with which to fill the circle. Changing the background color will cause the avatar to animate to the new color.','填充圆形的颜色。更改背景颜色将导致头像动画到新颜色。',1,0);
INSERT INTO widget_fields VALUES(517,9,'foregroundColor','Color?','The default text color for text in the circle.','圆形中文本的默认文本颜色。',2,0);
INSERT INTO widget_fields VALUES(518,9,'backgroundImage','ImageProvider?','The background image of the circle. Changing the background image will cause the avatar to animate to the new image.','圆形的背景图像。更改背景图像将导致头像动画到新图像。',3,0);
INSERT INTO widget_fields VALUES(519,9,'foregroundImage','ImageProvider?','The foreground image of the circle.','圆形的前景图像。',4,0);
INSERT INTO widget_fields VALUES(520,9,'onBackgroundImageError','ImageErrorListener?','An optional error callback for errors emitted when loading [backgroundImage].','加载 [backgroundImage] 时发出错误的可选错误回调。',5,0);
INSERT INTO widget_fields VALUES(521,9,'onForegroundImageError','ImageErrorListener?','An optional error callback for errors emitted when loading [foregroundImage].','加载 [foregroundImage] 时发出错误的可选错误回调。',6,0);
INSERT INTO widget_fields VALUES(522,9,'radius','double?','The size of the avatar, expressed as the radius (half the diameter).','头像的大小，表示为半径（直径的一半）。',7,0);
INSERT INTO widget_fields VALUES(523,9,'minRadius','double?','The minimum size of the avatar, expressed as the radius (half the diameter).','头像的最小大小，表示为半径（直径的一半）。',8,0);
INSERT INTO widget_fields VALUES(524,9,'maxRadius','double?','The maximum size of the avatar, expressed as the radius (half the diameter).','头像的最大大小，表示为半径（直径的一半）。',9,0);
INSERT INTO widget_fields VALUES(525,46,'strokeWidth','double?','The width of the line used to draw the circle.','用于绘制圆形的线条宽度。',0,0);
INSERT INTO widget_fields VALUES(526,46,'strokeAlign','double?','The relative position of the stroke on a [CircularProgressIndicator].','[CircularProgressIndicator] 上笔画的相对位置。',1,0);
INSERT INTO widget_fields VALUES(527,46,'strokeCap','StrokeCap?','The progress indicator''s line ending.','进度指示器的线条结尾。',2,0);
INSERT INTO widget_fields VALUES(528,46,'constraints','BoxConstraints?','Defines minimum and maximum sizes for a [CircularProgressIndicator].','定义 [CircularProgressIndicator] 的最小和最大大小。',3,0);
INSERT INTO widget_fields VALUES(529,46,'trackGap','double?','The gap between the active indicator and the background track.','活动指示器和背景轨道之间的间隙。',4,0);
INSERT INTO widget_fields VALUES(530,46,'year2023','bool?','When true, the [CircularProgressIndicator] will use the 2023 Material Design 3 appearance.','当为 true 时，[CircularProgressIndicator] 将使用 2023 Material Design 3 外观。',5,0);
INSERT INTO widget_fields VALUES(531,46,'padding','EdgeInsetsGeometry?','The padding around the indicator track.','指示器轨道周围的内边距。',6,0);
INSERT INTO widget_fields VALUES(532,66,'clipper','CustomClipper<Rect>?','If non-null, determines which clip to use.','如果非空，确定使用哪个裁剪。',0,0);
INSERT INTO widget_fields VALUES(533,66,'clipBehavior','Clip','{@macro flutter.rendering.ClipRectLayer.clipBehavior}','{@macro flutter.rendering.ClipRectLayer.clipBehavior}',1,1);
INSERT INTO widget_fields VALUES(534,69,'clipper','CustomClipper<Path>?','If non-null, determines which clip to use.','如果非空，确定使用哪个裁剪。',0,0);
INSERT INTO widget_fields VALUES(535,69,'clipBehavior','Clip','{@macro flutter.rendering.ClipRectLayer.clipBehavior}','{@macro flutter.rendering.ClipRectLayer.clipBehavior}',1,1);
INSERT INTO widget_fields VALUES(536,67,'clipper','CustomClipper<Rect>?','If non-null, determines which clip to use.','如果非空，确定使用哪个裁剪。',0,0);
INSERT INTO widget_fields VALUES(537,67,'clipBehavior','Clip','{@macro flutter.rendering.ClipRectLayer.clipBehavior}','{@macro flutter.rendering.ClipRectLayer.clipBehavior}',1,1);
INSERT INTO widget_fields VALUES(538,68,'borderRadius','BorderRadiusGeometry','The border radius of the rounded corners.','圆角的边框半径。',0,1);
INSERT INTO widget_fields VALUES(539,68,'clipper','CustomClipper<RRect>?','If non-null, determines which clip to use.','如果非空，确定使用哪个裁剪。',1,0);
INSERT INTO widget_fields VALUES(540,68,'clipBehavior','Clip','{@macro flutter.rendering.ClipRectLayer.clipBehavior}','{@macro flutter.rendering.ClipRectLayer.clipBehavior}',2,1);
INSERT INTO widget_fields VALUES(541,378,'borderRadius','BorderRadiusGeometry','The border radius of the rounded corners.','圆角的边框半径。',0,1);
INSERT INTO widget_fields VALUES(542,378,'clipper','CustomClipper<RSuperellipse>?','If non-null, determines which clip to use.','如果非空，确定使用哪个裁剪。',1,0);
INSERT INTO widget_fields VALUES(543,378,'clipBehavior','Clip','{@macro flutter.rendering.ClipRectLayer.clipBehavior}','{@macro flutter.rendering.ClipRectLayer.clipBehavior}',2,1);
INSERT INTO widget_fields VALUES(544,267,'color','Color','The color to paint the background area with.','用于绘制背景区域的颜色。',0,1);
INSERT INTO widget_fields VALUES(545,88,'colorFilter','ColorFilter','The color filter to apply to the child of this widget.','应用于此小部件子项的颜色滤镜。',0,1);
INSERT INTO widget_fields VALUES(546,265,'link','LayerLink','The link object that connects this [CompositedTransformFollower] with a [CompositedTransformTarget].','连接此 [CompositedTransformFollower] 与 [CompositedTransformTarget] 的链接对象。',0,1);
INSERT INTO widget_fields VALUES(547,265,'showWhenUnlinked','bool','Whether to show the widget''s contents when there is no corresponding [CompositedTransformTarget] with the same [link].','当没有具有相同 [link] 的对应 [CompositedTransformTarget] 时，是否显示小部件的内容。',1,1);
INSERT INTO widget_fields VALUES(548,265,'targetAnchor','Alignment','The anchor point on the linked [CompositedTransformTarget] that [followerAnchor] will line up with.','链接的 [CompositedTransformTarget] 上的锚点，[followerAnchor] 将与之对齐。',2,1);
INSERT INTO widget_fields VALUES(549,265,'followerAnchor','Alignment','The anchor point on this widget that will line up with [targetAnchor] on the linked [CompositedTransformTarget].','此小部件上的锚点，将与链接的 [CompositedTransformTarget] 上的 [targetAnchor] 对齐。',3,1);
INSERT INTO widget_fields VALUES(550,265,'offset','Offset','The additional offset to apply to the [targetAnchor] of the linked [CompositedTransformTarget] to obtain this widget''s [followerAnchor] position.','应用于链接的 [CompositedTransformTarget] 的 [targetAnchor] 以获得此小部件的 [followerAnchor] 位置的附加偏移量。',4,1);
INSERT INTO widget_fields VALUES(551,266,'link','LayerLink','The link object that connects this [CompositedTransformTarget] with one or more [CompositedTransformFollower]s.','连接此 [CompositedTransformTarget] 与一个或多个 [CompositedTransformFollower] 的链接对象。',0,1);
INSERT INTO widget_fields VALUES(552,80,'constraints','BoxConstraints','The additional constraints to impose on the child.','对子项施加的额外约束。',0,1);
INSERT INTO widget_fields VALUES(553,379,'builder','Widget Function(BuildContext context, ConstraintType constraints)',NULL,NULL,0,1);
INSERT INTO widget_fields VALUES(554,380,'textDirection','TextDirection?','The text direction to use when interpreting the [alignment] if it is an [AlignmentDirectional].','如果 [alignment] 是 [AlignmentDirectional]，则在解释 [alignment] 时使用的文本方向。',0,0);
INSERT INTO widget_fields VALUES(555,380,'alignment','AlignmentGeometry','The alignment to use when laying out the child, if it has a different size than this widget.','如果子项的大小与此小部件不同，则在布局子项时使用的对齐方式。',1,1);
INSERT INTO widget_fields VALUES(556,380,'constraintsTransform','BoxConstraintsTransform','{@template flutter.widgets.constraintsTransform} The function used to transform the incoming [BoxConstraints], to size [child].','{@template flutter.widgets.constraintsTransform} 用于变换传入 [BoxConstraints] 以调整 [child] 大小的函数。',2,1);
INSERT INTO widget_fields VALUES(557,380,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',3,1);
INSERT INTO widget_fields VALUES(558,1,'child','Widget?','The [child] contained by the container.','容器包含的 [child]。',0,0);
INSERT INTO widget_fields VALUES(559,1,'alignment','AlignmentGeometry?','Align the [child] within the container.','在容器内对齐 [child]。',1,0);
INSERT INTO widget_fields VALUES(560,1,'padding','EdgeInsetsGeometry?','Empty space to inscribe inside the [decoration]. The [child], if any, is placed inside this padding.','在 [decoration] 内部刻写的空白空间。[child]（如果有）放置在此内边距内。',2,0);
INSERT INTO widget_fields VALUES(561,1,'color','Color?','The color to paint behind the [child].','在 [child] 后面绘制的颜色。',3,0);
INSERT INTO widget_fields VALUES(562,1,'decoration','Decoration?','The decoration to paint behind the [child].','在 [child] 后面绘制的装饰。',4,0);
INSERT INTO widget_fields VALUES(563,1,'foregroundDecoration','Decoration?','The decoration to paint in front of the [child].','在 [child] 前面绘制的装饰。',5,0);
INSERT INTO widget_fields VALUES(564,1,'constraints','BoxConstraints?','Additional constraints to apply to the child.','应用于子项的额外约束。',6,0);
INSERT INTO widget_fields VALUES(565,1,'margin','EdgeInsetsGeometry?','Empty space to surround the [decoration] and [child].','围绕 [decoration] 和 [child] 的空白空间。',7,0);
INSERT INTO widget_fields VALUES(566,1,'transform','Matrix4?','The transformation matrix to apply before painting the container.','在绘制容器之前应用的变换矩阵。',8,0);
INSERT INTO widget_fields VALUES(567,1,'transformAlignment','AlignmentGeometry?','The alignment of the origin, relative to the size of the container, if [transform] is specified.','如果指定了 [transform]，相对于容器大小的原点对齐。',9,0);
INSERT INTO widget_fields VALUES(568,1,'clipBehavior','Clip','The clip behavior when [Container.decoration] is not null.','当 [Container.decoration] 不为 null 时的裁剪行为。',10,1);
INSERT INTO widget_fields VALUES(569,131,'title','Widget?','An optional title of the action sheet. When the [message] is non-null, the font of the [title] is bold.','操作表单的可选标题。当 [message] 非空时，[title] 的字体为粗体。',0,0);
INSERT INTO widget_fields VALUES(570,131,'message','Widget?','An optional descriptive message that provides more details about the reason for the alert.','提供有关警报原因的更多详细信息的可选描述性消息。',1,0);
INSERT INTO widget_fields VALUES(571,131,'actions','List<Widget>?','The set of actions that are displayed for the user to select.','为用户选择显示的操作集合。',2,0);
INSERT INTO widget_fields VALUES(572,131,'messageScrollController','ScrollController?','A scroll controller that can be used to control the scrolling of the [message] in the action sheet.','可用于控制操作表单中 [message] 滚动的滚动控制器。',3,0);
INSERT INTO widget_fields VALUES(573,131,'actionScrollController','ScrollController?','A scroll controller that can be used to control the scrolling of the [actions] in the action sheet.','可用于控制操作表单中 [actions] 滚动的滚动控制器。',4,0);
INSERT INTO widget_fields VALUES(574,131,'cancelButton','Widget?','The optional cancel button that is grouped separately from the other actions.','与其他操作分开分组的可选取消按钮。',5,0);
INSERT INTO widget_fields VALUES(575,132,'onPressed','VoidCallback','The callback that is called when the button is selected.','选择按钮时调用的回调。',0,1);
INSERT INTO widget_fields VALUES(576,132,'isDefaultAction','bool','Whether this action is the default choice in the action sheet.','此操作是否是操作表单中的默认选择。',1,1);
INSERT INTO widget_fields VALUES(577,132,'isDestructiveAction','bool','Whether this action might change or delete data.','此操作是否可能更改或删除数据。',2,1);
INSERT INTO widget_fields VALUES(578,132,'mouseCursor','MouseCursor?','The cursor that will be shown when hovering over the button.','悬停在按钮上时将显示的光标。',3,0);
INSERT INTO widget_fields VALUES(579,132,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',4,1);
INSERT INTO widget_fields VALUES(580,48,'color','Color?','Color of the activity indicator.','活动指示器的颜色。',0,0);
INSERT INTO widget_fields VALUES(581,48,'animating','bool','Whether the activity indicator is running its animation.','活动指示器是否正在运行其动画。',1,1);
INSERT INTO widget_fields VALUES(582,48,'radius','double','Radius of the spinner widget.','旋转器小部件的半径。',2,1);
INSERT INTO widget_fields VALUES(583,48,'progress','double','Determines the percentage of spinner ticks that will be shown. Typical usage would display all ticks, however, this allows for more fine-grained control such as during pull-to-refresh when the drag-down action shows one tick at a time as the user continues to drag down.','确定将显示的旋转器刻度的百分比。典型用法会显示所有刻度，但是，这允许更细粒度的控制，例如在下拉刷新期间，当用户继续向下拖动时，拖拽动作一次显示一个刻度。',3,1);
INSERT INTO widget_fields VALUES(584,381,'anchors','TextSelectionToolbarAnchors','{@macro flutter.material.AdaptiveTextSelectionToolbar.anchors}','{@macro flutter.material.AdaptiveTextSelectionToolbar.anchors}',0,1);
INSERT INTO widget_fields VALUES(585,381,'children','List<Widget>?','The children of the toolbar, typically buttons.','工具栏的子项，通常是按钮。',1,0);
INSERT INTO widget_fields VALUES(586,381,'buttonItems','List<ContextMenuButtonItem>?','The [ContextMenuButtonItem]s that will be turned into the correct button widgets for the current platform.','将转换为当前平台正确按钮小部件的 [ContextMenuButtonItem]。',2,0);
INSERT INTO widget_fields VALUES(587,129,'title','Widget?','The (optional) title of the dialog is displayed in a large font at the top of the dialog.','对话框的（可选）标题以大字体显示在对话框顶部。',0,0);
INSERT INTO widget_fields VALUES(588,129,'content','Widget?','The (optional) content of the dialog is displayed in the center of the dialog in a lighter font.','对话框的（可选）内容以较浅的字体显示在对话框中心。',1,0);
INSERT INTO widget_fields VALUES(589,129,'actions','List<Widget>','The (optional) set of actions that are displayed at the bottom of the dialog.','显示在对话框底部的（可选）操作集合。',2,1);
INSERT INTO widget_fields VALUES(590,129,'scrollController','ScrollController?','A scroll controller that can be used to control the scrolling of the [content] in the dialog.','可用于控制对话框中 [content] 滚动的滚动控制器。',3,0);
INSERT INTO widget_fields VALUES(591,129,'actionScrollController','ScrollController?','A scroll controller that can be used to control the scrolling of the actions in the dialog.','可用于控制对话框中操作滚动的滚动控制器。',4,0);
INSERT INTO widget_fields VALUES(592,129,'insetAnimationDuration','Duration','{@macro flutter.material.dialog.insetAnimationDuration}','{@macro flutter.material.dialog.insetAnimationDuration}',5,1);
INSERT INTO widget_fields VALUES(593,129,'insetAnimationCurve','Curve','{@macro flutter.material.dialog.insetAnimationCurve}','{@macro flutter.material.dialog.insetAnimationCurve}',6,1);
INSERT INTO widget_fields VALUES(594,156,'navigatorKey','GlobalKey<NavigatorState>?','{@macro flutter.widgets.widgetsApp.navigatorKey}','{@macro flutter.widgets.widgetsApp.navigatorKey}',0,0);
INSERT INTO widget_fields VALUES(595,156,'home','Widget?','{@macro flutter.widgets.widgetsApp.home}','{@macro flutter.widgets.widgetsApp.home}',1,0);
INSERT INTO widget_fields VALUES(596,156,'theme','CupertinoThemeData?','The top-level [CupertinoTheme] styling.','顶级 [CupertinoTheme] 样式。',2,0);
INSERT INTO widget_fields VALUES(597,156,'routes','Map<String, WidgetBuilder>?','The application''s top-level routing table.','应用程序的顶级路由表。',3,0);
INSERT INTO widget_fields VALUES(598,156,'initialRoute','String?','{@macro flutter.widgets.widgetsApp.initialRoute}','{@macro flutter.widgets.widgetsApp.initialRoute}',4,0);
INSERT INTO widget_fields VALUES(599,156,'onGenerateRoute','RouteFactory?','{@macro flutter.widgets.widgetsApp.onGenerateRoute}','{@macro flutter.widgets.widgetsApp.onGenerateRoute}',5,0);
INSERT INTO widget_fields VALUES(600,156,'onGenerateInitialRoutes','InitialRouteListFactory?','{@macro flutter.widgets.widgetsApp.onGenerateInitialRoutes}','{@macro flutter.widgets.widgetsApp.onGenerateInitialRoutes}',6,0);
INSERT INTO widget_fields VALUES(601,156,'onUnknownRoute','RouteFactory?','{@macro flutter.widgets.widgetsApp.onUnknownRoute}','{@macro flutter.widgets.widgetsApp.onUnknownRoute}',7,0);
INSERT INTO widget_fields VALUES(602,156,'onNavigationNotification','NotificationListenerCallback<NavigationNotification>?','{@macro flutter.widgets.widgetsApp.onNavigationNotification}','{@macro flutter.widgets.widgetsApp.onNavigationNotification}',8,0);
INSERT INTO widget_fields VALUES(603,156,'navigatorObservers','List<NavigatorObserver>?','{@macro flutter.widgets.widgetsApp.navigatorObservers}','{@macro flutter.widgets.widgetsApp.navigatorObservers}',9,0);
INSERT INTO widget_fields VALUES(604,156,'routeInformationProvider','RouteInformationProvider?','{@macro flutter.widgets.widgetsApp.routeInformationProvider}','{@macro flutter.widgets.widgetsApp.routeInformationProvider}',10,0);
INSERT INTO widget_fields VALUES(605,156,'routeInformationParser','RouteInformationParser<Object>?','{@macro flutter.widgets.widgetsApp.routeInformationParser}','{@macro flutter.widgets.widgetsApp.routeInformationParser}',11,0);
INSERT INTO widget_fields VALUES(606,156,'routerDelegate','RouterDelegate<Object>?','{@macro flutter.widgets.widgetsApp.routerDelegate}','{@macro flutter.widgets.widgetsApp.routerDelegate}',12,0);
INSERT INTO widget_fields VALUES(607,156,'backButtonDispatcher','BackButtonDispatcher?','{@macro flutter.widgets.widgetsApp.backButtonDispatcher}','{@macro flutter.widgets.widgetsApp.backButtonDispatcher}',13,0);
INSERT INTO widget_fields VALUES(608,156,'routerConfig','RouterConfig<Object>?','{@macro flutter.widgets.widgetsApp.routerConfig}','{@macro flutter.widgets.widgetsApp.routerConfig}',14,0);
INSERT INTO widget_fields VALUES(609,156,'builder','TransitionBuilder?','{@macro flutter.widgets.widgetsApp.builder}','{@macro flutter.widgets.widgetsApp.builder}',15,0);
INSERT INTO widget_fields VALUES(610,156,'title','String?','{@macro flutter.widgets.widgetsApp.title}','{@macro flutter.widgets.widgetsApp.title}',16,0);
INSERT INTO widget_fields VALUES(611,156,'onGenerateTitle','GenerateAppTitle?','{@macro flutter.widgets.widgetsApp.onGenerateTitle}','{@macro flutter.widgets.widgetsApp.onGenerateTitle}',17,0);
INSERT INTO widget_fields VALUES(612,156,'color','Color?','{@macro flutter.widgets.widgetsApp.color}','{@macro flutter.widgets.widgetsApp.color}',18,0);
INSERT INTO widget_fields VALUES(613,156,'locale','Locale?','{@macro flutter.widgets.widgetsApp.locale}','{@macro flutter.widgets.widgetsApp.locale}',19,0);
INSERT INTO widget_fields VALUES(614,156,'localizationsDelegates','Iterable<LocalizationsDelegate<dynamic>>?','{@macro flutter.widgets.widgetsApp.localizationsDelegates}','{@macro flutter.widgets.widgetsApp.localizationsDelegates}',20,0);
INSERT INTO widget_fields VALUES(615,156,'localeListResolutionCallback','LocaleListResolutionCallback?','{@macro flutter.widgets.widgetsApp.localeListResolutionCallback}','{@macro flutter.widgets.widgetsApp.localeListResolutionCallback}',21,0);
INSERT INTO widget_fields VALUES(616,156,'localeResolutionCallback','LocaleResolutionCallback?','{@macro flutter.widgets.LocaleResolutionCallback}','{@macro flutter.widgets.LocaleResolutionCallback}',22,0);
INSERT INTO widget_fields VALUES(617,156,'supportedLocales','Iterable<Locale>','{@macro flutter.widgets.widgetsApp.supportedLocales}','{@macro flutter.widgets.widgetsApp.supportedLocales}',23,1);
INSERT INTO widget_fields VALUES(618,156,'showPerformanceOverlay','bool','Turns on a performance overlay.','开启性能叠加层。',24,1);
INSERT INTO widget_fields VALUES(619,156,'checkerboardRasterCacheImages','bool','Turns on checkerboarding of raster cache images.','开启光栅缓存图像的棋盘格显示。',25,1);
INSERT INTO widget_fields VALUES(620,156,'checkerboardOffscreenLayers','bool','Turns on checkerboarding of layers rendered to offscreen bitmaps.','开启渲染到离屏位图的图层的棋盘格显示。',26,1);
INSERT INTO widget_fields VALUES(621,156,'showSemanticsDebugger','bool','Turns on an overlay that shows the accessibility information reported by the framework.','开启显示框架报告的辅助功能信息的叠加层。',27,1);
INSERT INTO widget_fields VALUES(622,156,'debugShowCheckedModeBanner','bool','{@macro flutter.widgets.widgetsApp.debugShowCheckedModeBanner}','{@macro flutter.widgets.widgetsApp.debugShowCheckedModeBanner}',28,1);
INSERT INTO widget_fields VALUES(623,156,'shortcuts','Map<ShortcutActivator, Intent>?','{@macro flutter.widgets.widgetsApp.shortcuts} {@tool snippet} This example shows how to add a single shortcut for [LogicalKeyboardKey.select] to the default shortcuts without needing to add your own [Shortcuts] widget.','{@macro flutter.widgets.widgetsApp.shortcuts} {@tool snippet} 此示例显示如何在不需要添加自己的 [Shortcuts] 小部件的情况下，将 [LogicalKeyboardKey.select] 的单个快捷键添加到默认快捷键中。',29,0);
INSERT INTO widget_fields VALUES(624,156,'actions','Map<Type, Action<Intent>>?','{@macro flutter.widgets.widgetsApp.actions} {@tool snippet} This example shows how to add a single action handling an [ActivateAction] to the default actions without needing to add your own [Actions] widget.','{@macro flutter.widgets.widgetsApp.actions} {@tool snippet} 此示例显示如何在不需要添加自己的 [Actions] 小部件的情况下，将处理 [ActivateAction] 的单个操作添加到默认操作中。',30,0);
INSERT INTO widget_fields VALUES(625,156,'restorationScopeId','String?','{@macro flutter.widgets.widgetsApp.restorationScopeId}','{@macro flutter.widgets.widgetsApp.restorationScopeId}',31,0);
INSERT INTO widget_fields VALUES(626,156,'scrollBehavior','ScrollBehavior?','{@macro flutter.material.materialApp.scrollBehavior}','{@macro flutter.material.materialApp.scrollBehavior}',32,0);
INSERT INTO widget_fields VALUES(627,156,'useInheritedMediaQuery','bool','{@macro flutter.widgets.widgetsApp.useInheritedMediaQuery}','{@macro flutter.widgets.widgetsApp.useInheritedMediaQuery}',33,1);
INSERT INTO widget_fields VALUES(628,24,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(629,24,'padding','EdgeInsetsGeometry?','The amount of space to surround the child inside the bounds of the button.','在按钮边界内围绕子项的空间量。',1,0);
INSERT INTO widget_fields VALUES(630,24,'color','Color?','The color of the button''s background.','按钮背景的颜色。',2,0);
INSERT INTO widget_fields VALUES(631,24,'disabledColor','Color','The color of the button''s background when the button is disabled.','按钮禁用时按钮背景的颜色。',3,1);
INSERT INTO widget_fields VALUES(632,24,'onPressed','VoidCallback?','The callback that is called when the button is tapped or otherwise activated.','点击或以其他方式激活按钮时调用的回调。',4,0);
INSERT INTO widget_fields VALUES(633,24,'onLongPress','VoidCallback?','If [onPressed] and [onLongPress] callbacks are null, then the button will be disabled.','如果 [onPressed] 和 [onLongPress] 回调为 null，则按钮将被禁用。',5,0);
INSERT INTO widget_fields VALUES(634,24,'minSize','double?','Minimum size of the button.','按钮的最小大小。',6,0);
INSERT INTO widget_fields VALUES(635,24,'minimumSize','Size?','The minimum size of the button.','按钮的最小大小。',7,0);
INSERT INTO widget_fields VALUES(636,24,'pressedOpacity','double?','The opacity that the button will fade to when it is pressed. The button will have an opacity of 1.0 when it is not pressed.','按钮被按下时将淡化到的不透明度。按钮未被按下时不透明度为 1.0。',8,0);
INSERT INTO widget_fields VALUES(637,24,'borderRadius','BorderRadius?','The radius of the button''s corners when it has a background color.','按钮有背景颜色时按钮角的半径。',9,0);
INSERT INTO widget_fields VALUES(638,24,'sizeStyle','CupertinoButtonSize','The size of the button.','按钮的大小。',10,1);
INSERT INTO widget_fields VALUES(639,24,'alignment','AlignmentGeometry','The alignment of the button''s [child].','按钮 [child] 的对齐方式。',11,1);
INSERT INTO widget_fields VALUES(640,24,'focusColor','Color?','The color to use for the focus highlight for keyboard interactions.','用于键盘交互的焦点高亮的颜色。',12,0);
INSERT INTO widget_fields VALUES(641,24,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',13,0);
INSERT INTO widget_fields VALUES(642,24,'onFocusChange','ValueChanged<bool>?','Handler called when the focus changes.','焦点改变时调用的处理程序。',14,0);
INSERT INTO widget_fields VALUES(643,24,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',15,1);
INSERT INTO widget_fields VALUES(644,24,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',16,0);
INSERT INTO widget_fields VALUES(645,238,'value','bool?','Whether this checkbox is checked.','此复选框是否被选中。',0,0);
INSERT INTO widget_fields VALUES(646,238,'onChanged','ValueChanged<bool?>?','Called when the value of the checkbox should change.','复选框的值应该改变时调用。',1,0);
INSERT INTO widget_fields VALUES(647,238,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',2,0);
INSERT INTO widget_fields VALUES(648,238,'activeColor','Color?','The color to use when this checkbox is checked.','此复选框被选中时使用的颜色。',3,0);
INSERT INTO widget_fields VALUES(649,238,'fillColor','WidgetStateProperty<Color?>?','{@template flutter.cupertino.CupertinoCheckbox.fillColor} The color used to fill this checkbox.','{@template flutter.cupertino.CupertinoCheckbox.fillColor} 用于填充此复选框的颜色。',4,0);
INSERT INTO widget_fields VALUES(650,238,'inactiveColor','Color?','The color used if the checkbox is inactive.','复选框处于非活动状态时使用的颜色。',5,0);
INSERT INTO widget_fields VALUES(651,238,'checkColor','Color?','The color to use for the check icon when this checkbox is checked.','此复选框被选中时用于勾选图标的颜色。',6,0);
INSERT INTO widget_fields VALUES(652,238,'tristate','bool','If true, the checkbox''s [value] can be true, false, or null.','如果为 true，复选框的 [value] 可以是 true、false 或 null。',7,1);
INSERT INTO widget_fields VALUES(653,238,'focusColor','Color?','The color for the checkbox''s border shadow when it has the input focus.','复选框具有输入焦点时其边框阴影的颜色。',8,0);
INSERT INTO widget_fields VALUES(654,238,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',9,0);
INSERT INTO widget_fields VALUES(655,238,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',10,1);
INSERT INTO widget_fields VALUES(656,238,'side','BorderSide?','The color and width of the checkbox''s border.','复选框边框的颜色和宽度。',11,0);
INSERT INTO widget_fields VALUES(657,238,'shape','OutlinedBorder?','The shape of the checkbox.','复选框的形状。',12,0);
INSERT INTO widget_fields VALUES(658,238,'semanticLabel','String?','The semantic label for the checkbox that will be announced by screen readers.','屏幕阅读器将宣布的复选框语义标签。',13,0);
INSERT INTO widget_fields VALUES(659,143,'builder','CupertinoContextMenuBuilder','A function that returns a widget to be used alternatively from [child].','返回用作 [child] 替代的小部件的函数。',0,1);
INSERT INTO widget_fields VALUES(660,143,'child','Widget?','The widget that can be "opened" with the [CupertinoContextMenu].','可以用 [CupertinoContextMenu] \',1,0);
INSERT INTO widget_fields VALUES(661,143,'actions','List<Widget>','The actions that are shown in the menu.','在菜单中显示的操作。',2,1);
INSERT INTO widget_fields VALUES(662,143,'enableHapticFeedback','bool','If true, clicking on the [CupertinoContextMenuAction]s will produce haptic feedback.','如果为 true，点击 [CupertinoContextMenuAction] 将产生触觉反馈。',3,1);
INSERT INTO widget_fields VALUES(663,144,'child','Widget','The widget that will be placed inside the action.','将放置在操作内部的小部件。',0,1);
INSERT INTO widget_fields VALUES(664,144,'isDefaultAction','bool','Indicates whether this action should receive the style of an emphasized, default action.','指示此操作是否应接收强调的默认操作样式。',1,1);
INSERT INTO widget_fields VALUES(665,144,'isDestructiveAction','bool','Indicates whether this action should receive the style of a destructive action.','指示此操作是否应接收破坏性操作的样式。',2,1);
INSERT INTO widget_fields VALUES(666,144,'onPressed','VoidCallback?','Called when the action is pressed.','按下操作时调用。',3,0);
INSERT INTO widget_fields VALUES(667,144,'trailingIcon','IconData?','An optional icon to display to the right of the child.','在子项右侧显示的可选图标。',4,0);
INSERT INTO widget_fields VALUES(668,137,'mode','CupertinoDatePickerMode','The mode of the date picker as one of [CupertinoDatePickerMode]. Defaults to [CupertinoDatePickerMode.dateAndTime]. Value cannot change after initial build.','日期选择器的模式，为 [CupertinoDatePickerMode] 之一。默认为 [CupertinoDatePickerMode.dateAndTime]。值在初始构建后无法更改。',0,1);
INSERT INTO widget_fields VALUES(669,137,'initialDateTime','DateTime','The initial date and/or time of the picker. Defaults to the present date and time. The present must conform to the intervals set in [minimumDate], [maximumDate], [minimumYear], and [maximumYear].','选择器的初始日期和/或时间。默认为当前日期和时间。当前值必须符合 [minimumDate]、[maximumDate]、[minimumYear] 和 [maximumYear] 中设置的间隔。',1,1);
INSERT INTO widget_fields VALUES(670,137,'minimumDate','DateTime?','The minimum selectable date that the picker can settle on.','选择器可以确定的最小可选日期。',2,0);
INSERT INTO widget_fields VALUES(671,137,'maximumDate','DateTime?','The maximum selectable date that the picker can settle on.','选择器可以确定的最大可选日期。',3,0);
INSERT INTO widget_fields VALUES(672,137,'minimumYear','int','Minimum year that the picker can be scrolled to in [CupertinoDatePickerMode.date] mode. Defaults to 1.','在 [CupertinoDatePickerMode.date] 模式下选择器可以滚动到的最小年份。默认为 1。',4,1);
INSERT INTO widget_fields VALUES(673,137,'maximumYear','int?','Maximum year that the picker can be scrolled to in [CupertinoDatePickerMode.date] mode. Null if there''s no limit.','在 [CupertinoDatePickerMode.date] 模式下选择器可以滚动到的最大年份。如果没有限制则为 null。',5,0);
INSERT INTO widget_fields VALUES(674,137,'minuteInterval','int','The granularity of the minutes spinner, if it is shown in the current mode. Must be an integer factor of 60.','如果在当前模式下显示分钟旋转器的粒度。必须是 60 的整数因子。',6,1);
INSERT INTO widget_fields VALUES(675,137,'use24hFormat','bool','Whether to use 24 hour format. Defaults to false.','是否使用 24 小时格式。默认为 false。',7,1);
INSERT INTO widget_fields VALUES(676,137,'dateOrder','DatePickerDateOrder?','Determines the order of the columns inside [CupertinoDatePicker] in [CupertinoDatePickerMode.date] and [CupertinoDatePickerMode.monthYear] mode. When using monthYear mode, both [DatePickerDateOrder.dmy] and [DatePickerDateOrder.mdy] will result in the month|year order. Defaults to the locale''s default date format/order.','确定 [CupertinoDatePicker] 在 [CupertinoDatePickerMode.date] 和 [CupertinoDatePickerMode.monthYear] 模式下内部列的顺序。使用 monthYear 模式时，[DatePickerDateOrder.dmy] 和 [DatePickerDateOrder.mdy] 都将导致月|年顺序。默认为区域设置的默认日期格式/顺序。',8,0);
INSERT INTO widget_fields VALUES(677,137,'onDateTimeChanged','ValueChanged<DateTime>','Callback called when the selected date and/or time changes. If the new selected [DateTime] is not valid, or is not in the [minimumDate] through [maximumDate] range, this callback will not be called.','选定日期和/或时间更改时调用的回调。如果新选择的 [DateTime] 无效，或不在 [minimumDate] 到 [maximumDate] 范围内，则不会调用此回调。',9,1);
INSERT INTO widget_fields VALUES(678,137,'backgroundColor','Color?','Background color of date picker.','日期选择器的背景颜色。',10,0);
INSERT INTO widget_fields VALUES(679,137,'showDayOfWeek','bool','Whether to show the day of week alongside the day in [CupertinoDatePickerMode.date] mode.','在 [CupertinoDatePickerMode.date] 模式下是否在日期旁边显示星期几。',11,1);
INSERT INTO widget_fields VALUES(680,137,'showTimeSeparator','bool','Whether to show the time separator between hour and minute in the time [CupertinoDatePickerMode.time] and datetime [CupertinoDatePickerMode.dateAndTime] picker modes.','在时间 [CupertinoDatePickerMode.time] 和日期时间 [CupertinoDatePickerMode.dateAndTime] 选择器模式下是否显示小时和分钟之间的时间分隔符。',12,1);
INSERT INTO widget_fields VALUES(681,137,'itemExtent','double','{@macro flutter.cupertino.picker.itemExtent}','{@macro flutter.cupertino.picker.itemExtent}',13,1);
INSERT INTO widget_fields VALUES(682,137,'selectionOverlayBuilder','SelectionOverlayBuilder?','A function that returns a widget that is overlaid on the picker to highlight the currently selected entry.','返回覆盖在选择器上以突出显示当前选定条目的小部件的函数。',14,0);
INSERT INTO widget_fields VALUES(683,382,'anchor','Offset','{@macro flutter.material.DesktopTextSelectionToolbar.anchor}','{@macro flutter.material.DesktopTextSelectionToolbar.anchor}',0,1);
INSERT INTO widget_fields VALUES(684,382,'children','List<Widget>','{@macro flutter.material.TextSelectionToolbar.children}','{@macro flutter.material.TextSelectionToolbar.children}',1,1);
INSERT INTO widget_fields VALUES(685,383,'onPressed','VoidCallback?','{@macro flutter.cupertino.CupertinoTextSelectionToolbarButton.onPressed}','{@macro flutter.cupertino.CupertinoTextSelectionToolbarButton.onPressed}',0,0);
INSERT INTO widget_fields VALUES(686,383,'child','Widget?','{@macro flutter.cupertino.CupertinoTextSelectionToolbarButton.child}','{@macro flutter.cupertino.CupertinoTextSelectionToolbarButton.child}',1,0);
INSERT INTO widget_fields VALUES(687,383,'buttonItem','ContextMenuButtonItem?','{@macro flutter.cupertino.CupertinoTextSelectionToolbarButton.onPressed}','{@macro flutter.cupertino.CupertinoTextSelectionToolbarButton.onPressed}',2,0);
INSERT INTO widget_fields VALUES(688,383,'text','String?','{@macro flutter.cupertino.CupertinoTextSelectionToolbarButton.text}','{@macro flutter.cupertino.CupertinoTextSelectionToolbarButton.text}',3,0);
INSERT INTO widget_fields VALUES(689,352,'onPressed','VoidCallback?','The callback that is called when the button is tapped or otherwise activated.','点击或以其他方式激活按钮时调用的回调。',0,0);
INSERT INTO widget_fields VALUES(690,352,'isDefaultAction','bool','Set to true if button is the default choice in the dialog.','如果按钮是对话框中的默认选择，则设置为 true。',1,1);
INSERT INTO widget_fields VALUES(691,352,'isDestructiveAction','bool','Whether this action destroys an object.','此操作是否销毁对象。',2,1);
INSERT INTO widget_fields VALUES(692,352,'textStyle','TextStyle?','[TextStyle] to apply to any text that appears in this button.','应用于此按钮中出现的任何文本的 [TextStyle]。',3,0);
INSERT INTO widget_fields VALUES(693,352,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',4,1);
INSERT INTO widget_fields VALUES(694,384,'prefix','Widget?','A widget that is displayed at the start of the row.','显示在行开始处的小部件。',0,0);
INSERT INTO widget_fields VALUES(695,384,'padding','EdgeInsetsGeometry?','Content padding for the row.','行的内容内边距。',1,0);
INSERT INTO widget_fields VALUES(696,384,'helper','Widget?','A widget that is displayed underneath the [prefix] and [child] widgets.','显示在 [prefix] 和 [child] 小部件下方的小部件。',2,0);
INSERT INTO widget_fields VALUES(697,384,'error','Widget?','A widget that is displayed underneath the [prefix] and [child] widgets.','显示在 [prefix] 和 [child] 小部件下方的小部件。',3,0);
INSERT INTO widget_fields VALUES(698,384,'child','Widget','Child widget.','子小部件。',4,1);
INSERT INTO widget_fields VALUES(699,385,'header','Widget?','Sets the form section header. The section header lies above the [children] rows.','设置表单部分标题。部分标题位于 [children] 行上方。',0,0);
INSERT INTO widget_fields VALUES(700,385,'footer','Widget?','Sets the form section footer. The section footer lies below the [children] rows.','设置表单部分页脚。部分页脚位于 [children] 行下方。',1,0);
INSERT INTO widget_fields VALUES(701,385,'margin','EdgeInsetsGeometry','Margin around the content area of the section encapsulating [children].','围绕包含 [children] 的部分内容区域的边距。',2,1);
INSERT INTO widget_fields VALUES(702,385,'children','List<Widget>','The list of rows in the section.','部分中的行列表。',3,1);
INSERT INTO widget_fields VALUES(703,385,'decoration','BoxDecoration?','Sets the decoration around [children].','设置 [children] 周围的装饰。',4,0);
INSERT INTO widget_fields VALUES(704,385,'backgroundColor','Color','Sets the background color behind the section.','设置部分后面的背景颜色。',5,1);
INSERT INTO widget_fields VALUES(705,385,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',6,1);
INSERT INTO widget_fields VALUES(706,219,'primaryRouteAnimation','Animation<double>','* `primaryRouteAnimation` is a linear route animation from 0.0 to 1.0    when this screen is being pushed.','* `primaryRouteAnimation` 是推送此屏幕时从 0.0 到 1.0 的线性路由动画。',0,1);
INSERT INTO widget_fields VALUES(707,219,'secondaryRouteAnimation','Animation<double>','* `secondaryRouteAnimation` is a linear route animation from 0.0 to 1.0    when another screen is being pushed on top of this one.','* `secondaryRouteAnimation` 是在此屏幕之上推送另一个屏幕时从 0.0 到 1.0 的线性路由动画。',1,1);
INSERT INTO widget_fields VALUES(708,219,'linearTransition','bool','* `linearTransition` is whether to perform the transitions linearly.    Used to precisely track back gesture drags.','* `linearTransition` 是否线性执行过渡。用于精确跟踪返回手势拖动。',2,1);
INSERT INTO widget_fields VALUES(709,219,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',3,1);
INSERT INTO widget_fields VALUES(710,386,'type','CupertinoListSectionType','The type of list section, either base or inset grouped.','列表部分的类型，基础或插入分组。',0,1);
INSERT INTO widget_fields VALUES(711,386,'header','Widget?','Sets the form section header. The section header lies above the [children] rows. Usually a [Text] widget.','设置表单部分标题。部分标题位于 [children] 行上方。通常是 [Text] 小部件。',1,0);
INSERT INTO widget_fields VALUES(712,386,'footer','Widget?','Sets the form section footer. The section footer lies below the [children] rows. Usually a [Text] widget.','设置表单部分页脚。部分页脚位于 [children] 行下方。通常是 [Text] 小部件。',2,0);
INSERT INTO widget_fields VALUES(713,386,'margin','EdgeInsetsGeometry','Margin around the content area of the section encapsulating [children].','围绕包含 [children] 的部分内容区域的边距。',3,1);
INSERT INTO widget_fields VALUES(714,386,'children','List<Widget>?','The list of rows in the section. Usually a list of [CupertinoListTile]s.','部分中的行列表。通常是 [CupertinoListTile] 的列表。',4,0);
INSERT INTO widget_fields VALUES(715,386,'decoration','BoxDecoration?','Sets the decoration around [children].','设置 [children] 周围的装饰。',5,0);
INSERT INTO widget_fields VALUES(716,386,'backgroundColor','Color','Sets the background color behind the section.','设置部分后面的背景颜色。',6,1);
INSERT INTO widget_fields VALUES(717,386,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',7,1);
INSERT INTO widget_fields VALUES(718,386,'dividerMargin','double','The starting offset of a margin between two list tiles.','两个列表项之间边距的起始偏移量。',8,1);
INSERT INTO widget_fields VALUES(719,386,'additionalDividerMargin','double','Additional starting inset of the divider used between rows. This is used when adding a leading icon to children and a divider should start at the text inset instead of the icon.','行之间使用的分隔符的附加起始插入。当向子项添加前导图标且分隔符应从文本插入而不是图标开始时使用。',9,1);
INSERT INTO widget_fields VALUES(720,386,'topMargin','double?','Margin above the list section. Only used in edge-to-edge variant and it matches iOS style by default.','列表部分上方的边距。仅在边到边变体中使用，默认情况下匹配 iOS 样式。',10,0);
INSERT INTO widget_fields VALUES(721,386,'separatorColor','Color?','Sets the color for the dividers between rows, and borders on top and bottom of the rows.','设置行之间分隔符以及行顶部和底部边框的颜色。',11,0);
INSERT INTO widget_fields VALUES(722,387,'title','Widget','A [title] is used to convey the central information. Usually a [Text].','[title] 用于传达中心信息。通常是 [Text]。',0,1);
INSERT INTO widget_fields VALUES(723,387,'subtitle','Widget?','A [subtitle] is used to display additional information. It is located below [title]. Usually a [Text] widget.','[subtitle] 用于显示附加信息。它位于 [title] 下方。通常是 [Text] 小部件。',1,0);
INSERT INTO widget_fields VALUES(724,387,'additionalInfo','Widget?','Similar to [subtitle], an [additionalInfo] is used to display additional information. However, instead of being displayed below [title], it is displayed on the right, before [trailing]. Usually a [Text] widget.','与 [subtitle] 类似，[additionalInfo] 用于显示附加信息。但是，它不是显示在 [title] 下方，而是显示在右侧，在 [trailing] 之前。通常是 [Text] 小部件。',2,0);
INSERT INTO widget_fields VALUES(725,387,'leading','Widget?','A widget displayed at the start of the [CupertinoListTile]. This is typically an `Icon` or an `Image`.','显示在 [CupertinoListTile] 开始处的小部件。这通常是 `Icon` 或 `Image`。',3,0);
INSERT INTO widget_fields VALUES(726,387,'trailing','Widget?','A widget displayed at the end of the [CupertinoListTile]. This is usually a right chevron icon (e.g. `CupertinoListTileChevron`), or an `Icon`.','显示在 [CupertinoListTile] 末尾的小部件。这通常是右箭头图标（例如 `CupertinoListTileChevron`）或 `Icon`。',4,0);
INSERT INTO widget_fields VALUES(727,387,'onTap','FutureOr<void> Function()?','The [onTap] function is called when a user taps on [CupertinoListTile]. If left `null`, the [CupertinoListTile] will not react on taps. If this is a `Future<void> Function()`, then the [CupertinoListTile] remains activated until the returned future is awaited. This is according to iOS behavior. However, if this function is a `void Function()`, then the tile is active only for the duration of invocation.','当用户点击 [CupertinoListTile] 时调用 [onTap] 函数。如果保留为 `null`，[CupertinoListTile] 将不会对点击做出反应。如果这是 `Future<void> Function()`，则 [CupertinoListTile] 保持激活状态，直到返回的 future 被等待。这符合 iOS 行为。但是，如果此函数是 `void Function()`，则项目仅在调用期间处于活动状态。',5,0);
INSERT INTO widget_fields VALUES(728,387,'backgroundColor','Color?','The [backgroundColor] of the tile in normal state. Once the tile is tapped, the background color switches to [backgroundColorActivated]. It is set to match the iOS look by default.','项目在正常状态下的 [backgroundColor]。一旦点击项目，背景颜色切换到 [backgroundColorActivated]。默认设置为匹配 iOS 外观。',6,0);
INSERT INTO widget_fields VALUES(729,387,'backgroundColorActivated','Color?','The [backgroundColorActivated] is the background color of the tile after the tile was tapped. It is set to match the iOS look by default.','[backgroundColorActivated] 是点击项目后项目的背景颜色。默认设置为匹配 iOS 外观。',7,0);
INSERT INTO widget_fields VALUES(730,387,'padding','EdgeInsetsGeometry?','Padding of the content inside [CupertinoListTile].','[CupertinoListTile] 内部内容的内边距。',8,0);
INSERT INTO widget_fields VALUES(731,387,'leadingSize','double','The [leadingSize] is used to constrain the width and height of [leading] widget.','[leadingSize] 用于约束 [leading] 小部件的宽度和高度。',9,1);
INSERT INTO widget_fields VALUES(732,387,'leadingToTitle','double','The horizontal space between [leading] widget and [title].','[leading] 小部件和 [title] 之间的水平空间。',10,1);
INSERT INTO widget_fields VALUES(733,389,'shadows','List<BoxShadow>','A list of shadows cast by the [Magnifier].','[Magnifier] 投射的阴影列表。',0,1);
INSERT INTO widget_fields VALUES(734,389,'clipBehavior','Clip','Whether and how to clip the [shadows] that render inside the loupe.','是否以及如何裁剪在放大镜内渲染的 [shadows]。',1,1);
INSERT INTO widget_fields VALUES(735,389,'borderSide','BorderSide','The border, or "rim", of this magnifier.','此放大镜的边框或\',2,1);
INSERT INTO widget_fields VALUES(736,389,'size','Size','The size of this magnifier.','此放大镜的大小。',3,1);
INSERT INTO widget_fields VALUES(737,389,'borderRadius','BorderRadius','The border radius of this magnifier.','此放大镜的边框半径。',4,1);
INSERT INTO widget_fields VALUES(738,389,'inOutAnimation','Animation<double>?','This [RawMagnifier]''s controller.','此 [RawMagnifier] 的控制器。',5,0);
INSERT INTO widget_fields VALUES(739,389,'additionalFocalPointOffset','Offset','Any additional focal point offset, applied over the regular focal point offset defined in [kMagnifierAboveFocalPoint].','任何附加的焦点偏移量，应用于 [kMagnifierAboveFocalPoint] 中定义的常规焦点偏移量之上。',6,1);
INSERT INTO widget_fields VALUES(740,389,'magnificationScale','double','The magnification scale for the magnifier.','放大镜的放大比例。',7,1);
INSERT INTO widget_fields VALUES(741,62,'largeTitle','Widget?','The navigation bar''s title, when using [CupertinoNavigationBar.large].','使用 [CupertinoNavigationBar.large] 时导航栏的标题。',0,0);
INSERT INTO widget_fields VALUES(742,62,'leading','Widget?','{@template flutter.cupertino.CupertinoNavigationBar.leading} Widget to place at the start of the navigation bar. Normally a back button for a normal page or a cancel button for full page dialogs.','{@template flutter.cupertino.CupertinoNavigationBar.leading} 放置在导航栏开始处的小部件。通常是普通页面的返回按钮或全页对话框的取消按钮。',1,0);
INSERT INTO widget_fields VALUES(743,62,'automaticallyImplyLeading','bool','{@template flutter.cupertino.CupertinoNavigationBar.automaticallyImplyLeading} Controls whether we should try to imply the leading widget if null.','{@template flutter.cupertino.CupertinoNavigationBar.automaticallyImplyLeading} 控制如果为 null，我们是否应该尝试暗示前导小部件。',2,1);
INSERT INTO widget_fields VALUES(744,62,'automaticallyImplyMiddle','bool','Controls whether we should try to imply the middle widget if null.','控制如果为 null，我们是否应该尝试暗示中间小部件。',3,1);
INSERT INTO widget_fields VALUES(745,62,'previousPageTitle','String?','{@template flutter.cupertino.CupertinoNavigationBar.previousPageTitle} Manually specify the previous route''s title when automatically implying the leading back button.','{@template flutter.cupertino.CupertinoNavigationBar.previousPageTitle} 在自动暗示前导返回按钮时手动指定上一个路由的标题。',4,0);
INSERT INTO widget_fields VALUES(746,62,'middle','Widget?','The navigation bar''s default title.','导航栏的默认标题。',5,0);
INSERT INTO widget_fields VALUES(747,62,'trailing','Widget?','{@template flutter.cupertino.CupertinoNavigationBar.trailing} Widget to place at the end of the navigation bar. Normally additional actions taken on the page such as a search or edit function. {@endtemplate}','{@template flutter.cupertino.CupertinoNavigationBar.trailing} 放置在导航栏末尾的小部件。通常是在页面上执行的附加操作，如搜索或编辑功能。{@endtemplate}',6,0);
INSERT INTO widget_fields VALUES(748,62,'backgroundColor','Color?','{@template flutter.cupertino.CupertinoNavigationBar.backgroundColor} The background color of the navigation bar. If it contains transparency, the tab bar will automatically produce a blurring effect to the content behind it. This behavior can be disabled by setting [enableBackgroundFilterBlur] to false.','{@template flutter.cupertino.CupertinoNavigationBar.backgroundColor} 导航栏的背景颜色。如果包含透明度，标签栏将自动对其后面的内容产生模糊效果。可以通过将 [enableBackgroundFilterBlur] 设置为 false 来禁用此行为。',7,0);
INSERT INTO widget_fields VALUES(749,62,'automaticBackgroundVisibility','bool','{@template flutter.cupertino.CupertinoNavigationBar.automaticBackgroundVisibility} Whether the navigation bar appears transparent when no content is scrolled under.','{@template flutter.cupertino.CupertinoNavigationBar.automaticBackgroundVisibility} 当没有内容滚动到下方时，导航栏是否显示为透明。',8,1);
INSERT INTO widget_fields VALUES(750,62,'brightness','Brightness?','{@template flutter.cupertino.CupertinoNavigationBar.brightness} The brightness of the specified [backgroundColor].','{@template flutter.cupertino.CupertinoNavigationBar.brightness} 指定 [backgroundColor] 的亮度。',9,0);
INSERT INTO widget_fields VALUES(751,62,'padding','EdgeInsetsDirectional?','{@template flutter.cupertino.CupertinoNavigationBar.padding} Padding for the contents of the navigation bar.','{@template flutter.cupertino.CupertinoNavigationBar.padding} 导航栏内容的内边距。',10,0);
INSERT INTO widget_fields VALUES(752,62,'border','Border?','{@template flutter.cupertino.CupertinoNavigationBar.border} The border of the navigation bar. By default renders a single pixel bottom border side.','{@template flutter.cupertino.CupertinoNavigationBar.border} 导航栏的边框。默认渲染单像素底部边框。',11,0);
INSERT INTO widget_fields VALUES(753,62,'transitionBetweenRoutes','bool','{@template flutter.cupertino.CupertinoNavigationBar.transitionBetweenRoutes} Whether to transition between navigation bars.','{@template flutter.cupertino.CupertinoNavigationBar.transitionBetweenRoutes} 是否在导航栏之间过渡。',12,1);
INSERT INTO widget_fields VALUES(754,62,'enableBackgroundFilterBlur','bool','{@template flutter.cupertino.CupertinoNavigationBar.enableBackgroundFilterBlur} Whether to have a blur effect when a non-opaque background color is used.','{@template flutter.cupertino.CupertinoNavigationBar.enableBackgroundFilterBlur} 当使用非不透明背景颜色时是否具有模糊效果。',13,1);
INSERT INTO widget_fields VALUES(755,62,'heroTag','Object','{@template flutter.cupertino.CupertinoNavigationBar.heroTag} Tag for the navigation bar''s Hero widget if [transitionBetweenRoutes] is true.','{@template flutter.cupertino.CupertinoNavigationBar.heroTag} 如果 [transitionBetweenRoutes] 为 true，导航栏 Hero 小部件的标签。',14,1);
INSERT INTO widget_fields VALUES(756,62,'bottom','PreferredSizeWidget?','A widget to place at the bottom of the navigation bar.','放置在导航栏底部的小部件。',15,0);
INSERT INTO widget_fields VALUES(757,218,'color','Color?','The [Color] of the back button.','返回按钮的 [Color]。',0,0);
INSERT INTO widget_fields VALUES(758,218,'previousPageTitle','String?','An override for showing the previous route''s title. If null, it will be automatically derived from [CupertinoPageRoute.title] if the current and previous routes are both [CupertinoPageRoute]s.','显示上一个路由标题的覆盖。如果为 null，如果当前和上一个路由都是 [CupertinoPageRoute]，它将自动从 [CupertinoPageRoute.title] 派生。',1,0);
INSERT INTO widget_fields VALUES(759,218,'onPressed','VoidCallback?','An override callback to perform instead of the default behavior which is to pop the [Navigator].','执行的覆盖回调，而不是默认行为，即弹出 [Navigator]。',2,0);
INSERT INTO widget_fields VALUES(760,157,'navigationBar','ObstructingPreferredSizeWidget?','The [navigationBar], typically a [CupertinoNavigationBar], is drawn at the top of the screen.','[navigationBar]，通常是 [CupertinoNavigationBar]，绘制在屏幕顶部。',0,0);
INSERT INTO widget_fields VALUES(761,157,'child','Widget','Widget to show in the main content area.','在主内容区域显示的小部件。',1,1);
INSERT INTO widget_fields VALUES(762,157,'backgroundColor','Color?','The color of the widget that underlies the entire scaffold.','整个脚手架下方小部件的颜色。',2,0);
INSERT INTO widget_fields VALUES(763,157,'resizeToAvoidBottomInset','bool','Whether the [child] should size itself to avoid the window''s bottom inset.','[child] 是否应调整自身大小以避免窗口的底部插入。',3,1);
INSERT INTO widget_fields VALUES(764,390,'color','Color','The background color defined in [CupertinoPageScaffold].','在 [CupertinoPageScaffold] 中定义的背景颜色。',0,1);
INSERT INTO widget_fields VALUES(765,216,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(766,216,'primaryRouteAnimation','Animation<double>','* `primaryRouteAnimation` is a linear route animation from 0.0 to 1.0    when this screen is being pushed.','* `primaryRouteAnimation` 是推送此屏幕时从 0.0 到 1.0 的线性路由动画。',1,1);
INSERT INTO widget_fields VALUES(767,216,'secondaryRouteAnimation','Animation<double>','* `secondaryRouteAnimation` is a linear route animation from 0.0 to 1.0    when another screen is being pushed on top of this one.','* `secondaryRouteAnimation` 是在此屏幕之上推送另一个屏幕时从 0.0 到 1.0 的线性路由动画。',2,1);
INSERT INTO widget_fields VALUES(768,216,'linearTransition','bool','* `linearTransition` is whether to perform the transitions linearly.    Used to precisely track back gesture drags.','* `linearTransition` 是否线性执行过渡。用于精确跟踪返回手势拖动。',3,1);
INSERT INTO widget_fields VALUES(769,139,'diameterRatio','double','Relative ratio between this picker''s height and the simulated cylinder''s diameter.','此选择器高度与模拟圆柱体直径之间的相对比率。',0,1);
INSERT INTO widget_fields VALUES(770,139,'backgroundColor','Color?','Background color behind the children.','子项后面的背景颜色。',1,0);
INSERT INTO widget_fields VALUES(771,139,'offAxisFraction','double','{@macro flutter.rendering.RenderListWheelViewport.offAxisFraction}','{@macro flutter.rendering.RenderListWheelViewport.offAxisFraction}',2,1);
INSERT INTO widget_fields VALUES(772,139,'useMagnifier','bool','{@macro flutter.rendering.RenderListWheelViewport.useMagnifier}','{@macro flutter.rendering.RenderListWheelViewport.useMagnifier}',3,1);
INSERT INTO widget_fields VALUES(773,139,'magnification','double','{@macro flutter.rendering.RenderListWheelViewport.magnification}','{@macro flutter.rendering.RenderListWheelViewport.magnification}',4,1);
INSERT INTO widget_fields VALUES(774,139,'scrollController','FixedExtentScrollController?','A [FixedExtentScrollController] to read and control the current item, and to set the initial item.','用于读取和控制当前项目以及设置初始项目的 [FixedExtentScrollController]。',5,0);
INSERT INTO widget_fields VALUES(775,139,'itemExtent','double','{@template flutter.cupertino.picker.itemExtent} The uniform height of all children.','{@template flutter.cupertino.picker.itemExtent} 所有子项的统一高度。',6,1);
INSERT INTO widget_fields VALUES(776,139,'squeeze','double','{@macro flutter.rendering.RenderListWheelViewport.squeeze}','{@macro flutter.rendering.RenderListWheelViewport.squeeze}',7,1);
INSERT INTO widget_fields VALUES(777,139,'onSelectedItemChanged','ValueChanged<int>?','An option callback when the currently centered item changes.','当前居中项目更改时的可选回调。',8,0);
INSERT INTO widget_fields VALUES(778,139,'childDelegate','ListWheelChildDelegate','A delegate that lazily instantiates children.','延迟实例化子项的委托。',9,1);
INSERT INTO widget_fields VALUES(779,139,'selectionOverlay','Widget?','A widget overlaid on the picker to highlight the currently selected entry.','覆盖在选择器上以突出显示当前选定条目的小部件。',10,0);
INSERT INTO widget_fields VALUES(780,391,'capStartEdge','bool','Whether to use the default use rounded corners and margin on the start side.','是否在开始侧使用默认的圆角和边距。',0,1);
INSERT INTO widget_fields VALUES(781,391,'capEndEdge','bool','Whether to use the default use rounded corners and margin on the end side.','是否在结束侧使用默认的圆角和边距。',1,1);
INSERT INTO widget_fields VALUES(782,391,'background','Color','The color to fill in the background of the [CupertinoPickerDefaultSelectionOverlay]. It Support for use [CupertinoDynamicColor].','填充 [CupertinoPickerDefaultSelectionOverlay] 背景的颜色。支持使用 [CupertinoDynamicColor]。',2,1);
INSERT INTO widget_fields VALUES(783,217,'blurSigma','double','The strength of the gaussian blur applied to the area beneath this surface.','应用于此表面下方区域的高斯模糊强度。',0,1);
INSERT INTO widget_fields VALUES(784,217,'isSurfacePainted','bool','Whether or not to paint a translucent white on top of this surface''s blurred background. [isSurfacePainted] should be true for a typical popup that contains content without any dividers. A popup that requires dividers should set [isSurfacePainted] to false and then paint its own surface area.','是否在此表面的模糊背景之上绘制半透明白色。对于包含没有任何分隔符内容的典型弹出窗口，[isSurfacePainted] 应为 true。需要分隔符的弹出窗口应将 [isSurfacePainted] 设置为 false，然后绘制自己的表面区域。',1,1);
INSERT INTO widget_fields VALUES(785,217,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',2,1);
INSERT INTO widget_fields VALUES(786,240,'value','T','The value represented by this radio button.','此单选按钮表示的值。',0,1);
INSERT INTO widget_fields VALUES(787,240,'groupValue','T?','The currently selected value for a group of radio buttons.','一组单选按钮的当前选定值。',1,0);
INSERT INTO widget_fields VALUES(788,240,'onChanged','ValueChanged<T?>?','Called when the user selects this [CupertinoRadio] button.','用户选择此 [CupertinoRadio] 按钮时调用。',2,0);
INSERT INTO widget_fields VALUES(789,240,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',3,0);
INSERT INTO widget_fields VALUES(790,240,'toggleable','bool','Set to true if this radio button is allowed to be returned to an indeterminate state by selecting it again when selected.','如果允许此单选按钮在选中时再次选择以返回到不确定状态，则设置为 true。',4,1);
INSERT INTO widget_fields VALUES(791,240,'useCheckmarkStyle','bool','Controls whether the radio displays in a checkbox style or the default iOS radio style.','控制单选按钮是以复选框样式显示还是以默认 iOS 单选样式显示。',5,1);
INSERT INTO widget_fields VALUES(792,240,'activeColor','Color?','The color to use when this radio button is selected.','选择此单选按钮时使用的颜色。',6,0);
INSERT INTO widget_fields VALUES(793,240,'inactiveColor','Color?','The color to use when this radio button is not selected.','未选择此单选按钮时使用的颜色。',7,0);
INSERT INTO widget_fields VALUES(794,240,'fillColor','Color?','The color that fills the inner circle of the radio button when selected.','选择时填充单选按钮内圆的颜色。',8,0);
INSERT INTO widget_fields VALUES(795,240,'focusColor','Color?','The color for the radio''s border when it has the input focus.','单选按钮具有输入焦点时其边框的颜色。',9,0);
INSERT INTO widget_fields VALUES(796,240,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',10,0);
INSERT INTO widget_fields VALUES(797,240,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',11,1);
INSERT INTO widget_fields VALUES(798,195,'thicknessWhileDragging','double','The thickness of the scrollbar when it''s being dragged by the user.','用户拖动滚动条时滚动条的厚度。',0,1);
INSERT INTO widget_fields VALUES(799,195,'radiusWhileDragging','Radius','The radius of the scrollbar edges when the scrollbar is being dragged by the user.','用户拖动滚动条时滚动条边缘的半径。',1,1);
INSERT INTO widget_fields VALUES(800,392,'controller','TextEditingController?','Controls the text being edited.','控制正在编辑的文本。',0,0);
INSERT INTO widget_fields VALUES(801,392,'onChanged','ValueChanged<String>?','Invoked upon user input.','用户输入时调用。',1,0);
INSERT INTO widget_fields VALUES(802,392,'onSubmitted','ValueChanged<String>?','Invoked upon keyboard submission.','键盘提交时调用。',2,0);
INSERT INTO widget_fields VALUES(803,392,'style','TextStyle?','Allows changing the style of the text.','允许更改文本的样式。',3,0);
INSERT INTO widget_fields VALUES(804,392,'placeholder','String?','A hint placeholder text that appears when the text entry is empty.','文本输入为空时出现的提示占位符文本。',4,0);
INSERT INTO widget_fields VALUES(805,392,'placeholderStyle','TextStyle?','Sets the style of the placeholder of the text field.','设置文本字段占位符的样式。',5,0);
INSERT INTO widget_fields VALUES(806,392,'decoration','BoxDecoration?','Sets the decoration for the text field.','设置文本字段的装饰。',6,0);
INSERT INTO widget_fields VALUES(807,392,'backgroundColor','Color?','Set the [decoration] property''s background color.','设置 [decoration] 属性的背景颜色。',7,0);
INSERT INTO widget_fields VALUES(808,392,'borderRadius','BorderRadius?','Sets the [decoration] property''s border radius.','设置 [decoration] 属性的边框半径。',8,0);
INSERT INTO widget_fields VALUES(809,392,'keyboardType','TextInputType?','The keyboard type for this search field.','此搜索字段的键盘类型。',9,0);
INSERT INTO widget_fields VALUES(810,392,'padding','EdgeInsetsGeometry','Sets the padding insets for the text and placeholder.','设置文本和占位符的内边距插入。',10,1);
INSERT INTO widget_fields VALUES(811,392,'itemColor','Color','Sets the color for the suffix and prefix icons.','设置后缀和前缀图标的颜色。',11,1);
INSERT INTO widget_fields VALUES(812,392,'itemSize','double','Sets the base icon size for the suffix and prefix icons.','设置后缀和前缀图标的基本图标大小。',12,1);
INSERT INTO widget_fields VALUES(813,392,'prefixInsets','EdgeInsetsGeometry','Sets the padding insets for the suffix.','设置后缀的内边距插入。',13,1);
INSERT INTO widget_fields VALUES(814,392,'prefixIcon','Widget','Sets a prefix widget.','设置前缀小部件。',14,1);
INSERT INTO widget_fields VALUES(815,392,'suffixInsets','EdgeInsetsGeometry','Sets the padding insets for the prefix.','设置前缀的内边距插入。',15,1);
INSERT INTO widget_fields VALUES(816,392,'suffixIcon','Icon','Sets the suffix widget''s icon.','设置后缀小部件的图标。',16,1);
INSERT INTO widget_fields VALUES(817,392,'suffixMode','OverlayVisibilityMode','Dictates when the X-Mark (suffix) should be visible.','决定 X 标记（后缀）何时应该可见。',17,1);
INSERT INTO widget_fields VALUES(818,392,'onSuffixTap','VoidCallback?','Sets the X-Mark (suffix) action.','设置 X 标记（后缀）操作。',18,0);
INSERT INTO widget_fields VALUES(819,392,'restorationId','String?','{@macro flutter.material.textfield.restorationId}','{@macro flutter.material.textfield.restorationId}',19,0);
INSERT INTO widget_fields VALUES(820,392,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',20,0);
INSERT INTO widget_fields VALUES(821,392,'autofocus','bool','{@macro flutter.widgets.editableText.autofocus}','{@macro flutter.widgets.editableText.autofocus}',21,1);
INSERT INTO widget_fields VALUES(822,392,'onTap','VoidCallback?','{@macro flutter.material.textfield.onTap}','{@macro flutter.material.textfield.onTap}',22,0);
INSERT INTO widget_fields VALUES(823,392,'autocorrect','bool','{@macro flutter.widgets.editableText.autocorrect}','{@macro flutter.widgets.editableText.autocorrect}',23,1);
INSERT INTO widget_fields VALUES(824,392,'smartQuotesType','SmartQuotesType?','Whether to allow the platform to automatically format quotes.','是否允许平台自动格式化引号。',24,0);
INSERT INTO widget_fields VALUES(825,392,'smartDashesType','SmartDashesType?','Whether to allow the platform to automatically format dashes.','是否允许平台自动格式化破折号。',25,0);
INSERT INTO widget_fields VALUES(826,392,'enableIMEPersonalizedLearning','bool','{@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning}','{@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning}',26,1);
INSERT INTO widget_fields VALUES(827,392,'enabled','bool?','Disables the text field when false.','为 false 时禁用文本字段。',27,0);
INSERT INTO widget_fields VALUES(828,392,'cursorWidth','double','{@macro flutter.widgets.editableText.cursorWidth}','{@macro flutter.widgets.editableText.cursorWidth}',28,1);
INSERT INTO widget_fields VALUES(829,392,'cursorHeight','double?','{@macro flutter.widgets.editableText.cursorHeight}','{@macro flutter.widgets.editableText.cursorHeight}',29,0);
INSERT INTO widget_fields VALUES(830,392,'cursorRadius','Radius','{@macro flutter.widgets.editableText.cursorRadius}','{@macro flutter.widgets.editableText.cursorRadius}',30,1);
INSERT INTO widget_fields VALUES(831,392,'cursorOpacityAnimates','bool','{@macro flutter.widgets.editableText.cursorOpacityAnimates}','{@macro flutter.widgets.editableText.cursorOpacityAnimates}',31,1);
INSERT INTO widget_fields VALUES(832,392,'cursorColor','Color?','The color to use when painting the cursor.','绘制光标时使用的颜色。',32,0);
INSERT INTO widget_fields VALUES(833,262,'children','Map<T, Widget>','The identifying keys and corresponding widget values in the segmented control.','分段控件中的标识键和相应的小部件值。',0,1);
INSERT INTO widget_fields VALUES(834,262,'groupValue','T?','The identifier of the widget that is currently selected.','当前选定的小部件的标识符。',1,0);
INSERT INTO widget_fields VALUES(835,262,'onValueChanged','ValueChanged<T>','The callback that is called when a new option is tapped.','点击新选项时调用的回调。',2,1);
INSERT INTO widget_fields VALUES(836,262,'unselectedColor','Color?','The color used to fill the backgrounds of unselected widgets and as the text color of the selected widget.','用于填充未选中小部件背景和作为选中小部件文本颜色的颜色。',3,0);
INSERT INTO widget_fields VALUES(837,262,'selectedColor','Color?','The color used to fill the background of the selected widget and as the text color of unselected widgets.','用于填充选中小部件背景和作为未选中小部件文本颜色的颜色。',4,0);
INSERT INTO widget_fields VALUES(838,262,'borderColor','Color?','The color used as the border around each widget.','用作每个小部件周围边框的颜色。',5,0);
INSERT INTO widget_fields VALUES(839,262,'pressedColor','Color?','The color used to fill the background of the widget the user is temporarily interacting with through a long press or drag.','用于填充用户通过长按或拖动临时交互的小部件背景的颜色。',6,0);
INSERT INTO widget_fields VALUES(840,262,'disabledColor','Color?','The color used to fill the background of the segment when it is disabled.','段被禁用时用于填充段背景的颜色。',7,0);
INSERT INTO widget_fields VALUES(841,262,'disabledTextColor','Color?','The color used for the text of the segment when it is disabled.','段被禁用时用于段文本的颜色。',8,0);
INSERT INTO widget_fields VALUES(842,262,'padding','EdgeInsetsGeometry?','The CupertinoSegmentedControl will be placed inside this padding.','CupertinoSegmentedControl 将放置在此内边距内。',9,0);
INSERT INTO widget_fields VALUES(843,262,'disabledChildren','Set<T>','The set of identifying keys that correspond to the segments that should be disabled.','对应于应被禁用的段的标识键集合。',10,1);
INSERT INTO widget_fields VALUES(844,393,'primaryRouteAnimation','Animation<double>','`primaryRouteAnimation` is a linear route animation from 0.0 to 1.0 when this screen is being pushed.','`primaryRouteAnimation` 是推送此屏幕时从 0.0 到 1.0 的线性路由动画。',0,1);
INSERT INTO widget_fields VALUES(845,393,'secondaryRouteAnimation','Animation<double>','`secondaryRouteAnimation` is a linear route animation from 0.0 to 1.0 when another screen is being pushed on top of this one.','`secondaryRouteAnimation` 是在此屏幕之上推送另一个屏幕时从 0.0 到 1.0 的线性路由动画。',1,1);
INSERT INTO widget_fields VALUES(846,393,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',2,1);
INSERT INTO widget_fields VALUES(847,393,'linearTransition','bool','Whether to perform the transition linearly.','是否线性执行过渡。',3,1);
INSERT INTO widget_fields VALUES(848,43,'value','double','The currently selected value for this slider.','此滑块当前选定的值。',0,1);
INSERT INTO widget_fields VALUES(849,43,'onChanged','ValueChanged<double>?','Called when the user selects a new value for the slider.','用户为滑块选择新值时调用。',1,0);
INSERT INTO widget_fields VALUES(850,43,'onChangeStart','ValueChanged<double>?','Called when the user starts selecting a new value for the slider.','用户开始为滑块选择新值时调用。',2,0);
INSERT INTO widget_fields VALUES(851,43,'onChangeEnd','ValueChanged<double>?','Called when the user is done selecting a new value for the slider.','用户完成为滑块选择新值时调用。',3,0);
INSERT INTO widget_fields VALUES(852,43,'min','double','The minimum value the user can select.','用户可以选择的最小值。',4,1);
INSERT INTO widget_fields VALUES(853,43,'max','double','The maximum value the user can select.','用户可以选择的最大值。',5,1);
INSERT INTO widget_fields VALUES(854,43,'divisions','int?','The number of discrete divisions.','离散分割的数量。',6,0);
INSERT INTO widget_fields VALUES(855,43,'activeColor','Color?','The color to use for the portion of the slider that has been selected.','用于滑块已选择部分的颜色。',7,0);
INSERT INTO widget_fields VALUES(856,43,'thumbColor','Color','The color to use for the thumb of the slider.','用于滑块拇指的颜色。',8,1);
INSERT INTO widget_fields VALUES(857,256,'children','Map<T, Widget>','The identifying keys and corresponding widget values in the segmented control.','分段控件中的标识键和相应的小部件值。',0,1);
INSERT INTO widget_fields VALUES(858,256,'disabledChildren','Set<T>','The set of identifying keys that correspond to the segments that should be disabled.','对应于应被禁用的段的标识键集合。',1,1);
INSERT INTO widget_fields VALUES(859,256,'groupValue','T?','The identifier of the widget that is currently selected.','当前选定的小部件的标识符。',2,0);
INSERT INTO widget_fields VALUES(860,256,'onValueChanged','ValueChanged<T?>','The callback that is called when a new option is tapped.','点击新选项时调用的回调。',3,1);
INSERT INTO widget_fields VALUES(861,256,'backgroundColor','Color','The color used to paint the rounded rect behind the [children] and the separators.','用于绘制 [children] 和分隔符后面的圆角矩形的颜色。',4,1);
INSERT INTO widget_fields VALUES(862,256,'proportionalWidth','bool','Determine whether segments have proportional widths based on their content.','确定段是否根据其内容具有比例宽度。',5,1);
INSERT INTO widget_fields VALUES(863,256,'thumbColor','Color','The color used to paint the interior of the thumb that appears behind the currently selected item.','用于绘制出现在当前选定项目后面的拇指内部的颜色。',6,1);
INSERT INTO widget_fields VALUES(864,256,'padding','EdgeInsetsGeometry','The amount of space by which to inset the [children].','插入 [children] 的空间量。',7,1);
INSERT INTO widget_fields VALUES(865,302,'largeTitle','Widget?','The navigation bar''s title.','导航栏的标题。',0,0);
INSERT INTO widget_fields VALUES(866,302,'leading','Widget?','{@macro flutter.cupertino.CupertinoNavigationBar.leading}','{@macro flutter.cupertino.CupertinoNavigationBar.leading}',1,0);
INSERT INTO widget_fields VALUES(867,302,'automaticallyImplyLeading','bool','{@macro flutter.cupertino.CupertinoNavigationBar.automaticallyImplyLeading}','{@macro flutter.cupertino.CupertinoNavigationBar.automaticallyImplyLeading}',2,1);
INSERT INTO widget_fields VALUES(868,302,'automaticallyImplyTitle','bool','Controls whether we should try to imply the [largeTitle] widget if null.','控制如果为 null，我们是否应该尝试暗示 [largeTitle] 小部件。',3,1);
INSERT INTO widget_fields VALUES(869,302,'alwaysShowMiddle','bool','Controls whether [middle] widget should always be visible (even in expanded state).','控制 [middle] 小部件是否应始终可见（即使在展开状态下）。',4,1);
INSERT INTO widget_fields VALUES(870,302,'previousPageTitle','String?','{@macro flutter.cupertino.CupertinoNavigationBar.previousPageTitle}','{@macro flutter.cupertino.CupertinoNavigationBar.previousPageTitle}',5,0);
INSERT INTO widget_fields VALUES(871,302,'middle','Widget?','A widget to place in the middle of the static navigation bar instead of the [largeTitle].','放置在静态导航栏中间而不是 [largeTitle] 的小部件。',6,0);
INSERT INTO widget_fields VALUES(872,302,'trailing','Widget?','{@macro flutter.cupertino.CupertinoNavigationBar.trailing}','{@macro flutter.cupertino.CupertinoNavigationBar.trailing}',7,0);
INSERT INTO widget_fields VALUES(873,302,'backgroundColor','Color?','{@macro flutter.cupertino.CupertinoNavigationBar.backgroundColor}','{@macro flutter.cupertino.CupertinoNavigationBar.backgroundColor}',8,0);
INSERT INTO widget_fields VALUES(874,302,'automaticBackgroundVisibility','bool','{@macro flutter.cupertino.CupertinoNavigationBar.automaticBackgroundVisibility}','{@macro flutter.cupertino.CupertinoNavigationBar.automaticBackgroundVisibility}',9,1);
INSERT INTO widget_fields VALUES(875,302,'enableBackgroundFilterBlur','bool','{@macro flutter.cupertino.CupertinoNavigationBar.enableBackgroundFilterBlur}','{@macro flutter.cupertino.CupertinoNavigationBar.enableBackgroundFilterBlur}',10,1);
INSERT INTO widget_fields VALUES(876,302,'brightness','Brightness?','{@macro flutter.cupertino.CupertinoNavigationBar.brightness}','{@macro flutter.cupertino.CupertinoNavigationBar.brightness}',11,0);
INSERT INTO widget_fields VALUES(877,302,'padding','EdgeInsetsDirectional?','{@macro flutter.cupertino.CupertinoNavigationBar.padding}','{@macro flutter.cupertino.CupertinoNavigationBar.padding}',12,0);
INSERT INTO widget_fields VALUES(878,302,'border','Border?','{@macro flutter.cupertino.CupertinoNavigationBar.border}','{@macro flutter.cupertino.CupertinoNavigationBar.border}',13,0);
INSERT INTO widget_fields VALUES(879,302,'transitionBetweenRoutes','bool','{@macro flutter.cupertino.CupertinoNavigationBar.transitionBetweenRoutes}','{@macro flutter.cupertino.CupertinoNavigationBar.transitionBetweenRoutes}',14,1);
INSERT INTO widget_fields VALUES(880,302,'heroTag','Object','{@macro flutter.cupertino.CupertinoNavigationBar.heroTag}','{@macro flutter.cupertino.CupertinoNavigationBar.heroTag}',15,1);
INSERT INTO widget_fields VALUES(881,302,'bottom','PreferredSizeWidget?','A widget to place at the bottom of the large title or static navigation bar if there is no large title.','如果没有大标题，则放置在大标题或静态导航栏底部的小部件。',16,0);
INSERT INTO widget_fields VALUES(882,302,'bottomMode','NavigationBarBottomMode?','Modes that determine how to display the navigation bar''s [bottom], or the search field in a [CupertinoSliverNavigationBar.search].','确定如何显示导航栏的 [bottom] 或 [CupertinoSliverNavigationBar.search] 中的搜索字段的模式。',17,0);
INSERT INTO widget_fields VALUES(883,302,'onSearchableBottomTap','ValueChanged<bool>?','Called when the search field in [CupertinoSliverNavigationBar.search] is tapped, toggling between an active and an inactive search state.','点击 [CupertinoSliverNavigationBar.search] 中的搜索字段时调用，在活动和非活动搜索状态之间切换。',18,0);
INSERT INTO widget_fields VALUES(884,302,'stretch','bool','Whether the nav bar should stretch to fill the over-scroll area.','导航栏是否应拉伸以填充过度滚动区域。',19,1);
INSERT INTO widget_fields VALUES(885,302,'searchField','Widget?','The search field used in [CupertinoSliverNavigationBar.search].','[CupertinoSliverNavigationBar.search] 中使用的搜索字段。',20,0);
INSERT INTO widget_fields VALUES(886,303,'refreshTriggerPullDistance','double','The amount of overscroll the scrollable must be dragged to trigger a reload.','可滚动内容必须被拖动以触发重新加载的过度滚动量。',0,1);
INSERT INTO widget_fields VALUES(887,303,'refreshIndicatorExtent','double','The amount of space the refresh indicator sliver will keep holding while [onRefresh]''s [Future] is still running.','在 [onRefresh] 的 [Future] 仍在运行时，刷新指示器 sliver 将保持占用的空间量。',1,1);
INSERT INTO widget_fields VALUES(888,303,'builder','RefreshControlIndicatorBuilder?','A builder that''s called as this sliver''s size changes, and as the state changes.','随着此 sliver 大小变化和状态变化而调用的构建器。',2,0);
INSERT INTO widget_fields VALUES(889,303,'onRefresh','RefreshCallback?','Callback invoked when pulled by [refreshTriggerPullDistance].','被 [refreshTriggerPullDistance] 拉动时调用的回调。',3,0);
INSERT INTO widget_fields VALUES(890,394,'anchors','TextSelectionToolbarAnchors','The location on which to anchor the menu.','锚定菜单的位置。',0,1);
INSERT INTO widget_fields VALUES(891,394,'buttonItems','List<ContextMenuButtonItem>','The [ContextMenuButtonItem]s that will be turned into the correct button widgets and displayed in the spell check suggestions toolbar.','将转换为正确按钮小部件并显示在拼写检查建议工具栏中的 [ContextMenuButtonItem]。',1,1);
INSERT INTO widget_fields VALUES(892,41,'value','bool','Whether this switch is on or off.','此开关是开启还是关闭。',0,1);
INSERT INTO widget_fields VALUES(893,41,'onChanged','ValueChanged<bool>?','Called when the user toggles the switch on or off.','用户切换开关开启或关闭时调用。',1,0);
INSERT INTO widget_fields VALUES(894,41,'activeTrackColor','Color?','The color to use for the track when the switch is on.','开关开启时用于轨道的颜色。',2,0);
INSERT INTO widget_fields VALUES(895,41,'inactiveTrackColor','Color?','The color to use for the track when the switch is off.','开关关闭时用于轨道的颜色。',3,0);
INSERT INTO widget_fields VALUES(896,41,'thumbColor','Color?','The color to use for the thumb when the switch is on.','开关开启时用于拇指的颜色。',4,0);
INSERT INTO widget_fields VALUES(897,41,'inactiveThumbColor','Color?','The color to use on the thumb when the switch is off.','开关关闭时用于拇指的颜色。',5,0);
INSERT INTO widget_fields VALUES(898,41,'focusColor','Color?','The color to use for the focus highlight for keyboard interactions.','用于键盘交互的焦点高亮的颜色。',6,0);
INSERT INTO widget_fields VALUES(899,41,'onLabelColor','Color?','The color to use for the accessibility label when the switch is on.','开关开启时用于辅助功能标签的颜色。',7,0);
INSERT INTO widget_fields VALUES(900,41,'offLabelColor','Color?','The color to use for the accessibility label when the switch is off.','开关关闭时用于辅助功能标签的颜色。',8,0);
INSERT INTO widget_fields VALUES(901,41,'activeThumbImage','ImageProvider?','{@macro flutter.material.switch.activeThumbImage}','{@macro flutter.material.switch.activeThumbImage}',9,0);
INSERT INTO widget_fields VALUES(902,41,'onActiveThumbImageError','ImageErrorListener?','{@macro flutter.material.switch.onActiveThumbImageError}','{@macro flutter.material.switch.onActiveThumbImageError}',10,0);
INSERT INTO widget_fields VALUES(903,41,'inactiveThumbImage','ImageProvider?','{@macro flutter.material.switch.inactiveThumbImage}','{@macro flutter.material.switch.inactiveThumbImage}',11,0);
INSERT INTO widget_fields VALUES(904,41,'onInactiveThumbImageError','ImageErrorListener?','{@macro flutter.material.switch.onInactiveThumbImageError}','{@macro flutter.material.switch.onInactiveThumbImageError}',12,0);
INSERT INTO widget_fields VALUES(905,41,'trackOutlineColor','WidgetStateProperty<Color?>?','The outline color of this [CupertinoSwitch]''s track.','此 [CupertinoSwitch] 轨道的轮廓颜色。',13,0);
INSERT INTO widget_fields VALUES(906,41,'trackOutlineWidth','WidgetStateProperty<double?>?','The outline width of this [CupertinoSwitch]''s track.','此 [CupertinoSwitch] 轨道的轮廓宽度。',14,0);
INSERT INTO widget_fields VALUES(907,41,'thumbIcon','WidgetStateProperty<Icon?>?','The icon to use on the thumb of this switch.','在此开关拇指上使用的图标。',15,0);
INSERT INTO widget_fields VALUES(908,41,'mouseCursor','WidgetStateProperty<MouseCursor>?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',16,0);
INSERT INTO widget_fields VALUES(909,41,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',17,0);
INSERT INTO widget_fields VALUES(910,41,'onFocusChange','ValueChanged<bool>?','Handler called when the focus changes.','焦点改变时调用的处理程序。',18,0);
INSERT INTO widget_fields VALUES(911,41,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',19,1);
INSERT INTO widget_fields VALUES(912,41,'applyTheme','bool?','{@template flutter.cupertino.CupertinoSwitch.applyTheme} Whether to apply the ambient [CupertinoThemeData].','{@template flutter.cupertino.CupertinoSwitch.applyTheme} 是否应用环境 [CupertinoThemeData]。',20,0);
INSERT INTO widget_fields VALUES(913,41,'dragStartBehavior','DragStartBehavior','{@template flutter.cupertino.CupertinoSwitch.dragStartBehavior} Determines the way that drag start behavior is handled.','{@template flutter.cupertino.CupertinoSwitch.dragStartBehavior} 确定拖动开始行为的处理方式。',21,1);
INSERT INTO widget_fields VALUES(914,63,'items','List<BottomNavigationBarItem>','The interactive items laid out within the bottom navigation bar.','在底部导航栏内布局的交互项目。',0,1);
INSERT INTO widget_fields VALUES(915,63,'onTap','ValueChanged<int>?','The callback that is called when a item is tapped.','点击项目时调用的回调。',1,0);
INSERT INTO widget_fields VALUES(916,63,'currentIndex','int','The index into [items] of the current active item.','当前活动项目在 [items] 中的索引。',2,1);
INSERT INTO widget_fields VALUES(917,63,'backgroundColor','Color?','The background color of the tab bar. If it contains transparency, the tab bar will automatically produce a blurring effect to the content behind it.','标签栏的背景颜色。如果包含透明度，标签栏将自动对其后面的内容产生模糊效果。',3,0);
INSERT INTO widget_fields VALUES(918,63,'activeColor','Color?','The foreground color of the icon and title for the [BottomNavigationBarItem] of the selected tab.','选定标签的 [BottomNavigationBarItem] 图标和标题的前景颜色。',4,0);
INSERT INTO widget_fields VALUES(919,63,'inactiveColor','Color','The foreground color of the icon and title for the [BottomNavigationBarItem]s in the unselected state.','未选中状态下 [BottomNavigationBarItem] 图标和标题的前景颜色。',5,1);
INSERT INTO widget_fields VALUES(920,63,'iconSize','double','The size of all of the [BottomNavigationBarItem] icons.','所有 [BottomNavigationBarItem] 图标的大小。',6,1);
INSERT INTO widget_fields VALUES(921,63,'height','double','The height of the [CupertinoTabBar].','[CupertinoTabBar] 的高度。',7,1);
INSERT INTO widget_fields VALUES(922,63,'border','Border?','The border of the [CupertinoTabBar].','[CupertinoTabBar] 的边框。',8,0);
INSERT INTO widget_fields VALUES(923,158,'tabBar','CupertinoTabBar','The [tabBar] is a [CupertinoTabBar] drawn at the bottom of the screen that lets the user switch between different tabs in the main content area when present.','[tabBar] 是绘制在屏幕底部的 [CupertinoTabBar]，让用户在存在时在主内容区域的不同标签之间切换。',0,1);
INSERT INTO widget_fields VALUES(924,158,'controller','CupertinoTabController?','Controls the currently selected tab index of the [tabBar], as well as the active tab index of the [tabBuilder]. Providing a different [controller] will also update the scaffold''s current active index to the new controller''s index value.','控制 [tabBar] 的当前选定标签索引，以及 [tabBuilder] 的活动标签索引。提供不同的 [controller] 也会将脚手架的当前活动索引更新为新控制器的索引值。',1,0);
INSERT INTO widget_fields VALUES(925,158,'tabBuilder','IndexedWidgetBuilder','An [IndexedWidgetBuilder] that''s called when tabs become active.','标签变为活动时调用的 [IndexedWidgetBuilder]。',2,1);
INSERT INTO widget_fields VALUES(926,158,'backgroundColor','Color?','The color of the widget that underlies the entire scaffold.','整个脚手架下方小部件的颜色。',3,0);
INSERT INTO widget_fields VALUES(927,158,'resizeToAvoidBottomInset','bool','Whether the body should size itself to avoid the window''s bottom inset.','主体是否应调整自身大小以避免窗口的底部插入。',4,1);
INSERT INTO widget_fields VALUES(928,158,'restorationId','String?','Restoration ID to save and restore the state of the [CupertinoTabScaffold].','保存和恢复 [CupertinoTabScaffold] 状态的恢复 ID。',5,0);
INSERT INTO widget_fields VALUES(929,229,'builder','WidgetBuilder?','The widget builder for the default route of the tab view ([Navigator.defaultRouteName], which is `/`).','标签视图默认路由的小部件构建器（[Navigator.defaultRouteName]，即 `/`）。',0,0);
INSERT INTO widget_fields VALUES(930,229,'navigatorKey','GlobalKey<NavigatorState>?','A key to use when building this widget''s [Navigator].','构建此小部件的 [Navigator] 时使用的键。',1,0);
INSERT INTO widget_fields VALUES(931,229,'defaultTitle','String?','The title of the default route.','默认路由的标题。',2,0);
INSERT INTO widget_fields VALUES(932,229,'routes','Map<String, WidgetBuilder>?','This tab view''s routing table.','此标签视图的路由表。',3,0);
INSERT INTO widget_fields VALUES(933,229,'onGenerateRoute','RouteFactory?','The route generator callback used when the tab view is navigated to a named route.','标签视图导航到命名路由时使用的路由生成器回调。',4,0);
INSERT INTO widget_fields VALUES(934,229,'onUnknownRoute','RouteFactory?','Called when [onGenerateRoute] also fails to generate a route.','当 [onGenerateRoute] 也无法生成路由时调用。',5,0);
INSERT INTO widget_fields VALUES(935,229,'navigatorObservers','List<NavigatorObserver>','The list of observers for the [Navigator] created in this tab view.','在此标签视图中创建的 [Navigator] 的观察者列表。',6,1);
INSERT INTO widget_fields VALUES(936,229,'restorationScopeId','String?','Restoration ID to save and restore the state of the [Navigator] built by this [CupertinoTabView].','保存和恢复此 [CupertinoTabView] 构建的 [Navigator] 状态的恢复 ID。',7,0);
INSERT INTO widget_fields VALUES(937,245,'groupId','Object','{@macro flutter.widgets.editableText.groupId}','{@macro flutter.widgets.editableText.groupId}',0,1);
INSERT INTO widget_fields VALUES(938,245,'controller','TextEditingController?','Controls the text being edited.','控制正在编辑的文本。',1,0);
INSERT INTO widget_fields VALUES(939,245,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',2,0);
INSERT INTO widget_fields VALUES(940,245,'decoration','BoxDecoration?','Controls the [BoxDecoration] of the box behind the text input.','控制文本输入后面框的 [BoxDecoration]。',3,0);
INSERT INTO widget_fields VALUES(941,245,'padding','EdgeInsetsGeometry','Padding around the text entry area between the [prefix] and [suffix] or the clear button when [clearButtonMode] is not never.','当 [clearButtonMode] 不为 never 时，[prefix] 和 [suffix] 或清除按钮之间文本输入区域周围的内边距。',4,1);
INSERT INTO widget_fields VALUES(942,245,'placeholder','String?','A lighter colored placeholder hint that appears on the first line of the text field when the text entry is empty.','当文本输入为空时出现在文本字段第一行的较浅颜色占位符提示。',5,0);
INSERT INTO widget_fields VALUES(943,245,'placeholderStyle','TextStyle?','The style to use for the placeholder text.','用于占位符文本的样式。',6,0);
INSERT INTO widget_fields VALUES(944,245,'prefix','Widget?','An optional [Widget] to display before the text.','在文本前显示的可选 [Widget]。',7,0);
INSERT INTO widget_fields VALUES(945,245,'prefixMode','OverlayVisibilityMode','Controls the visibility of the [prefix] widget based on the state of text entry when the [prefix] argument is not null.','当 [prefix] 参数不为 null 时，根据文本输入状态控制 [prefix] 小部件的可见性。',8,1);
INSERT INTO widget_fields VALUES(946,245,'suffix','Widget?','An optional [Widget] to display after the text.','在文本后显示的可选 [Widget]。',9,0);
INSERT INTO widget_fields VALUES(947,245,'suffixMode','OverlayVisibilityMode','Controls the visibility of the [suffix] widget based on the state of text entry when the [suffix] argument is not null.','当 [suffix] 参数不为 null 时，根据文本输入状态控制 [suffix] 小部件的可见性。',10,1);
INSERT INTO widget_fields VALUES(948,245,'crossAxisAlignment','CrossAxisAlignment','Controls the vertical alignment of the [prefix] and the [suffix] widget in relation to content.','控制 [prefix] 和 [suffix] 小部件相对于内容的垂直对齐。',11,1);
INSERT INTO widget_fields VALUES(949,245,'clearButtonMode','OverlayVisibilityMode','Show an iOS-style clear button to clear the current text entry.','显示 iOS 风格的清除按钮以清除当前文本输入。',12,1);
INSERT INTO widget_fields VALUES(950,245,'clearButtonSemanticLabel','String?','The semantic label for the clear button used by screen readers.','屏幕阅读器使用的清除按钮的语义标签。',13,0);
INSERT INTO widget_fields VALUES(951,245,'keyboardType','TextInputType','{@macro flutter.widgets.editableText.keyboardType}','{@macro flutter.widgets.editableText.keyboardType}',14,1);
INSERT INTO widget_fields VALUES(952,245,'textInputAction','TextInputAction?','The type of action button to use for the keyboard.','用于键盘的操作按钮类型。',15,0);
INSERT INTO widget_fields VALUES(953,245,'textCapitalization','TextCapitalization','{@macro flutter.widgets.editableText.textCapitalization}','{@macro flutter.widgets.editableText.textCapitalization}',16,1);
INSERT INTO widget_fields VALUES(954,245,'style','TextStyle?','The style to use for the text being edited.','用于正在编辑的文本的样式。',17,0);
INSERT INTO widget_fields VALUES(955,245,'strutStyle','StrutStyle?','{@macro flutter.widgets.editableText.strutStyle}','{@macro flutter.widgets.editableText.strutStyle}',18,0);
INSERT INTO widget_fields VALUES(956,245,'textAlign','TextAlign','{@macro flutter.widgets.editableText.textAlign}','{@macro flutter.widgets.editableText.textAlign}',19,1);
INSERT INTO widget_fields VALUES(957,245,'toolbarOptions','ToolbarOptions?','Configuration of toolbar options.','工具栏选项的配置。',20,0);
INSERT INTO widget_fields VALUES(958,245,'textAlignVertical','TextAlignVertical?','{@macro flutter.material.InputDecorator.textAlignVertical}','{@macro flutter.material.InputDecorator.textAlignVertical}',21,0);
INSERT INTO widget_fields VALUES(959,245,'textDirection','TextDirection?','{@macro flutter.widgets.editableText.textDirection}','{@macro flutter.widgets.editableText.textDirection}',22,0);
INSERT INTO widget_fields VALUES(960,245,'readOnly','bool','{@macro flutter.widgets.editableText.readOnly}','{@macro flutter.widgets.editableText.readOnly}',23,1);
INSERT INTO widget_fields VALUES(961,245,'showCursor','bool?','{@macro flutter.widgets.editableText.showCursor}','{@macro flutter.widgets.editableText.showCursor}',24,0);
INSERT INTO widget_fields VALUES(962,245,'autofocus','bool','{@macro flutter.widgets.editableText.autofocus}','{@macro flutter.widgets.editableText.autofocus}',25,1);
INSERT INTO widget_fields VALUES(963,245,'obscuringCharacter','String','{@macro flutter.widgets.editableText.obscuringCharacter}','{@macro flutter.widgets.editableText.obscuringCharacter}',26,1);
INSERT INTO widget_fields VALUES(964,245,'obscureText','bool','{@macro flutter.widgets.editableText.obscureText}','{@macro flutter.widgets.editableText.obscureText}',27,1);
INSERT INTO widget_fields VALUES(965,245,'autocorrect','bool','{@macro flutter.widgets.editableText.autocorrect}','{@macro flutter.widgets.editableText.autocorrect}',28,1);
INSERT INTO widget_fields VALUES(966,245,'smartDashesType','SmartDashesType','{@macro flutter.services.TextInputConfiguration.smartDashesType}','{@macro flutter.services.TextInputConfiguration.smartDashesType}',29,1);
INSERT INTO widget_fields VALUES(967,245,'smartQuotesType','SmartQuotesType','{@macro flutter.services.TextInputConfiguration.smartQuotesType}','{@macro flutter.services.TextInputConfiguration.smartQuotesType}',30,1);
INSERT INTO widget_fields VALUES(968,245,'enableSuggestions','bool','{@macro flutter.services.TextInputConfiguration.enableSuggestions}','{@macro flutter.services.TextInputConfiguration.enableSuggestions}',31,1);
INSERT INTO widget_fields VALUES(969,245,'maxLines','int?','{@macro flutter.widgets.editableText.maxLines}  * [expands], which determines whether the field should fill the height of    its parent.','{@macro flutter.widgets.editableText.maxLines} * [expands]，确定字段是否应填充其父级的高度。',32,0);
INSERT INTO widget_fields VALUES(970,245,'minLines','int?','{@macro flutter.widgets.editableText.minLines}  * [expands], which determines whether the field should fill the height of    its parent.','{@macro flutter.widgets.editableText.minLines} * [expands]，确定字段是否应填充其父级的高度。',33,0);
INSERT INTO widget_fields VALUES(971,245,'expands','bool','{@macro flutter.widgets.editableText.expands}','{@macro flutter.widgets.editableText.expands}',34,1);
INSERT INTO widget_fields VALUES(972,245,'maxLength','int?','The maximum number of characters (Unicode grapheme clusters) to allow in the text field.','文本字段中允许的最大字符数（Unicode 字素簇）。',35,0);
INSERT INTO widget_fields VALUES(973,245,'maxLengthEnforcement','MaxLengthEnforcement?','Determines how the [maxLength] limit should be enforced.','确定如何强制执行 [maxLength] 限制。',36,0);
INSERT INTO widget_fields VALUES(974,245,'onChanged','ValueChanged<String>?','{@macro flutter.widgets.editableText.onChanged}','{@macro flutter.widgets.editableText.onChanged}',37,0);
INSERT INTO widget_fields VALUES(975,245,'onEditingComplete','VoidCallback?','{@macro flutter.widgets.editableText.onEditingComplete}','{@macro flutter.widgets.editableText.onEditingComplete}',38,0);
INSERT INTO widget_fields VALUES(976,245,'onSubmitted','ValueChanged<String>?','{@macro flutter.widgets.editableText.onSubmitted}','{@macro flutter.widgets.editableText.onSubmitted}',39,0);
INSERT INTO widget_fields VALUES(977,245,'onTapOutside','TapRegionCallback?','{@macro flutter.widgets.editableText.onTapOutside}','{@macro flutter.widgets.editableText.onTapOutside}',40,0);
INSERT INTO widget_fields VALUES(978,245,'onTapUpOutside','TapRegionCallback?','{@macro flutter.widgets.editableText.onTapUpOutside}','{@macro flutter.widgets.editableText.onTapUpOutside}',41,0);
INSERT INTO widget_fields VALUES(979,245,'inputFormatters','List<TextInputFormatter>?','{@macro flutter.widgets.editableText.inputFormatters}','{@macro flutter.widgets.editableText.inputFormatters}',42,0);
INSERT INTO widget_fields VALUES(980,245,'enabled','bool','Disables the text field when false.','为 false 时禁用文本字段。',43,1);
INSERT INTO widget_fields VALUES(981,245,'cursorWidth','double','{@macro flutter.widgets.editableText.cursorWidth}','{@macro flutter.widgets.editableText.cursorWidth}',44,1);
INSERT INTO widget_fields VALUES(982,245,'cursorHeight','double?','{@macro flutter.widgets.editableText.cursorHeight}','{@macro flutter.widgets.editableText.cursorHeight}',45,0);
INSERT INTO widget_fields VALUES(983,245,'cursorRadius','Radius','{@macro flutter.widgets.editableText.cursorRadius}','{@macro flutter.widgets.editableText.cursorRadius}',46,1);
INSERT INTO widget_fields VALUES(984,245,'cursorOpacityAnimates','bool','{@macro flutter.widgets.editableText.cursorOpacityAnimates}','{@macro flutter.widgets.editableText.cursorOpacityAnimates}',47,1);
INSERT INTO widget_fields VALUES(985,245,'cursorColor','Color?','The color to use when painting the cursor.','绘制光标时使用的颜色。',48,0);
INSERT INTO widget_fields VALUES(986,245,'selectionHeightStyle','ui.BoxHeightStyle','Controls how tall the selection highlight boxes are computed to be.','控制选择高亮框的计算高度。',49,1);
INSERT INTO widget_fields VALUES(987,245,'selectionWidthStyle','ui.BoxWidthStyle','Controls how wide the selection highlight boxes are computed to be.','控制选择高亮框的计算宽度。',50,1);
INSERT INTO widget_fields VALUES(988,245,'keyboardAppearance','Brightness?','The appearance of the keyboard.','键盘的外观。',51,0);
INSERT INTO widget_fields VALUES(989,245,'scrollPadding','EdgeInsets','{@macro flutter.widgets.editableText.scrollPadding}','{@macro flutter.widgets.editableText.scrollPadding}',52,1);
INSERT INTO widget_fields VALUES(990,245,'enableInteractiveSelection','bool','{@macro flutter.widgets.editableText.enableInteractiveSelection}','{@macro flutter.widgets.editableText.enableInteractiveSelection}',53,1);
INSERT INTO widget_fields VALUES(991,245,'selectionControls','TextSelectionControls?','{@macro flutter.widgets.editableText.selectionControls}','{@macro flutter.widgets.editableText.selectionControls}',54,0);
INSERT INTO widget_fields VALUES(992,245,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',55,1);
INSERT INTO widget_fields VALUES(993,245,'scrollController','ScrollController?','{@macro flutter.widgets.editableText.scrollController}','{@macro flutter.widgets.editableText.scrollController}',56,0);
INSERT INTO widget_fields VALUES(994,245,'scrollPhysics','ScrollPhysics?','{@macro flutter.widgets.editableText.scrollPhysics}','{@macro flutter.widgets.editableText.scrollPhysics}',57,0);
INSERT INTO widget_fields VALUES(995,245,'onTap','GestureTapCallback?','{@macro flutter.material.textfield.onTap}','{@macro flutter.material.textfield.onTap}',58,0);
INSERT INTO widget_fields VALUES(996,245,'autofillHints','Iterable<String>?','{@macro flutter.widgets.editableText.autofillHints} {@macro flutter.services.AutofillConfiguration.autofillHints}','{@macro flutter.widgets.editableText.autofillHints} {@macro flutter.services.AutofillConfiguration.autofillHints}',59,0);
INSERT INTO widget_fields VALUES(997,245,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',60,1);
INSERT INTO widget_fields VALUES(998,245,'restorationId','String?','{@macro flutter.material.textfield.restorationId}','{@macro flutter.material.textfield.restorationId}',61,0);
INSERT INTO widget_fields VALUES(999,245,'scribbleEnabled','bool','{@macro flutter.widgets.editableText.scribbleEnabled}','{@macro flutter.widgets.editableText.scribbleEnabled}',62,1);
INSERT INTO widget_fields VALUES(1000,245,'stylusHandwritingEnabled','bool','{@macro flutter.widgets.editableText.stylusHandwritingEnabled}','{@macro flutter.widgets.editableText.stylusHandwritingEnabled}',63,1);
INSERT INTO widget_fields VALUES(1001,245,'enableIMEPersonalizedLearning','bool','{@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning}','{@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning}',64,1);
INSERT INTO widget_fields VALUES(1002,245,'contentInsertionConfiguration','ContentInsertionConfiguration?','{@macro flutter.widgets.editableText.contentInsertionConfiguration}','{@macro flutter.widgets.editableText.contentInsertionConfiguration}',65,0);
INSERT INTO widget_fields VALUES(1003,245,'contextMenuBuilder','EditableTextContextMenuBuilder?','{@macro flutter.widgets.EditableText.contextMenuBuilder}','{@macro flutter.widgets.EditableText.contextMenuBuilder}',66,0);
INSERT INTO widget_fields VALUES(1004,245,'magnifierConfiguration','TextMagnifierConfiguration?','Configuration for the text field magnifier.','文本字段放大镜的配置。',67,0);
INSERT INTO widget_fields VALUES(1005,245,'spellCheckConfiguration','SpellCheckConfiguration?','{@macro flutter.widgets.EditableText.spellCheckConfiguration}','{@macro flutter.widgets.EditableText.spellCheckConfiguration}',68,0);
INSERT INTO widget_fields VALUES(1006,245,'undoController','UndoHistoryController?','{@macro flutter.widgets.undoHistory.controller}','{@macro flutter.widgets.undoHistory.controller}',69,0);
INSERT INTO widget_fields VALUES(1007,395,'prefix','Widget?','A widget that is displayed at the start of the row.','显示在行开始处的小部件。',0,0);
INSERT INTO widget_fields VALUES(1008,395,'padding','EdgeInsetsGeometry?','Content padding for the row.','行的内容内边距。',1,0);
INSERT INTO widget_fields VALUES(1009,395,'controller','TextEditingController?','Controls the text being edited.','控制正在编辑的文本。',2,0);
INSERT INTO widget_fields VALUES(1010,395,'onChanged','ValueChanged<String>?','{@macro flutter.material.TextFormField.onChanged}','{@macro flutter.material.TextFormField.onChanged}',3,0);
INSERT INTO widget_fields VALUES(1011,396,'animationCurve','Curve','The curve used for the in / out animations.','用于进入/退出动画的曲线。',0,1);
INSERT INTO widget_fields VALUES(1012,396,'controller','MagnifierController','This magnifier''s controller.','此放大镜的控制器。',1,1);
INSERT INTO widget_fields VALUES(1013,396,'dragResistance','double','A drag resistance on the downward Y position of the lens.','镜头向下 Y 位置的拖动阻力。',2,1);
INSERT INTO widget_fields VALUES(1014,396,'hideBelowThreshold','double','The difference in Y between the gesture position and the caret center so that the magnifier hides itself.','手势位置和插入符中心之间的 Y 差异，以便放大镜隐藏自己。',3,1);
INSERT INTO widget_fields VALUES(1015,396,'horizontalScreenEdgePadding','double','The padding on either edge of the screen that any part of the magnifier cannot exist past.','屏幕任一边缘的内边距，放大镜的任何部分都不能超出此范围。',4,1);
INSERT INTO widget_fields VALUES(1016,396,'magnifierInfo','ValueNotifier<MagnifierInfo>','[CupertinoTextMagnifier] will determine its own positioning based on the [MagnifierInfo] of this notifier.','[CupertinoTextMagnifier] 将根据此通知器的 [MagnifierInfo] 确定自己的定位。',5,1);
INSERT INTO widget_fields VALUES(1017,299,'anchorAbove','Offset','{@macro flutter.material.TextSelectionToolbar.anchorAbove}','{@macro flutter.material.TextSelectionToolbar.anchorAbove}',0,1);
INSERT INTO widget_fields VALUES(1018,299,'anchorBelow','Offset','{@macro flutter.material.TextSelectionToolbar.anchorBelow}','{@macro flutter.material.TextSelectionToolbar.anchorBelow}',1,1);
INSERT INTO widget_fields VALUES(1019,299,'children','List<Widget>','{@macro flutter.material.TextSelectionToolbar.children}','{@macro flutter.material.TextSelectionToolbar.children}',2,1);
INSERT INTO widget_fields VALUES(1020,299,'toolbarBuilder','CupertinoToolbarBuilder','{@macro flutter.material.TextSelectionToolbar.toolbarBuilder}','{@macro flutter.material.TextSelectionToolbar.toolbarBuilder}',3,1);
INSERT INTO widget_fields VALUES(1021,397,'child','Widget?','{@template flutter.cupertino.CupertinoTextSelectionToolbarButton.child} The child of this button.','{@template flutter.cupertino.CupertinoTextSelectionToolbarButton.child} 此按钮的子项。',0,0);
INSERT INTO widget_fields VALUES(1022,397,'onPressed','VoidCallback?','{@template flutter.cupertino.CupertinoTextSelectionToolbarButton.onPressed} Called when this button is pressed. {@endtemplate}','{@template flutter.cupertino.CupertinoTextSelectionToolbarButton.onPressed} 按下此按钮时调用。{@endtemplate}',1,0);
INSERT INTO widget_fields VALUES(1023,397,'buttonItem','ContextMenuButtonItem?','{@template flutter.cupertino.CupertinoTextSelectionToolbarButton.onPressed} The buttonItem used to generate the button when using [CupertinoTextSelectionToolbarButton.buttonItem]. {@endtemplate}','{@template flutter.cupertino.CupertinoTextSelectionToolbarButton.onPressed} 使用 [CupertinoTextSelectionToolbarButton.buttonItem] 时用于生成按钮的 buttonItem。{@endtemplate}',2,0);
INSERT INTO widget_fields VALUES(1024,397,'text','String?','{@template flutter.cupertino.CupertinoTextSelectionToolbarButton.text} The text used in the button''s label when using [CupertinoTextSelectionToolbarButton.text]. {@endtemplate}','{@template flutter.cupertino.CupertinoTextSelectionToolbarButton.text} 使用 [CupertinoTextSelectionToolbarButton.text] 时按钮标签中使用的文本。{@endtemplate}',3,0);
INSERT INTO widget_fields VALUES(1025,169,'data','CupertinoThemeData','The [CupertinoThemeData] styling for this theme.','此主题的 [CupertinoThemeData] 样式。',0,1);
INSERT INTO widget_fields VALUES(1026,169,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,1);
INSERT INTO widget_fields VALUES(1027,138,'mode','CupertinoTimerPickerMode','The mode of the timer picker.','计时器选择器的模式。',0,1);
INSERT INTO widget_fields VALUES(1028,138,'initialTimerDuration','Duration','The initial duration of the countdown timer.','倒计时器的初始持续时间。',1,1);
INSERT INTO widget_fields VALUES(1029,138,'minuteInterval','int','The granularity of the minute spinner. Must be a positive integer factor of 60.','分钟旋转器的粒度。必须是 60 的正整数因子。',2,1);
INSERT INTO widget_fields VALUES(1030,138,'secondInterval','int','The granularity of the second spinner. Must be a positive integer factor of 60.','秒旋转器的粒度。必须是 60 的正整数因子。',3,1);
INSERT INTO widget_fields VALUES(1031,138,'onTimerDurationChanged','ValueChanged<Duration>','Callback called when the timer duration changes.','计时器持续时间更改时调用的回调。',4,1);
INSERT INTO widget_fields VALUES(1032,138,'alignment','AlignmentGeometry','Defines how the timer picker should be positioned within its parent.','定义计时器选择器在其父级内的定位方式。',5,1);
INSERT INTO widget_fields VALUES(1033,138,'backgroundColor','Color?','Background color of timer picker.','计时器选择器的背景颜色。',6,0);
INSERT INTO widget_fields VALUES(1034,138,'itemExtent','double','{@macro flutter.cupertino.picker.itemExtent}','{@macro flutter.cupertino.picker.itemExtent}',7,1);
INSERT INTO widget_fields VALUES(1035,138,'selectionOverlayBuilder','SelectionOverlayBuilder?','A function that returns a widget that is overlaid on the picker to highlight the currently selected entry.','返回覆盖在选择器上以突出显示当前选定条目的小部件的函数。',8,0);
INSERT INTO widget_fields VALUES(1036,341,'delegate','MultiChildLayoutDelegate','The delegate that controls the layout of the children.','控制子项布局的委托。',0,1);
INSERT INTO widget_fields VALUES(1037,166,'painter','CustomPainter?','The painter that paints before the children.','在子项之前绘制的画家。',0,0);
INSERT INTO widget_fields VALUES(1038,166,'foregroundPainter','CustomPainter?','The painter that paints after the children.','在子项之后绘制的画家。',1,0);
INSERT INTO widget_fields VALUES(1039,166,'size','Size','The size that this [CustomPaint] should aim for, given the layout constraints, if there is no child.','如果没有子项，此 [CustomPaint] 在给定布局约束的情况下应该瞄准的大小。',2,1);
INSERT INTO widget_fields VALUES(1040,166,'isComplex','bool','Whether the painting is complex enough to benefit from caching.','绘制是否足够复杂以从缓存中受益。',3,1);
INSERT INTO widget_fields VALUES(1041,166,'willChange','bool','Whether the raster cache should be told that this painting is likely to change in the next frame.','是否应该告诉光栅缓存此绘制可能在下一帧中更改。',4,1);
INSERT INTO widget_fields VALUES(1042,183,'slivers','List<Widget>','The slivers to place inside the viewport.','放置在视口内的 sliver。',0,1);
INSERT INTO widget_fields VALUES(1043,285,'delegate','SingleChildLayoutDelegate','The delegate that controls the layout of the child.','控制子项布局的委托。',0,1);
INSERT INTO widget_fields VALUES(1044,102,'columns','List<DataColumn>','The configuration and labels for the columns in the table.','表中列的配置和标签。',0,1);
INSERT INTO widget_fields VALUES(1045,102,'sortColumnIndex','int?','The current primary sort key''s column.','当前主要排序键的列。',1,0);
INSERT INTO widget_fields VALUES(1046,102,'sortAscending','bool','Whether the column mentioned in [sortColumnIndex], if any, is sorted in ascending order.','[sortColumnIndex] 中提到的列（如果有）是否按升序排序。',2,1);
INSERT INTO widget_fields VALUES(1047,102,'onSelectAll','ValueSetter<bool?>?','Invoked when the user selects or unselects every row, using the checkbox in the heading row.','当用户使用标题行中的复选框选择或取消选择每一行时调用。',3,0);
INSERT INTO widget_fields VALUES(1048,102,'decoration','Decoration?','{@template flutter.material.dataTable.decoration} The background and border decoration for the table. {@endtemplate}','{@template flutter.material.dataTable.decoration} 表的背景和边框装饰。{@endtemplate}',4,0);
INSERT INTO widget_fields VALUES(1049,102,'dataRowColor','MaterialStateProperty<Color?>?','{@template flutter.material.dataTable.dataRowColor} The background color for the data rows.','{@template flutter.material.dataTable.dataRowColor} 数据行的背景颜色。',5,0);
INSERT INTO widget_fields VALUES(1050,102,'dataRowMinHeight','double?','{@template flutter.material.dataTable.dataRowMinHeight} The minimum height of each row (excluding the row that contains column headings). {@endtemplate}','{@template flutter.material.dataTable.dataRowMinHeight} 每行的最小高度（不包括包含列标题的行）。{@endtemplate}',6,0);
INSERT INTO widget_fields VALUES(1051,102,'dataRowMaxHeight','double?','{@template flutter.material.dataTable.dataRowMaxHeight} The maximum height of each row (excluding the row that contains column headings). {@endtemplate}','{@template flutter.material.dataTable.dataRowMaxHeight} 每行的最大高度（不包括包含列标题的行）。{@endtemplate}',7,0);
INSERT INTO widget_fields VALUES(1052,102,'dataTextStyle','TextStyle?','{@template flutter.material.dataTable.dataTextStyle} The text style for data rows. {@endtemplate}','{@template flutter.material.dataTable.dataTextStyle} 数据行的文本样式。{@endtemplate}',8,0);
INSERT INTO widget_fields VALUES(1053,102,'headingRowColor','MaterialStateProperty<Color?>?','{@template flutter.material.dataTable.headingRowColor} The background color for the heading row.','{@template flutter.material.dataTable.headingRowColor} 标题行的背景颜色。',9,0);
INSERT INTO widget_fields VALUES(1054,102,'headingRowHeight','double?','{@template flutter.material.dataTable.headingRowHeight} The height of the heading row. {@endtemplate}','{@template flutter.material.dataTable.headingRowHeight} 标题行的高度。{@endtemplate}',10,0);
INSERT INTO widget_fields VALUES(1055,102,'headingTextStyle','TextStyle?','{@template flutter.material.dataTable.headingTextStyle} The text style for the heading row. {@endtemplate}','{@template flutter.material.dataTable.headingTextStyle} 标题行的文本样式。{@endtemplate}',11,0);
INSERT INTO widget_fields VALUES(1056,102,'horizontalMargin','double?','{@template flutter.material.dataTable.horizontalMargin} The horizontal margin between the edges of the table and the content in the first and last cells of each row.','{@template flutter.material.dataTable.horizontalMargin} 表边缘与每行第一个和最后一个单元格内容之间的水平边距。',12,0);
INSERT INTO widget_fields VALUES(1057,102,'columnSpacing','double?','{@template flutter.material.dataTable.columnSpacing} The horizontal margin between the contents of each data column. {@endtemplate}','{@template flutter.material.dataTable.columnSpacing} 每个数据列内容之间的水平边距。{@endtemplate}',13,0);
INSERT INTO widget_fields VALUES(1058,102,'showCheckboxColumn','bool','{@template flutter.material.dataTable.showCheckboxColumn} Whether the widget should display checkboxes for selectable rows.','{@template flutter.material.dataTable.showCheckboxColumn} 小部件是否应为可选择的行显示复选框。',14,1);
INSERT INTO widget_fields VALUES(1059,102,'rows','List<DataRow>','The data to show in each row (excluding the row that contains the column headings).','在每行中显示的数据（不包括包含列标题的行）。',15,1);
INSERT INTO widget_fields VALUES(1060,102,'dividerThickness','double?','{@template flutter.material.dataTable.dividerThickness} The width of the divider that appears between [TableRow]s.','{@template flutter.material.dataTable.dividerThickness} 出现在 [TableRow] 之间的分隔符宽度。',16,0);
INSERT INTO widget_fields VALUES(1061,102,'showBottomBorder','bool','Whether a border at the bottom of the table is displayed.','是否显示表底部的边框。',17,1);
INSERT INTO widget_fields VALUES(1062,102,'checkboxHorizontalMargin','double?','{@template flutter.material.dataTable.checkboxHorizontalMargin} Horizontal margin around the checkbox, if it is displayed. {@endtemplate}','{@template flutter.material.dataTable.checkboxHorizontalMargin} 复选框周围的水平边距（如果显示）。{@endtemplate}',18,0);
INSERT INTO widget_fields VALUES(1063,102,'border','TableBorder?','The style to use when painting the boundary and interior divisions of the table.','绘制表的边界和内部分割时使用的样式。',19,0);
INSERT INTO widget_fields VALUES(1064,102,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',20,1);
INSERT INTO widget_fields VALUES(1065,398,'data','DataTableThemeData','The properties used for all descendant [DataTable] widgets.','用于所有后代 [DataTable] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(1066,399,'initialDate','DateTime?','The initially selected [DateTime] that the picker should display.','选择器应显示的初始选定 [DateTime]。',0,0);
INSERT INTO widget_fields VALUES(1067,399,'firstDate','DateTime','The earliest allowable [DateTime] that the user can select.','用户可以选择的最早允许的 [DateTime]。',1,1);
INSERT INTO widget_fields VALUES(1068,399,'lastDate','DateTime','The latest allowable [DateTime] that the user can select.','用户可以选择的最晚允许的 [DateTime]。',2,1);
INSERT INTO widget_fields VALUES(1069,399,'currentDate','DateTime','The [DateTime] representing today. It will be highlighted in the day grid.','表示今天的 [DateTime]。它将在日期网格中突出显示。',3,1);
INSERT INTO widget_fields VALUES(1070,399,'initialEntryMode','DatePickerEntryMode','The initial mode of date entry method for the date picker dialog.','日期选择器对话框的日期输入方法的初始模式。',4,1);
INSERT INTO widget_fields VALUES(1071,399,'selectableDayPredicate','SelectableDayPredicate?','Function to provide full control over which [DateTime] can be selected.','提供对哪个 [DateTime] 可以选择的完全控制的函数。',5,0);
INSERT INTO widget_fields VALUES(1072,399,'cancelText','String?','The text that is displayed on the cancel button.','取消按钮上显示的文本。',6,0);
INSERT INTO widget_fields VALUES(1073,399,'confirmText','String?','The text that is displayed on the confirm button.','确认按钮上显示的文本。',7,0);
INSERT INTO widget_fields VALUES(1074,399,'helpText','String?','The text that is displayed at the top of the header.','在标题顶部显示的文本。',8,0);
INSERT INTO widget_fields VALUES(1075,399,'initialCalendarMode','DatePickerMode','The initial display of the calendar picker.','日历选择器的初始显示。',9,1);
INSERT INTO widget_fields VALUES(1076,399,'errorFormatText','String?','The error text displayed if the entered date is not in the correct format.','如果输入的日期格式不正确，显示的错误文本。',10,0);
INSERT INTO widget_fields VALUES(1077,399,'errorInvalidText','String?','The error text displayed if the date is not valid.','如果日期无效，显示的错误文本。',11,0);
INSERT INTO widget_fields VALUES(1078,399,'fieldHintText','String?','The hint text displayed in the [TextField].','在 [TextField] 中显示的提示文本。',12,0);
INSERT INTO widget_fields VALUES(1079,399,'fieldLabelText','String?','The label text displayed in the [TextField].','在 [TextField] 中显示的标签文本。',13,0);
INSERT INTO widget_fields VALUES(1080,399,'keyboardType','TextInputType?','{@template flutter.material.datePickerDialog} The keyboard type of the [TextField].','{@template flutter.material.datePickerDialog} [TextField] 的键盘类型。',14,0);
INSERT INTO widget_fields VALUES(1081,399,'restorationId','String?','Restoration ID to save and restore the state of the [DatePickerDialog].','保存和恢复 [DatePickerDialog] 状态的恢复 ID。',15,0);
INSERT INTO widget_fields VALUES(1082,399,'onDatePickerModeChange','ValueChanged<DatePickerEntryMode>?','Called when the [DatePickerDialog] is toggled between [DatePickerEntryMode.calendar],[DatePickerEntryMode.input].','当 [DatePickerDialog] 在 [DatePickerEntryMode.calendar]、[DatePickerEntryMode.input] 之间切换时调用。',16,0);
INSERT INTO widget_fields VALUES(1083,399,'switchToInputEntryModeIcon','Icon?','{@macro flutter.material.date_picker.switchToInputEntryModeIcon}','{@macro flutter.material.date_picker.switchToInputEntryModeIcon}',17,0);
INSERT INTO widget_fields VALUES(1084,399,'switchToCalendarEntryModeIcon','Icon?','{@macro flutter.material.date_picker.switchToCalendarEntryModeIcon}','{@macro flutter.material.date_picker.switchToCalendarEntryModeIcon}',18,0);
INSERT INTO widget_fields VALUES(1085,399,'insetPadding','EdgeInsets','The amount of padding added to [MediaQueryData.viewInsets] on the outside of the dialog. This defines the minimum space between the screen''s edges and the dialog.','添加到对话框外部 [MediaQueryData.viewInsets] 的内边距量。这定义了屏幕边缘和对话框之间的最小空间。',19,1);
INSERT INTO widget_fields VALUES(1086,399,'calendarDelegate','CalendarDelegate<DateTime>','{@macro flutter.material.calendar_date_picker.calendarDelegate}','{@macro flutter.material.calendar_date_picker.calendarDelegate}',20,1);
INSERT INTO widget_fields VALUES(1087,400,'data','DatePickerThemeData','Specifies the visual properties used by descendant [DatePickerDialog] widgets.','指定后代 [DatePickerDialog] 小部件使用的视觉属性。',0,1);
INSERT INTO widget_fields VALUES(1088,339,'initialDateRange','DateTimeRange?','The date range that the date range picker starts with when it opens.','日期范围选择器打开时开始的日期范围。',0,0);
INSERT INTO widget_fields VALUES(1089,339,'firstDate','DateTime','The earliest allowable date on the date range.','日期范围上最早允许的日期。',1,1);
INSERT INTO widget_fields VALUES(1090,339,'lastDate','DateTime','The latest allowable date on the date range.','日期范围上最晚允许的日期。',2,1);
INSERT INTO widget_fields VALUES(1091,339,'currentDate','DateTime?','The [currentDate] represents the current day (i.e. today).','[currentDate] 表示当前日期（即今天）。',3,0);
INSERT INTO widget_fields VALUES(1092,339,'initialEntryMode','DatePickerEntryMode','The initial date range picker entry mode.','初始日期范围选择器输入模式。',4,1);
INSERT INTO widget_fields VALUES(1093,339,'cancelText','String?','The label on the cancel button for the text input mode.','文本输入模式下取消按钮的标签。',5,0);
INSERT INTO widget_fields VALUES(1094,339,'confirmText','String?','The label on the "OK" button for the text input mode.','文本输入模式下\',6,0);
INSERT INTO widget_fields VALUES(1095,339,'saveText','String?','The label on the save button for the fullscreen calendar mode.','全屏日历模式下保存按钮的标签。',7,0);
INSERT INTO widget_fields VALUES(1096,339,'helpText','String?','The label displayed at the top of the dialog.','显示在对话框顶部的标签。',8,0);
INSERT INTO widget_fields VALUES(1097,339,'errorInvalidRangeText','String?','The message used when the date range is invalid (e.g. start date is after end date).','日期范围无效时使用的消息（例如开始日期在结束日期之后）。',9,0);
INSERT INTO widget_fields VALUES(1098,339,'errorFormatText','String?','The message used when an input text isn''t in a proper date format.','输入文本不是正确日期格式时使用的消息。',10,0);
INSERT INTO widget_fields VALUES(1099,339,'errorInvalidText','String?','The message used when an input text isn''t a selectable date.','输入文本不是可选择日期时使用的消息。',11,0);
INSERT INTO widget_fields VALUES(1100,339,'fieldStartHintText','String?','The text used to prompt the user when no text has been entered in the start field.','在开始字段中未输入文本时用于提示用户的文本。',12,0);
INSERT INTO widget_fields VALUES(1101,339,'fieldEndHintText','String?','The text used to prompt the user when no text has been entered in the end field.','在结束字段中未输入文本时用于提示用户的文本。',13,0);
INSERT INTO widget_fields VALUES(1102,339,'fieldStartLabelText','String?','The label for the start date text input field.','开始日期文本输入字段的标签。',14,0);
INSERT INTO widget_fields VALUES(1103,339,'fieldEndLabelText','String?','The label for the end date text input field.','结束日期文本输入字段的标签。',15,0);
INSERT INTO widget_fields VALUES(1104,339,'keyboardType','TextInputType','{@macro flutter.material.datePickerDialog}','{@macro flutter.material.datePickerDialog}',16,1);
INSERT INTO widget_fields VALUES(1105,339,'restorationId','String?','Restoration ID to save and restore the state of the [DateRangePickerDialog].','保存和恢复 [DateRangePickerDialog] 状态的恢复 ID。',17,0);
INSERT INTO widget_fields VALUES(1106,339,'switchToInputEntryModeIcon','Icon?','{@macro flutter.material.date_picker.switchToInputEntryModeIcon}','{@macro flutter.material.date_picker.switchToInputEntryModeIcon}',18,0);
INSERT INTO widget_fields VALUES(1107,339,'switchToCalendarEntryModeIcon','Icon?','{@macro flutter.material.date_picker.switchToCalendarEntryModeIcon}','{@macro flutter.material.date_picker.switchToCalendarEntryModeIcon}',19,0);
INSERT INTO widget_fields VALUES(1108,339,'selectableDayPredicate','SelectableDayForRangePredicate?','Function to provide full control over which [DateTime] can be selected.','提供对哪个 [DateTime] 可以选择的完全控制的函数。',20,0);
INSERT INTO widget_fields VALUES(1109,339,'calendarDelegate','CalendarDelegate<DateTime>','{@macro flutter.material.calendar_date_picker.calendarDelegate}','{@macro flutter.material.calendar_date_picker.calendarDelegate}',21,1);
INSERT INTO widget_fields VALUES(1110,70,'decoration','Decoration','What decoration to paint.','要绘制的装饰。',0,1);
INSERT INTO widget_fields VALUES(1111,70,'position','DecorationPosition','Whether to paint the box decoration behind or in front of the child.','是否在子项后面或前面绘制框装饰。',1,1);
INSERT INTO widget_fields VALUES(1112,113,'decoration','Animation<Decoration>','Animation of the decoration to paint.','要绘制的装饰动画。',0,1);
INSERT INTO widget_fields VALUES(1113,113,'position','DecorationPosition','Whether to paint the box decoration behind or in front of the child.','是否在子项后面或前面绘制框装饰。',1,1);
INSERT INTO widget_fields VALUES(1114,113,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',2,1);
INSERT INTO widget_fields VALUES(1115,209,'decoration','Decoration','What decoration to paint.','要绘制的装饰。',0,1);
INSERT INTO widget_fields VALUES(1116,209,'position','DecorationPosition','Whether to paint the box decoration behind or in front of the child.','是否在子项后面或前面绘制框装饰。',1,1);
INSERT INTO widget_fields VALUES(1117,320,'bundle','AssetBundle','The bundle to use as a default.','用作默认值的包。',0,1);
INSERT INTO widget_fields VALUES(1118,401,'cursorColor','Color?','The color of the text field''s cursor.','文本字段光标的颜色。',0,0);
INSERT INTO widget_fields VALUES(1119,401,'selectionColor','Color?','The background color of selected text.','选定文本的背景颜色。',1,0);
INSERT INTO widget_fields VALUES(1120,401,'mouseCursor','MouseCursor?','The [MouseCursor] for mouse pointers hovering over selectable Text widgets.','悬停在可选择文本小部件上的鼠标指针的 [MouseCursor]。',2,0);
INSERT INTO widget_fields VALUES(1121,230,'length','int','The total number of tabs.','标签的总数。',0,1);
INSERT INTO widget_fields VALUES(1122,230,'initialIndex','int','The initial index of the selected tab.','选定标签的初始索引。',1,1);
INSERT INTO widget_fields VALUES(1123,230,'animationDuration','Duration?','Controls the duration of DefaultTabController and TabBarView animations.','控制 DefaultTabController 和 TabBarView 动画的持续时间。',2,0);
INSERT INTO widget_fields VALUES(1124,230,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',3,1);
INSERT INTO widget_fields VALUES(1125,402,'child','Widget','{@macro flutter.widgets.ProxyWidget.child}','{@macro flutter.widgets.ProxyWidget.child}',0,1);
INSERT INTO widget_fields VALUES(1126,403,'textHeightBehavior','TextHeightBehavior','{@macro dart.ui.textHeightBehavior}','{@macro dart.ui.textHeightBehavior}',0,1);
INSERT INTO widget_fields VALUES(1127,324,'style','TextStyle','The text style to apply.','要应用的文本样式。',0,1);
INSERT INTO widget_fields VALUES(1128,324,'textAlign','TextAlign?','How each line of text in the Text widget should be aligned horizontally.','Text 小部件中每行文本应如何水平对齐。',1,0);
INSERT INTO widget_fields VALUES(1129,324,'softWrap','bool','Whether the text should break at soft line breaks.','文本是否应在软换行符处换行。',2,1);
INSERT INTO widget_fields VALUES(1130,324,'overflow','TextOverflow','How visual overflow should be handled.','应如何处理视觉溢出。',3,1);
INSERT INTO widget_fields VALUES(1131,324,'maxLines','int?','An optional maximum number of lines for the text to span, wrapping if necessary. If the text exceeds the given number of lines, it will be truncated according to [overflow].','文本跨越的可选最大行数，必要时换行。如果文本超过给定的行数，将根据 [overflow] 截断。',4,0);
INSERT INTO widget_fields VALUES(1132,324,'textWidthBasis','TextWidthBasis','The strategy to use when calculating the width of the Text.','计算文本宽度时使用的策略。',5,1);
INSERT INTO widget_fields VALUES(1133,324,'textHeightBehavior','ui.TextHeightBehavior?','{@macro dart.ui.textHeightBehavior}','{@macro dart.ui.textHeightBehavior}',6,0);
INSERT INTO widget_fields VALUES(1134,114,'textAlign','TextAlign?','How the text should be aligned horizontally.','文本应如何水平对齐。',0,0);
INSERT INTO widget_fields VALUES(1135,114,'softWrap','bool','Whether the text should break at soft line breaks.','文本是否应在软换行符处换行。',1,1);
INSERT INTO widget_fields VALUES(1136,114,'overflow','TextOverflow','How visual overflow should be handled.','应如何处理视觉溢出。',2,1);
INSERT INTO widget_fields VALUES(1137,114,'maxLines','int?','An optional maximum number of lines for the text to span, wrapping if necessary.','文本跨越的可选最大行数，必要时换行。',3,0);
INSERT INTO widget_fields VALUES(1138,114,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',4,1);
INSERT INTO widget_fields VALUES(1139,404,'anchor','Offset','{@template flutter.material.DesktopTextSelectionToolbar.anchor} The point where the toolbar will attempt to position itself as closely as possible. {@endtemplate}','{@template flutter.material.DesktopTextSelectionToolbar.anchor} 工具栏将尝试尽可能接近定位自己的点。{@endtemplate}',0,1);
INSERT INTO widget_fields VALUES(1140,404,'children','List<Widget>','{@macro flutter.material.TextSelectionToolbar.children}','{@macro flutter.material.TextSelectionToolbar.children}',1,1);
INSERT INTO widget_fields VALUES(1141,405,'onPressed','VoidCallback?','{@macro flutter.material.TextSelectionToolbarTextButton.onPressed}','{@macro flutter.material.TextSelectionToolbarTextButton.onPressed}',0,0);
INSERT INTO widget_fields VALUES(1142,405,'child','Widget','{@macro flutter.material.TextSelectionToolbarTextButton.child}','{@macro flutter.material.TextSelectionToolbarTextButton.child}',1,1);
INSERT INTO widget_fields VALUES(1143,126,'backgroundColor','Color?','{@template flutter.material.dialog.backgroundColor} The background color of the surface of this [Dialog].','{@template flutter.material.dialog.backgroundColor} 此 [Dialog] 表面的背景颜色。',0,0);
INSERT INTO widget_fields VALUES(1144,126,'elevation','double?','{@template flutter.material.dialog.elevation} The z-coordinate of this [Dialog].','{@template flutter.material.dialog.elevation} 此 [Dialog] 的 z 坐标。',1,0);
INSERT INTO widget_fields VALUES(1145,126,'shadowColor','Color?','{@template flutter.material.dialog.shadowColor} The color used to paint a drop shadow under the dialog''s [Material], which reflects the dialog''s [elevation].','{@template flutter.material.dialog.shadowColor} 用于在对话框的 [Material] 下绘制投影的颜色，反映对话框的 [elevation]。',2,0);
INSERT INTO widget_fields VALUES(1146,126,'surfaceTintColor','Color?','{@template flutter.material.dialog.surfaceTintColor} The color used as a surface tint overlay on the dialog''s background color, which reflects the dialog''s [elevation].','{@template flutter.material.dialog.surfaceTintColor} 用作对话框背景颜色上的表面色调叠加的颜色，反映对话框的 [elevation]。',3,0);
INSERT INTO widget_fields VALUES(1147,126,'insetAnimationDuration','Duration','{@template flutter.material.dialog.insetAnimationDuration} The duration of the animation to show when the system keyboard intrudes into the space that the dialog is placed in.','{@template flutter.material.dialog.insetAnimationDuration} 当系统键盘侵入对话框放置空间时显示的动画持续时间。',4,1);
INSERT INTO widget_fields VALUES(1148,126,'insetAnimationCurve','Curve','{@template flutter.material.dialog.insetAnimationCurve} The curve to use for the animation shown when the system keyboard intrudes into the space that the dialog is placed in.','{@template flutter.material.dialog.insetAnimationCurve} 当系统键盘侵入对话框放置空间时显示的动画使用的曲线。',5,1);
INSERT INTO widget_fields VALUES(1149,126,'insetPadding','EdgeInsets?','{@template flutter.material.dialog.insetPadding} The amount of padding added to [MediaQueryData.viewInsets] on the outside of the dialog. This defines the minimum space between the screen''s edges and the dialog.','{@template flutter.material.dialog.insetPadding} 添加到对话框外部 [MediaQueryData.viewInsets] 的内边距量。这定义了屏幕边缘和对话框之间的最小空间。',6,0);
INSERT INTO widget_fields VALUES(1150,126,'clipBehavior','Clip?','{@template flutter.material.dialog.clipBehavior} Controls how the contents of the dialog are clipped (or not) to the given [shape].','{@template flutter.material.dialog.clipBehavior} 控制对话框内容如何裁剪（或不裁剪）到给定的 [shape]。',7,0);
INSERT INTO widget_fields VALUES(1151,126,'shape','ShapeBorder?','{@template flutter.material.dialog.shape} The shape of this dialog''s border.','{@template flutter.material.dialog.shape} 此对话框边框的形状。',8,0);
INSERT INTO widget_fields VALUES(1152,126,'alignment','AlignmentGeometry?','{@template flutter.material.dialog.alignment} How to align the [Dialog].','{@template flutter.material.dialog.alignment} 如何对齐 [Dialog]。',9,0);
INSERT INTO widget_fields VALUES(1153,126,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',10,0);
INSERT INTO widget_fields VALUES(1154,126,'semanticsRole','SemanticsRole','The role this dialog represent in assist technologies.','此对话框在辅助技术中代表的角色。',11,1);
INSERT INTO widget_fields VALUES(1155,319,'textDirection','TextDirection','The text direction for this subtree.','此子树的文本方向。',0,1);
INSERT INTO widget_fields VALUES(1156,176,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(1157,176,'background','Widget?','A widget that is stacked behind the child. If secondaryBackground is also specified then this widget only appears when the child has been dragged down or to the right.','堆叠在子项后面的小部件。如果还指定了 secondaryBackground，则此小部件仅在子项被向下或向右拖动时出现。',1,0);
INSERT INTO widget_fields VALUES(1158,176,'secondaryBackground','Widget?','A widget that is stacked behind the child and is exposed when the child has been dragged up or to the left. It may only be specified when background has also been specified.','堆叠在子项后面的小部件，当子项被向上或向左拖动时暴露。只有在也指定了 background 时才能指定。',2,0);
INSERT INTO widget_fields VALUES(1159,176,'confirmDismiss','ConfirmDismissCallback?','Gives the app an opportunity to confirm or veto a pending dismissal.','给应用程序一个确认或否决待定关闭的机会。',3,0);
INSERT INTO widget_fields VALUES(1160,176,'onResize','VoidCallback?','Called when the widget changes size (i.e., when contracting before being dismissed).','当小部件改变大小时调用（即在被关闭之前收缩时）。',4,0);
INSERT INTO widget_fields VALUES(1161,176,'onDismissed','DismissDirectionCallback?','Called when the widget has been dismissed, after finishing resizing.','当小部件被关闭时调用，在完成调整大小后。',5,0);
INSERT INTO widget_fields VALUES(1162,176,'direction','DismissDirection','The direction in which the widget can be dismissed.','小部件可以被关闭的方向。',6,1);
INSERT INTO widget_fields VALUES(1163,176,'resizeDuration','Duration?','The amount of time the widget will spend contracting before [onDismissed] is called.','小部件在调用 [onDismissed] 之前收缩所花费的时间。',7,0);
INSERT INTO widget_fields VALUES(1164,176,'dismissThresholds','Map<DismissDirection, double>','The offset threshold the item has to be dragged in order to be considered dismissed.','项目必须被拖动的偏移阈值，以便被认为已关闭。',8,1);
INSERT INTO widget_fields VALUES(1165,176,'movementDuration','Duration','Defines the duration for card to dismiss or to come back to original position if not dismissed.','定义卡片关闭或如果未关闭则返回原始位置的持续时间。',9,1);
INSERT INTO widget_fields VALUES(1166,176,'crossAxisEndOffset','double','Defines the end offset across the main axis after the card is dismissed.','定义卡片被关闭后跨主轴的结束偏移量。',10,1);
INSERT INTO widget_fields VALUES(1167,176,'dragStartBehavior','DragStartBehavior','Determines the way that drag start behavior is handled.','确定拖动开始行为的处理方式。',11,1);
INSERT INTO widget_fields VALUES(1168,176,'behavior','HitTestBehavior','How to behave during hit tests.','在命中测试期间如何表现。',12,1);
INSERT INTO widget_fields VALUES(1169,176,'onUpdate','DismissUpdateCallback?','Called when the dismissible widget has been dragged.','当可关闭小部件被拖动时调用。',13,0);
INSERT INTO widget_fields VALUES(1170,407,'anchorPoint','Offset?','{@template flutter.widgets.DisplayFeatureSubScreen.anchorPoint} The anchor point used to pick the closest sub-screen.','{@template flutter.widgets.DisplayFeatureSubScreen.anchorPoint} 用于选择最近子屏幕的锚点。',0,0);
INSERT INTO widget_fields VALUES(1171,407,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,1);
INSERT INTO widget_fields VALUES(1172,34,'height','double?','The divider''s height extent.','分隔符的高度范围。',0,0);
INSERT INTO widget_fields VALUES(1173,34,'thickness','double?','The thickness of the line drawn within the divider.','分隔符内绘制线条的厚度。',1,0);
INSERT INTO widget_fields VALUES(1174,34,'indent','double?','The amount of empty space to the leading edge of the divider.','分隔符前缘的空白空间量。',2,0);
INSERT INTO widget_fields VALUES(1175,34,'endIndent','double?','The amount of empty space to the trailing edge of the divider.','分隔符后缘的空白空间量。',3,0);
INSERT INTO widget_fields VALUES(1176,34,'radius','BorderRadiusGeometry?','The amount of radius for the border of the divider.','分隔符边框的半径量。',4,0);
INSERT INTO widget_fields VALUES(1177,34,'color','Color?','{@template flutter.material.Divider.color} The color to use when painting the line.','{@template flutter.material.Divider.color} 绘制线条时使用的颜色。',5,0);
INSERT INTO widget_fields VALUES(1178,329,'data','DividerThemeData','The properties for descendant [Divider]s, [VerticalDivider]s, dividers between [ListTile]s, and dividers between rows in [DataTable]s.','后代 [Divider]、[VerticalDivider]、[ListTile] 之间的分隔符和 [DataTable] 中行之间的分隔符的属性。',0,1);
INSERT INTO widget_fields VALUES(1179,103,'data','T?','The data that will be dropped by this draggable.','此可拖动项将放下的数据。',0,0);
INSERT INTO widget_fields VALUES(1180,103,'axis','Axis?','The [Axis] to restrict this draggable''s movement, if specified.','限制此可拖动项移动的 [Axis]（如果指定）。',1,0);
INSERT INTO widget_fields VALUES(1181,103,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',2,1);
INSERT INTO widget_fields VALUES(1182,103,'childWhenDragging','Widget?','The widget to display instead of [child] when one or more drags are under way.','当一个或多个拖动正在进行时显示的小部件，而不是 [child]。',3,0);
INSERT INTO widget_fields VALUES(1183,103,'feedback','Widget','The widget to show under the pointer when a drag is under way.','拖动进行时在指针下显示的小部件。',4,1);
INSERT INTO widget_fields VALUES(1184,103,'feedbackOffset','Offset','The feedbackOffset can be used to set the hit test target point for the purposes of finding a drag target. It is especially useful if the feedback is transformed compared to the child.','feedbackOffset 可用于设置命中测试目标点以查找拖动目标。如果反馈相对于子项进行了变换，这特别有用。',5,1);
INSERT INTO widget_fields VALUES(1185,103,'dragAnchorStrategy','DragAnchorStrategy','A strategy that is used by this draggable to get the anchor offset when it is dragged.','此可拖动项用于在拖动时获取锚点偏移量的策略。',6,1);
INSERT INTO widget_fields VALUES(1186,103,'ignoringFeedbackSemantics','bool','Whether the semantics of the [feedback] widget is ignored when building the semantics tree.','构建语义树时是否忽略 [feedback] 小部件的语义。',7,1);
INSERT INTO widget_fields VALUES(1187,103,'ignoringFeedbackPointer','bool','Whether the [feedback] widget is ignored during hit testing.','命中测试期间是否忽略 [feedback] 小部件。',8,1);
INSERT INTO widget_fields VALUES(1188,103,'affinity','Axis?','Controls how this widget competes with other gestures to initiate a drag.','控制此小部件如何与其他手势竞争以启动拖动。',9,0);
INSERT INTO widget_fields VALUES(1189,103,'maxSimultaneousDrags','int?','How many simultaneous drags to support.','支持多少个同时拖动。',10,0);
INSERT INTO widget_fields VALUES(1190,103,'onDragStarted','VoidCallback?','Called when the draggable starts being dragged.','可拖动项开始被拖动时调用。',11,0);
INSERT INTO widget_fields VALUES(1191,103,'onDragUpdate','DragUpdateCallback?','Called when the draggable is dragged.','可拖动项被拖动时调用。',12,0);
INSERT INTO widget_fields VALUES(1192,103,'onDraggableCanceled','DraggableCanceledCallback?','Called when the draggable is dropped without being accepted by a [DragTarget].','可拖动项被放下但未被 [DragTarget] 接受时调用。',13,0);
INSERT INTO widget_fields VALUES(1193,103,'onDragCompleted','VoidCallback?','Called when the draggable is dropped and accepted by a [DragTarget].','可拖动项被放下并被 [DragTarget] 接受时调用。',14,0);
INSERT INTO widget_fields VALUES(1194,103,'onDragEnd','DragEndCallback?','Called when the draggable is dropped.','可拖动项被放下时调用。',15,0);
INSERT INTO widget_fields VALUES(1195,103,'rootOverlay','bool','Whether the feedback widget will be put on the root [Overlay].','反馈小部件是否将放在根 [Overlay] 上。',16,1);
INSERT INTO widget_fields VALUES(1196,103,'hitTestBehavior','HitTestBehavior','How to behave during hit test.','命中测试期间如何表现。',17,1);
INSERT INTO widget_fields VALUES(1197,103,'allowedButtonsFilter','AllowedButtonsFilter?','{@macro flutter.gestures.multidrag._allowedButtonsFilter}','{@macro flutter.gestures.multidrag._allowedButtonsFilter}',18,0);
INSERT INTO widget_fields VALUES(1198,221,'child','Widget','This child''s [DraggableScrollableSheet] descendant will be reset when the [reset] method is applied to a context that includes it.','当 [reset] 方法应用于包含它的上下文时，此子项的 [DraggableScrollableSheet] 后代将被重置。',0,1);
INSERT INTO widget_fields VALUES(1199,252,'initialChildSize','double','The initial fractional value of the parent container''s height to use when displaying the widget.','显示小部件时使用的父容器高度的初始分数值。',0,1);
INSERT INTO widget_fields VALUES(1200,252,'minChildSize','double','The minimum fractional value of the parent container''s height to use when displaying the widget.','显示小部件时使用的父容器高度的最小分数值。',1,1);
INSERT INTO widget_fields VALUES(1201,252,'maxChildSize','double','The maximum fractional value of the parent container''s height to use when displaying the widget.','显示小部件时使用的父容器高度的最大分数值。',2,1);
INSERT INTO widget_fields VALUES(1202,252,'expand','bool','Whether the widget should expand to fill the available space in its parent or not.','小部件是否应扩展以填充其父级中的可用空间。',3,1);
INSERT INTO widget_fields VALUES(1203,252,'snap','bool','Whether the widget should snap between [snapSizes] when the user lifts their finger during a drag.','当用户在拖动期间抬起手指时，小部件是否应在 [snapSizes] 之间捕捉。',4,1);
INSERT INTO widget_fields VALUES(1204,252,'snapSizes','List<double>?','A list of target sizes that the widget should snap to.','小部件应捕捉到的目标大小列表。',5,0);
INSERT INTO widget_fields VALUES(1205,252,'snapAnimationDuration','Duration?','Defines a duration for the snap animations.','定义捕捉动画的持续时间。',6,0);
INSERT INTO widget_fields VALUES(1206,252,'controller','DraggableScrollableController?','A controller that can be used to programmatically control this sheet.','可用于以编程方式控制此表单的控制器。',7,0);
INSERT INTO widget_fields VALUES(1207,252,'shouldCloseOnMinExtent','bool','Whether the sheet, when dragged (or flung) to its minimum size, should cause its parent sheet to close.','当表单被拖动（或抛出）到其最小大小时，是否应导致其父表单关闭。',8,1);
INSERT INTO widget_fields VALUES(1208,252,'builder','ScrollableWidgetBuilder','The builder that creates a child to display in this widget, which will use the provided [ScrollController] to enable dragging and scrolling of the contents.','创建要在此小部件中显示的子项的构建器，它将使用提供的 [ScrollController] 来启用内容的拖动和滚动。',9,1);
INSERT INTO widget_fields VALUES(1209,104,'builder','DragTargetBuilder<T>','Called to build the contents of this widget.','调用以构建此小部件的内容。',0,1);
INSERT INTO widget_fields VALUES(1210,104,'onWillAccept','DragTargetWillAccept<T>?','Called to determine whether this widget is interested in receiving a given piece of data being dragged over this drag target.','调用以确定此小部件是否有兴趣接收在此拖动目标上拖动的给定数据片段。',1,0);
INSERT INTO widget_fields VALUES(1211,104,'onWillAcceptWithDetails','DragTargetWillAcceptWithDetails<T>?','Called to determine whether this widget is interested in receiving a given piece of data being dragged over this drag target.','调用以确定此小部件是否有兴趣接收在此拖动目标上拖动的给定数据片段。',2,0);
INSERT INTO widget_fields VALUES(1212,104,'onAccept','DragTargetAccept<T>?','Called when an acceptable piece of data was dropped over this drag target. It will not be called if `data` is `null`.','当可接受的数据片段被放在此拖动目标上时调用。如果 `data` 为 `null`，则不会调用。',3,0);
INSERT INTO widget_fields VALUES(1213,104,'onAcceptWithDetails','DragTargetAcceptWithDetails<T>?','Called when an acceptable piece of data was dropped over this drag target. It will not be called if `data` is `null`.','当可接受的数据片段被放在此拖动目标上时调用。如果 `data` 为 `null`，则不会调用。',4,0);
INSERT INTO widget_fields VALUES(1214,104,'onLeave','DragTargetLeave<T>?','Called when a given piece of data being dragged over this target leaves the target.','当在此目标上拖动的给定数据片段离开目标时调用。',5,0);
INSERT INTO widget_fields VALUES(1215,104,'onMove','DragTargetMove<T>?','Called when a [Draggable] moves within this [DragTarget]. It will not be called if `data` is `null`.','当 [Draggable] 在此 [DragTarget] 内移动时调用。如果 `data` 为 `null`，则不会调用。',6,0);
INSERT INTO widget_fields VALUES(1216,104,'hitTestBehavior','HitTestBehavior','How to behave during hit testing.','在命中测试期间如何表现。',7,1);
INSERT INTO widget_fields VALUES(1217,154,'backgroundColor','Color?','Sets the color of the [Material] that holds all of the [Drawer]''s contents.','设置包含所有 [Drawer] 内容的 [Material] 的颜色。',0,0);
INSERT INTO widget_fields VALUES(1218,154,'elevation','double?','The z-coordinate at which to place this drawer relative to its parent.','相对于其父级放置此抽屉的 z 坐标。',1,0);
INSERT INTO widget_fields VALUES(1219,154,'shadowColor','Color?','The color used to paint a drop shadow under the drawer''s [Material], which reflects the drawer''s [elevation].','用于在抽屉的 [Material] 下绘制投影的颜色，反映抽屉的 [elevation]。',2,0);
INSERT INTO widget_fields VALUES(1220,154,'surfaceTintColor','Color?','The color used as a surface tint overlay on the drawer''s background color, which reflects the drawer''s [elevation].','用作抽屉背景颜色上的表面色调叠加的颜色，反映抽屉的 [elevation]。',3,0);
INSERT INTO widget_fields VALUES(1221,154,'shape','ShapeBorder?','The shape of the drawer.','抽屉的形状。',4,0);
INSERT INTO widget_fields VALUES(1222,154,'width','double?','The width of the drawer.','抽屉的宽度。',5,0);
INSERT INTO widget_fields VALUES(1223,154,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',6,0);
INSERT INTO widget_fields VALUES(1224,154,'semanticLabel','String?','The semantic label of the drawer used by accessibility frameworks to announce screen transitions when the drawer is opened and closed.','辅助功能框架使用的抽屉语义标签，用于在打开和关闭抽屉时宣布屏幕转换。',7,0);
INSERT INTO widget_fields VALUES(1225,154,'clipBehavior','Clip?','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',8,0);
INSERT INTO widget_fields VALUES(1226,257,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(1227,257,'alignment','DrawerAlignment','The alignment of the [Drawer].','[Drawer] 的对齐方式。',1,1);
INSERT INTO widget_fields VALUES(1228,257,'drawerCallback','DrawerCallback?','Optional callback that is called when a [Drawer] is opened or closed.','打开或关闭 [Drawer] 时调用的可选回调。',2,0);
INSERT INTO widget_fields VALUES(1229,257,'dragStartBehavior','DragStartBehavior','{@template flutter.material.DrawerController.dragStartBehavior} Determines the way that drag start behavior is handled.','{@template flutter.material.DrawerController.dragStartBehavior} 确定拖动开始行为的处理方式。',3,1);
INSERT INTO widget_fields VALUES(1230,257,'scrimColor','Color?','The color to use for the scrim that obscures the underlying content while a drawer is open.','抽屉打开时用于遮挡底层内容的纱幕颜色。',4,0);
INSERT INTO widget_fields VALUES(1231,257,'enableOpenDragGesture','bool','Determines if the [Drawer] can be opened with a drag gesture.','确定是否可以通过拖动手势打开 [Drawer]。',5,1);
INSERT INTO widget_fields VALUES(1232,257,'edgeDragWidth','double?','The width of the area within which a horizontal swipe will open the drawer.','水平滑动将打开抽屉的区域宽度。',6,0);
INSERT INTO widget_fields VALUES(1233,257,'isDrawerOpen','bool','Whether or not the drawer is opened or closed.','抽屉是打开还是关闭。',7,1);
INSERT INTO widget_fields VALUES(1234,155,'decoration','Decoration?','Decoration for the main drawer header [Container]; useful for applying backgrounds.','主抽屉标题 [Container] 的装饰；用于应用背景。',0,0);
INSERT INTO widget_fields VALUES(1235,155,'padding','EdgeInsetsGeometry','The padding by which to inset [child].','插入 [child] 的内边距。',1,1);
INSERT INTO widget_fields VALUES(1236,155,'margin','EdgeInsetsGeometry?','The margin around the drawer header.','抽屉标题周围的边距。',2,0);
INSERT INTO widget_fields VALUES(1237,155,'duration','Duration','The duration for animations of the [decoration].','[decoration] 动画的持续时间。',3,1);
INSERT INTO widget_fields VALUES(1238,155,'curve','Curve','The curve for animations of the [decoration].','[decoration] 动画的曲线。',4,1);
INSERT INTO widget_fields VALUES(1239,155,'child','Widget?','A widget to be placed inside the drawer header, inset by the [padding].','放置在抽屉标题内的小部件，由 [padding] 插入。',5,0);
INSERT INTO widget_fields VALUES(1240,409,'data','DrawerThemeData','Specifies the background color, scrim color, elevation, and shape for descendant [Drawer] widgets.','指定后代 [Drawer] 小部件的背景颜色、纱幕颜色、高度和形状。',0,1);
INSERT INTO widget_fields VALUES(1241,55,'items','List<DropdownMenuItem<T>>?','The list of items the user can select.','用户可以选择的项目列表。',0,0);
INSERT INTO widget_fields VALUES(1242,55,'value','T?','The value of the currently selected [DropdownMenuItem].','当前选定的 [DropdownMenuItem] 的值。',1,0);
INSERT INTO widget_fields VALUES(1243,55,'hint','Widget?','A placeholder widget that is displayed by the dropdown button.','下拉按钮显示的占位符小部件。',2,0);
INSERT INTO widget_fields VALUES(1244,55,'disabledHint','Widget?','A preferred placeholder widget that is displayed when the dropdown is disabled.','下拉菜单禁用时显示的首选占位符小部件。',3,0);
INSERT INTO widget_fields VALUES(1245,55,'onChanged','ValueChanged<T?>?','{@template flutter.material.dropdownButton.onChanged} Called when the user selects an item.','{@template flutter.material.dropdownButton.onChanged} 用户选择项目时调用。',4,0);
INSERT INTO widget_fields VALUES(1246,55,'onTap','VoidCallback?','Called when the dropdown button is tapped.','点击下拉按钮时调用。',5,0);
INSERT INTO widget_fields VALUES(1247,55,'selectedItemBuilder','DropdownButtonBuilder?','A builder to customize the dropdown buttons corresponding to the [DropdownMenuItem]s in [items].','用于自定义对应于 [items] 中 [DropdownMenuItem] 的下拉按钮的构建器。',6,0);
INSERT INTO widget_fields VALUES(1248,55,'elevation','int','The z-coordinate at which to place the menu when open.','打开时放置菜单的 z 坐标。',7,1);
INSERT INTO widget_fields VALUES(1249,55,'style','TextStyle?','The text style to use for text in the dropdown button and the dropdown menu that appears when you tap the button.','用于下拉按钮和点击按钮时出现的下拉菜单中文本的文本样式。',8,0);
INSERT INTO widget_fields VALUES(1250,55,'underline','Widget?','The widget to use for drawing the drop-down button''s underline.','用于绘制下拉按钮下划线的小部件。',9,0);
INSERT INTO widget_fields VALUES(1251,55,'icon','Widget?','The widget to use for the drop-down button''s icon.','用于下拉按钮图标的小部件。',10,0);
INSERT INTO widget_fields VALUES(1252,55,'iconDisabledColor','Color?','The color of any [Icon] descendant of [icon] if this button is disabled, i.e. if [onChanged] is null.','如果此按钮被禁用（即 [onChanged] 为 null），[icon] 的任何 [Icon] 后代的颜色。',11,0);
INSERT INTO widget_fields VALUES(1253,55,'iconEnabledColor','Color?','The color of any [Icon] descendant of [icon] if this button is enabled, i.e. if [onChanged] is defined.','如果此按钮启用（即定义了 [onChanged]），[icon] 的任何 [Icon] 后代的颜色。',12,0);
INSERT INTO widget_fields VALUES(1254,55,'iconSize','double','The size to use for the drop-down button''s down arrow icon button.','用于下拉按钮向下箭头图标按钮的大小。',13,1);
INSERT INTO widget_fields VALUES(1255,55,'isDense','bool','Reduce the button''s height.','减少按钮的高度。',14,1);
INSERT INTO widget_fields VALUES(1256,55,'isExpanded','bool','Set the dropdown''s inner contents to horizontally fill its parent.','设置下拉菜单的内部内容水平填充其父级。',15,1);
INSERT INTO widget_fields VALUES(1257,55,'itemHeight','double?','If null, then the menu item heights will vary according to each menu item''s intrinsic height.','如果为 null，则菜单项高度将根据每个菜单项的固有高度而变化。',16,0);
INSERT INTO widget_fields VALUES(1258,55,'menuWidth','double?','The width of the menu.','菜单的宽度。',17,0);
INSERT INTO widget_fields VALUES(1259,55,'focusColor','Color?','The color for the button''s [Material] when it has the input focus.','按钮具有输入焦点时其 [Material] 的颜色。',18,0);
INSERT INTO widget_fields VALUES(1260,55,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',19,0);
INSERT INTO widget_fields VALUES(1261,55,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',20,1);
INSERT INTO widget_fields VALUES(1262,55,'dropdownColor','Color?','The background color of the dropdown.','下拉菜单的背景颜色。',21,0);
INSERT INTO widget_fields VALUES(1263,55,'padding','EdgeInsetsGeometry?','Padding around the visible portion of the dropdown widget.','下拉小部件可见部分周围的内边距。',22,0);
INSERT INTO widget_fields VALUES(1264,55,'menuMaxHeight','double?','The maximum height of the menu.','菜单的最大高度。',23,0);
INSERT INTO widget_fields VALUES(1265,55,'enableFeedback','bool?','Whether detected gestures should provide acoustic and/or haptic feedback.','检测到的手势是否应提供声音和/或触觉反馈。',24,0);
INSERT INTO widget_fields VALUES(1266,55,'alignment','AlignmentGeometry','Defines how the hint or the selected item is positioned within the button.','定义提示或选定项目在按钮内的定位方式。',25,1);
INSERT INTO widget_fields VALUES(1267,55,'borderRadius','BorderRadius?','Defines the corner radii of the menu''s rounded rectangle shape.','定义菜单圆角矩形形状的角半径。',26,0);
INSERT INTO widget_fields VALUES(1268,223,'onChanged','ValueChanged<T?>?','{@macro flutter.material.dropdownButton.onChanged}','{@macro flutter.material.dropdownButton.onChanged}',0,0);
INSERT INTO widget_fields VALUES(1269,223,'decoration','InputDecoration','The decoration to show around the dropdown button form field.','在下拉按钮表单字段周围显示的装饰。',1,1);
INSERT INTO widget_fields VALUES(1270,370,'enabled','bool','Determine if the [DropdownMenu] is enabled.','确定 [DropdownMenu] 是否启用。',0,1);
INSERT INTO widget_fields VALUES(1271,370,'width','double?','Determine the width of the [DropdownMenu].','确定 [DropdownMenu] 的宽度。',1,0);
INSERT INTO widget_fields VALUES(1272,370,'menuHeight','double?','Determine the height of the menu.','确定菜单的高度。',2,0);
INSERT INTO widget_fields VALUES(1273,370,'leadingIcon','Widget?','An optional Icon at the front of the text input field.','文本输入字段前面的可选图标。',3,0);
INSERT INTO widget_fields VALUES(1274,370,'trailingIcon','Widget?','An optional icon at the end of the text field.','文本字段末尾的可选图标。',4,0);
INSERT INTO widget_fields VALUES(1275,370,'label','Widget?','Optional widget that describes the input field.','描述输入字段的可选小部件。',5,0);
INSERT INTO widget_fields VALUES(1276,370,'hintText','String?','Text that suggests what sort of input the field accepts.','建议字段接受何种输入的文本。',6,0);
INSERT INTO widget_fields VALUES(1277,370,'helperText','String?','Text that provides context about the [DropdownMenu]''s value, such as how the value will be used.','提供有关 [DropdownMenu] 值上下文的文本，例如如何使用该值。',7,0);
INSERT INTO widget_fields VALUES(1278,370,'errorText','String?','Text that appears below the input field and the border to show the error message.','出现在输入字段和边框下方以显示错误消息的文本。',8,0);
INSERT INTO widget_fields VALUES(1279,370,'selectedTrailingIcon','Widget?','An optional icon at the end of the text field to indicate that the text field is pressed.','文本字段末尾的可选图标，指示文本字段被按下。',9,0);
INSERT INTO widget_fields VALUES(1280,370,'enableFilter','bool','Determine if the menu list can be filtered by the text input.','确定菜单列表是否可以通过文本输入进行过滤。',10,1);
INSERT INTO widget_fields VALUES(1281,370,'enableSearch','bool','Determine if the first item that matches the text input can be highlighted.','确定是否可以突出显示与文本输入匹配的第一个项目。',11,1);
INSERT INTO widget_fields VALUES(1282,370,'keyboardType','TextInputType?','The type of keyboard to use for editing the text.','用于编辑文本的键盘类型。',12,0);
INSERT INTO widget_fields VALUES(1283,370,'textStyle','TextStyle?','The text style for the [TextField] of the [DropdownMenu];','[DropdownMenu] 的 [TextField] 的文本样式。',13,0);
INSERT INTO widget_fields VALUES(1284,370,'textAlign','TextAlign','The text align for the [TextField] of the [DropdownMenu].','[DropdownMenu] 的 [TextField] 的文本对齐。',14,1);
INSERT INTO widget_fields VALUES(1285,370,'inputDecorationTheme','InputDecorationTheme?','Defines the default appearance of [InputDecoration] to show around the text field.','定义在文本字段周围显示的 [InputDecoration] 的默认外观。',15,0);
INSERT INTO widget_fields VALUES(1286,370,'menuStyle','MenuStyle?','The [MenuStyle] that defines the visual attributes of the menu.','定义菜单视觉属性的 [MenuStyle]。',16,0);
INSERT INTO widget_fields VALUES(1287,370,'controller','TextEditingController?','Controls the text being edited or selected in the menu.','控制菜单中正在编辑或选择的文本。',17,0);
INSERT INTO widget_fields VALUES(1288,370,'initialSelection','T?','The value used to for an initial selection.','用于初始选择的值。',18,0);
INSERT INTO widget_fields VALUES(1289,370,'onSelected','ValueChanged<T?>?','The callback is called when a selection is made.','进行选择时调用的回调。',19,0);
INSERT INTO widget_fields VALUES(1290,370,'focusNode','FocusNode?','Defines the keyboard focus for this widget.','定义此小部件的键盘焦点。',20,0);
INSERT INTO widget_fields VALUES(1291,370,'requestFocusOnTap','bool?','Determine if the dropdown button requests focus and the on-screen virtual keyboard is shown in response to a touch event.','确定下拉按钮是否请求焦点并且屏幕虚拟键盘是否响应触摸事件显示。',21,0);
INSERT INTO widget_fields VALUES(1292,370,'dropdownMenuEntries','List<DropdownMenuEntry<T>>','Descriptions of the menu items in the [DropdownMenu].','[DropdownMenu] 中菜单项的描述。',22,1);
INSERT INTO widget_fields VALUES(1293,370,'expandedInsets','EdgeInsetsGeometry?','Defines the menu text field''s width to be equal to its parent''s width plus the horizontal width of the specified insets.','定义菜单文本字段的宽度等于其父级的宽度加上指定插入的水平宽度。',23,0);
INSERT INTO widget_fields VALUES(1294,370,'filterCallback','FilterCallback<T>?','When [DropdownMenu.enableFilter] is true, this callback is used to compute the list of filtered items.','当 [DropdownMenu.enableFilter] 为 true 时，此回调用于计算过滤项目列表。',24,0);
INSERT INTO widget_fields VALUES(1295,370,'searchCallback','SearchCallback<T>?','When [DropdownMenu.enableSearch] is true, this callback is used to compute the index of the search result to be highlighted.','当 [DropdownMenu.enableSearch] 为 true 时，此回调用于计算要突出显示的搜索结果的索引。',25,0);
INSERT INTO widget_fields VALUES(1296,370,'inputFormatters','List<TextInputFormatter>?','Optional input validation and formatting overrides.','可选的输入验证和格式化覆盖。',26,0);
INSERT INTO widget_fields VALUES(1297,370,'alignmentOffset','Offset?','{@macro flutter.material.MenuAnchor.alignmentOffset}','{@macro flutter.material.MenuAnchor.alignmentOffset}',27,0);
INSERT INTO widget_fields VALUES(1298,370,'closeBehavior','DropdownMenuCloseBehavior','Defines the behavior for closing the dropdown menu when an item is selected.','定义选择项目时关闭下拉菜单的行为。',28,1);
INSERT INTO widget_fields VALUES(1299,370,'maxLines','int?','Specifies the maximum number of lines the selected value can display in the [DropdownMenu].','指定选定值可以在 [DropdownMenu] 中显示的最大行数。',29,0);
INSERT INTO widget_fields VALUES(1300,370,'textInputAction','TextInputAction?','{@macro flutter.widgets.TextField.textInputAction}','{@macro flutter.widgets.TextField.textInputAction}',30,0);
INSERT INTO widget_fields VALUES(1301,410,'onTap','VoidCallback?','Called when the dropdown menu item is tapped.','点击下拉菜单项时调用。',0,0);
INSERT INTO widget_fields VALUES(1302,410,'value','T?','The value to return if the user selects this menu item.','如果用户选择此菜单项，要返回的值。',1,0);
INSERT INTO widget_fields VALUES(1303,410,'enabled','bool','Whether or not a user can select this menu item.','用户是否可以选择此菜单项。',2,1);
INSERT INTO widget_fields VALUES(1304,411,'data','DropdownMenuThemeData','Specifies the visual properties used by descendant [DropdownMenu] widgets.','指定后代 [DropdownMenu] 小部件使用的视觉属性。',0,1);
INSERT INTO widget_fields VALUES(1305,412,'animation','Animation<double>','The animation that drives the [child]''s transition.','驱动 [child] 过渡的动画。',0,1);
INSERT INTO widget_fields VALUES(1306,412,'forwardBuilder','AnimatedTransitionBuilder','A builder for the transition that makes [child] appear on screen.','使 [child] 出现在屏幕上的过渡构建器。',1,1);
INSERT INTO widget_fields VALUES(1307,412,'reverseBuilder','AnimatedTransitionBuilder','A builder for a transition that makes [child] disappear from the screen.','使 [child] 从屏幕上消失的过渡构建器。',2,1);
INSERT INTO widget_fields VALUES(1308,412,'child','Widget?','The widget below this [DualTransitionBuilder] in the tree.','树中此 [DualTransitionBuilder] 下方的小部件。',3,0);
INSERT INTO widget_fields VALUES(1309,244,'controller','TextEditingController','Controls the text being edited.','控制正在编辑的文本。',0,1);
INSERT INTO widget_fields VALUES(1310,244,'focusNode','FocusNode','Controls whether this widget has keyboard focus.','控制此小部件是否具有键盘焦点。',1,1);
INSERT INTO widget_fields VALUES(1311,244,'obscuringCharacter','String','{@template flutter.widgets.editableText.obscuringCharacter} Character used for obscuring text if [obscureText] is true.','{@template flutter.widgets.editableText.obscuringCharacter} 如果 [obscureText] 为 true，用于遮挡文本的字符。',2,1);
INSERT INTO widget_fields VALUES(1312,244,'obscureText','bool','{@template flutter.widgets.editableText.obscureText} Whether to hide the text being edited (e.g., for passwords).','{@template flutter.widgets.editableText.obscureText} 是否隐藏正在编辑的文本（例如，用于密码）。',3,1);
INSERT INTO widget_fields VALUES(1313,244,'textHeightBehavior','TextHeightBehavior?','{@macro dart.ui.textHeightBehavior}','{@macro dart.ui.textHeightBehavior}',4,0);
INSERT INTO widget_fields VALUES(1314,244,'textWidthBasis','TextWidthBasis','{@macro flutter.painting.textPainter.textWidthBasis}','{@macro flutter.painting.textPainter.textWidthBasis}',5,1);
INSERT INTO widget_fields VALUES(1315,244,'readOnly','bool','{@template flutter.widgets.editableText.readOnly} Whether the text can be changed.','{@template flutter.widgets.editableText.readOnly} 文本是否可以更改。',6,1);
INSERT INTO widget_fields VALUES(1316,244,'forceLine','bool','Whether the text will take the full width regardless of the text width.','无论文本宽度如何，文本是否占用全宽。',7,1);
INSERT INTO widget_fields VALUES(1317,244,'toolbarOptions','ToolbarOptions','Configuration of toolbar options.','工具栏选项的配置。',8,1);
INSERT INTO widget_fields VALUES(1318,244,'showSelectionHandles','bool','Whether to show selection handles.','是否显示选择手柄。',9,1);
INSERT INTO widget_fields VALUES(1319,244,'showCursor','bool','{@template flutter.widgets.editableText.showCursor} Whether to show cursor.','{@template flutter.widgets.editableText.showCursor} 是否显示光标。',10,1);
INSERT INTO widget_fields VALUES(1320,244,'autocorrect','bool','{@template flutter.widgets.editableText.autocorrect} Whether to enable autocorrection.','{@template flutter.widgets.editableText.autocorrect} 是否启用自动更正。',11,1);
INSERT INTO widget_fields VALUES(1321,244,'smartDashesType','SmartDashesType','{@macro flutter.services.TextInputConfiguration.smartDashesType}','{@macro flutter.services.TextInputConfiguration.smartDashesType}',12,1);
INSERT INTO widget_fields VALUES(1322,244,'smartQuotesType','SmartQuotesType','{@macro flutter.services.TextInputConfiguration.smartQuotesType}','{@macro flutter.services.TextInputConfiguration.smartQuotesType}',13,1);
INSERT INTO widget_fields VALUES(1323,244,'enableSuggestions','bool','{@macro flutter.services.TextInputConfiguration.enableSuggestions}','{@macro flutter.services.TextInputConfiguration.enableSuggestions}',14,1);
INSERT INTO widget_fields VALUES(1324,244,'style','TextStyle','The text style to use for the editable text.','用于可编辑文本的文本样式。',15,1);
INSERT INTO widget_fields VALUES(1325,244,'undoController','UndoHistoryController?','Controls the undo state of the current editable text.','控制当前可编辑文本的撤销状态。',16,0);
INSERT INTO widget_fields VALUES(1326,244,'textAlign','TextAlign','{@template flutter.widgets.editableText.textAlign} How the text should be aligned horizontally.','{@template flutter.widgets.editableText.textAlign} 文本应如何水平对齐。',17,1);
INSERT INTO widget_fields VALUES(1327,244,'textDirection','TextDirection?','{@template flutter.widgets.editableText.textDirection} The directionality of the text.','{@template flutter.widgets.editableText.textDirection} 文本的方向性。',18,0);
INSERT INTO widget_fields VALUES(1328,244,'textCapitalization','TextCapitalization','{@template flutter.widgets.editableText.textCapitalization} Configures how the platform keyboard will select an uppercase or lowercase keyboard.','{@template flutter.widgets.editableText.textCapitalization} 配置平台键盘如何选择大写或小写键盘。',19,1);
INSERT INTO widget_fields VALUES(1329,244,'locale','Locale?','Used to select a font when the same Unicode character can be rendered differently, depending on the locale.','用于在同一 Unicode 字符可以根据区域设置以不同方式呈现时选择字体。',20,0);
INSERT INTO widget_fields VALUES(1330,244,'textScaleFactor','double?','{@template flutter.widgets.editableText.textScaleFactor} Deprecated. Will be removed in a future version of Flutter. Use [textScaler] instead.','{@template flutter.widgets.editableText.textScaleFactor} 已弃用。将在 Flutter 的未来版本中删除。请改用 [textScaler]。',21,0);
INSERT INTO widget_fields VALUES(1331,244,'textScaler','TextScaler?','{@macro flutter.painting.textPainter.textScaler}','{@macro flutter.painting.textPainter.textScaler}',22,0);
INSERT INTO widget_fields VALUES(1332,244,'cursorColor','Color','The color to use when painting the cursor.','绘制光标时使用的颜色。',23,1);
INSERT INTO widget_fields VALUES(1333,244,'autocorrectionTextRectColor','Color?','The color to use when painting the autocorrection Rect.','绘制自动更正矩形时使用的颜色。',24,0);
INSERT INTO widget_fields VALUES(1334,244,'backgroundCursorColor','Color','The color to use when painting the background cursor aligned with the text while rendering the floating cursor.','在渲染浮动光标时绘制与文本对齐的背景光标时使用的颜色。',25,1);
INSERT INTO widget_fields VALUES(1335,244,'maxLines','int?','{@template flutter.widgets.editableText.maxLines} The maximum number of lines to show at one time, wrapping if necessary.','{@template flutter.widgets.editableText.maxLines} 一次显示的最大行数，必要时换行。',26,0);
INSERT INTO widget_fields VALUES(1336,244,'minLines','int?','{@template flutter.widgets.editableText.minLines} The minimum number of lines to occupy when the content spans fewer lines.','{@template flutter.widgets.editableText.minLines} 当内容跨越较少行时占用的最小行数。',27,0);
INSERT INTO widget_fields VALUES(1337,244,'expands','bool','{@template flutter.widgets.editableText.expands} Whether this widget''s height will be sized to fill its parent.','{@template flutter.widgets.editableText.expands} 此小部件的高度是否将调整大小以填充其父级。',28,1);
INSERT INTO widget_fields VALUES(1338,244,'autofocus','bool','{@template flutter.widgets.editableText.autofocus} Whether this text field should focus itself if nothing else is already focused.','{@template flutter.widgets.editableText.autofocus} 如果没有其他内容已经聚焦，此文本字段是否应该聚焦自己。',29,1);
INSERT INTO widget_fields VALUES(1339,244,'selectionColor','Color?','The color to use when painting the selection.','绘制选择时使用的颜色。',30,0);
INSERT INTO widget_fields VALUES(1340,244,'selectionControls','TextSelectionControls?','{@template flutter.widgets.editableText.selectionControls} Optional delegate for building the text selection handles.','{@template flutter.widgets.editableText.selectionControls} 用于构建文本选择手柄的可选委托。',31,0);
INSERT INTO widget_fields VALUES(1341,244,'keyboardType','TextInputType','{@template flutter.widgets.editableText.keyboardType} The type of keyboard to use for editing the text.','{@template flutter.widgets.editableText.keyboardType} 用于编辑文本的键盘类型。',32,1);
INSERT INTO widget_fields VALUES(1342,244,'textInputAction','TextInputAction?','The type of action button to use with the soft keyboard.','与软键盘一起使用的操作按钮类型。',33,0);
INSERT INTO widget_fields VALUES(1343,244,'onChanged','ValueChanged<String>?','{@template flutter.widgets.editableText.onChanged} Called when the user initiates a change to the TextField''s value: when they have inserted or deleted text.','{@template flutter.widgets.editableText.onChanged} 当用户启动对 TextField 值的更改时调用：当他们插入或删除文本时。',34,0);
INSERT INTO widget_fields VALUES(1344,244,'onEditingComplete','VoidCallback?','{@template flutter.widgets.editableText.onEditingComplete} Called when the user submits editable content (e.g., user presses the "done" button on the keyboard).','{@template flutter.widgets.editableText.onEditingComplete} 当用户提交可编辑内容时调用（例如，用户按下键盘上的\',35,0);
INSERT INTO widget_fields VALUES(1345,244,'onSubmitted','ValueChanged<String>?','{@template flutter.widgets.editableText.onSubmitted} Called when the user indicates that they are done editing the text in the field.','{@template flutter.widgets.editableText.onSubmitted} 当用户指示他们已完成编辑字段中的文本时调用。',36,0);
INSERT INTO widget_fields VALUES(1346,244,'onAppPrivateCommand','AppPrivateCommandCallback?','{@template flutter.widgets.editableText.onAppPrivateCommand} This is used to receive a private command from the input method.','{@template flutter.widgets.editableText.onAppPrivateCommand} 这用于从输入法接收私有命令。',37,0);
INSERT INTO widget_fields VALUES(1347,244,'onSelectionChanged','SelectionChangedCallback?','{@template flutter.widgets.editableText.onSelectionChanged} Called when the user changes the selection of text (including the cursor location). {@endtemplate}','{@template flutter.widgets.editableText.onSelectionChanged} 当用户更改文本选择时调用（包括光标位置）。{@endtemplate}',38,0);
INSERT INTO widget_fields VALUES(1348,244,'onSelectionHandleTapped','VoidCallback?','{@macro flutter.widgets.SelectionOverlay.onSelectionHandleTapped}','{@macro flutter.widgets.SelectionOverlay.onSelectionHandleTapped}',39,0);
INSERT INTO widget_fields VALUES(1349,244,'groupId','Object','{@template flutter.widgets.editableText.groupId} The group identifier for the [TextFieldTapRegion] of this text field.','{@template flutter.widgets.editableText.groupId} 此文本字段的 [TextFieldTapRegion] 的组标识符。',40,1);
INSERT INTO widget_fields VALUES(1350,244,'onTapOutside','TapRegionCallback?','{@template flutter.widgets.editableText.onTapOutside} Called for each tap down that occurs outside of the [TextFieldTapRegion] group when the text field is focused.','{@template flutter.widgets.editableText.onTapOutside} 当文本字段聚焦时，对于发生在 [TextFieldTapRegion] 组外的每次点击调用。',41,0);
INSERT INTO widget_fields VALUES(1351,244,'onTapUpOutside','TapRegionUpCallback?','{@template flutter.widgets.editableText.onTapUpOutside} Called for each tap up that occurs outside of the [TextFieldTapRegion] group when the text field is focused.','{@template flutter.widgets.editableText.onTapUpOutside} 当文本字段聚焦时，对于发生在 [TextFieldTapRegion] 组外的每次点击抬起调用。',42,0);
INSERT INTO widget_fields VALUES(1352,244,'inputFormatters','List<TextInputFormatter>?','{@template flutter.widgets.editableText.inputFormatters} Optional input validation and formatting overrides.','{@template flutter.widgets.editableText.inputFormatters} 可选的输入验证和格式化覆盖。',43,0);
INSERT INTO widget_fields VALUES(1353,244,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',44,0);
INSERT INTO widget_fields VALUES(1354,244,'rendererIgnoresPointer','bool','Whether the caller will provide gesture handling (true), or if the [EditableText] is expected to handle basic gestures (false).','调用者是否将提供手势处理（true），或者 [EditableText] 是否应该处理基本手势（false）。',45,1);
INSERT INTO widget_fields VALUES(1355,244,'cursorWidth','double','{@template flutter.widgets.editableText.cursorWidth} How thick the cursor will be.','{@template flutter.widgets.editableText.cursorWidth} 光标的厚度。',46,1);
INSERT INTO widget_fields VALUES(1356,244,'cursorHeight','double?','{@template flutter.widgets.editableText.cursorHeight} How tall the cursor will be.','{@template flutter.widgets.editableText.cursorHeight} 光标的高度。',47,0);
INSERT INTO widget_fields VALUES(1357,244,'cursorRadius','Radius?','{@template flutter.widgets.editableText.cursorRadius} How rounded the corners of the cursor should be.','{@template flutter.widgets.editableText.cursorRadius} 光标角的圆度。',48,0);
INSERT INTO widget_fields VALUES(1358,244,'cursorOpacityAnimates','bool','{@template flutter.widgets.editableText.cursorOpacityAnimates} Whether the cursor will animate from fully transparent to fully opaque during each cursor blink.','{@template flutter.widgets.editableText.cursorOpacityAnimates} 光标是否在每次光标闪烁期间从完全透明动画到完全不透明。',49,1);
INSERT INTO widget_fields VALUES(1359,244,'cursorOffset','Offset?','{@macro flutter.rendering.RenderEditable.cursorOffset}','{@macro flutter.rendering.RenderEditable.cursorOffset}',50,0);
INSERT INTO widget_fields VALUES(1360,244,'paintCursorAboveText','bool','{@macro flutter.rendering.RenderEditable.paintCursorAboveText}','{@macro flutter.rendering.RenderEditable.paintCursorAboveText}',51,1);
INSERT INTO widget_fields VALUES(1361,244,'selectionHeightStyle','ui.BoxHeightStyle','Controls how tall the selection highlight boxes are computed to be.','控制选择高亮框的计算高度。',52,1);
INSERT INTO widget_fields VALUES(1362,244,'selectionWidthStyle','ui.BoxWidthStyle','Controls how wide the selection highlight boxes are computed to be.','控制选择高亮框的计算宽度。',53,1);
INSERT INTO widget_fields VALUES(1363,244,'keyboardAppearance','Brightness','The appearance of the keyboard.','键盘的外观。',54,1);
INSERT INTO widget_fields VALUES(1364,244,'scrollPadding','EdgeInsets','{@template flutter.widgets.editableText.scrollPadding} Configures the padding for the edges surrounding a [Scrollable] when the text field scrolls into view.','{@template flutter.widgets.editableText.scrollPadding} 当文本字段滚动到视图中时，为围绕 [Scrollable] 的边缘配置内边距。',55,1);
INSERT INTO widget_fields VALUES(1365,244,'enableInteractiveSelection','bool','{@template flutter.widgets.editableText.enableInteractiveSelection} Whether to enable user interface affordances for changing the text selection.','{@template flutter.widgets.editableText.enableInteractiveSelection} 是否启用用于更改文本选择的用户界面功能。',56,1);
INSERT INTO widget_fields VALUES(1366,244,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',57,1);
INSERT INTO widget_fields VALUES(1367,244,'scrollController','ScrollController?','{@template flutter.widgets.editableText.scrollController} The [ScrollController] to use when vertically scrolling the input.','{@template flutter.widgets.editableText.scrollController} 垂直滚动输入时使用的 [ScrollController]。',58,0);
INSERT INTO widget_fields VALUES(1368,244,'scrollPhysics','ScrollPhysics?','{@template flutter.widgets.editableText.scrollPhysics} The [ScrollPhysics] to use when vertically scrolling the input.','{@template flutter.widgets.editableText.scrollPhysics} 垂直滚动输入时使用的 [ScrollPhysics]。',59,0);
INSERT INTO widget_fields VALUES(1369,244,'scribbleEnabled','bool','{@template flutter.widgets.editableText.scribbleEnabled} Whether iOS 14 Scribble features are enabled for this widget.','{@template flutter.widgets.editableText.scribbleEnabled} 是否为此小部件启用 iOS 14 Scribble 功能。',60,1);
INSERT INTO widget_fields VALUES(1370,244,'stylusHandwritingEnabled','bool','{@template flutter.widgets.editableText.stylusHandwritingEnabled} Whether this input supports stylus handwriting, where the user can write directly on top of a field.','{@template flutter.widgets.editableText.stylusHandwritingEnabled} 此输入是否支持手写笔手写，用户可以直接在字段顶部书写。',61,1);
INSERT INTO widget_fields VALUES(1371,244,'autofillHints','Iterable<String>?','{@template flutter.widgets.editableText.autofillHints} A list of strings that helps the autofill service identify the type of this text input.','{@template flutter.widgets.editableText.autofillHints} 帮助自动填充服务识别此文本输入类型的字符串列表。',62,0);
INSERT INTO widget_fields VALUES(1372,244,'autofillClient','AutofillClient?','The [AutofillClient] that controls this input field''s autofill behavior.','控制此输入字段自动填充行为的 [AutofillClient]。',63,0);
INSERT INTO widget_fields VALUES(1373,244,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',64,1);
INSERT INTO widget_fields VALUES(1374,244,'restorationId','String?','Restoration ID to save and restore the scroll offset of the [EditableText].','保存和恢复 [EditableText] 滚动偏移量的恢复 ID。',65,0);
INSERT INTO widget_fields VALUES(1375,244,'scrollBehavior','ScrollBehavior?','{@template flutter.widgets.editableText.scrollBehavior} A [ScrollBehavior] that will be applied to this widget individually.','{@template flutter.widgets.editableText.scrollBehavior} 将单独应用于此小部件的 [ScrollBehavior]。',66,0);
INSERT INTO widget_fields VALUES(1376,244,'enableIMEPersonalizedLearning','bool','{@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning}','{@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning}',67,1);
INSERT INTO widget_fields VALUES(1377,244,'contentInsertionConfiguration','ContentInsertionConfiguration?','{@template flutter.widgets.editableText.contentInsertionConfiguration} Configuration of handler for media content inserted via the system input method.','{@template flutter.widgets.editableText.contentInsertionConfiguration} 通过系统输入法插入的媒体内容处理程序的配置。',68,0);
INSERT INTO widget_fields VALUES(1378,244,'contextMenuBuilder','EditableTextContextMenuBuilder?','{@template flutter.widgets.EditableText.contextMenuBuilder} Builds the text selection toolbar when requested by the user.','{@template flutter.widgets.EditableText.contextMenuBuilder} 用户请求时构建文本选择工具栏。',69,0);
INSERT INTO widget_fields VALUES(1379,244,'spellCheckConfiguration','SpellCheckConfiguration?','{@template flutter.widgets.EditableText.spellCheckConfiguration} Configuration that details how spell check should be performed.','{@template flutter.widgets.EditableText.spellCheckConfiguration} 详细说明如何执行拼写检查的配置。',70,0);
INSERT INTO widget_fields VALUES(1380,244,'magnifierConfiguration','TextMagnifierConfiguration','The configuration for the magnifier to use with selections in this text field.','用于此文本字段中选择的放大镜配置。',71,1);
INSERT INTO widget_fields VALUES(1381,413,'data','ElevatedButtonThemeData','The configuration of this theme.','此主题的配置。',0,1);
INSERT INTO widget_fields VALUES(1382,197,'message','String','The message to display.','要显示的消息。',0,1);
INSERT INTO widget_fields VALUES(1383,414,'excluding','bool','If true, will make this widget''s descendants unfocusable.','如果为 true，将使此小部件的后代无法聚焦。',0,1);
INSERT INTO widget_fields VALUES(1384,414,'child','Widget','The child widget of this [ExcludeFocus].','此 [ExcludeFocus] 的子小部件。',1,1);
INSERT INTO widget_fields VALUES(1385,415,'excluding','bool','If true, will make this widget''s descendants untraversable.','如果为 true，将使此小部件的后代不可遍历。',0,1);
INSERT INTO widget_fields VALUES(1386,415,'child','Widget','The child widget of this [ExcludeFocusTraversal].','此 [ExcludeFocusTraversal] 的子小部件。',1,1);
INSERT INTO widget_fields VALUES(1387,416,'excluding','bool','Whether this widget is excluded in the semantics tree.','此小部件是否在语义树中被排除。',0,1);
INSERT INTO widget_fields VALUES(1388,51,'isExpanded','bool','Whether the icon is in an expanded state.','图标是否处于展开状态。',0,1);
INSERT INTO widget_fields VALUES(1389,51,'size','double','The size of the icon.','图标的大小。',1,1);
INSERT INTO widget_fields VALUES(1390,51,'onPressed','ValueChanged<bool>?','The callback triggered when the icon is pressed and the state changes between expanded and collapsed. The value passed to the current state.','按下图标且状态在展开和折叠之间变化时触发的回调。传递给当前状态的值。',2,0);
INSERT INTO widget_fields VALUES(1391,51,'padding','EdgeInsetsGeometry','The padding around the icon. The entire padded icon will react to input gestures.','图标周围的内边距。整个带内边距的图标将对输入手势做出反应。',3,1);
INSERT INTO widget_fields VALUES(1392,51,'color','Color?','{@template flutter.material.ExpandIcon.color} The color of the icon.','{@template flutter.material.ExpandIcon.color} 图标的颜色。',4,0);
INSERT INTO widget_fields VALUES(1393,51,'disabledColor','Color?','The color of the icon when it is disabled, i.e. if [onPressed] is null.','图标禁用时的颜色，即 [onPressed] 为 null 时。',5,0);
INSERT INTO widget_fields VALUES(1394,51,'expandedColor','Color?','The color of the icon when the icon is expanded.','图标展开时的颜色。',6,0);
INSERT INTO widget_fields VALUES(1395,51,'splashColor','Color?','Defines the splash color of the IconButton.','定义 IconButton 的飞溅颜色。',7,0);
INSERT INTO widget_fields VALUES(1396,51,'highlightColor','Color?','Defines the highlight color of the IconButton.','定义 IconButton 的高亮颜色。',8,0);
INSERT INTO widget_fields VALUES(1397,417,'controller','ExpansibleController','Expands and collapses the widget.','展开和折叠小部件。',0,1);
INSERT INTO widget_fields VALUES(1398,417,'headerBuilder','ExpansibleComponentBuilder','Builds the always-displayed header.','构建始终显示的标题。',1,1);
INSERT INTO widget_fields VALUES(1399,417,'bodyBuilder','ExpansibleComponentBuilder','Builds the collapsible body.','构建可折叠的主体。',2,1);
INSERT INTO widget_fields VALUES(1400,417,'duration','Duration','The duration of the expansion animation.','展开动画的持续时间。',3,1);
INSERT INTO widget_fields VALUES(1401,417,'curve','Curve','The curve of the expansion animation.','展开动画的曲线。',4,1);
INSERT INTO widget_fields VALUES(1402,417,'reverseCurve','Curve?','The reverse curve of the expansion animation.','展开动画的反向曲线。',5,0);
INSERT INTO widget_fields VALUES(1403,417,'maintainState','bool','Whether the state of the body is maintained when the widget expands or collapses.','当小部件展开或折叠时是否保持主体的状态。',6,1);
INSERT INTO widget_fields VALUES(1404,417,'expansibleBuilder','ExpansibleBuilder','Builds the widget with the results of [headerBuilder] and [bodyBuilder].','使用 [headerBuilder] 和 [bodyBuilder] 的结果构建小部件。',7,1);
INSERT INTO widget_fields VALUES(1405,178,'children','List<ExpansionPanel>','The children of the expansion panel list. They are laid out in a similar fashion to [ListBody].','展开面板列表的子项。它们以类似于 [ListBody] 的方式布局。',0,1);
INSERT INTO widget_fields VALUES(1406,178,'expansionCallback','ExpansionPanelCallback?','The callback that gets called whenever one of the expand/collapse buttons is pressed. The arguments passed to the callback are the index of the pressed panel and whether the panel is currently expanded or not.','每当按下展开/折叠按钮之一时调用的回调。传递给回调的参数是按下的面板的索引以及面板当前是否展开。',1,0);
INSERT INTO widget_fields VALUES(1407,178,'animationDuration','Duration','The duration of the expansion animation.','展开动画的持续时间。',2,1);
INSERT INTO widget_fields VALUES(1408,178,'initialOpenPanelValue','Object?','The value of the panel that initially begins open. (This value is only used when initializing with the [ExpansionPanelList.radio] constructor.)','最初开始打开的面板的值。（此值仅在使用 [ExpansionPanelList.radio] 构造函数初始化时使用。）',3,0);
INSERT INTO widget_fields VALUES(1409,178,'expandedHeaderPadding','EdgeInsets','The padding that surrounds the panel header when expanded.','展开时围绕面板标题的内边距。',4,1);
INSERT INTO widget_fields VALUES(1410,178,'dividerColor','Color?','Defines color for the divider when [ExpansionPanel.isExpanded] is false.','当 [ExpansionPanel.isExpanded] 为 false 时定义分隔符的颜色。',5,0);
INSERT INTO widget_fields VALUES(1411,178,'elevation','double','Defines elevation for the [ExpansionPanel] while it''s expanded.','定义 [ExpansionPanel] 展开时的高度。',6,1);
INSERT INTO widget_fields VALUES(1412,178,'expandIconColor','Color?','{@macro flutter.material.ExpandIcon.color}','{@macro flutter.material.ExpandIcon.color}',7,0);
INSERT INTO widget_fields VALUES(1413,178,'materialGapSize','double','Defines the [MaterialGap.size] of the [MaterialGap] which is placed between the [ExpansionPanelList.children] when they''re expanded.','定义当 [ExpansionPanelList.children] 展开时放置在它们之间的 [MaterialGap] 的 [MaterialGap.size]。',8,1);
INSERT INTO widget_fields VALUES(1414,52,'leading','Widget?','A widget to display before the title.','在标题前显示的小部件。',0,0);
INSERT INTO widget_fields VALUES(1415,52,'title','Widget','The primary content of the list item.','列表项的主要内容。',1,1);
INSERT INTO widget_fields VALUES(1416,52,'subtitle','Widget?','Additional content displayed below the title.','显示在标题下方的附加内容。',2,0);
INSERT INTO widget_fields VALUES(1417,52,'onExpansionChanged','ValueChanged<bool>?','Called when the tile expands or collapses.','磁贴展开或折叠时调用。',3,0);
INSERT INTO widget_fields VALUES(1418,52,'children','List<Widget>','The widgets that are displayed when the tile expands.','磁贴展开时显示的小部件。',4,1);
INSERT INTO widget_fields VALUES(1419,52,'backgroundColor','Color?','The color to display behind the sublist when expanded.','展开时子列表后面显示的颜色。',5,0);
INSERT INTO widget_fields VALUES(1420,52,'collapsedBackgroundColor','Color?','When not null, defines the background color of tile when the sublist is collapsed.','当不为 null 时，定义子列表折叠时磁贴的背景颜色。',6,0);
INSERT INTO widget_fields VALUES(1421,52,'trailing','Widget?','A widget to display after the title.','在标题后显示的小部件。',7,0);
INSERT INTO widget_fields VALUES(1422,52,'showTrailingIcon','bool','Specifies if the [ExpansionTile] should build a default trailing icon if [trailing] is null.','指定如果 [trailing] 为 null，[ExpansionTile] 是否应构建默认尾随图标。',8,1);
INSERT INTO widget_fields VALUES(1423,52,'initiallyExpanded','bool','Specifies if the list tile is initially expanded (true) or collapsed (false).','指定列表磁贴最初是展开（true）还是折叠（false）。',9,1);
INSERT INTO widget_fields VALUES(1424,52,'maintainState','bool','Specifies whether the state of the children is maintained when the tile expands and collapses.','指定磁贴展开和折叠时是否保持子项的状态。',10,1);
INSERT INTO widget_fields VALUES(1425,52,'tilePadding','EdgeInsetsGeometry?','Specifies padding for the [ListTile].','指定 [ListTile] 的内边距。',11,0);
INSERT INTO widget_fields VALUES(1426,52,'expandedAlignment','Alignment?','Specifies the alignment of [children], which are arranged in a column when the tile is expanded.','指定磁贴展开时排列在列中的 [children] 的对齐方式。',12,0);
INSERT INTO widget_fields VALUES(1427,52,'expandedCrossAxisAlignment','CrossAxisAlignment?','Specifies the alignment of each child within [children] when the tile is expanded.','指定磁贴展开时 [children] 内每个子项的对齐方式。',13,0);
INSERT INTO widget_fields VALUES(1428,52,'childrenPadding','EdgeInsetsGeometry?','Specifies padding for [children].','指定 [children] 的内边距。',14,0);
INSERT INTO widget_fields VALUES(1429,52,'iconColor','Color?','The icon color of tile''s expansion arrow icon when the sublist is expanded.','子列表展开时磁贴展开箭头图标的图标颜色。',15,0);
INSERT INTO widget_fields VALUES(1430,52,'collapsedIconColor','Color?','The icon color of tile''s expansion arrow icon when the sublist is collapsed.','子列表折叠时磁贴展开箭头图标的图标颜色。',16,0);
INSERT INTO widget_fields VALUES(1431,52,'textColor','Color?','The color of the tile''s titles when the sublist is expanded.','子列表展开时磁贴标题的颜色。',17,0);
INSERT INTO widget_fields VALUES(1432,52,'collapsedTextColor','Color?','The color of the tile''s titles when the sublist is collapsed.','子列表折叠时磁贴标题的颜色。',18,0);
INSERT INTO widget_fields VALUES(1433,52,'shape','ShapeBorder?','The tile''s border shape when the sublist is expanded.','子列表展开时磁贴的边框形状。',19,0);
INSERT INTO widget_fields VALUES(1434,52,'collapsedShape','ShapeBorder?','The tile''s border shape when the sublist is collapsed.','子列表折叠时磁贴的边框形状。',20,0);
INSERT INTO widget_fields VALUES(1435,52,'clipBehavior','Clip?','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',21,0);
INSERT INTO widget_fields VALUES(1436,52,'controlAffinity','ListTileControlAffinity?','Typically used to force the expansion arrow icon to the tile''s leading or trailing edge.','通常用于强制展开箭头图标到磁贴的前缘或后缘。',22,0);
INSERT INTO widget_fields VALUES(1437,52,'controller','ExpansionTileController?','If provided, the controller can be used to expand and collapse tiles.','如果提供，控制器可用于展开和折叠磁贴。',23,0);
INSERT INTO widget_fields VALUES(1438,52,'dense','bool?','{@macro flutter.material.ListTile.dense}','{@macro flutter.material.ListTile.dense}',24,0);
INSERT INTO widget_fields VALUES(1439,52,'visualDensity','VisualDensity?','Defines how compact the expansion tile''s layout will be.','定义展开磁贴布局的紧凑程度。',25,0);
INSERT INTO widget_fields VALUES(1440,52,'minTileHeight','double?','{@macro flutter.material.ListTile.minTileHeight}','{@macro flutter.material.ListTile.minTileHeight}',26,0);
INSERT INTO widget_fields VALUES(1441,52,'enableFeedback','bool?','{@macro flutter.material.ListTile.enableFeedback}','{@macro flutter.material.ListTile.enableFeedback}',27,0);
INSERT INTO widget_fields VALUES(1442,52,'enabled','bool','Whether this expansion tile is interactive.','此展开磁贴是否可交互。',28,1);
INSERT INTO widget_fields VALUES(1443,52,'expansionAnimationStyle','AnimationStyle?','Used to override the expansion animation curve and duration.','用于覆盖展开动画曲线和持续时间。',29,0);
INSERT INTO widget_fields VALUES(1444,52,'internalAddSemanticForOnTap','bool','Whether to add button:true to the semantics if onTap is provided. This is a temporary flag to help changing the behavior of ListTile onTap semantics.','如果提供了 onTap，是否向语义添加 button:true。这是一个临时标志，用于帮助更改 ListTile onTap 语义的行为。',30,1);
INSERT INTO widget_fields VALUES(1445,418,'data','ExpansionTileThemeData','Specifies color, alignment, and text style values for descendant [ExpansionTile] widgets.','指定后代 [ExpansionTile] 小部件的颜色、对齐和文本样式值。',0,1);
INSERT INTO widget_fields VALUES(1446,8,'placeholder','ImageProvider','Image displayed while the target [image] is loading.','目标 [image] 加载时显示的图像。',0,1);
INSERT INTO widget_fields VALUES(1447,8,'placeholderErrorBuilder','ImageErrorWidgetBuilder?','A builder function that is called if an error occurs during placeholder image loading.','如果在占位符图像加载期间发生错误，则调用的构建器函数。',1,0);
INSERT INTO widget_fields VALUES(1448,8,'image','ImageProvider','The target image that is displayed once it has loaded.','加载后显示的目标图像。',2,1);
INSERT INTO widget_fields VALUES(1449,8,'imageErrorBuilder','ImageErrorWidgetBuilder?','A builder function that is called if an error occurs during image loading.','如果在图像加载期间发生错误，则调用的构建器函数。',3,0);
INSERT INTO widget_fields VALUES(1450,8,'fadeOutDuration','Duration','The duration of the fade-out animation for the [placeholder].','[placeholder] 的淡出动画持续时间。',4,1);
INSERT INTO widget_fields VALUES(1451,8,'fadeOutCurve','Curve','The curve of the fade-out animation for the [placeholder].','[placeholder] 的淡出动画曲线。',5,1);
INSERT INTO widget_fields VALUES(1452,8,'fadeInDuration','Duration','The duration of the fade-in animation for the [image].','[image] 的淡入动画持续时间。',6,1);
INSERT INTO widget_fields VALUES(1453,8,'fadeInCurve','Curve','The curve of the fade-in animation for the [image].','[image] 的淡入动画曲线。',7,1);
INSERT INTO widget_fields VALUES(1454,8,'width','double?','If non-null, require the image to have this width.','如果非空，要求图像具有此宽度。',8,0);
INSERT INTO widget_fields VALUES(1455,8,'color','Color?','If non-null, this color is blended with each image pixel using [colorBlendMode].','如果非空，此颜色使用 [colorBlendMode] 与每个图像像素混合。',9,0);
INSERT INTO widget_fields VALUES(1456,8,'colorBlendMode','BlendMode?','Used to combine [color] with this [image].','用于将 [color] 与此 [image] 组合。',10,0);
INSERT INTO widget_fields VALUES(1457,8,'placeholderColor','Color?','If non-null, this color is blended with each placeholder image pixel using [placeholderColorBlendMode].','如果非空，此颜色使用 [placeholderColorBlendMode] 与每个占位符图像像素混合。',11,0);
INSERT INTO widget_fields VALUES(1458,8,'placeholderColorBlendMode','BlendMode?','Used to combine [placeholderColor] with the [placeholder] image.','用于将 [placeholderColor] 与 [placeholder] 图像组合。',12,0);
INSERT INTO widget_fields VALUES(1459,8,'height','double?','If non-null, require the image to have this height.','如果非空，要求图像具有此高度。',13,0);
INSERT INTO widget_fields VALUES(1460,8,'fit','BoxFit?','How to inscribe the image into the space allocated during layout.','如何在布局期间分配的空间中刻画图像。',14,0);
INSERT INTO widget_fields VALUES(1461,8,'placeholderFit','BoxFit?','How to inscribe the placeholder image into the space allocated during layout.','如何在布局期间分配的空间中刻画占位符图像。',15,0);
INSERT INTO widget_fields VALUES(1462,8,'filterQuality','FilterQuality','The rendering quality of the image.','图像的渲染质量。',16,1);
INSERT INTO widget_fields VALUES(1463,8,'placeholderFilterQuality','FilterQuality?','The rendering quality of the placeholder image.','占位符图像的渲染质量。',17,0);
INSERT INTO widget_fields VALUES(1464,8,'alignment','AlignmentGeometry','How to align the image within its bounds.','如何在其边界内对齐图像。',18,1);
INSERT INTO widget_fields VALUES(1465,8,'repeat','ImageRepeat','How to paint any portions of the layout bounds not covered by the image.','如何绘制图像未覆盖的布局边界的任何部分。',19,1);
INSERT INTO widget_fields VALUES(1466,8,'matchTextDirection','bool','Whether to paint the image in the direction of the [TextDirection].','是否在 [TextDirection] 的方向上绘制图像。',20,1);
INSERT INTO widget_fields VALUES(1467,8,'excludeFromSemantics','bool','Whether to exclude this image from semantics.','是否从语义中排除此图像。',21,1);
INSERT INTO widget_fields VALUES(1468,8,'imageSemanticLabel','String?','A semantic description of the [image].','[image] 的语义描述。',22,0);
INSERT INTO widget_fields VALUES(1469,89,'opacity','Animation<double>','The animation that controls the opacity of the child.','控制子项不透明度的动画。',0,1);
INSERT INTO widget_fields VALUES(1470,89,'alwaysIncludeSemantics','bool','Whether the semantic information of the children is always included.','是否始终包含子项的语义信息。',1,1);
INSERT INTO widget_fields VALUES(1471,419,'data','FilledButtonThemeData','The configuration of this theme.','此主题的配置。',0,1);
INSERT INTO widget_fields VALUES(1472,15,'avatar','Widget?',NULL,NULL,0,0);
INSERT INTO widget_fields VALUES(1473,15,'label','Widget',NULL,NULL,1,1);
INSERT INTO widget_fields VALUES(1474,15,'labelStyle','TextStyle?',NULL,NULL,2,0);
INSERT INTO widget_fields VALUES(1475,15,'labelPadding','EdgeInsetsGeometry?',NULL,NULL,3,0);
INSERT INTO widget_fields VALUES(1476,15,'selected','bool',NULL,NULL,4,1);
INSERT INTO widget_fields VALUES(1477,15,'onSelected','ValueChanged<bool>?',NULL,NULL,5,0);
INSERT INTO widget_fields VALUES(1478,15,'deleteIcon','Widget?',NULL,NULL,6,0);
INSERT INTO widget_fields VALUES(1479,15,'onDeleted','VoidCallback?',NULL,NULL,7,0);
INSERT INTO widget_fields VALUES(1480,15,'deleteIconColor','Color?',NULL,NULL,8,0);
INSERT INTO widget_fields VALUES(1481,15,'deleteButtonTooltipMessage','String?',NULL,NULL,9,0);
INSERT INTO widget_fields VALUES(1482,15,'pressElevation','double?',NULL,NULL,10,0);
INSERT INTO widget_fields VALUES(1483,15,'disabledColor','Color?',NULL,NULL,11,0);
INSERT INTO widget_fields VALUES(1484,15,'selectedColor','Color?',NULL,NULL,12,0);
INSERT INTO widget_fields VALUES(1485,15,'tooltip','String?',NULL,NULL,13,0);
INSERT INTO widget_fields VALUES(1486,15,'side','BorderSide?',NULL,NULL,14,0);
INSERT INTO widget_fields VALUES(1487,15,'shape','OutlinedBorder?',NULL,NULL,15,0);
INSERT INTO widget_fields VALUES(1488,15,'clipBehavior','Clip',NULL,NULL,16,1);
INSERT INTO widget_fields VALUES(1489,15,'focusNode','FocusNode?',NULL,NULL,17,0);
INSERT INTO widget_fields VALUES(1490,15,'autofocus','bool',NULL,NULL,18,1);
INSERT INTO widget_fields VALUES(1491,15,'color','MaterialStateProperty<Color?>?',NULL,NULL,19,0);
INSERT INTO widget_fields VALUES(1492,15,'backgroundColor','Color?',NULL,NULL,20,0);
INSERT INTO widget_fields VALUES(1493,15,'padding','EdgeInsetsGeometry?',NULL,NULL,21,0);
INSERT INTO widget_fields VALUES(1494,15,'visualDensity','VisualDensity?',NULL,NULL,22,0);
INSERT INTO widget_fields VALUES(1495,15,'materialTapTargetSize','MaterialTapTargetSize?',NULL,NULL,23,0);
INSERT INTO widget_fields VALUES(1496,15,'elevation','double?',NULL,NULL,24,0);
INSERT INTO widget_fields VALUES(1497,15,'shadowColor','Color?',NULL,NULL,25,0);
INSERT INTO widget_fields VALUES(1498,15,'surfaceTintColor','Color?',NULL,NULL,26,0);
INSERT INTO widget_fields VALUES(1499,15,'selectedShadowColor','Color?',NULL,NULL,27,0);
INSERT INTO widget_fields VALUES(1500,15,'showCheckmark','bool?',NULL,NULL,28,0);
INSERT INTO widget_fields VALUES(1501,15,'checkmarkColor','Color?',NULL,NULL,29,0);
INSERT INTO widget_fields VALUES(1502,15,'avatarBorder','ShapeBorder',NULL,NULL,30,1);
INSERT INTO widget_fields VALUES(1503,15,'iconTheme','IconThemeData?',NULL,NULL,31,0);
INSERT INTO widget_fields VALUES(1504,15,'avatarBoxConstraints','BoxConstraints?',NULL,NULL,32,0);
INSERT INTO widget_fields VALUES(1505,15,'deleteIconBoxConstraints','BoxConstraints?',NULL,NULL,33,0);
INSERT INTO widget_fields VALUES(1506,15,'chipAnimationStyle','ChipAnimationStyle?',NULL,NULL,34,0);
INSERT INTO widget_fields VALUES(1507,15,'mouseCursor','MouseCursor?',NULL,NULL,35,0);
INSERT INTO widget_fields VALUES(1508,87,'fit','BoxFit','How to inscribe the child into the space allocated during layout.','如何在布局期间分配的空间中刻画子项。',0,1);
INSERT INTO widget_fields VALUES(1509,87,'alignment','AlignmentGeometry','How to align the child within its parent''s bounds.','如何在其父级边界内对齐子项。',1,1);
INSERT INTO widget_fields VALUES(1510,87,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',2,1);
INSERT INTO widget_fields VALUES(1511,94,'direction','Axis','The direction to use as the main axis.','用作主轴的方向。',0,1);
INSERT INTO widget_fields VALUES(1512,94,'mainAxisAlignment','MainAxisAlignment','How the children should be placed along the main axis.','子项应如何沿主轴放置。',1,1);
INSERT INTO widget_fields VALUES(1513,94,'mainAxisSize','MainAxisSize','How much space should be occupied in the main axis.','主轴应占用多少空间。',2,1);
INSERT INTO widget_fields VALUES(1514,94,'crossAxisAlignment','CrossAxisAlignment','How the children should be placed along the cross axis.','子项应如何沿交叉轴放置。',3,1);
INSERT INTO widget_fields VALUES(1515,94,'textDirection','TextDirection?','Determines the order to lay children out horizontally and how to interpret `start` and `end` in the horizontal direction.','确定水平布局子项的顺序以及如何解释水平方向上的 `start` 和 `end`。',4,0);
INSERT INTO widget_fields VALUES(1516,94,'verticalDirection','VerticalDirection','Determines the order to lay children out vertically and how to interpret `start` and `end` in the vertical direction.','确定垂直布局子项的顺序以及如何解释垂直方向上的 `start` 和 `end`。',5,1);
INSERT INTO widget_fields VALUES(1517,94,'textBaseline','TextBaseline?','If aligning items according to their baseline, which baseline to use.','如果根据基线对齐项目，使用哪个基线。',6,0);
INSERT INTO widget_fields VALUES(1518,94,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',7,1);
INSERT INTO widget_fields VALUES(1519,94,'spacing','double','{@macro flutter.rendering.RenderFlex.spacing}','{@macro flutter.rendering.RenderFlex.spacing}',8,1);
INSERT INTO widget_fields VALUES(1520,109,'flex','int','The flex factor to use for this child.','用于此子项的弹性因子。',0,1);
INSERT INTO widget_fields VALUES(1521,109,'fit','FlexFit','How a flexible child is inscribed into the available space.','弹性子项如何刻画到可用空间中。',1,1);
INSERT INTO widget_fields VALUES(1522,196,'title','Widget?','The primary contents of the flexible space bar when expanded.','展开时弹性空间栏的主要内容。',0,0);
INSERT INTO widget_fields VALUES(1523,196,'background','Widget?','Shown behind the [title] when expanded.','展开时显示在 [title] 后面。',1,0);
INSERT INTO widget_fields VALUES(1524,196,'centerTitle','bool?','Whether the title should be centered.','标题是否应居中。',2,0);
INSERT INTO widget_fields VALUES(1525,196,'collapseMode','CollapseMode','Collapse effect while scrolling.','滚动时的折叠效果。',3,1);
INSERT INTO widget_fields VALUES(1526,196,'stretchModes','List<StretchMode>','Stretch effect while over-scrolling.','过度滚动时的拉伸效果。',4,1);
INSERT INTO widget_fields VALUES(1527,196,'titlePadding','EdgeInsetsGeometry?','Defines how far the [title] is inset from either the widget''s bottom-left or its center.','定义 [title] 从小部件左下角或中心插入多远。',5,0);
INSERT INTO widget_fields VALUES(1528,196,'expandedTitleScale','double','Defines how much the title is scaled when the FlexibleSpaceBar is expanded due to the user scrolling downwards. The title is scaled uniformly on the x and y axes while maintaining its bottom-left position (bottom-center if [centerTitle] is true).','定义当用户向下滚动导致 FlexibleSpaceBar 展开时标题缩放多少。标题在 x 和 y 轴上均匀缩放，同时保持其左下位置（如果 [centerTitle] 为 true，则为底部中心）。',6,1);
INSERT INTO widget_fields VALUES(1529,420,'toolbarOpacity','double','Affects how transparent the text within the toolbar appears.','影响工具栏内文本的透明度。',0,1);
INSERT INTO widget_fields VALUES(1530,420,'minExtent','double','Minimum height of the resulting [FlexibleSpaceBar] when fully collapsed.','完全折叠时生成的 [FlexibleSpaceBar] 的最小高度。',1,1);
INSERT INTO widget_fields VALUES(1531,420,'maxExtent','double','Maximum height of the resulting [FlexibleSpaceBar] when fully expanded.','完全展开时生成的 [FlexibleSpaceBar] 的最大高度。',2,1);
INSERT INTO widget_fields VALUES(1532,420,'currentExtent','double','If the [FlexibleSpaceBar.title] or the [FlexibleSpaceBar.background] is not null, then this value is used to calculate the relative scale of these elements upon initialization.','如果 [FlexibleSpaceBar.title] 或 [FlexibleSpaceBar.background] 不为 null，则此值用于在初始化时计算这些元素的相对比例。',3,1);
INSERT INTO widget_fields VALUES(1533,420,'isScrolledUnder','bool?','True if the FlexibleSpaceBar overlaps the primary scrollable''s contents.','如果 FlexibleSpaceBar 与主要可滚动内容重叠，则为 true。',4,0);
INSERT INTO widget_fields VALUES(1534,420,'hasLeading','bool?','True if the FlexibleSpaceBar has a leading widget.','如果 FlexibleSpaceBar 有前导小部件，则为 true。',5,0);
INSERT INTO widget_fields VALUES(1535,28,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(1536,28,'tooltip','String?','Text that describes the action that will occur when the button is pressed.','描述按下按钮时将发生的操作的文本。',1,0);
INSERT INTO widget_fields VALUES(1537,28,'foregroundColor','Color?','The default foreground color for icons and text within the button.','按钮内图标和文本的默认前景色。',2,0);
INSERT INTO widget_fields VALUES(1538,28,'backgroundColor','Color?','The button''s background color.','按钮的背景颜色。',3,0);
INSERT INTO widget_fields VALUES(1539,28,'focusColor','Color?','The color to use for filling the button when the button has input focus.','按钮具有输入焦点时用于填充按钮的颜色。',4,0);
INSERT INTO widget_fields VALUES(1540,28,'hoverColor','Color?','The color to use for filling the button when the button has a pointer hovering over it.','按钮有指针悬停在其上时用于填充按钮的颜色。',5,0);
INSERT INTO widget_fields VALUES(1541,28,'splashColor','Color?','The splash color for this [FloatingActionButton]''s [InkWell].','此 [FloatingActionButton] 的 [InkWell] 的飞溅颜色。',6,0);
INSERT INTO widget_fields VALUES(1542,28,'heroTag','Object?','The tag to apply to the button''s [Hero] widget.','应用于按钮的 [Hero] 小部件的标签。',7,0);
INSERT INTO widget_fields VALUES(1543,28,'onPressed','VoidCallback?','The callback that is called when the button is tapped or otherwise activated.','点击或以其他方式激活按钮时调用的回调。',8,0);
INSERT INTO widget_fields VALUES(1544,28,'mouseCursor','MouseCursor?','{@macro flutter.material.RawMaterialButton.mouseCursor}','{@macro flutter.material.RawMaterialButton.mouseCursor}',9,0);
INSERT INTO widget_fields VALUES(1545,28,'elevation','double?','The z-coordinate at which to place this button relative to its parent.','相对于其父级放置此按钮的 z 坐标。',10,0);
INSERT INTO widget_fields VALUES(1546,28,'focusElevation','double?','The z-coordinate at which to place this button relative to its parent when the button has the input focus.','按钮具有输入焦点时相对于其父级放置此按钮的 z 坐标。',11,0);
INSERT INTO widget_fields VALUES(1547,28,'hoverElevation','double?','The z-coordinate at which to place this button relative to its parent when the button is enabled and has a pointer hovering over it.','按钮启用且有指针悬停在其上时相对于其父级放置此按钮的 z 坐标。',12,0);
INSERT INTO widget_fields VALUES(1548,28,'highlightElevation','double?','The z-coordinate at which to place this button relative to its parent when the user is touching the button.','用户触摸按钮时相对于其父级放置此按钮的 z 坐标。',13,0);
INSERT INTO widget_fields VALUES(1549,28,'disabledElevation','double?','The z-coordinate at which to place this button when the button is disabled ([onPressed] is null).','按钮禁用时（[onPressed] 为 null）放置此按钮的 z 坐标。',14,0);
INSERT INTO widget_fields VALUES(1550,28,'mini','bool','Controls the size of this button.','控制此按钮的大小。',15,1);
INSERT INTO widget_fields VALUES(1551,28,'shape','ShapeBorder?','The shape of the button''s [Material].','按钮的 [Material] 的形状。',16,0);
INSERT INTO widget_fields VALUES(1552,28,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',17,1);
INSERT INTO widget_fields VALUES(1553,28,'isExtended','bool','True if this is an "extended" floating action button.','如果这是',18,1);
INSERT INTO widget_fields VALUES(1554,28,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',19,0);
INSERT INTO widget_fields VALUES(1555,28,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',20,1);
INSERT INTO widget_fields VALUES(1556,28,'materialTapTargetSize','MaterialTapTargetSize?','Configures the minimum size of the tap target.','配置点击目标的最小大小。',21,0);
INSERT INTO widget_fields VALUES(1557,28,'enableFeedback','bool?','Whether detected gestures should provide acoustic and/or haptic feedback.','检测到的手势是否应提供声音和/或触觉反馈。',22,0);
INSERT INTO widget_fields VALUES(1558,28,'extendedIconLabelSpacing','double?','The spacing between the icon and the label for an extended [FloatingActionButton].','扩展 [FloatingActionButton] 的图标和标签之间的间距。',23,0);
INSERT INTO widget_fields VALUES(1559,28,'extendedPadding','EdgeInsetsGeometry?','The padding for an extended [FloatingActionButton]''s content.','扩展 [FloatingActionButton] 内容的内边距。',24,0);
INSERT INTO widget_fields VALUES(1560,28,'extendedTextStyle','TextStyle?','The text style for an extended [FloatingActionButton]''s label.','扩展 [FloatingActionButton] 标签的文本样式。',25,0);
INSERT INTO widget_fields VALUES(1561,99,'delegate','FlowDelegate','The delegate that controls the transformation matrices of the children.','控制子项变换矩阵的委托。',0,1);
INSERT INTO widget_fields VALUES(1562,99,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',1,1);
INSERT INTO widget_fields VALUES(1563,4,'size','double?','The size of the logo in logical pixels.','标志的逻辑像素大小。',0,0);
INSERT INTO widget_fields VALUES(1564,4,'textColor','Color','The color used to paint the "Flutter" text on the logo, if [style] is [FlutterLogoStyle.horizontal] or [FlutterLogoStyle.stacked].','如果 [style] 是 [FlutterLogoStyle.horizontal] 或 [FlutterLogoStyle.stacked]，用于绘制标志上',1,1);
INSERT INTO widget_fields VALUES(1565,4,'style','FlutterLogoStyle','Whether and where to draw the "Flutter" text. By default, only the logo itself is drawn.','是否以及在何处绘制',2,1);
INSERT INTO widget_fields VALUES(1566,4,'duration','Duration','The length of time for the animation if the [style] or [textColor] properties are changed.','如果 [style] 或 [textColor] 属性更改，动画的时长。',3,1);
INSERT INTO widget_fields VALUES(1567,4,'curve','Curve','The curve for the logo animation if the [style] or [textColor] change.','如果 [style] 或 [textColor] 更改，标志动画的曲线。',4,1);
INSERT INTO widget_fields VALUES(1568,282,'parentNode','FocusNode?','The optional parent node to use when reparenting the [focusNode] for this [Focus] widget.','为此 [Focus] 小部件重新设置 [focusNode] 父级时使用的可选父节点。',0,0);
INSERT INTO widget_fields VALUES(1569,282,'child','Widget','The child widget of this [Focus].','此 [Focus] 的子小部件。',1,1);
INSERT INTO widget_fields VALUES(1570,282,'focusNode','FocusNode?','{@template flutter.widgets.Focus.focusNode} An optional focus node to use as the focus node for this widget.','{@template flutter.widgets.Focus.focusNode} 用作此小部件焦点节点的可选焦点节点。',2,0);
INSERT INTO widget_fields VALUES(1571,282,'autofocus','bool','{@template flutter.widgets.Focus.autofocus} True if this widget will be selected as the initial focus when no other node in its scope is currently focused.','{@template flutter.widgets.Focus.autofocus} 如果此小部件将在其范围内当前没有其他节点聚焦时被选为初始焦点，则为 true。',3,1);
INSERT INTO widget_fields VALUES(1572,282,'onFocusChange','ValueChanged<bool>?','Handler called when the focus changes.','焦点更改时调用的处理程序。',4,0);
INSERT INTO widget_fields VALUES(1573,282,'includeSemantics','bool','{@template flutter.widgets.Focus.includeSemantics} Include semantics information in this widget.','{@template flutter.widgets.Focus.includeSemantics} 在此小部件中包含语义信息。',5,1);
INSERT INTO widget_fields VALUES(1574,424,'enabled','bool','Is this widget enabled or not.','此小部件是否启用。',0,1);
INSERT INTO widget_fields VALUES(1575,424,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',1,0);
INSERT INTO widget_fields VALUES(1576,424,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',2,1);
INSERT INTO widget_fields VALUES(1577,424,'descendantsAreFocusable','bool','{@macro flutter.widgets.Focus.descendantsAreFocusable}','{@macro flutter.widgets.Focus.descendantsAreFocusable}',3,1);
INSERT INTO widget_fields VALUES(1578,424,'descendantsAreTraversable','bool','{@macro flutter.widgets.Focus.descendantsAreTraversable}','{@macro flutter.widgets.Focus.descendantsAreTraversable}',4,1);
INSERT INTO widget_fields VALUES(1579,424,'actions','Map<Type, Action<Intent>>?','{@macro flutter.widgets.actions.actions}','{@macro flutter.widgets.actions.actions}',5,0);
INSERT INTO widget_fields VALUES(1580,424,'shortcuts','Map<ShortcutActivator, Intent>?','{@macro flutter.widgets.shortcuts.shortcuts}','{@macro flutter.widgets.shortcuts.shortcuts}',6,0);
INSERT INTO widget_fields VALUES(1581,424,'onShowFocusHighlight','ValueChanged<bool>?','A function that will be called when the focus highlight should be shown or hidden.','当应显示或隐藏焦点高亮时将调用的函数。',7,0);
INSERT INTO widget_fields VALUES(1582,424,'onShowHoverHighlight','ValueChanged<bool>?','A function that will be called when the hover highlight should be shown or hidden.','当应显示或隐藏悬停高亮时将调用的函数。',8,0);
INSERT INTO widget_fields VALUES(1583,424,'onFocusChange','ValueChanged<bool>?','A function that will be called when the focus changes.','焦点更改时将调用的函数。',9,0);
INSERT INTO widget_fields VALUES(1584,424,'mouseCursor','MouseCursor','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',10,1);
INSERT INTO widget_fields VALUES(1585,424,'includeFocusSemantics','bool','Whether to include semantics from [Focus].','是否包含来自 [Focus] 的语义。',11,1);
INSERT INTO widget_fields VALUES(1586,424,'child','Widget','The child widget for this [FocusableActionDetector] widget.','此 [FocusableActionDetector] 小部件的子小部件。',12,1);
INSERT INTO widget_fields VALUES(1587,422,'policy','FocusTraversalPolicy','The policy used to move the focus from one focus node to another when traversing them using a keyboard.','使用键盘遍历时用于将焦点从一个焦点节点移动到另一个焦点节点的策略。',0,1);
INSERT INTO widget_fields VALUES(1588,422,'descendantsAreFocusable','bool','{@macro flutter.widgets.Focus.descendantsAreFocusable}','{@macro flutter.widgets.Focus.descendantsAreFocusable}',1,1);
INSERT INTO widget_fields VALUES(1589,422,'descendantsAreTraversable','bool','{@macro flutter.widgets.Focus.descendantsAreTraversable}','{@macro flutter.widgets.Focus.descendantsAreTraversable}',2,1);
INSERT INTO widget_fields VALUES(1590,422,'child','Widget','The child widget of this [FocusTraversalGroup].','此 [FocusTraversalGroup] 的子小部件。',3,1);
INSERT INTO widget_fields VALUES(1591,423,'order','FocusOrder','The order for the widget descendants of this [FocusTraversalOrder].','此 [FocusTraversalOrder] 的小部件后代的顺序。',0,1);
INSERT INTO widget_fields VALUES(1592,198,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(1593,198,'onWillPop','WillPopCallback?','Enables the form to veto attempts by the user to dismiss the [ModalRoute] that contains the form.','使表单能够否决用户关闭包含表单的 [ModalRoute] 的尝试。',1,0);
INSERT INTO widget_fields VALUES(1594,198,'canPop','bool?','{@macro flutter.widgets.PopScope.canPop}','{@macro flutter.widgets.PopScope.canPop}',2,0);
INSERT INTO widget_fields VALUES(1595,198,'onPopInvoked','PopInvokedCallback?','{@macro flutter.widgets.navigator.onPopInvokedWithResult}','{@macro flutter.widgets.navigator.onPopInvokedWithResult}',3,0);
INSERT INTO widget_fields VALUES(1596,198,'onPopInvokedWithResult','PopInvokedWithResultCallback<Object?>?','{@macro flutter.widgets.navigator.onPopInvokedWithResult}','{@macro flutter.widgets.navigator.onPopInvokedWithResult}',4,0);
INSERT INTO widget_fields VALUES(1597,198,'onChanged','VoidCallback?','Called when one of the form fields changes.','表单字段之一更改时调用。',5,0);
INSERT INTO widget_fields VALUES(1598,198,'autovalidateMode','AutovalidateMode','Used to enable/disable form fields auto validation and update their error text.','用于启用/禁用表单字段自动验证并更新其错误文本。',6,1);
INSERT INTO widget_fields VALUES(1599,222,'builder','FormFieldBuilder<T>','Function that returns the widget representing this form field.','返回表示此表单字段的小部件的函数。',0,1);
INSERT INTO widget_fields VALUES(1600,222,'onSaved','FormFieldSetter<T>?','An optional method to call with the final value when the form is saved via [FormState.save].','通过 [FormState.save] 保存表单时使用最终值调用的可选方法。',1,0);
INSERT INTO widget_fields VALUES(1601,222,'forceErrorText','String?','An optional property that forces the [FormFieldState] into an error state by directly setting the [FormFieldState.errorText] property without running the validator function.','通过直接设置 [FormFieldState.errorText] 属性而不运行验证器函数，强制 [FormFieldState] 进入错误状态的可选属性。',2,0);
INSERT INTO widget_fields VALUES(1602,222,'validator','FormFieldValidator<T>?','An optional method that validates an input. Returns an error string to display if the input is invalid, or null otherwise.','验证输入的可选方法。如果输入无效，则返回要显示的错误字符串，否则返回 null。',3,0);
INSERT INTO widget_fields VALUES(1603,222,'errorBuilder','FormFieldErrorBuilder?','Function that returns the widget representing the error to display.','返回表示要显示的错误的小部件的函数。',4,0);
INSERT INTO widget_fields VALUES(1604,222,'initialValue','T?','An optional value to initialize the form field to, or null otherwise.','初始化表单字段的可选值，否则为 null。',5,0);
INSERT INTO widget_fields VALUES(1605,222,'enabled','bool','Whether the form is able to receive user input.','表单是否能够接收用户输入。',6,1);
INSERT INTO widget_fields VALUES(1606,222,'autovalidateMode','AutovalidateMode','Used to enable/disable this form field auto validation and update its error text.','用于启用/禁用此表单字段自动验证并更新其错误文本。',7,1);
INSERT INTO widget_fields VALUES(1607,222,'restorationId','String?','Restoration ID to save and restore the state of the form field.','保存和恢复表单字段状态的恢复 ID。',8,0);
INSERT INTO widget_fields VALUES(1608,82,'widthFactor','double?','{@template flutter.widgets.basic.fractionallySizedBox.widthFactor} If non-null, the fraction of the incoming width given to the child.','{@template flutter.widgets.basic.fractionallySizedBox.widthFactor} 如果非空，给予子项的传入宽度的分数。',0,0);
INSERT INTO widget_fields VALUES(1609,82,'heightFactor','double?','{@template flutter.widgets.basic.fractionallySizedBox.heightFactor} If non-null, the fraction of the incoming height given to the child.','{@template flutter.widgets.basic.fractionallySizedBox.heightFactor} 如果非空，给予子项的传入高度的分数。',1,0);
INSERT INTO widget_fields VALUES(1610,82,'alignment','AlignmentGeometry','{@template flutter.widgets.basic.fractionallySizedBox.alignment} How to align the child.','{@template flutter.widgets.basic.fractionallySizedBox.alignment} 如何对齐子项。',2,1);
INSERT INTO widget_fields VALUES(1611,263,'translation','Offset','The translation to apply to the child, scaled to the child''s size.','应用于子项的平移，按子项的大小缩放。',0,1);
INSERT INTO widget_fields VALUES(1612,263,'transformHitTests','bool','Whether to apply the translation when performing hit tests.','执行命中测试时是否应用平移。',1,1);
INSERT INTO widget_fields VALUES(1613,172,'future','Future<T>?','The asynchronous computation to which this builder is currently connected, possibly null.','此构建器当前连接的异步计算，可能为 null。',0,0);
INSERT INTO widget_fields VALUES(1614,172,'builder','AsyncWidgetBuilder<T>','The build strategy currently used by this builder.','此构建器当前使用的构建策略。',1,1);
INSERT INTO widget_fields VALUES(1615,172,'initialData','T?','The data that will be used to create the snapshots provided until a non-null [future] has completed.','将用于创建快照的数据，直到非空 [future] 完成。',2,0);
INSERT INTO widget_fields VALUES(1616,146,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(1617,146,'onTapDown','GestureTapDownCallback?','A pointer that might cause a tap with a primary button has contacted the screen at a particular location.','可能导致主按钮点击的指针已在特定位置接触屏幕。',1,0);
INSERT INTO widget_fields VALUES(1618,146,'onTapUp','GestureTapUpCallback?','A pointer that will trigger a tap with a primary button has stopped contacting the screen at a particular location.','将触发主按钮点击的指针已在特定位置停止接触屏幕。',2,0);
INSERT INTO widget_fields VALUES(1619,146,'onTap','GestureTapCallback?','A tap with a primary button has occurred.','发生了主按钮点击。',3,0);
INSERT INTO widget_fields VALUES(1620,146,'onTapMove','GestureTapMoveCallback?','A pointer that triggered a tap has moved.','触发点击的指针已移动。',4,0);
INSERT INTO widget_fields VALUES(1621,146,'onTapCancel','GestureTapCancelCallback?','The pointer that previously triggered [onTapDown] will not end up causing a tap.','先前触发 [onTapDown] 的指针不会最终导致点击。',5,0);
INSERT INTO widget_fields VALUES(1622,146,'onSecondaryTap','GestureTapCallback?','A tap with a secondary button has occurred.','发生了辅助按钮点击。',6,0);
INSERT INTO widget_fields VALUES(1623,146,'onSecondaryTapDown','GestureTapDownCallback?','A pointer that might cause a tap with a secondary button has contacted the screen at a particular location.','可能导致辅助按钮点击的指针已在特定位置接触屏幕。',7,0);
INSERT INTO widget_fields VALUES(1624,146,'onSecondaryTapUp','GestureTapUpCallback?','A pointer that will trigger a tap with a secondary button has stopped contacting the screen at a particular location.','将触发辅助按钮点击的指针已在特定位置停止接触屏幕。',8,0);
INSERT INTO widget_fields VALUES(1625,146,'onSecondaryTapCancel','GestureTapCancelCallback?','The pointer that previously triggered [onSecondaryTapDown] will not end up causing a tap.','先前触发 [onSecondaryTapDown] 的指针不会最终导致点击。',9,0);
INSERT INTO widget_fields VALUES(1626,146,'onTertiaryTapDown','GestureTapDownCallback?','A pointer that might cause a tap with a tertiary button has contacted the screen at a particular location.','可能导致第三按钮点击的指针已在特定位置接触屏幕。',10,0);
INSERT INTO widget_fields VALUES(1627,146,'onTertiaryTapUp','GestureTapUpCallback?','A pointer that will trigger a tap with a tertiary button has stopped contacting the screen at a particular location.','将触发第三按钮点击的指针已在特定位置停止接触屏幕。',11,0);
INSERT INTO widget_fields VALUES(1628,146,'onTertiaryTapCancel','GestureTapCancelCallback?','The pointer that previously triggered [onTertiaryTapDown] will not end up causing a tap.','先前触发 [onTertiaryTapDown] 的指针不会最终导致点击。',12,0);
INSERT INTO widget_fields VALUES(1629,146,'onDoubleTapDown','GestureTapDownCallback?','A pointer that might cause a double tap has contacted the screen at a particular location.','可能导致双击的指针已在特定位置接触屏幕。',13,0);
INSERT INTO widget_fields VALUES(1630,146,'onDoubleTap','GestureTapCallback?','The user has tapped the screen with a primary button at the same location twice in quick succession.','用户在同一位置快速连续用主按钮点击屏幕两次。',14,0);
INSERT INTO widget_fields VALUES(1631,146,'onDoubleTapCancel','GestureTapCancelCallback?','The pointer that previously triggered [onDoubleTapDown] will not end up causing a double tap.','先前触发 [onDoubleTapDown] 的指针不会最终导致双击。',15,0);
INSERT INTO widget_fields VALUES(1632,146,'onLongPressDown','GestureLongPressDownCallback?','The pointer has contacted the screen with a primary button, which might be the start of a long-press.','指针已用主按钮接触屏幕，这可能是长按的开始。',16,0);
INSERT INTO widget_fields VALUES(1633,146,'onLongPressCancel','GestureLongPressCancelCallback?','A pointer that previously triggered [onLongPressDown] will not end up causing a long-press.','先前触发 [onLongPressDown] 的指针不会最终导致长按。',17,0);
INSERT INTO widget_fields VALUES(1634,146,'onLongPress','GestureLongPressCallback?','Called when a long press gesture with a primary button has been recognized.','识别到主按钮长按手势时调用。',18,0);
INSERT INTO widget_fields VALUES(1635,146,'onLongPressStart','GestureLongPressStartCallback?','Called when a long press gesture with a primary button has been recognized.','识别到主按钮长按手势时调用。',19,0);
INSERT INTO widget_fields VALUES(1636,146,'onLongPressMoveUpdate','GestureLongPressMoveUpdateCallback?','A pointer has been drag-moved after a long-press with a primary button.','指针在主按钮长按后被拖动移动。',20,0);
INSERT INTO widget_fields VALUES(1637,146,'onLongPressUp','GestureLongPressUpCallback?','A pointer that has triggered a long-press with a primary button has stopped contacting the screen.','触发主按钮长按的指针已停止接触屏幕。',21,0);
INSERT INTO widget_fields VALUES(1638,146,'onLongPressEnd','GestureLongPressEndCallback?','A pointer that has triggered a long-press with a primary button has stopped contacting the screen.','触发主按钮长按的指针已停止接触屏幕。',22,0);
INSERT INTO widget_fields VALUES(1639,146,'onSecondaryLongPressDown','GestureLongPressDownCallback?','The pointer has contacted the screen with a secondary button, which might be the start of a long-press.','指针已用辅助按钮接触屏幕，这可能是长按的开始。',23,0);
INSERT INTO widget_fields VALUES(1640,146,'onSecondaryLongPressCancel','GestureLongPressCancelCallback?','A pointer that previously triggered [onSecondaryLongPressDown] will not end up causing a long-press.','先前触发 [onSecondaryLongPressDown] 的指针不会最终导致长按。',24,0);
INSERT INTO widget_fields VALUES(1641,146,'onSecondaryLongPress','GestureLongPressCallback?','Called when a long press gesture with a secondary button has been recognized.','识别到辅助按钮长按手势时调用。',25,0);
INSERT INTO widget_fields VALUES(1642,146,'onSecondaryLongPressStart','GestureLongPressStartCallback?','Called when a long press gesture with a secondary button has been recognized.','识别到辅助按钮长按手势时调用。',26,0);
INSERT INTO widget_fields VALUES(1643,146,'onSecondaryLongPressMoveUpdate','GestureLongPressMoveUpdateCallback?','A pointer has been drag-moved after a long press with a secondary button.','指针在辅助按钮长按后被拖动移动。',27,0);
INSERT INTO widget_fields VALUES(1644,146,'onSecondaryLongPressUp','GestureLongPressUpCallback?','A pointer that has triggered a long-press with a secondary button has stopped contacting the screen.','触发辅助按钮长按的指针已停止接触屏幕。',28,0);
INSERT INTO widget_fields VALUES(1645,146,'onSecondaryLongPressEnd','GestureLongPressEndCallback?','A pointer that has triggered a long-press with a secondary button has stopped contacting the screen.','触发辅助按钮长按的指针已停止接触屏幕。',29,0);
INSERT INTO widget_fields VALUES(1646,146,'onTertiaryLongPressDown','GestureLongPressDownCallback?','The pointer has contacted the screen with a tertiary button, which might be the start of a long-press.','指针已用第三按钮接触屏幕，这可能是长按的开始。',30,0);
INSERT INTO widget_fields VALUES(1647,146,'onTertiaryLongPressCancel','GestureLongPressCancelCallback?','A pointer that previously triggered [onTertiaryLongPressDown] will not end up causing a long-press.','先前触发 [onTertiaryLongPressDown] 的指针不会最终导致长按。',31,0);
INSERT INTO widget_fields VALUES(1648,146,'onTertiaryLongPress','GestureLongPressCallback?','Called when a long press gesture with a tertiary button has been recognized.','识别到第三按钮长按手势时调用。',32,0);
INSERT INTO widget_fields VALUES(1649,146,'onTertiaryLongPressStart','GestureLongPressStartCallback?','Called when a long press gesture with a tertiary button has been recognized.','识别到第三按钮长按手势时调用。',33,0);
INSERT INTO widget_fields VALUES(1650,146,'onTertiaryLongPressMoveUpdate','GestureLongPressMoveUpdateCallback?','A pointer has been drag-moved after a long press with a tertiary button.','指针在第三按钮长按后被拖动移动。',34,0);
INSERT INTO widget_fields VALUES(1651,146,'onTertiaryLongPressUp','GestureLongPressUpCallback?','A pointer that has triggered a long-press with a tertiary button has stopped contacting the screen.','触发第三按钮长按的指针已停止接触屏幕。',35,0);
INSERT INTO widget_fields VALUES(1652,146,'onTertiaryLongPressEnd','GestureLongPressEndCallback?','A pointer that has triggered a long-press with a tertiary button has stopped contacting the screen.','触发第三按钮长按的指针已停止接触屏幕。',36,0);
INSERT INTO widget_fields VALUES(1653,146,'onVerticalDragDown','GestureDragDownCallback?','A pointer has contacted the screen with a primary button and might begin to move vertically.','指针已用主按钮接触屏幕，可能开始垂直移动。',37,0);
INSERT INTO widget_fields VALUES(1654,146,'onVerticalDragStart','GestureDragStartCallback?','A pointer has contacted the screen with a primary button and has begun to move vertically.','指针已用主按钮接触屏幕并开始垂直移动。',38,0);
INSERT INTO widget_fields VALUES(1655,146,'onVerticalDragUpdate','GestureDragUpdateCallback?','A pointer that is in contact with the screen with a primary button and moving vertically has moved in the vertical direction.','与屏幕接触的主按钮指针垂直移动，已在垂直方向上移动。',39,0);
INSERT INTO widget_fields VALUES(1656,146,'onVerticalDragEnd','GestureDragEndCallback?','A pointer that was previously in contact with the screen with a primary button and moving vertically is no longer in contact with the screen and was moving at a specific velocity when it stopped contacting the screen.','先前与屏幕接触的主按钮指针垂直移动，不再与屏幕接触，并在停止接触屏幕时以特定速度移动。',40,0);
INSERT INTO widget_fields VALUES(1657,146,'onVerticalDragCancel','GestureDragCancelCallback?','The pointer that previously triggered [onVerticalDragDown] did not complete.','先前触发 [onVerticalDragDown] 的指针未完成。',41,0);
INSERT INTO widget_fields VALUES(1658,146,'onHorizontalDragDown','GestureDragDownCallback?','A pointer has contacted the screen with a primary button and might begin to move horizontally.','指针已用主按钮接触屏幕，可能开始水平移动。',42,0);
INSERT INTO widget_fields VALUES(1659,146,'onHorizontalDragStart','GestureDragStartCallback?','A pointer has contacted the screen with a primary button and has begun to move horizontally.','指针已用主按钮接触屏幕并开始水平移动。',43,0);
INSERT INTO widget_fields VALUES(1660,146,'onHorizontalDragUpdate','GestureDragUpdateCallback?','A pointer that is in contact with the screen with a primary button and moving horizontally has moved in the horizontal direction.','与屏幕接触的主按钮指针水平移动，已在水平方向上移动。',44,0);
INSERT INTO widget_fields VALUES(1661,146,'onHorizontalDragEnd','GestureDragEndCallback?','A pointer that was previously in contact with the screen with a primary button and moving horizontally is no longer in contact with the screen and was moving at a specific velocity when it stopped contacting the screen.','先前与屏幕接触的主按钮指针水平移动，不再与屏幕接触，并在停止接触屏幕时以特定速度移动。',45,0);
INSERT INTO widget_fields VALUES(1662,146,'onHorizontalDragCancel','GestureDragCancelCallback?','The pointer that previously triggered [onHorizontalDragDown] did not complete.','先前触发 [onHorizontalDragDown] 的指针未完成。',46,0);
INSERT INTO widget_fields VALUES(1663,146,'onPanDown','GestureDragDownCallback?','A pointer has contacted the screen with a primary button and might begin to move.','指针已用主按钮接触屏幕，可能开始移动。',47,0);
INSERT INTO widget_fields VALUES(1664,146,'onPanStart','GestureDragStartCallback?','A pointer has contacted the screen with a primary button and has begun to move.','指针已用主按钮接触屏幕并开始移动。',48,0);
INSERT INTO widget_fields VALUES(1665,146,'onPanUpdate','GestureDragUpdateCallback?','A pointer that is in contact with the screen with a primary button and moving has moved again.','与屏幕接触的主按钮指针移动，已再次移动。',49,0);
INSERT INTO widget_fields VALUES(1666,146,'onPanEnd','GestureDragEndCallback?','A pointer that was previously in contact with the screen with a primary button and moving is no longer in contact with the screen and was moving at a specific velocity when it stopped contacting the screen.','先前与屏幕接触的主按钮指针移动，不再与屏幕接触，并在停止接触屏幕时以特定速度移动。',50,0);
INSERT INTO widget_fields VALUES(1667,146,'onPanCancel','GestureDragCancelCallback?','The pointer that previously triggered [onPanDown] did not complete.','先前触发 [onPanDown] 的指针未完成。',51,0);
INSERT INTO widget_fields VALUES(1668,146,'onScaleStart','GestureScaleStartCallback?','The pointers in contact with the screen have established a focal point and initial scale of 1.0.','与屏幕接触的指针已建立焦点并初始比例为 1.0。',52,0);
INSERT INTO widget_fields VALUES(1669,146,'onScaleUpdate','GestureScaleUpdateCallback?','The pointers in contact with the screen have indicated a new focal point and/or scale.','与屏幕接触的指针已指示新的焦点和/或比例。',53,0);
INSERT INTO widget_fields VALUES(1670,146,'onScaleEnd','GestureScaleEndCallback?','The pointers are no longer in contact with the screen.','指针不再与屏幕接触。',54,0);
INSERT INTO widget_fields VALUES(1671,146,'onForcePressStart','GestureForcePressStartCallback?','The pointer is in contact with the screen and has pressed with sufficient force to initiate a force press. The amount of force is at least [ForcePressGestureRecognizer.startPressure].','指针与屏幕接触并以足够的力按下以启动力按。力量至少为 [ForcePressGestureRecognizer.startPressure]。',55,0);
INSERT INTO widget_fields VALUES(1672,146,'onForcePressPeak','GestureForcePressPeakCallback?','The pointer is in contact with the screen and has pressed with the maximum force. The amount of force is at least [ForcePressGestureRecognizer.peakPressure].','指针与屏幕接触并以最大力按下。力量至少为 [ForcePressGestureRecognizer.peakPressure]。',56,0);
INSERT INTO widget_fields VALUES(1673,146,'onForcePressUpdate','GestureForcePressUpdateCallback?','A pointer is in contact with the screen, has previously passed the [ForcePressGestureRecognizer.startPressure] and is either moving on the plane of the screen, pressing the screen with varying forces or both simultaneously.','指针与屏幕接触，先前已通过 [ForcePressGestureRecognizer.startPressure]，并且正在屏幕平面上移动、以不同力量按压屏幕或两者同时进行。',57,0);
INSERT INTO widget_fields VALUES(1674,146,'onForcePressEnd','GestureForcePressEndCallback?','The pointer tracked by [onForcePressStart] is no longer in contact with the screen.','[onForcePressStart] 跟踪的指针不再与屏幕接触。',58,0);
INSERT INTO widget_fields VALUES(1675,146,'behavior','HitTestBehavior?','How this gesture detector should behave during hit testing when deciding how the hit test propagates to children and whether to consider targets behind this one.','此手势检测器在命中测试期间应如何表现，决定命中测试如何传播到子项以及是否考虑此项后面的目标。',59,0);
INSERT INTO widget_fields VALUES(1676,146,'excludeFromSemantics','bool','Whether to exclude these gestures from the semantics tree. For example, the long-press gesture for showing a tooltip is excluded because the tooltip itself is included in the semantics tree directly and so having a gesture to show it would result in duplication of information.','是否从语义树中排除这些手势。例如，显示工具提示的长按手势被排除，因为工具提示本身直接包含在语义树中，因此有显示它的手势会导致信息重复。',60,1);
INSERT INTO widget_fields VALUES(1677,146,'dragStartBehavior','DragStartBehavior','Determines the way that drag start behavior is handled.','确定拖动开始行为的处理方式。',61,1);
INSERT INTO widget_fields VALUES(1678,146,'supportedDevices','Set<PointerDeviceKind>?','The kind of devices that are allowed to be recognized.','允许识别的设备类型。',62,0);
INSERT INTO widget_fields VALUES(1679,146,'trackpadScrollCausesScale','bool','{@macro flutter.gestures.scale.trackpadScrollCausesScale}','{@macro flutter.gestures.scale.trackpadScrollCausesScale}',63,1);
INSERT INTO widget_fields VALUES(1680,146,'trackpadScrollToScaleFactor','Offset','{@macro flutter.gestures.scale.trackpadScrollToScaleFactor}','{@macro flutter.gestures.scale.trackpadScrollToScaleFactor}',64,1);
INSERT INTO widget_fields VALUES(1681,250,'showLeading','bool','Whether to show the overscroll glow on the side with negative scroll offsets.','是否在负滚动偏移的一侧显示过度滚动发光。',0,1);
INSERT INTO widget_fields VALUES(1682,250,'showTrailing','bool','Whether to show the overscroll glow on the side with positive scroll offsets.','是否在正滚动偏移的一侧显示过度滚动发光。',1,1);
INSERT INTO widget_fields VALUES(1683,250,'axisDirection','AxisDirection','{@template flutter.overscroll.axisDirection} The direction of positive scroll offsets in the [Scrollable] whose overscrolls are to be visualized. {@endtemplate}','{@template flutter.overscroll.axisDirection} 要可视化其过度滚动的 [Scrollable] 中正滚动偏移的方向。{@endtemplate}',2,1);
INSERT INTO widget_fields VALUES(1684,250,'color','Color','The color of the glow. The alpha channel is ignored.','发光的颜色。忽略 alpha 通道。',3,1);
INSERT INTO widget_fields VALUES(1685,250,'notificationPredicate','ScrollNotificationPredicate','{@template flutter.overscroll.notificationPredicate} A check that specifies whether a [ScrollNotification] should be handled by this widget.','{@template flutter.overscroll.notificationPredicate} 指定此小部件是否应处理 [ScrollNotification] 的检查。',4,1);
INSERT INTO widget_fields VALUES(1686,250,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',5,0);
INSERT INTO widget_fields VALUES(1687,37,'color','Color','The color to draw the lines in the grid.','绘制网格中线条的颜色。',0,1);
INSERT INTO widget_fields VALUES(1688,37,'interval','double','The distance between the primary lines in the grid, in logical pixels.','网格中主要线条之间的距离，以逻辑像素为单位。',1,1);
INSERT INTO widget_fields VALUES(1689,37,'divisions','int','The number of major divisions within each primary grid cell.','每个主要网格单元内的主要分割数。',2,1);
INSERT INTO widget_fields VALUES(1690,37,'subdivisions','int','The number of minor divisions within each major division, including the major division itself.','每个主要分割内的次要分割数，包括主要分割本身。',3,1);
INSERT INTO widget_fields VALUES(1691,37,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',4,0);
INSERT INTO widget_fields VALUES(1692,21,'header','Widget?','The widget to show over the top of this grid tile.','显示在此网格磁贴顶部的小部件。',0,0);
INSERT INTO widget_fields VALUES(1693,21,'footer','Widget?','The widget to show over the bottom of this grid tile.','显示在此网格磁贴底部的小部件。',1,0);
INSERT INTO widget_fields VALUES(1694,21,'child','Widget','The widget that fills the tile.','填充磁贴的小部件。',2,1);
INSERT INTO widget_fields VALUES(1695,20,'backgroundColor','Color?','The color to paint behind the child widgets.','在子小部件后面绘制的颜色。',0,0);
INSERT INTO widget_fields VALUES(1696,20,'leading','Widget?','A widget to display before the title.','在标题前显示的小部件。',1,0);
INSERT INTO widget_fields VALUES(1697,20,'title','Widget?','The primary content of the list item.','列表项的主要内容。',2,0);
INSERT INTO widget_fields VALUES(1698,20,'subtitle','Widget?','Additional content displayed below the title.','显示在标题下方的附加内容。',3,0);
INSERT INTO widget_fields VALUES(1699,20,'trailing','Widget?','A widget to display after the title.','在标题后显示的小部件。',4,0);
INSERT INTO widget_fields VALUES(1700,163,'gridDelegate','SliverGridDelegate','A delegate that controls the layout of the children within the [GridView].','控制 [GridView] 内子项布局的委托。',0,1);
INSERT INTO widget_fields VALUES(1701,163,'childrenDelegate','SliverChildDelegate','A delegate that provides the children for the [GridView].','为 [GridView] 提供子项的委托。',1,1);
INSERT INTO widget_fields VALUES(1702,171,'tag','Object','The identifier for this particular hero. If the tag of this hero matches the tag of a hero on a [PageRoute] that we''re navigating to or from, then a hero animation will be triggered.','此特定英雄的标识符。如果此英雄的标签与我们导航到或来自的 [PageRoute] 上的英雄标签匹配，则将触发英雄动画。',0,1);
INSERT INTO widget_fields VALUES(1703,171,'createRectTween','CreateRectTween?','Defines how the destination hero''s bounds change as it flies from the starting route to the destination route.','定义目标英雄的边界在从起始路由飞到目标路由时如何变化。',1,0);
INSERT INTO widget_fields VALUES(1704,171,'child','Widget','The widget subtree that will "fly" from one route to another during a [Navigator] push or pop transition.','在 [Navigator] 推送或弹出转换期间将从一个路由',2,1);
INSERT INTO widget_fields VALUES(1705,171,'flightShuttleBuilder','HeroFlightShuttleBuilder?','Optional override to supply a widget that''s shown during the hero''s flight.','可选覆盖，提供在英雄飞行期间显示的小部件。',3,0);
INSERT INTO widget_fields VALUES(1706,171,'placeholderBuilder','HeroPlaceholderBuilder?','Placeholder widget left in place as the Hero''s [child] once the flight takes off.','一旦飞行起飞，留在原地作为英雄 [child] 的占位符小部件。',4,0);
INSERT INTO widget_fields VALUES(1707,171,'transitionOnUserGestures','bool','Whether to perform the hero transition if the [PageRoute] transition was triggered by a user gesture, such as a back swipe on iOS.','如果 [PageRoute] 转换是由用户手势（如 iOS 上的后退滑动）触发的，是否执行英雄转换。',5,1);
INSERT INTO widget_fields VALUES(1708,425,'controller','HeroController?','The hero controller that is hosted inside this widget.','托管在此小部件内的英雄控制器。',0,0);
INSERT INTO widget_fields VALUES(1709,426,'child','Widget','The subtree to place inside the [HeroMode].','放置在 [HeroMode] 内的子树。',0,1);
INSERT INTO widget_fields VALUES(1710,426,'enabled','bool','Whether or not [Hero]es are enabled in this subtree.','此子树中是否启用 [Hero]。',1,1);
INSERT INTO widget_fields VALUES(1711,213,'viewType','String','The unique identifier for the HTML view type to be embedded by this widget.','此小部件要嵌入的 HTML 视图类型的唯一标识符。',0,1);
INSERT INTO widget_fields VALUES(1712,213,'onPlatformViewCreated','PlatformViewCreatedCallback?','Callback to invoke after the platform view has been created.','创建平台视图后调用的回调。',1,0);
INSERT INTO widget_fields VALUES(1713,213,'creationParams','Object?','Passed as the 2nd argument (i.e. `params`) of the registered view factory.','作为注册视图工厂的第二个参数（即 `params`）传递。',2,0);
INSERT INTO widget_fields VALUES(1714,213,'hitTestBehavior','PlatformViewHitTestBehavior','{@macro flutter.widgets.AndroidView.hitTestBehavior}','{@macro flutter.widgets.AndroidView.hitTestBehavior}',3,1);
INSERT INTO widget_fields VALUES(1715,6,'icon','IconData?','The icon to display. The available icons are described in [Icons].','要显示的图标。可用图标在 [Icons] 中描述。',0,0);
INSERT INTO widget_fields VALUES(1716,6,'size','double?','The size of the icon in logical pixels.','图标的逻辑像素大小。',1,0);
INSERT INTO widget_fields VALUES(1717,6,'fill','double?','The fill for drawing the icon.','绘制图标的填充。',2,0);
INSERT INTO widget_fields VALUES(1718,6,'weight','double?','The stroke weight for drawing the icon.','绘制图标的笔画粗细。',3,0);
INSERT INTO widget_fields VALUES(1719,6,'grade','double?','The grade (granular stroke weight) for drawing the icon.','绘制图标的等级（细粒度笔画粗细）。',4,0);
INSERT INTO widget_fields VALUES(1720,6,'opticalSize','double?','The optical size for drawing the icon.','绘制图标的光学大小。',5,0);
INSERT INTO widget_fields VALUES(1721,6,'color','Color?','The color to use when drawing the icon.','绘制图标时使用的颜色。',6,0);
INSERT INTO widget_fields VALUES(1722,6,'shadows','List<Shadow>?','A list of [Shadow]s that will be painted underneath the icon.','将在图标下方绘制的 [Shadow] 列表。',7,0);
INSERT INTO widget_fields VALUES(1723,6,'semanticLabel','String?','Semantic label for the icon.','图标的语义标签。',8,0);
INSERT INTO widget_fields VALUES(1724,6,'textDirection','TextDirection?','The text direction to use for rendering the icon.','用于渲染图标的文本方向。',9,0);
INSERT INTO widget_fields VALUES(1725,6,'applyTextScaling','bool?','Whether to scale the size of this widget using the ambient [MediaQuery]''s [TextScaler].','是否使用环境 [MediaQuery] 的 [TextScaler] 缩放此小部件的大小。',10,0);
INSERT INTO widget_fields VALUES(1726,6,'blendMode','BlendMode?','The [BlendMode] to apply to the foreground of the icon.','应用于图标前景的 [BlendMode]。',11,0);
INSERT INTO widget_fields VALUES(1727,30,'iconSize','double?','The size of the icon inside the button.','按钮内图标的大小。',0,0);
INSERT INTO widget_fields VALUES(1728,30,'visualDensity','VisualDensity?','Defines how compact the icon button''s layout will be.','定义图标按钮布局的紧凑程度。',1,0);
INSERT INTO widget_fields VALUES(1729,30,'padding','EdgeInsetsGeometry?','The padding around the button''s icon. The entire padded icon will react to input gestures.','按钮图标周围的内边距。整个带内边距的图标将对输入手势做出反应。',2,0);
INSERT INTO widget_fields VALUES(1730,30,'alignment','AlignmentGeometry?','Defines how the icon is positioned within the IconButton.','定义图标在 IconButton 内的定位方式。',3,0);
INSERT INTO widget_fields VALUES(1731,30,'splashRadius','double?','The splash radius.','飞溅半径。',4,0);
INSERT INTO widget_fields VALUES(1732,30,'icon','Widget','The icon to display inside the button.','在按钮内显示的图标。',5,1);
INSERT INTO widget_fields VALUES(1733,30,'focusColor','Color?','The color for the button when it has the input focus.','按钮具有输入焦点时的颜色。',6,0);
INSERT INTO widget_fields VALUES(1734,30,'hoverColor','Color?','The color for the button when a pointer is hovering over it.','指针悬停在按钮上时的颜色。',7,0);
INSERT INTO widget_fields VALUES(1735,30,'color','Color?','The color to use for the icon inside the button, if the icon is enabled. Defaults to leaving this up to the [icon] widget.','如果图标启用，用于按钮内图标的颜色。默认情况下将此留给 [icon] 小部件。',8,0);
INSERT INTO widget_fields VALUES(1736,30,'splashColor','Color?','The primary color of the button when the button is in the down (pressed) state. The splash is represented as a circular overlay that appears above the [highlightColor] overlay. The splash overlay has a center point that matches the hit point of the user touch event. The splash overlay will expand to fill the button area if the touch is held for long enough time. If the splash color has transparency then the highlight and button color will show through.','按钮处于按下状态时的主要颜色。飞溅表示为出现在 [highlightColor] 覆盖层上方的圆形覆盖层。飞溅覆盖层的中心点与用户触摸事件的命中点匹配。如果触摸保持足够长的时间，飞溅覆盖层将扩展以填充按钮区域。如果飞溅颜色具有透明度，则高亮和按钮颜色将透过。',9,0);
INSERT INTO widget_fields VALUES(1737,30,'highlightColor','Color?','The secondary color of the button when the button is in the down (pressed) state. The highlight color is represented as a solid color that is overlaid over the button color (if any). If the highlight color has transparency, the button color will show through. The highlight fades in quickly as the button is held down.','按钮处于按下状态时的次要颜色。高亮颜色表示为覆盖在按钮颜色（如果有）上的纯色。如果高亮颜色具有透明度，按钮颜色将透过。高亮在按钮被按住时快速淡入。',10,0);
INSERT INTO widget_fields VALUES(1738,30,'disabledColor','Color?','The color to use for the icon inside the button, if the icon is disabled. Defaults to the [ThemeData.disabledColor] of the current [Theme].','如果图标禁用，用于按钮内图标的颜色。默认为当前 [Theme] 的 [ThemeData.disabledColor]。',11,0);
INSERT INTO widget_fields VALUES(1739,30,'onPressed','VoidCallback?','The callback that is called when the button is tapped or otherwise activated.','点击或以其他方式激活按钮时调用的回调。',12,0);
INSERT INTO widget_fields VALUES(1740,30,'onHover','ValueChanged<bool>?','The callback that is called when the button is hovered.','悬停按钮时调用的回调。',13,0);
INSERT INTO widget_fields VALUES(1741,30,'onLongPress','VoidCallback?','The callback that is called when the button is long-pressed.','长按按钮时调用的回调。',14,0);
INSERT INTO widget_fields VALUES(1742,30,'mouseCursor','MouseCursor?','{@macro flutter.material.RawMaterialButton.mouseCursor}','{@macro flutter.material.RawMaterialButton.mouseCursor}',15,0);
INSERT INTO widget_fields VALUES(1743,30,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',16,0);
INSERT INTO widget_fields VALUES(1744,30,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',17,1);
INSERT INTO widget_fields VALUES(1745,30,'tooltip','String?','Text that describes the action that will occur when the button is pressed.','描述按下按钮时将发生的操作的文本。',18,0);
INSERT INTO widget_fields VALUES(1746,30,'enableFeedback','bool?','Whether detected gestures should provide acoustic and/or haptic feedback.','检测到的手势是否应提供声音和/或触觉反馈。',19,0);
INSERT INTO widget_fields VALUES(1747,30,'constraints','BoxConstraints?','Optional size constraints for the button.','按钮的可选大小约束。',20,0);
INSERT INTO widget_fields VALUES(1748,30,'style','ButtonStyle?','Customizes this button''s appearance.','自定义此按钮的外观。',21,0);
INSERT INTO widget_fields VALUES(1749,30,'isSelected','bool?','The optional selection state of the icon button.','图标按钮的可选选择状态。',22,0);
INSERT INTO widget_fields VALUES(1750,30,'selectedIcon','Widget?','The icon to display inside the button when [isSelected] is true. This property can be null. The original [icon] will be used for both selected and unselected status if it is null.','当 [isSelected] 为 true 时在按钮内显示的图标。此属性可以为 null。如果为 null，原始 [icon] 将用于选定和未选定状态。',23,0);
INSERT INTO widget_fields VALUES(1751,427,'data','IconButtonThemeData','The configuration of this theme.','此主题的配置。',0,1);
INSERT INTO widget_fields VALUES(1752,325,'data','IconThemeData','The set of properties to use for icons in this subtree.','用于此子树中图标的属性集。',0,1);
INSERT INTO widget_fields VALUES(1753,292,'ignoring','bool','Whether this widget is ignored during hit testing.','此小部件在命中测试期间是否被忽略。',0,1);
INSERT INTO widget_fields VALUES(1754,292,'ignoringSemantics','bool?','Whether the semantics of this widget is ignored when compiling the semantics subtree.','编译语义子树时是否忽略此小部件的语义。',1,0);
INSERT INTO widget_fields VALUES(1755,38,'image','ImageProvider','The image to display.','要显示的图像。',0,1);
INSERT INTO widget_fields VALUES(1756,38,'frameBuilder','ImageFrameBuilder?','A builder function responsible for creating the widget that represents this image.','负责创建表示此图像的小部件的构建器函数。',1,0);
INSERT INTO widget_fields VALUES(1757,38,'loadingBuilder','ImageLoadingBuilder?','A builder that specifies the widget to display to the user while an image is still loading.','指定在图像仍在加载时向用户显示的小部件的构建器。',2,0);
INSERT INTO widget_fields VALUES(1758,38,'errorBuilder','ImageErrorWidgetBuilder?','A builder function that is called if an error occurs during image loading.','如果在图像加载期间发生错误，则调用的构建器函数。',3,0);
INSERT INTO widget_fields VALUES(1759,38,'width','double?','If non-null, require the image to have this width (in logical pixels).','如果非空，要求图像具有此宽度（以逻辑像素为单位）。',4,0);
INSERT INTO widget_fields VALUES(1760,38,'height','double?','If non-null, require the image to have this height (in logical pixels).','如果非空，要求图像具有此高度（以逻辑像素为单位）。',5,0);
INSERT INTO widget_fields VALUES(1761,38,'color','Color?','If non-null, this color is blended with each image pixel using [colorBlendMode].','如果非空，此颜色使用 [colorBlendMode] 与每个图像像素混合。',6,0);
INSERT INTO widget_fields VALUES(1762,38,'opacity','Animation<double>?','If non-null, the value from the [Animation] is multiplied with the opacity of each image pixel before painting onto the canvas.','如果非空，[Animation] 的值在绘制到画布之前与每个图像像素的不透明度相乘。',7,0);
INSERT INTO widget_fields VALUES(1763,38,'filterQuality','FilterQuality','The rendering quality of the image.','图像的渲染质量。',8,1);
INSERT INTO widget_fields VALUES(1764,38,'colorBlendMode','BlendMode?','Used to combine [color] with this image.','用于将 [color] 与此图像组合。',9,0);
INSERT INTO widget_fields VALUES(1765,38,'fit','BoxFit?','How to inscribe the image into the space allocated during layout.','如何在布局期间分配的空间中刻画图像。',10,0);
INSERT INTO widget_fields VALUES(1766,38,'alignment','AlignmentGeometry','How to align the image within its bounds.','如何在其边界内对齐图像。',11,1);
INSERT INTO widget_fields VALUES(1767,38,'repeat','ImageRepeat','How to paint any portions of the layout bounds not covered by the image.','如何绘制图像未覆盖的布局边界的任何部分。',12,1);
INSERT INTO widget_fields VALUES(1768,38,'centerSlice','Rect?','The center slice for a nine-patch image.','九宫格图像的中心切片。',13,0);
INSERT INTO widget_fields VALUES(1769,38,'matchTextDirection','bool','Whether to paint the image in the direction of the [TextDirection].','是否在 [TextDirection] 的方向上绘制图像。',14,1);
INSERT INTO widget_fields VALUES(1770,38,'gaplessPlayback','bool','Whether to continue showing the old image (true), or briefly show nothing (false), when the image provider changes. The default value is false.','当图像提供程序更改时，是否继续显示旧图像（true）还是短暂显示无内容（false）。默认值为 false。',15,1);
INSERT INTO widget_fields VALUES(1771,38,'semanticLabel','String?','A Semantic description of the image.','图像的语义描述。',16,0);
INSERT INTO widget_fields VALUES(1772,38,'excludeFromSemantics','bool','Whether to exclude this image from semantics.','是否从语义中排除此图像。',17,1);
INSERT INTO widget_fields VALUES(1773,38,'isAntiAlias','bool','Whether to paint the image with anti-aliasing.','是否使用抗锯齿绘制图像。',18,1);
INSERT INTO widget_fields VALUES(1774,357,'imageFilter','ImageFilter','The image filter to apply to the child of this widget.','应用于此小部件子项的图像过滤器。',0,1);
INSERT INTO widget_fields VALUES(1775,357,'enabled','bool','Whether or not to apply the image filter operation to the child of this widget.','是否对此小部件的子项应用图像过滤器操作。',1,1);
INSERT INTO widget_fields VALUES(1776,7,'image','ImageProvider?','The image to display as the icon.','要显示为图标的图像。',0,0);
INSERT INTO widget_fields VALUES(1777,7,'size','double?','The size of the icon in logical pixels.','图标的逻辑像素大小。',1,0);
INSERT INTO widget_fields VALUES(1778,7,'color','Color?','The color to use when drawing the icon.','绘制图标时使用的颜色。',2,0);
INSERT INTO widget_fields VALUES(1779,7,'semanticLabel','String?','Semantic label for the icon.','图标的语义标签。',3,0);
INSERT INTO widget_fields VALUES(1780,429,'src','String?','The `src` URL for the `<img>` tag.','`<img>` 标签的 `src` URL。',0,0);
INSERT INTO widget_fields VALUES(1781,430,'curve','Curve','The curve to apply when animating the parameters of this container.','对此容器的参数进行动画处理时应用的曲线。',0,1);
INSERT INTO widget_fields VALUES(1782,430,'duration','Duration','The duration over which to animate the parameters of this container.','对此容器的参数进行动画处理的持续时间。',1,1);
INSERT INTO widget_fields VALUES(1783,430,'onEnd','VoidCallback?','Called every time an animation completes.','每次动画完成时调用。',2,0);
INSERT INTO widget_fields VALUES(1784,431,'index','int','The index used to annotate the first child semantics node.','用于注释第一个子语义节点的索引。',0,1);
INSERT INTO widget_fields VALUES(1785,161,'alignment','AlignmentGeometry','How to align the non-positioned and partially-positioned children in the stack.','如何在堆栈中对齐非定位和部分定位的子项。',0,1);
INSERT INTO widget_fields VALUES(1786,161,'textDirection','TextDirection?','The text direction with which to resolve [alignment].','用于解析 [alignment] 的文本方向。',1,0);
INSERT INTO widget_fields VALUES(1787,161,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',2,1);
INSERT INTO widget_fields VALUES(1788,161,'sizing','StackFit','How to size the non-positioned children in the stack.','如何调整堆栈中非定位子项的大小。',3,1);
INSERT INTO widget_fields VALUES(1789,161,'index','int?','The index of the child to show.','要显示的子项的索引。',4,0);
INSERT INTO widget_fields VALUES(1790,161,'children','List<Widget>','The child widgets of the stack.','堆栈的子小部件。',5,1);
INSERT INTO widget_fields VALUES(1791,432,'theme','CupertinoTheme','The [CupertinoTheme] that is provided to widgets lower in the tree.','提供给树中较低小部件的 [CupertinoTheme]。',0,1);
INSERT INTO widget_fields VALUES(1792,433,'notifier','T?','The [Listenable] object to which to listen.','要监听的 [Listenable] 对象。',0,0);
INSERT INTO widget_fields VALUES(1793,152,'child','Widget?','The [child] contained by the container.','容器包含的 [child]。',0,0);
INSERT INTO widget_fields VALUES(1794,152,'padding','EdgeInsetsGeometry?','Empty space to inscribe inside the [decoration]. The [child], if any, is placed inside this padding.','在 [decoration] 内刻画的空白空间。[child]（如果有）放置在此内边距内。',1,0);
INSERT INTO widget_fields VALUES(1795,152,'decoration','Decoration?','The decoration to paint on the nearest ancestor [Material] widget.','在最近的祖先 [Material] 小部件上绘制的装饰。',2,0);
INSERT INTO widget_fields VALUES(1796,152,'width','double?','A width to apply to the [decoration] and the [child]. The width includes any [padding].','应用于 [decoration] 和 [child] 的宽度。宽度包括任何 [padding]。',3,0);
INSERT INTO widget_fields VALUES(1797,152,'height','double?','A height to apply to the [decoration] and the [child]. The height includes any [padding].','应用于 [decoration] 和 [child] 的高度。高度包括任何 [padding]。',4,0);
INSERT INTO widget_fields VALUES(1798,149,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(1799,149,'onTap','GestureTapCallback?','Called when the user taps this part of the material.','用户点击 material 的此部分时调用。',1,0);
INSERT INTO widget_fields VALUES(1800,149,'onTapDown','GestureTapDownCallback?','Called when the user taps down this part of the material.','用户点击 material 的此部分时调用。',2,0);
INSERT INTO widget_fields VALUES(1801,149,'onTapUp','GestureTapUpCallback?','Called when the user releases a tap that was started on this part of the material. [onTap] is called immediately after.','用户释放在 material 的此部分开始的点击时调用。[onTap] 立即在之后调用。',3,0);
INSERT INTO widget_fields VALUES(1802,149,'onTapCancel','GestureTapCallback?','Called when the user cancels a tap that was started on this part of the material.','用户取消在 material 的此部分开始的点击时调用。',4,0);
INSERT INTO widget_fields VALUES(1803,149,'onDoubleTap','GestureTapCallback?','Called when the user double taps this part of the material.','用户双击 material 的此部分时调用。',5,0);
INSERT INTO widget_fields VALUES(1804,149,'onLongPress','GestureLongPressCallback?','Called when the user long-presses on this part of the material.','用户长按 material 的此部分时调用。',6,0);
INSERT INTO widget_fields VALUES(1805,149,'onSecondaryTap','GestureTapCallback?','Called when the user taps this part of the material with a secondary button.','用户用辅助按钮点击 material 的此部分时调用。',7,0);
INSERT INTO widget_fields VALUES(1806,149,'onSecondaryTapDown','GestureTapDownCallback?','Called when the user taps down on this part of the material with a secondary button.','用户用辅助按钮点击 material 的此部分时调用。',8,0);
INSERT INTO widget_fields VALUES(1807,149,'onSecondaryTapUp','GestureTapUpCallback?','Called when the user releases a secondary button tap that was started on this part of the material. [onSecondaryTap] is called immediately after.','用户释放在 material 的此部分开始的辅助按钮点击时调用。[onSecondaryTap] 立即在之后调用。',9,0);
INSERT INTO widget_fields VALUES(1808,149,'onSecondaryTapCancel','GestureTapCallback?','Called when the user cancels a secondary button tap that was started on this part of the material.','用户取消在 material 的此部分开始的辅助按钮点击时调用。',10,0);
INSERT INTO widget_fields VALUES(1809,149,'onHighlightChanged','ValueChanged<bool>?','Called when this part of the material either becomes highlighted or stops being highlighted.','当 material 的此部分变为高亮或停止高亮时调用。',11,0);
INSERT INTO widget_fields VALUES(1810,149,'onHover','ValueChanged<bool>?','Called when a pointer enters or exits the ink response area.','指针进入或退出墨水响应区域时调用。',12,0);
INSERT INTO widget_fields VALUES(1811,149,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',13,0);
INSERT INTO widget_fields VALUES(1812,149,'containedInkWell','bool','Whether this ink response should be clipped its bounds.','此墨水响应是否应裁剪其边界。',14,1);
INSERT INTO widget_fields VALUES(1813,149,'highlightShape','BoxShape','The shape (e.g., circle, rectangle) to use for the highlight drawn around this part of the material when pressed, hovered over, or focused.','按下、悬停或聚焦时在 material 的此部分周围绘制的高亮的形状（例如，圆形、矩形）。',15,1);
INSERT INTO widget_fields VALUES(1814,149,'radius','double?','The radius of the ink splash.','墨水飞溅的半径。',16,0);
INSERT INTO widget_fields VALUES(1815,149,'borderRadius','BorderRadius?','The border radius of the containing rectangle. This is effective only if [highlightShape] is [BoxShape.rectangle].','包含矩形的边框半径。仅当 [highlightShape] 为 [BoxShape.rectangle] 时有效。',17,0);
INSERT INTO widget_fields VALUES(1816,149,'customBorder','ShapeBorder?','The custom clip border.','自定义裁剪边框。',18,0);
INSERT INTO widget_fields VALUES(1817,149,'focusColor','Color?','The color of the ink response when the parent widget is focused. If this property is null then the focus color of the theme, [ThemeData.focusColor], will be used.','父小部件聚焦时墨水响应的颜色。如果此属性为 null，则将使用主题的焦点颜色 [ThemeData.focusColor]。',19,0);
INSERT INTO widget_fields VALUES(1818,149,'hoverColor','Color?','The color of the ink response when a pointer is hovering over it. If this property is null then the hover color of the theme, [ThemeData.hoverColor], will be used.','指针悬停在其上时墨水响应的颜色。如果此属性为 null，则将使用主题的悬停颜色 [ThemeData.hoverColor]。',20,0);
INSERT INTO widget_fields VALUES(1819,149,'highlightColor','Color?','The highlight color of the ink response when pressed. If this property is null then the highlight color of the theme, [ThemeData.highlightColor], will be used.','按下时墨水响应的高亮颜色。如果此属性为 null，则将使用主题的高亮颜色 [ThemeData.highlightColor]。',21,0);
INSERT INTO widget_fields VALUES(1820,149,'overlayColor','MaterialStateProperty<Color?>?','Defines the ink response focus, hover, and splash colors.','定义墨水响应焦点、悬停和飞溅颜色。',22,0);
INSERT INTO widget_fields VALUES(1821,149,'splashColor','Color?','The splash color of the ink response. If this property is null then the splash color of the theme, [ThemeData.splashColor], will be used.','墨水响应的飞溅颜色。如果此属性为 null，则将使用主题的飞溅颜色 [ThemeData.splashColor]。',23,0);
INSERT INTO widget_fields VALUES(1822,149,'splashFactory','InteractiveInkFeatureFactory?','Defines the appearance of the splash.','定义飞溅的外观。',24,0);
INSERT INTO widget_fields VALUES(1823,149,'enableFeedback','bool','Whether detected gestures should provide acoustic and/or haptic feedback.','检测到的手势是否应提供声音和/或触觉反馈。',25,1);
INSERT INTO widget_fields VALUES(1824,149,'excludeFromSemantics','bool','Whether to exclude the gestures introduced by this widget from the semantics tree.','是否从语义树中排除此小部件引入的手势。',26,1);
INSERT INTO widget_fields VALUES(1825,149,'onFocusChange','ValueChanged<bool>?','{@template flutter.material.inkwell.onFocusChange} Handler called when the focus changes.','{@template flutter.material.inkwell.onFocusChange} 焦点更改时调用的处理程序。',27,0);
INSERT INTO widget_fields VALUES(1826,149,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',28,1);
INSERT INTO widget_fields VALUES(1827,149,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',29,0);
INSERT INTO widget_fields VALUES(1828,149,'canRequestFocus','bool','{@macro flutter.widgets.Focus.canRequestFocus}','{@macro flutter.widgets.Focus.canRequestFocus}',30,1);
INSERT INTO widget_fields VALUES(1829,149,'statesController','MaterialStatesController?','{@template flutter.material.inkwell.statesController} Represents the interactive "state" of this widget in terms of a set of [WidgetState]s, like [WidgetState.pressed] and [WidgetState.focused].','{@template flutter.material.inkwell.statesController} 表示此小部件在一组 [WidgetState] 方面的交互',31,0);
INSERT INTO widget_fields VALUES(1830,149,'hoverDuration','Duration?','The duration of the animation that animates the hover effect.','悬停效果动画的持续时间。',32,0);
INSERT INTO widget_fields VALUES(1831,14,'avatar','Widget?',NULL,NULL,0,0);
INSERT INTO widget_fields VALUES(1832,14,'label','Widget',NULL,NULL,1,1);
INSERT INTO widget_fields VALUES(1833,14,'labelStyle','TextStyle?',NULL,NULL,2,0);
INSERT INTO widget_fields VALUES(1834,14,'labelPadding','EdgeInsetsGeometry?',NULL,NULL,3,0);
INSERT INTO widget_fields VALUES(1835,14,'selected','bool',NULL,NULL,4,1);
INSERT INTO widget_fields VALUES(1836,14,'isEnabled','bool',NULL,NULL,5,1);
INSERT INTO widget_fields VALUES(1837,14,'onSelected','ValueChanged<bool>?',NULL,NULL,6,0);
INSERT INTO widget_fields VALUES(1838,14,'deleteIcon','Widget?',NULL,NULL,7,0);
INSERT INTO widget_fields VALUES(1839,14,'onDeleted','VoidCallback?',NULL,NULL,8,0);
INSERT INTO widget_fields VALUES(1840,14,'deleteIconColor','Color?',NULL,NULL,9,0);
INSERT INTO widget_fields VALUES(1841,14,'deleteButtonTooltipMessage','String?',NULL,NULL,10,0);
INSERT INTO widget_fields VALUES(1842,14,'onPressed','VoidCallback?',NULL,NULL,11,0);
INSERT INTO widget_fields VALUES(1843,14,'pressElevation','double?',NULL,NULL,12,0);
INSERT INTO widget_fields VALUES(1844,14,'disabledColor','Color?',NULL,NULL,13,0);
INSERT INTO widget_fields VALUES(1845,14,'selectedColor','Color?',NULL,NULL,14,0);
INSERT INTO widget_fields VALUES(1846,14,'tooltip','String?',NULL,NULL,15,0);
INSERT INTO widget_fields VALUES(1847,14,'side','BorderSide?',NULL,NULL,16,0);
INSERT INTO widget_fields VALUES(1848,14,'shape','OutlinedBorder?',NULL,NULL,17,0);
INSERT INTO widget_fields VALUES(1849,14,'clipBehavior','Clip',NULL,NULL,18,1);
INSERT INTO widget_fields VALUES(1850,14,'focusNode','FocusNode?',NULL,NULL,19,0);
INSERT INTO widget_fields VALUES(1851,14,'autofocus','bool',NULL,NULL,20,1);
INSERT INTO widget_fields VALUES(1852,14,'color','MaterialStateProperty<Color?>?',NULL,NULL,21,0);
INSERT INTO widget_fields VALUES(1853,14,'backgroundColor','Color?',NULL,NULL,22,0);
INSERT INTO widget_fields VALUES(1854,14,'padding','EdgeInsetsGeometry?',NULL,NULL,23,0);
INSERT INTO widget_fields VALUES(1855,14,'visualDensity','VisualDensity?',NULL,NULL,24,0);
INSERT INTO widget_fields VALUES(1856,14,'materialTapTargetSize','MaterialTapTargetSize?',NULL,NULL,25,0);
INSERT INTO widget_fields VALUES(1857,14,'elevation','double?',NULL,NULL,26,0);
INSERT INTO widget_fields VALUES(1858,14,'shadowColor','Color?',NULL,NULL,27,0);
INSERT INTO widget_fields VALUES(1859,14,'surfaceTintColor','Color?',NULL,NULL,28,0);
INSERT INTO widget_fields VALUES(1860,14,'selectedShadowColor','Color?',NULL,NULL,29,0);
INSERT INTO widget_fields VALUES(1861,14,'showCheckmark','bool?',NULL,NULL,30,0);
INSERT INTO widget_fields VALUES(1862,14,'checkmarkColor','Color?',NULL,NULL,31,0);
INSERT INTO widget_fields VALUES(1863,14,'avatarBorder','ShapeBorder',NULL,NULL,32,1);
INSERT INTO widget_fields VALUES(1864,14,'iconTheme','IconThemeData?',NULL,NULL,33,0);
INSERT INTO widget_fields VALUES(1865,14,'avatarBoxConstraints','BoxConstraints?',NULL,NULL,34,0);
INSERT INTO widget_fields VALUES(1866,14,'deleteIconBoxConstraints','BoxConstraints?',NULL,NULL,35,0);
INSERT INTO widget_fields VALUES(1867,14,'chipAnimationStyle','ChipAnimationStyle?',NULL,NULL,36,0);
INSERT INTO widget_fields VALUES(1868,14,'mouseCursor','MouseCursor?',NULL,NULL,37,0);
INSERT INTO widget_fields VALUES(1869,434,'initialDate','DateTime?','If provided, it will be used as the default value of the field.','如果提供，将用作字段的默认值。',0,0);
INSERT INTO widget_fields VALUES(1870,434,'firstDate','DateTime','The earliest allowable [DateTime] that the user can input.','用户可以输入的最早允许的 [DateTime]。',1,1);
INSERT INTO widget_fields VALUES(1871,434,'lastDate','DateTime','The latest allowable [DateTime] that the user can input.','用户可以输入的最晚允许的 [DateTime]。',2,1);
INSERT INTO widget_fields VALUES(1872,434,'onDateSubmitted','ValueChanged<DateTime>?','An optional method to call when the user indicates they are done editing the text in the field. Will only be called if the input represents a valid [DateTime].','当用户指示他们已完成编辑字段中的文本时调用的可选方法。仅当输入表示有效的 [DateTime] 时才会调用。',3,0);
INSERT INTO widget_fields VALUES(1873,434,'onDateSaved','ValueChanged<DateTime>?','An optional method to call with the final date when the form is saved via [FormState.save]. Will only be called if the input represents a valid [DateTime].','通过 [FormState.save] 保存表单时使用最终日期调用的可选方法。仅当输入表示有效的 [DateTime] 时才会调用。',4,0);
INSERT INTO widget_fields VALUES(1874,434,'selectableDayPredicate','SelectableDayPredicate?','Function to provide full control over which [DateTime] can be selected.','提供对可选择哪个 [DateTime] 的完全控制的函数。',5,0);
INSERT INTO widget_fields VALUES(1875,434,'errorFormatText','String?','The error text displayed if the entered date is not in the correct format.','如果输入的日期格式不正确，显示的错误文本。',6,0);
INSERT INTO widget_fields VALUES(1876,434,'errorInvalidText','String?','The error text displayed if the date is not valid.','如果日期无效，显示的错误文本。',7,0);
INSERT INTO widget_fields VALUES(1877,434,'fieldHintText','String?','The hint text displayed in the [TextField].','在 [TextField] 中显示的提示文本。',8,0);
INSERT INTO widget_fields VALUES(1878,434,'fieldLabelText','String?','The label text displayed in the [TextField].','在 [TextField] 中显示的标签文本。',9,0);
INSERT INTO widget_fields VALUES(1879,434,'keyboardType','TextInputType?','The keyboard type of the [TextField].','[TextField] 的键盘类型。',10,0);
INSERT INTO widget_fields VALUES(1880,434,'autofocus','bool','{@macro flutter.widgets.editableText.autofocus}','{@macro flutter.widgets.editableText.autofocus}',11,1);
INSERT INTO widget_fields VALUES(1881,434,'acceptEmptyDate','bool','Determines if an empty date would show [errorFormatText] or not.','确定空日期是否会显示 [errorFormatText]。',12,1);
INSERT INTO widget_fields VALUES(1882,434,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',13,0);
INSERT INTO widget_fields VALUES(1883,434,'calendarDelegate','CalendarDelegate<DateTime>','{@macro flutter.material.calendar_date_picker.calendarDelegate}','{@macro flutter.material.calendar_date_picker.calendarDelegate}',14,1);
INSERT INTO widget_fields VALUES(1884,231,'decoration','InputDecoration','The text and styles to use when decorating the child.','装饰子项时使用的文本和样式。',0,1);
INSERT INTO widget_fields VALUES(1885,231,'baseStyle','TextStyle?','The style on which to base the label, hint, counter, and error styles if the [decoration] does not provide explicit styles.','如果 [decoration] 不提供显式样式，则作为标签、提示、计数器和错误样式基础的样式。',1,0);
INSERT INTO widget_fields VALUES(1886,231,'textAlign','TextAlign?','How the text in the decoration should be aligned horizontally.','装饰中的文本应如何水平对齐。',2,0);
INSERT INTO widget_fields VALUES(1887,231,'textAlignVertical','TextAlignVertical?','{@template flutter.material.InputDecorator.textAlignVertical} How the text should be aligned vertically.','{@template flutter.material.InputDecorator.textAlignVertical} 文本应如何垂直对齐。',3,0);
INSERT INTO widget_fields VALUES(1888,231,'isFocused','bool','Whether the input field has focus.','输入字段是否具有焦点。',4,1);
INSERT INTO widget_fields VALUES(1889,231,'isHovering','bool','Whether the input field is being hovered over by a mouse pointer.','输入字段是否被鼠标指针悬停。',5,1);
INSERT INTO widget_fields VALUES(1890,231,'expands','bool','If true, the height of the input field will be as large as possible.','如果为 true，输入字段的高度将尽可能大。',6,1);
INSERT INTO widget_fields VALUES(1891,231,'isEmpty','bool','Whether the input field is empty.','输入字段是否为空。',7,1);
INSERT INTO widget_fields VALUES(1892,231,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',8,0);
INSERT INTO widget_fields VALUES(1893,435,'onPressed','VoidCallback','The callback that is called when the button is tapped.','点击按钮时调用的回调。',0,1);
INSERT INTO widget_fields VALUES(1894,435,'semanticLabel','String','The semantic label for the button, used for accessibility.','按钮的语义标签，用于辅助功能。',1,1);
INSERT INTO widget_fields VALUES(1895,435,'icon','IconData','The icon to display within the button.','在按钮内显示的图标。',2,1);
INSERT INTO widget_fields VALUES(1896,435,'buttonKey','GlobalKey?','An optional key to identify the button widget.','用于标识按钮小部件的可选键。',3,0);
INSERT INTO widget_fields VALUES(1897,435,'variant','InspectorButtonVariant','The visual and behavioral variant of the button.','按钮的视觉和行为变体。',4,1);
INSERT INTO widget_fields VALUES(1898,435,'toggledOn','bool?','For [InspectorButtonVariant.toggle] buttons, this determines if the button is currently in the "on" (true) or "off" (false) state.','对于 [InspectorButtonVariant.toggle] 按钮，这确定按钮当前是处于',5,0);
INSERT INTO widget_fields VALUES(1899,351,'alignment','Alignment?','The alignment of the child''s origin, relative to the size of the box.','子项原点相对于框大小的对齐方式。',0,0);
INSERT INTO widget_fields VALUES(1900,351,'clipBehavior','Clip','If set to [Clip.none], the child may extend beyond the size of the InteractiveViewer, but it will not receive gestures in these areas. Be sure that the InteractiveViewer is the desired size when using [Clip.none].','如果设置为 [Clip.none]，子项可能会超出 InteractiveViewer 的大小，但在这些区域中不会接收手势。使用 [Clip.none] 时确保 InteractiveViewer 是所需的大小。',1,1);
INSERT INTO widget_fields VALUES(1901,351,'panAxis','PanAxis','When set to [PanAxis.aligned], panning is only allowed in the horizontal axis or the vertical axis, diagonal panning is not allowed.','当设置为 [PanAxis.aligned] 时，平移仅允许在水平轴或垂直轴上，不允许对角线平移。',2,1);
INSERT INTO widget_fields VALUES(1902,351,'boundaryMargin','EdgeInsets','A margin for the visible boundaries of the child.','子项可见边界的边距。',3,1);
INSERT INTO widget_fields VALUES(1903,351,'builder','InteractiveViewerWidgetBuilder?','Builds the child of this widget.','构建此小部件的子项。',4,0);
INSERT INTO widget_fields VALUES(1904,351,'child','Widget?','The child [Widget] that is transformed by InteractiveViewer.','由 InteractiveViewer 变换的子 [Widget]。',5,0);
INSERT INTO widget_fields VALUES(1905,351,'constrained','bool','Whether the normal size constraints at this point in the widget tree are applied to the child.','小部件树中此点的正常大小约束是否应用于子项。',6,1);
INSERT INTO widget_fields VALUES(1906,351,'panEnabled','bool','If false, the user will be prevented from panning.','如果为 false，将阻止用户平移。',7,1);
INSERT INTO widget_fields VALUES(1907,351,'scaleEnabled','bool','If false, the user will be prevented from scaling.','如果为 false，将阻止用户缩放。',8,1);
INSERT INTO widget_fields VALUES(1908,351,'trackpadScrollCausesScale','bool','{@macro flutter.gestures.scale.trackpadScrollCausesScale}','{@macro flutter.gestures.scale.trackpadScrollCausesScale}',9,1);
INSERT INTO widget_fields VALUES(1909,351,'scaleFactor','double','Determines the amount of scale to be performed per pointer scroll.','确定每次指针滚动要执行的缩放量。',10,1);
INSERT INTO widget_fields VALUES(1910,351,'maxScale','double','The maximum allowed scale.','允许的最大缩放。',11,1);
INSERT INTO widget_fields VALUES(1911,351,'minScale','double','The minimum allowed scale.','允许的最小缩放。',12,1);
INSERT INTO widget_fields VALUES(1912,351,'interactionEndFrictionCoefficient','double','Changes the deceleration behavior after a gesture.','更改手势后的减速行为。',13,1);
INSERT INTO widget_fields VALUES(1913,351,'onInteractionEnd','GestureScaleEndCallback?','Called when the user ends a pan or scale gesture on the widget.','用户在小部件上结束平移或缩放手势时调用。',14,0);
INSERT INTO widget_fields VALUES(1914,351,'onInteractionStart','GestureScaleStartCallback?','Called when the user begins a pan or scale gesture on the widget.','用户在小部件上开始平移或缩放手势时调用。',15,0);
INSERT INTO widget_fields VALUES(1915,351,'onInteractionUpdate','GestureScaleUpdateCallback?','Called when the user updates a pan or scale gesture on the widget.','用户在小部件上更新平移或缩放手势时调用。',16,0);
INSERT INTO widget_fields VALUES(1916,351,'transformationController','TransformationController?','A [TransformationController] for the transformation performed on the child.','对子项执行变换的 [TransformationController]。',17,0);
INSERT INTO widget_fields VALUES(1917,297,'stepWidth','double?','If non-null, force the child''s width to be a multiple of this value.','如果非空，强制子项的宽度为此值的倍数。',0,0);
INSERT INTO widget_fields VALUES(1918,297,'stepHeight','double?','If non-null, force the child''s height to be a multiple of this value.','如果非空，强制子项的高度为此值的倍数。',1,0);
INSERT INTO widget_fields VALUES(1919,316,'keepAlive','bool','Whether to keep the child alive.','是否保持子项活动。',0,1);
INSERT INTO widget_fields VALUES(1920,284,'focusNode','FocusNode','Controls whether this widget has keyboard focus.','控制此小部件是否具有键盘焦点。',0,1);
INSERT INTO widget_fields VALUES(1921,284,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',1,1);
INSERT INTO widget_fields VALUES(1922,284,'includeSemantics','bool','{@macro flutter.widgets.Focus.includeSemantics}','{@macro flutter.widgets.Focus.includeSemantics}',2,1);
INSERT INTO widget_fields VALUES(1923,284,'onKeyEvent','ValueChanged<KeyEvent>?','Called whenever this widget receives a keyboard event.','每当此小部件接收到键盘事件时调用。',3,0);
INSERT INTO widget_fields VALUES(1924,284,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',4,1);
INSERT INTO widget_fields VALUES(1925,436,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(1926,315,'id','Object','An object representing the identity of this child.','表示此子项身份的对象。',0,1);
INSERT INTO widget_fields VALUES(1927,145,'applicationName','String?','The name of the application.','应用程序的名称。',0,0);
INSERT INTO widget_fields VALUES(1928,145,'applicationVersion','String?','The version of this build of the application.','此应用程序构建的版本。',1,0);
INSERT INTO widget_fields VALUES(1929,145,'applicationIcon','Widget?','The icon to show below the application name.','在应用程序名称下方显示的图标。',2,0);
INSERT INTO widget_fields VALUES(1930,145,'applicationLegalese','String?','A string to show in small print.','以小字体显示的字符串。',3,0);
INSERT INTO widget_fields VALUES(1931,79,'maxWidth','double','The maximum width limit to apply in the absence of a [BoxConstraints.maxWidth] constraint.','在没有 [BoxConstraints.maxWidth] 约束时应用的最大宽度限制。',0,1);
INSERT INTO widget_fields VALUES(1932,79,'maxHeight','double','The maximum height limit to apply in the absence of a [BoxConstraints.maxHeight] constraint.','在没有 [BoxConstraints.maxHeight] 约束时应用的最大高度限制。',1,1);
INSERT INTO widget_fields VALUES(1933,47,'minHeight','double?','{@template flutter.material.LinearProgressIndicator.minHeight} The minimum height of the line used to draw the linear indicator.','{@template flutter.material.LinearProgressIndicator.minHeight} 用于绘制线性指示器的线的最小高度。',0,0);
INSERT INTO widget_fields VALUES(1934,47,'borderRadius','BorderRadiusGeometry?','The border radius of both the indicator and the track.','指示器和轨道的边框半径。',1,0);
INSERT INTO widget_fields VALUES(1935,47,'stopIndicatorColor','Color?','The color of the stop indicator.','停止指示器的颜色。',2,0);
INSERT INTO widget_fields VALUES(1936,47,'stopIndicatorRadius','double?','The radius of the stop indicator.','停止指示器的半径。',3,0);
INSERT INTO widget_fields VALUES(1937,47,'trackGap','double?','The gap between the indicator and the track.','指示器和轨道之间的间隙。',4,0);
INSERT INTO widget_fields VALUES(1938,47,'year2023','bool?','When true, the [LinearProgressIndicator] will use the 2023 Material Design 3 appearance.','当为 true 时，[LinearProgressIndicator] 将使用 2023 Material Design 3 外观。',5,0);
INSERT INTO widget_fields VALUES(1939,342,'mainAxis','Axis','The direction to use as the main axis.','用作主轴的方向。',0,1);
INSERT INTO widget_fields VALUES(1940,342,'reverse','bool','Whether the list body positions children in the reading direction.','列表主体是否在阅读方向上定位子项。',1,1);
INSERT INTO widget_fields VALUES(1941,438,'builder','TransitionBuilder','Called every time the [listenable] notifies about a change.','每次 [listenable] 通知更改时调用。',0,1);
INSERT INTO widget_fields VALUES(1942,438,'child','Widget?','The child widget to pass to the [builder].','传递给 [builder] 的子小部件。',1,0);
INSERT INTO widget_fields VALUES(1943,147,'onPointerDown','PointerDownEventListener?','Called when a pointer comes into contact with the screen (for touch pointers), or has its button pressed (for mouse pointers) at this widget''s location.','当指针与屏幕接触（对于触摸指针）或在此小部件位置按下按钮（对于鼠标指针）时调用。',0,0);
INSERT INTO widget_fields VALUES(1944,147,'onPointerMove','PointerMoveEventListener?','Called when a pointer that triggered an [onPointerDown] changes position.','当触发 [onPointerDown] 的指针改变位置时调用。',1,0);
INSERT INTO widget_fields VALUES(1945,147,'onPointerUp','PointerUpEventListener?','Called when a pointer that triggered an [onPointerDown] is no longer in contact with the screen.','当触发 [onPointerDown] 的指针不再与屏幕接触时调用。',2,0);
INSERT INTO widget_fields VALUES(1946,147,'onPointerHover','PointerHoverEventListener?','Called when a pointer that has not triggered an [onPointerDown] changes position.','当未触发 [onPointerDown] 的指针改变位置时调用。',3,0);
INSERT INTO widget_fields VALUES(1947,147,'onPointerCancel','PointerCancelEventListener?','Called when the input from a pointer that triggered an [onPointerDown] is no longer directed towards this receiver.','当触发 [onPointerDown] 的指针的输入不再指向此接收器时调用。',4,0);
INSERT INTO widget_fields VALUES(1948,147,'onPointerPanZoomStart','PointerPanZoomStartEventListener?','Called when a pan/zoom begins such as from a trackpad gesture.','当平移/缩放开始时调用，例如来自触控板手势。',5,0);
INSERT INTO widget_fields VALUES(1949,147,'onPointerPanZoomUpdate','PointerPanZoomUpdateEventListener?','Called when a pan/zoom is updated.','当平移/缩放更新时调用。',6,0);
INSERT INTO widget_fields VALUES(1950,147,'onPointerPanZoomEnd','PointerPanZoomEndEventListener?','Called when a pan/zoom finishes.','当平移/缩放完成时调用。',7,0);
INSERT INTO widget_fields VALUES(1951,147,'onPointerSignal','PointerSignalEventListener?','Called when a pointer signal occurs over this object.','当指针信号在此对象上发生时调用。',8,0);
INSERT INTO widget_fields VALUES(1952,147,'behavior','HitTestBehavior','How to behave during hit testing.','命中测试期间的行为方式。',9,1);
INSERT INTO widget_fields VALUES(1953,16,'leading','Widget?','A widget to display before the title.','在标题前显示的小部件。',0,0);
INSERT INTO widget_fields VALUES(1954,16,'title','Widget?','The primary content of the list tile.','列表磁贴的主要内容。',1,0);
INSERT INTO widget_fields VALUES(1955,16,'subtitle','Widget?','Additional content displayed below the title.','显示在标题下方的附加内容。',2,0);
INSERT INTO widget_fields VALUES(1956,16,'trailing','Widget?','A widget to display after the title.','在标题后显示的小部件。',3,0);
INSERT INTO widget_fields VALUES(1957,16,'isThreeLine','bool?','Whether this list tile is intended to display three lines of text.','此列表磁贴是否旨在显示三行文本。',4,0);
INSERT INTO widget_fields VALUES(1958,16,'dense','bool?','{@template flutter.material.ListTile.dense} Whether this list tile is part of a vertically dense list.','{@template flutter.material.ListTile.dense} 此列表磁贴是否是垂直密集列表的一部分。',5,0);
INSERT INTO widget_fields VALUES(1959,16,'visualDensity','VisualDensity?','Defines how compact the list tile''s layout will be.','定义列表磁贴布局的紧凑程度。',6,0);
INSERT INTO widget_fields VALUES(1960,16,'shape','ShapeBorder?','{@template flutter.material.ListTile.shape} Defines the tile''s [InkWell.customBorder] and [Ink.decoration] shape. {@endtemplate}','{@template flutter.material.ListTile.shape} 定义磁贴的 [InkWell.customBorder] 和 [Ink.decoration] 形状。{@endtemplate}',7,0);
INSERT INTO widget_fields VALUES(1961,16,'selectedColor','Color?','Defines the color used for icons and text when the list tile is selected.','定义选择列表磁贴时用于图标和文本的颜色。',8,0);
INSERT INTO widget_fields VALUES(1962,16,'iconColor','Color?','Defines the default color for [leading] and [trailing] icons.','定义 [leading] 和 [trailing] 图标的默认颜色。',9,0);
INSERT INTO widget_fields VALUES(1963,16,'textColor','Color?','Defines the text color for the [title], [subtitle], [leading], and [trailing].','定义 [title]、[subtitle]、[leading] 和 [trailing] 的文本颜色。',10,0);
INSERT INTO widget_fields VALUES(1964,16,'titleTextStyle','TextStyle?','The text style for ListTile''s [title].','ListTile 的 [title] 的文本样式。',11,0);
INSERT INTO widget_fields VALUES(1965,16,'subtitleTextStyle','TextStyle?','The text style for ListTile''s [subtitle].','ListTile 的 [subtitle] 的文本样式。',12,0);
INSERT INTO widget_fields VALUES(1966,16,'leadingAndTrailingTextStyle','TextStyle?','The text style for ListTile''s [leading] and [trailing].','ListTile 的 [leading] 和 [trailing] 的文本样式。',13,0);
INSERT INTO widget_fields VALUES(1967,16,'style','ListTileStyle?','Defines the font used for the [title].','定义 [title] 使用的字体。',14,0);
INSERT INTO widget_fields VALUES(1968,16,'contentPadding','EdgeInsetsGeometry?','The tile''s internal padding.','磁贴的内部内边距。',15,0);
INSERT INTO widget_fields VALUES(1969,16,'enabled','bool','Whether this list tile is interactive.','此列表磁贴是否可交互。',16,1);
INSERT INTO widget_fields VALUES(1970,16,'onTap','GestureTapCallback?','Called when the user taps this list tile.','用户点击此列表磁贴时调用。',17,0);
INSERT INTO widget_fields VALUES(1971,16,'onLongPress','GestureLongPressCallback?','Called when the user long-presses on this list tile.','用户长按此列表磁贴时调用。',18,0);
INSERT INTO widget_fields VALUES(1972,16,'onFocusChange','ValueChanged<bool>?','{@macro flutter.material.inkwell.onFocusChange}','{@macro flutter.material.inkwell.onFocusChange}',19,0);
INSERT INTO widget_fields VALUES(1973,16,'mouseCursor','MouseCursor?','{@template flutter.material.ListTile.mouseCursor} The cursor for a mouse pointer when it enters or is hovering over the widget.','{@template flutter.material.ListTile.mouseCursor} 鼠标指针进入或悬停在小部件上时的光标。',20,0);
INSERT INTO widget_fields VALUES(1974,16,'selected','bool','If this tile is also [enabled] then icons and text are rendered with the same color.','如果此磁贴也是 [enabled]，则图标和文本以相同颜色渲染。',21,1);
INSERT INTO widget_fields VALUES(1975,16,'focusColor','Color?','The color for the tile''s [Material] when it has the input focus.','磁贴具有输入焦点时其 [Material] 的颜色。',22,0);
INSERT INTO widget_fields VALUES(1976,16,'hoverColor','Color?','The color for the tile''s [Material] when a pointer is hovering over it.','指针悬停在磁贴上时其 [Material] 的颜色。',23,0);
INSERT INTO widget_fields VALUES(1977,16,'splashColor','Color?','The color of splash for the tile''s [Material].','磁贴的 [Material] 的飞溅颜色。',24,0);
INSERT INTO widget_fields VALUES(1978,16,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',25,0);
INSERT INTO widget_fields VALUES(1979,16,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',26,1);
INSERT INTO widget_fields VALUES(1980,16,'tileColor','Color?','{@template flutter.material.ListTile.tileColor} Defines the background color of `ListTile` when [selected] is false.','{@template flutter.material.ListTile.tileColor} 当 [selected] 为 false 时定义 `ListTile` 的背景颜色。',27,0);
INSERT INTO widget_fields VALUES(1981,16,'selectedTileColor','Color?','Defines the background color of `ListTile` when [selected] is true.','当 [selected] 为 true 时定义 `ListTile` 的背景颜色。',28,0);
INSERT INTO widget_fields VALUES(1982,16,'enableFeedback','bool?','{@template flutter.material.ListTile.enableFeedback} Whether detected gestures should provide acoustic and/or haptic feedback.','{@template flutter.material.ListTile.enableFeedback} 检测到的手势是否应提供声音和/或触觉反馈。',29,0);
INSERT INTO widget_fields VALUES(1983,16,'horizontalTitleGap','double?','The horizontal gap between the titles and the leading/trailing widgets.','标题和前导/尾随小部件之间的水平间隙。',30,0);
INSERT INTO widget_fields VALUES(1984,16,'minVerticalPadding','double?','The minimum padding on the top and bottom of the title and subtitle widgets.','标题和副标题小部件顶部和底部的最小内边距。',31,0);
INSERT INTO widget_fields VALUES(1985,16,'minLeadingWidth','double?','The minimum width allocated for the [ListTile.leading] widget.','为 [ListTile.leading] 小部件分配的最小宽度。',32,0);
INSERT INTO widget_fields VALUES(1986,16,'minTileHeight','double?','{@template flutter.material.ListTile.minTileHeight} The minimum height allocated for the [ListTile] widget.','{@template flutter.material.ListTile.minTileHeight} 为 [ListTile] 小部件分配的最小高度。',33,0);
INSERT INTO widget_fields VALUES(1987,16,'titleAlignment','ListTileTitleAlignment?','Defines how [ListTile.leading] and [ListTile.trailing] are vertically aligned relative to the [ListTile]''s titles ([ListTile.title] and [ListTile.subtitle]).','定义 [ListTile.leading] 和 [ListTile.trailing] 相对于 [ListTile] 的标题（[ListTile.title] 和 [ListTile.subtitle]）如何垂直对齐。',34,0);
INSERT INTO widget_fields VALUES(1988,16,'internalAddSemanticForOnTap','bool','Whether to add button:true to the semantics if onTap is provided. This is a temporary flag to help changing the behavior of ListTile onTap semantics.','如果提供了 onTap，是否向语义添加 button:true。这是一个临时标志，用于帮助更改 ListTile onTap 语义的行为。',35,1);
INSERT INTO widget_fields VALUES(1989,162,'itemExtent','double?','{@template flutter.widgets.list_view.itemExtent} If non-null, forces the children to have the given extent in the scroll direction.','{@template flutter.widgets.list_view.itemExtent} 如果非空，强制子项在滚动方向上具有给定的范围。',0,0);
INSERT INTO widget_fields VALUES(1990,162,'itemExtentBuilder','ItemExtentBuilder?','{@template flutter.widgets.list_view.itemExtentBuilder} If non-null, forces the children to have the corresponding extent returned by the builder.','{@template flutter.widgets.list_view.itemExtentBuilder} 如果非空，强制子项具有构建器返回的相应范围。',1,0);
INSERT INTO widget_fields VALUES(1991,162,'prototypeItem','Widget?','{@template flutter.widgets.list_view.prototypeItem} If non-null, forces the children to have the same extent as the given widget in the scroll direction.','{@template flutter.widgets.list_view.prototypeItem} 如果非空，强制子项在滚动方向上与给定小部件具有相同的范围。',2,0);
INSERT INTO widget_fields VALUES(1992,162,'childrenDelegate','SliverChildDelegate','A delegate that provides the children for the [ListView].','为 [ListView] 提供子项的委托。',3,1);
INSERT INTO widget_fields VALUES(1993,179,'controller','ScrollController?','Typically a [FixedExtentScrollController] used to control the current item.','通常是用于控制当前项目的 [FixedExtentScrollController]。',0,0);
INSERT INTO widget_fields VALUES(1994,179,'physics','ScrollPhysics?','How the scroll view should respond to user input.','滚动视图应如何响应用户输入。',1,0);
INSERT INTO widget_fields VALUES(1995,179,'diameterRatio','double','{@macro flutter.rendering.RenderListWheelViewport.diameterRatio}','{@macro flutter.rendering.RenderListWheelViewport.diameterRatio}',2,1);
INSERT INTO widget_fields VALUES(1996,179,'perspective','double','{@macro flutter.rendering.RenderListWheelViewport.perspective}','{@macro flutter.rendering.RenderListWheelViewport.perspective}',3,1);
INSERT INTO widget_fields VALUES(1997,179,'offAxisFraction','double','{@macro flutter.rendering.RenderListWheelViewport.offAxisFraction}','{@macro flutter.rendering.RenderListWheelViewport.offAxisFraction}',4,1);
INSERT INTO widget_fields VALUES(1998,179,'useMagnifier','bool','{@macro flutter.rendering.RenderListWheelViewport.useMagnifier}','{@macro flutter.rendering.RenderListWheelViewport.useMagnifier}',5,1);
INSERT INTO widget_fields VALUES(1999,179,'magnification','double','{@macro flutter.rendering.RenderListWheelViewport.magnification}','{@macro flutter.rendering.RenderListWheelViewport.magnification}',6,1);
INSERT INTO widget_fields VALUES(2000,179,'overAndUnderCenterOpacity','double','{@macro flutter.rendering.RenderListWheelViewport.overAndUnderCenterOpacity}','{@macro flutter.rendering.RenderListWheelViewport.overAndUnderCenterOpacity}',7,1);
INSERT INTO widget_fields VALUES(2001,179,'itemExtent','double','Size of each child in the main axis.','主轴中每个子项的大小。',8,1);
INSERT INTO widget_fields VALUES(2002,179,'squeeze','double','{@macro flutter.rendering.RenderListWheelViewport.squeeze}','{@macro flutter.rendering.RenderListWheelViewport.squeeze}',9,1);
INSERT INTO widget_fields VALUES(2003,179,'onSelectedItemChanged','ValueChanged<int>?','On optional listener that''s called when the centered item changes.','当居中项目更改时调用的可选监听器。',10,0);
INSERT INTO widget_fields VALUES(2004,179,'renderChildrenOutsideViewport','bool','{@macro flutter.rendering.RenderListWheelViewport.renderChildrenOutsideViewport}','{@macro flutter.rendering.RenderListWheelViewport.renderChildrenOutsideViewport}',11,1);
INSERT INTO widget_fields VALUES(2005,179,'childDelegate','ListWheelChildDelegate','A delegate that helps lazily instantiating child.','帮助惰性实例化子项的委托。',12,1);
INSERT INTO widget_fields VALUES(2006,179,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',13,1);
INSERT INTO widget_fields VALUES(2007,179,'hitTestBehavior','HitTestBehavior','{@macro flutter.widgets.scrollable.hitTestBehavior}','{@macro flutter.widgets.scrollable.hitTestBehavior}',14,1);
INSERT INTO widget_fields VALUES(2008,179,'restorationId','String?','{@macro flutter.widgets.scrollable.restorationId}','{@macro flutter.widgets.scrollable.restorationId}',15,0);
INSERT INTO widget_fields VALUES(2009,179,'scrollBehavior','ScrollBehavior?','{@macro flutter.widgets.scrollable.scrollBehavior}','{@macro flutter.widgets.scrollable.scrollBehavior}',16,0);
INSERT INTO widget_fields VALUES(2010,179,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',17,1);
INSERT INTO widget_fields VALUES(2011,291,'diameterRatio','double','{@macro flutter.rendering.RenderListWheelViewport.diameterRatio}','{@macro flutter.rendering.RenderListWheelViewport.diameterRatio}',0,1);
INSERT INTO widget_fields VALUES(2012,291,'perspective','double','{@macro flutter.rendering.RenderListWheelViewport.perspective}','{@macro flutter.rendering.RenderListWheelViewport.perspective}',1,1);
INSERT INTO widget_fields VALUES(2013,291,'offAxisFraction','double','{@macro flutter.rendering.RenderListWheelViewport.offAxisFraction}','{@macro flutter.rendering.RenderListWheelViewport.offAxisFraction}',2,1);
INSERT INTO widget_fields VALUES(2014,291,'useMagnifier','bool','{@macro flutter.rendering.RenderListWheelViewport.useMagnifier}','{@macro flutter.rendering.RenderListWheelViewport.useMagnifier}',3,1);
INSERT INTO widget_fields VALUES(2015,291,'magnification','double','{@macro flutter.rendering.RenderListWheelViewport.magnification}','{@macro flutter.rendering.RenderListWheelViewport.magnification}',4,1);
INSERT INTO widget_fields VALUES(2016,291,'overAndUnderCenterOpacity','double','{@macro flutter.rendering.RenderListWheelViewport.overAndUnderCenterOpacity}','{@macro flutter.rendering.RenderListWheelViewport.overAndUnderCenterOpacity}',5,1);
INSERT INTO widget_fields VALUES(2017,291,'itemExtent','double','{@macro flutter.rendering.RenderListWheelViewport.itemExtent}','{@macro flutter.rendering.RenderListWheelViewport.itemExtent}',6,1);
INSERT INTO widget_fields VALUES(2018,291,'squeeze','double','{@macro flutter.rendering.RenderListWheelViewport.squeeze}','{@macro flutter.rendering.RenderListWheelViewport.squeeze}',7,1);
INSERT INTO widget_fields VALUES(2019,291,'renderChildrenOutsideViewport','bool','{@macro flutter.rendering.RenderListWheelViewport.renderChildrenOutsideViewport}','{@macro flutter.rendering.RenderListWheelViewport.renderChildrenOutsideViewport}',8,1);
INSERT INTO widget_fields VALUES(2020,291,'offset','ViewportOffset','[ViewportOffset] object describing the content that should be visible in the viewport.','描述应在视口中可见的内容的 [ViewportOffset] 对象。',9,1);
INSERT INTO widget_fields VALUES(2021,291,'childDelegate','ListWheelChildDelegate','A delegate that lazily instantiates children.','惰性实例化子项的委托。',10,1);
INSERT INTO widget_fields VALUES(2022,291,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',11,1);
INSERT INTO widget_fields VALUES(2023,290,'locale','Locale','The resources returned by [Localizations.of] will be specific to this locale.','[Localizations.of] 返回的资源将特定于此区域设置。',0,1);
INSERT INTO widget_fields VALUES(2024,290,'delegates','List<LocalizationsDelegate<dynamic>>','This list collectively defines the localized resources objects that can be retrieved with [Localizations.of].','此列表共同定义了可以使用 [Localizations.of] 检索的本地化资源对象。',1,1);
INSERT INTO widget_fields VALUES(2025,290,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',2,0);
INSERT INTO widget_fields VALUES(2026,105,'hapticFeedbackOnStart','bool','Whether haptic feedback should be triggered on drag start.','拖动开始时是否应触发触觉反馈。',0,1);
INSERT INTO widget_fields VALUES(2027,105,'delay','Duration','The duration that a user has to press down before a long press is registered.','用户必须按下才能注册长按的持续时间。',1,1);
INSERT INTO widget_fields VALUES(2028,440,'additionalFocalPointOffset','Offset','Any additional offset the focal point requires to "point" to the correct place.','焦点需要',0,1);
INSERT INTO widget_fields VALUES(2029,440,'borderRadius','BorderRadius','The border radius for this magnifier.','此放大镜的边框半径。',1,1);
INSERT INTO widget_fields VALUES(2030,440,'filmColor','Color','The color to tint the image in this [Magnifier].','在此 [Magnifier] 中为图像着色的颜色。',2,1);
INSERT INTO widget_fields VALUES(2031,440,'shadows','List<BoxShadow>','A list of shadows cast by the [Magnifier].','[Magnifier] 投射的阴影列表。',3,1);
INSERT INTO widget_fields VALUES(2032,440,'clipBehavior','Clip','Whether and how to clip the [shadows] that render inside the loupe.','是否以及如何裁剪在放大镜内渲染的 [shadows]。',4,1);
INSERT INTO widget_fields VALUES(2033,440,'size','Size','The [Size] of this [Magnifier].','此 [Magnifier] 的 [Size]。',5,1);
INSERT INTO widget_fields VALUES(2034,160,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(2035,160,'type','MaterialType','The kind of material to show (e.g., card or canvas). This affects the shape of the widget, the roundness of its corners if the shape is rectangular, and the default color.','要显示的材料类型（例如，卡片或画布）。这影响小部件的形状、如果形状是矩形则影响其角的圆度以及默认颜色。',1,1);
INSERT INTO widget_fields VALUES(2036,160,'elevation','double','{@template flutter.material.material.elevation} The z-coordinate at which to place this material relative to its parent.','{@template flutter.material.material.elevation} 相对于其父级放置此材料的 z 坐标。',2,1);
INSERT INTO widget_fields VALUES(2037,160,'color','Color?','The color to paint the material.','绘制材料的颜色。',3,0);
INSERT INTO widget_fields VALUES(2038,160,'shadowColor','Color?','The color to paint the shadow below the material.','绘制材料下方阴影的颜色。',4,0);
INSERT INTO widget_fields VALUES(2039,160,'surfaceTintColor','Color?','The color of the surface tint overlay applied to the material color to indicate elevation.','应用于材料颜色以指示高度的表面色调覆盖的颜色。',5,0);
INSERT INTO widget_fields VALUES(2040,160,'textStyle','TextStyle?','The typographical style to use for text within this material.','用于此材料内文本的排版样式。',6,0);
INSERT INTO widget_fields VALUES(2041,160,'shape','ShapeBorder?','Defines the material''s shape as well its shadow.','定义材料的形状及其阴影。',7,0);
INSERT INTO widget_fields VALUES(2042,160,'borderOnForeground','bool','Whether to paint the [shape] border in front of the [child].','是否在 [child] 前面绘制 [shape] 边框。',8,1);
INSERT INTO widget_fields VALUES(2043,160,'clipBehavior','Clip','{@template flutter.material.Material.clipBehavior} The content will be clipped (or not) according to this option.','{@template flutter.material.Material.clipBehavior} 内容将根据此选项进行裁剪（或不裁剪）。',9,1);
INSERT INTO widget_fields VALUES(2044,160,'animationDuration','Duration','Defines the duration of animated changes for [shape], [elevation], [shadowColor], [surfaceTintColor] and the elevation overlay if it is applied.','定义 [shape]、[elevation]、[shadowColor]、[surfaceTintColor] 和高度覆盖（如果应用）的动画更改持续时间。',10,1);
INSERT INTO widget_fields VALUES(2045,160,'borderRadius','BorderRadiusGeometry?','If non-null, the corners of this box are rounded by this [BorderRadiusGeometry] value.','如果非空，此框的角由此 [BorderRadiusGeometry] 值圆化。',11,0);
INSERT INTO widget_fields VALUES(2046,65,'navigatorKey','GlobalKey<NavigatorState>?','{@macro flutter.widgets.widgetsApp.navigatorKey}','{@macro flutter.widgets.widgetsApp.navigatorKey}',0,0);
INSERT INTO widget_fields VALUES(2047,65,'scaffoldMessengerKey','GlobalKey<ScaffoldMessengerState>?','A key to use when building the [ScaffoldMessenger].','构建 [ScaffoldMessenger] 时使用的键。',1,0);
INSERT INTO widget_fields VALUES(2048,65,'home','Widget?','{@macro flutter.widgets.widgetsApp.home}','{@macro flutter.widgets.widgetsApp.home}',2,0);
INSERT INTO widget_fields VALUES(2049,65,'routes','Map<String, WidgetBuilder>?','The application''s top-level routing table.','应用程序的顶级路由表。',3,0);
INSERT INTO widget_fields VALUES(2050,65,'initialRoute','String?','{@macro flutter.widgets.widgetsApp.initialRoute}','{@macro flutter.widgets.widgetsApp.initialRoute}',4,0);
INSERT INTO widget_fields VALUES(2051,65,'onGenerateRoute','RouteFactory?','{@macro flutter.widgets.widgetsApp.onGenerateRoute}','{@macro flutter.widgets.widgetsApp.onGenerateRoute}',5,0);
INSERT INTO widget_fields VALUES(2052,65,'onGenerateInitialRoutes','InitialRouteListFactory?','{@macro flutter.widgets.widgetsApp.onGenerateInitialRoutes}','{@macro flutter.widgets.widgetsApp.onGenerateInitialRoutes}',6,0);
INSERT INTO widget_fields VALUES(2053,65,'onUnknownRoute','RouteFactory?','{@macro flutter.widgets.widgetsApp.onUnknownRoute}','{@macro flutter.widgets.widgetsApp.onUnknownRoute}',7,0);
INSERT INTO widget_fields VALUES(2054,65,'onNavigationNotification','NotificationListenerCallback<NavigationNotification>?','{@macro flutter.widgets.widgetsApp.onNavigationNotification}','{@macro flutter.widgets.widgetsApp.onNavigationNotification}',8,0);
INSERT INTO widget_fields VALUES(2055,65,'navigatorObservers','List<NavigatorObserver>?','{@macro flutter.widgets.widgetsApp.navigatorObservers}','{@macro flutter.widgets.widgetsApp.navigatorObservers}',9,0);
INSERT INTO widget_fields VALUES(2056,65,'routeInformationProvider','RouteInformationProvider?','{@macro flutter.widgets.widgetsApp.routeInformationProvider}','{@macro flutter.widgets.widgetsApp.routeInformationProvider}',10,0);
INSERT INTO widget_fields VALUES(2057,65,'routeInformationParser','RouteInformationParser<Object>?','{@macro flutter.widgets.widgetsApp.routeInformationParser}','{@macro flutter.widgets.widgetsApp.routeInformationParser}',11,0);
INSERT INTO widget_fields VALUES(2058,65,'routerDelegate','RouterDelegate<Object>?','{@macro flutter.widgets.widgetsApp.routerDelegate}','{@macro flutter.widgets.widgetsApp.routerDelegate}',12,0);
INSERT INTO widget_fields VALUES(2059,65,'backButtonDispatcher','BackButtonDispatcher?','{@macro flutter.widgets.widgetsApp.backButtonDispatcher}','{@macro flutter.widgets.widgetsApp.backButtonDispatcher}',13,0);
INSERT INTO widget_fields VALUES(2060,65,'routerConfig','RouterConfig<Object>?','{@macro flutter.widgets.widgetsApp.routerConfig}','{@macro flutter.widgets.widgetsApp.routerConfig}',14,0);
INSERT INTO widget_fields VALUES(2061,65,'builder','TransitionBuilder?','{@macro flutter.widgets.widgetsApp.builder}','{@macro flutter.widgets.widgetsApp.builder}',15,0);
INSERT INTO widget_fields VALUES(2062,65,'title','String?','{@macro flutter.widgets.widgetsApp.title}','{@macro flutter.widgets.widgetsApp.title}',16,0);
INSERT INTO widget_fields VALUES(2063,65,'onGenerateTitle','GenerateAppTitle?','{@macro flutter.widgets.widgetsApp.onGenerateTitle}','{@macro flutter.widgets.widgetsApp.onGenerateTitle}',17,0);
INSERT INTO widget_fields VALUES(2064,65,'theme','ThemeData?','Default visual properties, like colors fonts and shapes, for this app''s material widgets.','此应用程序的 material 小部件的默认视觉属性，如颜色字体和形状。',18,0);
INSERT INTO widget_fields VALUES(2065,65,'darkTheme','ThemeData?','The [ThemeData] to use when a ''dark mode'' is requested by the system.','系统请求',19,0);
INSERT INTO widget_fields VALUES(2066,65,'highContrastTheme','ThemeData?','The [ThemeData] to use when ''high contrast'' is requested by the system.','系统请求',20,0);
INSERT INTO widget_fields VALUES(2067,65,'highContrastDarkTheme','ThemeData?','The [ThemeData] to use when a ''dark mode'' and ''high contrast'' is requested by the system.','系统请求',21,0);
INSERT INTO widget_fields VALUES(2068,65,'themeMode','ThemeMode?','Determines which theme will be used by the application if both [theme] and [darkTheme] are provided.','如果同时提供 [theme] 和 [darkTheme]，确定应用程序将使用哪个主题。',22,0);
INSERT INTO widget_fields VALUES(2069,65,'themeAnimationDuration','Duration','The duration of animated theme changes.','动画主题更改的持续时间。',23,1);
INSERT INTO widget_fields VALUES(2070,65,'themeAnimationCurve','Curve','The curve to apply when animating theme changes.','动画主题更改时应用的曲线。',24,1);
INSERT INTO widget_fields VALUES(2071,65,'color','Color?','{@macro flutter.widgets.widgetsApp.color}','{@macro flutter.widgets.widgetsApp.color}',25,0);
INSERT INTO widget_fields VALUES(2072,65,'locale','Locale?','{@macro flutter.widgets.widgetsApp.locale}','{@macro flutter.widgets.widgetsApp.locale}',26,0);
INSERT INTO widget_fields VALUES(2073,65,'localizationsDelegates','Iterable<LocalizationsDelegate<dynamic>>?','{@macro flutter.widgets.widgetsApp.localizationsDelegates}','{@macro flutter.widgets.widgetsApp.localizationsDelegates}',27,0);
INSERT INTO widget_fields VALUES(2074,65,'localeListResolutionCallback','LocaleListResolutionCallback?','{@macro flutter.widgets.widgetsApp.localeListResolutionCallback}','{@macro flutter.widgets.widgetsApp.localeListResolutionCallback}',28,0);
INSERT INTO widget_fields VALUES(2075,65,'localeResolutionCallback','LocaleResolutionCallback?','{@macro flutter.widgets.LocaleResolutionCallback}','{@macro flutter.widgets.LocaleResolutionCallback}',29,0);
INSERT INTO widget_fields VALUES(2076,65,'supportedLocales','Iterable<Locale>','{@macro flutter.widgets.widgetsApp.supportedLocales}','{@macro flutter.widgets.widgetsApp.supportedLocales}',30,1);
INSERT INTO widget_fields VALUES(2077,65,'showPerformanceOverlay','bool','Turns on a performance overlay.','打开性能覆盖。',31,1);
INSERT INTO widget_fields VALUES(2078,65,'checkerboardRasterCacheImages','bool','Turns on checkerboarding of raster cache images.','打开光栅缓存图像的棋盘格。',32,1);
INSERT INTO widget_fields VALUES(2079,65,'checkerboardOffscreenLayers','bool','Turns on checkerboarding of layers rendered to offscreen bitmaps.','打开渲染到离屏位图的图层的棋盘格。',33,1);
INSERT INTO widget_fields VALUES(2080,65,'showSemanticsDebugger','bool','Turns on an overlay that shows the accessibility information reported by the framework.','打开显示框架报告的辅助功能信息的覆盖。',34,1);
INSERT INTO widget_fields VALUES(2081,65,'debugShowCheckedModeBanner','bool','{@macro flutter.widgets.widgetsApp.debugShowCheckedModeBanner}','{@macro flutter.widgets.widgetsApp.debugShowCheckedModeBanner}',35,1);
INSERT INTO widget_fields VALUES(2082,65,'shortcuts','Map<ShortcutActivator, Intent>?','{@macro flutter.widgets.widgetsApp.shortcuts} {@tool snippet} This example shows how to add a single shortcut for [LogicalKeyboardKey.select] to the default shortcuts without needing to add your own [Shortcuts] widget.','{@macro flutter.widgets.widgetsApp.shortcuts} {@tool snippet} 此示例显示如何在不需要添加自己的 [Shortcuts] 小部件的情况下为 [LogicalKeyboardKey.select] 添加单个快捷方式到默认快捷方式。',36,0);
INSERT INTO widget_fields VALUES(2083,65,'actions','Map<Type, Action<Intent>>?','{@macro flutter.widgets.widgetsApp.actions} {@tool snippet} This example shows how to add a single action handling an [ActivateAction] to the default actions without needing to add your own [Actions] widget.','{@macro flutter.widgets.widgetsApp.actions} {@tool snippet} 此示例显示如何在不需要添加自己的 [Actions] 小部件的情况下添加处理 [ActivateAction] 的单个操作到默认操作。',37,0);
INSERT INTO widget_fields VALUES(2084,65,'restorationScopeId','String?','{@macro flutter.widgets.widgetsApp.restorationScopeId}','{@macro flutter.widgets.widgetsApp.restorationScopeId}',38,0);
INSERT INTO widget_fields VALUES(2085,65,'scrollBehavior','ScrollBehavior?','{@template flutter.material.materialApp.scrollBehavior} The default [ScrollBehavior] for the application.','{@template flutter.material.materialApp.scrollBehavior} 应用程序的默认 [ScrollBehavior]。',39,0);
INSERT INTO widget_fields VALUES(2086,65,'debugShowMaterialGrid','bool','Turns on a [GridPaper] overlay that paints a baseline grid Material apps.','打开绘制基线网格 Material 应用程序的 [GridPaper] 覆盖。',40,1);
INSERT INTO widget_fields VALUES(2087,65,'useInheritedMediaQuery','bool','{@macro flutter.widgets.widgetsApp.useInheritedMediaQuery}','{@macro flutter.widgets.widgetsApp.useInheritedMediaQuery}',41,1);
INSERT INTO widget_fields VALUES(2088,65,'themeAnimationStyle','AnimationStyle?','Used to override the theme animation curve and duration.','用于覆盖主题动画曲线和持续时间。',42,0);
INSERT INTO widget_fields VALUES(2089,211,'content','Widget','The content of the [MaterialBanner].','[MaterialBanner] 的内容。',0,1);
INSERT INTO widget_fields VALUES(2090,211,'contentTextStyle','TextStyle?','Style for the text in the [content] of the [MaterialBanner].','[MaterialBanner] 的 [content] 中文本的样式。',1,0);
INSERT INTO widget_fields VALUES(2091,211,'actions','List<Widget>','The set of actions that are displayed at the bottom or trailing side of the [MaterialBanner].','显示在 [MaterialBanner] 底部或尾随侧的操作集。',2,1);
INSERT INTO widget_fields VALUES(2092,211,'elevation','double?','The z-coordinate at which to place the material banner.','放置 material 横幅的 z 坐标。',3,0);
INSERT INTO widget_fields VALUES(2093,211,'leading','Widget?','The (optional) leading widget of the [MaterialBanner].','[MaterialBanner] 的（可选）前导小部件。',4,0);
INSERT INTO widget_fields VALUES(2094,211,'minActionBarHeight','double','The optional minimum action bar height.','可选的最小操作栏高度。',5,1);
INSERT INTO widget_fields VALUES(2095,211,'backgroundColor','Color?','The color of the surface of this [MaterialBanner].','此 [MaterialBanner] 表面的颜色。',6,0);
INSERT INTO widget_fields VALUES(2096,211,'surfaceTintColor','Color?','The color used as an overlay on [backgroundColor] to indicate elevation.','用作 [backgroundColor] 上的覆盖以指示高度的颜色。',7,0);
INSERT INTO widget_fields VALUES(2097,211,'shadowColor','Color?','The color of the shadow below the [MaterialBanner].','[MaterialBanner] 下方阴影的颜色。',8,0);
INSERT INTO widget_fields VALUES(2098,211,'dividerColor','Color?','The color of the divider.','分隔符的颜色。',9,0);
INSERT INTO widget_fields VALUES(2099,211,'padding','EdgeInsetsGeometry?','The amount of space by which to inset the [content].','插入 [content] 的空间量。',10,0);
INSERT INTO widget_fields VALUES(2100,211,'margin','EdgeInsetsGeometry?','Empty space to surround the [MaterialBanner].','围绕 [MaterialBanner] 的空白空间。',11,0);
INSERT INTO widget_fields VALUES(2101,211,'leadingPadding','EdgeInsetsGeometry?','The amount of space by which to inset the [leading] widget.','插入 [leading] 小部件的空间量。',12,0);
INSERT INTO widget_fields VALUES(2102,211,'forceActionsBelow','bool','An override to force the [actions] to be below the [content] regardless of how many there are.','强制 [actions] 位于 [content] 下方的覆盖，无论有多少个。',13,1);
INSERT INTO widget_fields VALUES(2103,211,'overflowAlignment','OverflowBarAlignment','The horizontal alignment of the [actions] when the [actions] laid out in a column.','当 [actions] 在列中布局时的水平对齐。',14,1);
INSERT INTO widget_fields VALUES(2104,211,'animation','Animation<double>?','The animation driving the entrance and exit of the material banner when presented by the [ScaffoldMessenger].','由 [ScaffoldMessenger] 呈现时驱动 material 横幅进入和退出的动画。',15,0);
INSERT INTO widget_fields VALUES(2105,211,'onVisible','VoidCallback?','Called the first time that the material banner is visible within a [Scaffold] when presented by the [ScaffoldMessenger].','由 [ScaffoldMessenger] 呈现时，material 横幅在 [Scaffold] 内首次可见时调用。',16,0);
INSERT INTO widget_fields VALUES(2106,327,'data','MaterialBannerThemeData?','The properties for descendant [MaterialBanner] widgets.','后代 [MaterialBanner] 小部件的属性。',0,0);
INSERT INTO widget_fields VALUES(2107,23,'onPressed','VoidCallback?','The callback that is called when the button is tapped or otherwise activated.','点击或以其他方式激活按钮时调用的回调。',0,0);
INSERT INTO widget_fields VALUES(2108,23,'onLongPress','VoidCallback?','The callback that is called when the button is long-pressed.','长按按钮时调用的回调。',1,0);
INSERT INTO widget_fields VALUES(2109,23,'onHighlightChanged','ValueChanged<bool>?','Called by the underlying [InkWell] widget''s [InkWell.onHighlightChanged] callback.','由底层 [InkWell] 小部件的 [InkWell.onHighlightChanged] 回调调用。',2,0);
INSERT INTO widget_fields VALUES(2110,23,'mouseCursor','MouseCursor?','{@macro flutter.material.RawMaterialButton.mouseCursor}','{@macro flutter.material.RawMaterialButton.mouseCursor}',3,0);
INSERT INTO widget_fields VALUES(2111,23,'textTheme','ButtonTextTheme?','Defines the button''s base colors, and the defaults for the button''s minimum size, internal padding, and shape.','定义按钮的基本颜色，以及按钮的最小大小、内部内边距和形状的默认值。',4,0);
INSERT INTO widget_fields VALUES(2112,23,'textColor','Color?','The color to use for this button''s text.','用于此按钮文本的颜色。',5,0);
INSERT INTO widget_fields VALUES(2113,23,'disabledTextColor','Color?','The color to use for this button''s text when the button is disabled.','按钮禁用时用于此按钮文本的颜色。',6,0);
INSERT INTO widget_fields VALUES(2114,23,'color','Color?','The button''s fill color, displayed by its [Material], while it is in its default (unpressed, [enabled]) state.','按钮处于默认（未按下、[enabled]）状态时，由其 [Material] 显示的按钮填充颜色。',7,0);
INSERT INTO widget_fields VALUES(2115,23,'disabledColor','Color?','The fill color of the button when the button is disabled.','按钮禁用时的填充颜色。',8,0);
INSERT INTO widget_fields VALUES(2116,23,'splashColor','Color?','The splash color of the button''s [InkWell].','按钮的 [InkWell] 的飞溅颜色。',9,0);
INSERT INTO widget_fields VALUES(2117,23,'focusColor','Color?','The fill color of the button''s [Material] when it has the input focus.','按钮具有输入焦点时其 [Material] 的填充颜色。',10,0);
INSERT INTO widget_fields VALUES(2118,23,'hoverColor','Color?','The fill color of the button''s [Material] when a pointer is hovering over it.','指针悬停在按钮上时其 [Material] 的填充颜色。',11,0);
INSERT INTO widget_fields VALUES(2119,23,'highlightColor','Color?','The highlight color of the button''s [InkWell].','按钮的 [InkWell] 的高亮颜色。',12,0);
INSERT INTO widget_fields VALUES(2120,23,'elevation','double?','The z-coordinate at which to place this button relative to its parent.','相对于其父级放置此按钮的 z 坐标。',13,0);
INSERT INTO widget_fields VALUES(2121,23,'hoverElevation','double?','The elevation for the button''s [Material] when the button is [enabled] and a pointer is hovering over it.','按钮 [enabled] 且指针悬停在其上时按钮的 [Material] 的高度。',14,0);
INSERT INTO widget_fields VALUES(2122,23,'focusElevation','double?','The elevation for the button''s [Material] when the button is [enabled] and has the input focus.','按钮 [enabled] 且具有输入焦点时按钮的 [Material] 的高度。',15,0);
INSERT INTO widget_fields VALUES(2123,23,'highlightElevation','double?','The elevation for the button''s [Material] relative to its parent when the button is [enabled] and pressed.','按钮 [enabled] 且被按下时按钮的 [Material] 相对于其父级的高度。',16,0);
INSERT INTO widget_fields VALUES(2124,23,'disabledElevation','double?','The elevation for the button''s [Material] relative to its parent when the button is not [enabled].','按钮未 [enabled] 时按钮的 [Material] 相对于其父级的高度。',17,0);
INSERT INTO widget_fields VALUES(2125,23,'colorBrightness','Brightness?','The theme brightness to use for this button.','用于此按钮的主题亮度。',18,0);
INSERT INTO widget_fields VALUES(2126,23,'child','Widget?','The button''s label.','按钮的标签。',19,0);
INSERT INTO widget_fields VALUES(2127,23,'padding','EdgeInsetsGeometry?','The internal padding for the button''s [child].','按钮的 [child] 的内部内边距。',20,0);
INSERT INTO widget_fields VALUES(2128,23,'visualDensity','VisualDensity?','Defines how compact the button''s layout will be.','定义按钮布局的紧凑程度。',21,0);
INSERT INTO widget_fields VALUES(2129,23,'shape','ShapeBorder?','The shape of the button''s [Material].','按钮的 [Material] 的形状。',22,0);
INSERT INTO widget_fields VALUES(2130,23,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',23,1);
INSERT INTO widget_fields VALUES(2131,23,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',24,0);
INSERT INTO widget_fields VALUES(2132,23,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',25,1);
INSERT INTO widget_fields VALUES(2133,23,'animationDuration','Duration?','Defines the duration of animated changes for [shape] and [elevation].','定义 [shape] 和 [elevation] 动画更改的持续时间。',26,0);
INSERT INTO widget_fields VALUES(2134,23,'materialTapTargetSize','MaterialTapTargetSize?','Configures the minimum size of the tap target.','配置点击目标的最小大小。',27,0);
INSERT INTO widget_fields VALUES(2135,23,'minWidth','double?','The smallest horizontal extent that the button will occupy.','按钮将占用的最小水平范围。',28,0);
INSERT INTO widget_fields VALUES(2136,23,'height','double?','The vertical extent of the button.','按钮的垂直范围。',29,0);
INSERT INTO widget_fields VALUES(2137,23,'enableFeedback','bool','Whether detected gestures should provide acoustic and/or haptic feedback.','检测到的手势是否应提供声音和/或触觉反馈。',30,1);
INSERT INTO widget_fields VALUES(2138,441,'onTransform','TransformCallback','The callback to compute a [Matrix4] from the [animation]. It''s called every time [animation] changes its value.','从 [animation] 计算 [Matrix4] 的回调。每次 [animation] 更改其值时都会调用它。',0,1);
INSERT INTO widget_fields VALUES(2139,441,'alignment','Alignment','The alignment of the origin of the coordinate system in which the transform takes place, relative to the size of the box.','变换发生的坐标系原点相对于框大小的对齐方式。',1,1);
INSERT INTO widget_fields VALUES(2140,441,'filterQuality','FilterQuality?','The filter quality with which to apply the transform as a bitmap operation.','将变换作为位图操作应用的过滤质量。',2,0);
INSERT INTO widget_fields VALUES(2141,441,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',3,0);
INSERT INTO widget_fields VALUES(2142,167,'data','MediaQueryData','Contains information about the current media.','包含有关当前媒体的信息。',0,1);
INSERT INTO widget_fields VALUES(2143,442,'onInvoke','VoidCallback?','The function that pressing the accelerator defined in a descendant [MenuAcceleratorLabel] will invoke.','按下后代 [MenuAcceleratorLabel] 中定义的加速器将调用的函数。',0,0);
INSERT INTO widget_fields VALUES(2144,442,'hasSubmenu','bool','Whether or not the associated label will host its own submenu or not.','关联的标签是否将托管自己的子菜单。',1,1);
INSERT INTO widget_fields VALUES(2145,443,'label','String','The label string that should be displayed.','应显示的标签字符串。',0,1);
INSERT INTO widget_fields VALUES(2146,443,'builder','MenuAcceleratorChildBuilder','The optional [MenuAcceleratorChildBuilder] which is used to build the widget that displays the label itself.','用于构建显示标签本身的小部件的可选 [MenuAcceleratorChildBuilder]。',1,1);
INSERT INTO widget_fields VALUES(2147,444,'controller','MenuController?','An optional controller that allows opening and closing of the menu from other widgets.','允许从其他小部件打开和关闭菜单的可选控制器。',0,0);
INSERT INTO widget_fields VALUES(2148,444,'childFocusNode','FocusNode?','The [childFocusNode] attribute is the optional [FocusNode] also associated to the [child] or [builder] widget that opens the menu.','[childFocusNode] 属性是与打开菜单的 [child] 或 [builder] 小部件关联的可选 [FocusNode]。',1,0);
INSERT INTO widget_fields VALUES(2149,444,'style','MenuStyle?','The [MenuStyle] that defines the visual attributes of the menu bar.','定义菜单栏视觉属性的 [MenuStyle]。',2,0);
INSERT INTO widget_fields VALUES(2150,444,'alignmentOffset','Offset?','{@template flutter.material.MenuAnchor.alignmentOffset} The offset of the menu relative to the alignment origin determined by [MenuStyle.alignment] on the [style] attribute and the ambient [Directionality].','{@template flutter.material.MenuAnchor.alignmentOffset} 菜单相对于由 [style] 属性上的 [MenuStyle.alignment] 和环境 [Directionality] 确定的对齐原点的偏移。',3,0);
INSERT INTO widget_fields VALUES(2151,444,'layerLink','LayerLink?','An optional [LayerLink] to attach the menu to the widget that this [MenuAnchor] surrounds.','将菜单附加到此 [MenuAnchor] 围绕的小部件的可选 [LayerLink]。',4,0);
INSERT INTO widget_fields VALUES(2152,444,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',5,1);
INSERT INTO widget_fields VALUES(2153,444,'anchorTapClosesMenu','bool','Whether the menus will be closed if the anchor area is tapped.','如果点击锚点区域，菜单是否会关闭。',6,1);
INSERT INTO widget_fields VALUES(2154,444,'consumeOutsideTap','bool','Whether or not a tap event that closes the menu will be permitted to continue on to the gesture arena.','关闭菜单的点击事件是否被允许继续到手势竞技场。',7,1);
INSERT INTO widget_fields VALUES(2155,444,'onOpen','VoidCallback?','A callback that is invoked when the menu is opened.','菜单打开时调用的回调。',8,0);
INSERT INTO widget_fields VALUES(2156,444,'onClose','VoidCallback?','A callback that is invoked when the menu is closed.','菜单关闭时调用的回调。',9,0);
INSERT INTO widget_fields VALUES(2157,444,'crossAxisUnconstrained','bool','Determine if the menu panel can be wrapped by a [UnconstrainedBox] which allows the panel to render at its "natural" size.','确定菜单面板是否可以被 [UnconstrainedBox] 包装，这允许面板以其',10,1);
INSERT INTO widget_fields VALUES(2158,444,'useRootOverlay','bool','{@macro flutter.widgets.RawMenuAnchor.useRootOverlay}','{@macro flutter.widgets.RawMenuAnchor.useRootOverlay}',11,1);
INSERT INTO widget_fields VALUES(2159,444,'menuChildren','List<Widget>','A list of children containing the menu items that are the contents of the menu surrounded by this [MenuAnchor].','包含菜单项的子项列表，这些菜单项是此 [MenuAnchor] 围绕的菜单的内容。',12,1);
INSERT INTO widget_fields VALUES(2160,444,'builder','MenuAnchorChildBuilder?','The widget that this [MenuAnchor] surrounds.','此 [MenuAnchor] 围绕的小部件。',13,0);
INSERT INTO widget_fields VALUES(2161,444,'child','Widget?','The optional child to be passed to the [builder].','传递给 [builder] 的可选子项。',14,0);
INSERT INTO widget_fields VALUES(2162,445,'style','MenuStyle?','The [MenuStyle] that defines the visual attributes of the menu bar.','定义菜单栏视觉属性的 [MenuStyle]。',0,0);
INSERT INTO widget_fields VALUES(2163,445,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',1,1);
INSERT INTO widget_fields VALUES(2164,445,'controller','MenuController?','The [MenuController] to use for this menu bar.','用于此菜单栏的 [MenuController]。',2,0);
INSERT INTO widget_fields VALUES(2165,445,'children','List<Widget>','The list of menu items that are the top level children of the [MenuBar].','作为 [MenuBar] 顶级子项的菜单项列表。',3,1);
INSERT INTO widget_fields VALUES(2166,446,'data','MenuBarThemeData','The properties to set for [MenuBar] in this widget''s descendants.','为此小部件后代中的 [MenuBar] 设置的属性。',0,1);
INSERT INTO widget_fields VALUES(2167,447,'data','MenuButtonThemeData','The configuration of this theme.','此主题的配置。',0,1);
INSERT INTO widget_fields VALUES(2168,448,'onPressed','VoidCallback?','Called when the button is tapped or otherwise activated.','点击或以其他方式激活按钮时调用。',0,0);
INSERT INTO widget_fields VALUES(2169,448,'onHover','ValueChanged<bool>?','Called when a pointer enters or exits the button response area.','指针进入或退出按钮响应区域时调用。',1,0);
INSERT INTO widget_fields VALUES(2170,448,'requestFocusOnHover','bool','Determine if hovering can request focus.','确定悬停是否可以请求焦点。',2,1);
INSERT INTO widget_fields VALUES(2171,448,'onFocusChange','ValueChanged<bool>?','Handler called when the focus changes.','焦点更改时调用的处理程序。',3,0);
INSERT INTO widget_fields VALUES(2172,448,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',4,0);
INSERT INTO widget_fields VALUES(2173,448,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',5,1);
INSERT INTO widget_fields VALUES(2174,448,'shortcut','MenuSerializableShortcut?','The optional shortcut that selects this [MenuItemButton].','选择此 [MenuItemButton] 的可选快捷方式。',6,0);
INSERT INTO widget_fields VALUES(2175,448,'semanticsLabel','String?','An optional Semantics label, applied to the entire [MenuItemButton].','应用于整个 [MenuItemButton] 的可选语义标签。',7,0);
INSERT INTO widget_fields VALUES(2176,448,'style','ButtonStyle?','Customizes this button''s appearance.','自定义此按钮的外观。',8,0);
INSERT INTO widget_fields VALUES(2177,448,'statesController','MaterialStatesController?','{@macro flutter.material.inkwell.statesController}','{@macro flutter.material.inkwell.statesController}',9,0);
INSERT INTO widget_fields VALUES(2178,448,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',10,1);
INSERT INTO widget_fields VALUES(2179,448,'leadingIcon','Widget?','An optional icon to display before the [child] label.','在 [child] 标签前显示的可选图标。',11,0);
INSERT INTO widget_fields VALUES(2180,448,'trailingIcon','Widget?','An optional icon to display after the [child] label.','在 [child] 标签后显示的可选图标。',12,0);
INSERT INTO widget_fields VALUES(2181,448,'closeOnActivate','bool','{@template flutter.material.menu_anchor.closeOnActivate} Determines if the menu will be closed when a [MenuItemButton] is pressed.','{@template flutter.material.menu_anchor.closeOnActivate} 确定按下 [MenuItemButton] 时菜单是否会关闭。',13,1);
INSERT INTO widget_fields VALUES(2182,448,'overflowAxis','Axis','The direction in which the menu item expands.','菜单项展开的方向。',14,1);
INSERT INTO widget_fields VALUES(2183,448,'child','Widget?','The widget displayed in the center of this button.','显示在此按钮中心的小部件。',15,0);
INSERT INTO widget_fields VALUES(2184,449,'data','MenuThemeData','The properties for [MenuBar] and [MenuItemButton] in this widget''s descendants.','此小部件后代中 [MenuBar] 和 [MenuItemButton] 的属性。',0,1);
INSERT INTO widget_fields VALUES(2185,261,'children','List<MergeableMaterialItem>','The children of the [MergeableMaterial].','[MergeableMaterial] 的子项。',0,1);
INSERT INTO widget_fields VALUES(2186,261,'mainAxis','Axis','The main layout axis.','主要布局轴。',1,1);
INSERT INTO widget_fields VALUES(2187,261,'elevation','double','The z-coordinate at which to place all the [Material] slices.','放置所有 [Material] 切片的 z 坐标。',2,1);
INSERT INTO widget_fields VALUES(2188,261,'hasDividers','bool','Whether connected pieces of [MaterialSlice] have dividers between them.','[MaterialSlice] 的连接片段之间是否有分隔符。',3,1);
INSERT INTO widget_fields VALUES(2189,261,'dividerColor','Color?','Defines color used for dividers if [hasDividers] is true.','如果 [hasDividers] 为 true，定义用于分隔符的颜色。',4,0);
INSERT INTO widget_fields VALUES(2190,451,'metaData','dynamic','Opaque meta data ignored by the render tree.','被渲染树忽略的不透明元数据。',0,1);
INSERT INTO widget_fields VALUES(2191,451,'behavior','HitTestBehavior','How to behave during hit testing.','命中测试期间的行为方式。',1,1);
INSERT INTO widget_fields VALUES(2192,212,'color','Color?','If non-null, fill the barrier with this color.','如果非空，用此颜色填充屏障。',0,0);
INSERT INTO widget_fields VALUES(2193,212,'dismissible','bool','Specifies if the barrier will be dismissed when the user taps on it.','指定用户点击屏障时是否会被关闭。',1,1);
INSERT INTO widget_fields VALUES(2194,212,'onDismiss','VoidCallback?','{@template flutter.widgets.ModalBarrier.onDismiss} Called when the barrier is being dismissed.','{@template flutter.widgets.ModalBarrier.onDismiss} 屏障被关闭时调用。',2,0);
INSERT INTO widget_fields VALUES(2195,212,'barrierSemanticsDismissible','bool?','Whether the modal barrier semantics are included in the semantics tree.','模态屏障语义是否包含在语义树中。',3,0);
INSERT INTO widget_fields VALUES(2196,212,'semanticsLabel','String?','Semantics label used for the barrier if it is [dismissible].','如果屏障是 [dismissible]，用于屏障的语义标签。',4,0);
INSERT INTO widget_fields VALUES(2197,212,'clipDetailsNotifier','ValueNotifier<EdgeInsets>?','{@template flutter.widgets.ModalBarrier.clipDetailsNotifier} Contains a value of type [EdgeInsets] that specifies how the [SemanticsNode.rect] of the widget should be clipped.','{@template flutter.widgets.ModalBarrier.clipDetailsNotifier} 包含 [EdgeInsets] 类型的值，指定小部件的 [SemanticsNode.rect] 应如何裁剪。',5,0);
INSERT INTO widget_fields VALUES(2198,212,'semanticsOnTapHint','String?','{@macro flutter.material.ModalBottomSheetRoute.barrierOnTapHint}','{@macro flutter.material.ModalBottomSheetRoute.barrierOnTapHint}',6,0);
INSERT INTO widget_fields VALUES(2199,293,'onEnter','PointerEnterEventListener?','Triggered when a mouse pointer has entered this widget.','鼠标指针进入此小部件时触发。',0,0);
INSERT INTO widget_fields VALUES(2200,293,'onHover','PointerHoverEventListener?','Triggered when a pointer moves into a position within this widget without buttons pressed.','指针在未按下按钮的情况下移动到此小部件内的位置时触发。',1,0);
INSERT INTO widget_fields VALUES(2201,293,'onExit','PointerExitEventListener?','Triggered when a mouse pointer has exited this widget when the widget is still mounted.','当小部件仍然挂载时，鼠标指针退出此小部件时触发。',2,0);
INSERT INTO widget_fields VALUES(2202,293,'cursor','MouseCursor','The mouse cursor for mouse pointers that are hovering over the region.','悬停在区域上的鼠标指针的鼠标光标。',3,1);
INSERT INTO widget_fields VALUES(2203,293,'opaque','bool','Whether this widget should prevent other [MouseRegion]s visually behind it from detecting the pointer.','此小部件是否应阻止视觉上位于其后面的其他 [MouseRegion] 检测指针。',4,1);
INSERT INTO widget_fields VALUES(2204,293,'hitTestBehavior','HitTestBehavior?','How to behave during hit testing.','命中测试期间的行为方式。',5,0);
INSERT INTO widget_fields VALUES(2205,452,'children','List<Widget>','The widgets below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2206,453,'animationDuration','Duration?','Determines the transition time for each destination as it goes between selected and unselected.','确定每个目标在选中和未选中之间转换的过渡时间。',0,0);
INSERT INTO widget_fields VALUES(2207,453,'selectedIndex','int','Determines which one of the [destinations] is currently selected.','确定当前选择了 [destinations] 中的哪一个。',1,1);
INSERT INTO widget_fields VALUES(2208,453,'destinations','List<Widget>','The list of destinations (usually [NavigationDestination]s) in this [NavigationBar].','此 [NavigationBar] 中的目标列表（通常是 [NavigationDestination]）。',2,1);
INSERT INTO widget_fields VALUES(2209,453,'onDestinationSelected','ValueChanged<int>?','Called when one of the [destinations] is selected.','选择 [destinations] 之一时调用。',3,0);
INSERT INTO widget_fields VALUES(2210,453,'backgroundColor','Color?','The color of the [NavigationBar] itself.','[NavigationBar] 本身的颜色。',4,0);
INSERT INTO widget_fields VALUES(2211,453,'elevation','double?','The elevation of the [NavigationBar] itself.','[NavigationBar] 本身的高度。',5,0);
INSERT INTO widget_fields VALUES(2212,453,'shadowColor','Color?','The color used for the drop shadow to indicate elevation.','用于指示高度的投影颜色。',6,0);
INSERT INTO widget_fields VALUES(2213,453,'surfaceTintColor','Color?','The color used as an overlay on [backgroundColor] to indicate elevation.','用作 [backgroundColor] 上的覆盖以指示高度的颜色。',7,0);
INSERT INTO widget_fields VALUES(2214,453,'indicatorColor','Color?','The color of the [indicatorShape] when this destination is selected.','选择此目标时 [indicatorShape] 的颜色。',8,0);
INSERT INTO widget_fields VALUES(2215,453,'indicatorShape','ShapeBorder?','The shape of the selected indicator.','选中指示器的形状。',9,0);
INSERT INTO widget_fields VALUES(2216,453,'height','double?','The height of the [NavigationBar] itself.','[NavigationBar] 本身的高度。',10,0);
INSERT INTO widget_fields VALUES(2217,453,'labelBehavior','NavigationDestinationLabelBehavior?','Defines how the [destinations]'' labels will be laid out and when they''ll be displayed.','定义 [destinations] 的标签如何布局以及何时显示。',11,0);
INSERT INTO widget_fields VALUES(2218,453,'overlayColor','MaterialStateProperty<Color?>?','The highlight color that''s typically used to indicate that the [NavigationDestination] is focused, hovered, or pressed.','通常用于指示 [NavigationDestination] 被聚焦、悬停或按下的高亮颜色。',12,0);
INSERT INTO widget_fields VALUES(2219,453,'labelTextStyle','MaterialStateProperty<TextStyle?>?','/ The text style of the label.','标签的文本样式。',13,0);
INSERT INTO widget_fields VALUES(2220,453,'labelPadding','EdgeInsetsGeometry?','The padding around the [NavigationDestination.label] widget.','[NavigationDestination.label] 小部件周围的内边距。',14,0);
INSERT INTO widget_fields VALUES(2221,453,'maintainBottomViewPadding','bool','Specifies whether the underlying [SafeArea] should maintain the bottom [MediaQueryData.viewPadding] instead of the bottom [MediaQueryData.padding].','指定底层 [SafeArea] 是否应维护底部 [MediaQueryData.viewPadding] 而不是底部 [MediaQueryData.padding]。',15,1);
INSERT INTO widget_fields VALUES(2222,454,'data','NavigationBarThemeData','Specifies the background color, label text style, icon theme, and label type values for descendant [NavigationBar] widgets.','为后代 [NavigationBar] 小部件指定背景颜色、标签文本样式、图标主题和标签类型值。',0,1);
INSERT INTO widget_fields VALUES(2223,455,'icon','Widget','The [Widget] (usually an [Icon]) that''s displayed for this [NavigationDestination].','为此 [NavigationDestination] 显示的 [Widget]（通常是 [Icon]）。',0,1);
INSERT INTO widget_fields VALUES(2224,455,'selectedIcon','Widget?','The optional [Widget] (usually an [Icon]) that''s displayed when this [NavigationDestination] is selected.','选择此 [NavigationDestination] 时显示的可选 [Widget]（通常是 [Icon]）。',1,0);
INSERT INTO widget_fields VALUES(2225,455,'label','String','The text label that appears below the icon of this [NavigationDestination].','出现在此 [NavigationDestination] 图标下方的文本标签。',2,1);
INSERT INTO widget_fields VALUES(2226,455,'tooltip','String?','The text to display in the tooltip for this [NavigationDestination], when the user long presses the destination.','当用户长按目标时，在此 [NavigationDestination] 的工具提示中显示的文本。',3,0);
INSERT INTO widget_fields VALUES(2227,455,'enabled','bool','Indicates that this destination is selectable.','指示此目标是否可选择。',4,1);
INSERT INTO widget_fields VALUES(2228,456,'backgroundColor','Color?','The background color of the [Material] that holds the [NavigationDrawer]''s contents.','保存 [NavigationDrawer] 内容的 [Material] 的背景颜色。',0,0);
INSERT INTO widget_fields VALUES(2229,456,'shadowColor','Color?','The color used for the drop shadow to indicate elevation.','用于指示高度的投影颜色。',1,0);
INSERT INTO widget_fields VALUES(2230,456,'surfaceTintColor','Color?','The surface tint of the [Material] that holds the [NavigationDrawer]''s contents.','保存 [NavigationDrawer] 内容的 [Material] 的表面色调。',2,0);
INSERT INTO widget_fields VALUES(2231,456,'elevation','double?','The elevation of the [NavigationDrawer] itself.','[NavigationDrawer] 本身的高度。',3,0);
INSERT INTO widget_fields VALUES(2232,456,'indicatorColor','Color?','The color of the [indicatorShape] when this destination is selected.','选择此目标时 [indicatorShape] 的颜色。',4,0);
INSERT INTO widget_fields VALUES(2233,456,'indicatorShape','ShapeBorder?','The shape of the selected indicator.','选中指示器的形状。',5,0);
INSERT INTO widget_fields VALUES(2234,456,'children','List<Widget>','Defines the appearance of the items within the navigation drawer.','定义导航抽屉内项目的外观。',6,1);
INSERT INTO widget_fields VALUES(2235,456,'selectedIndex','int?','The index into destinations for the current selected [NavigationDrawerDestination] or null if no destination is selected.','当前选择的 [NavigationDrawerDestination] 在目标中的索引，如果没有选择目标则为 null。',7,0);
INSERT INTO widget_fields VALUES(2236,456,'onDestinationSelected','ValueChanged<int>?','Called when one of the [NavigationDrawerDestination] children is selected.','选择 [NavigationDrawerDestination] 子项之一时调用。',8,0);
INSERT INTO widget_fields VALUES(2237,456,'tilePadding','EdgeInsetsGeometry','Defines the padding for [NavigationDrawerDestination] widgets (Drawer items).','定义 [NavigationDrawerDestination] 小部件（抽屉项）的内边距。',9,1);
INSERT INTO widget_fields VALUES(2238,457,'backgroundColor','Color?','The background color of the destination.','目标的背景颜色。',0,0);
INSERT INTO widget_fields VALUES(2239,457,'icon','Widget','The [Widget] (usually an [Icon]) that''s displayed for this [NavigationDestination].','为此 [NavigationDestination] 显示的 [Widget]（通常是 [Icon]）。',1,1);
INSERT INTO widget_fields VALUES(2240,457,'selectedIcon','Widget?','The optional [Widget] (usually an [Icon]) that''s displayed when this [NavigationDestination] is selected.','选择此 [NavigationDestination] 时显示的可选 [Widget]（通常是 [Icon]）。',2,0);
INSERT INTO widget_fields VALUES(2241,457,'label','Widget','The text label that appears on the right of the icon','出现在图标右侧的文本标签',3,1);
INSERT INTO widget_fields VALUES(2242,457,'enabled','bool','Indicates that this destination is selectable.','指示此目标是否可选择。',4,1);
INSERT INTO widget_fields VALUES(2243,458,'data','NavigationDrawerThemeData','Specifies the background color, label text style, icon theme, and label type values for descendant [NavigationDrawer] widgets.','为后代 [NavigationDrawer] 小部件指定背景颜色、标签文本样式、图标主题和标签类型值。',0,1);
INSERT INTO widget_fields VALUES(2244,459,'animation','Animation<double>','Determines the scale of the indicator.','确定指示器的比例。',0,1);
INSERT INTO widget_fields VALUES(2245,459,'color','Color?','The fill color of this indicator.','此指示器的填充颜色。',1,0);
INSERT INTO widget_fields VALUES(2246,459,'width','double','The width of this indicator.','此指示器的宽度。',2,1);
INSERT INTO widget_fields VALUES(2247,459,'height','double','The height of this indicator.','此指示器的高度。',3,1);
INSERT INTO widget_fields VALUES(2248,459,'borderRadius','BorderRadius','The border radius of the shape of the indicator.','指示器形状的边框半径。',4,1);
INSERT INTO widget_fields VALUES(2249,459,'shape','ShapeBorder?','The shape of the indicator.','指示器的形状。',5,0);
INSERT INTO widget_fields VALUES(2250,358,'backgroundColor','Color?','Sets the color of the Container that holds all of the [NavigationRail]''s contents.','设置包含所有 [NavigationRail] 内容的容器的颜色。',0,0);
INSERT INTO widget_fields VALUES(2251,358,'extended','bool','Indicates that the [NavigationRail] should be in the extended state.','指示 [NavigationRail] 应处于扩展状态。',1,1);
INSERT INTO widget_fields VALUES(2252,358,'leading','Widget?','The leading widget in the rail that is placed above the destinations.','导航栏中位于目标上方的前导小部件。',2,0);
INSERT INTO widget_fields VALUES(2253,358,'trailing','Widget?','The trailing widget in the rail that is placed below the destinations.','导航栏中位于目标下方的尾随小部件。',3,0);
INSERT INTO widget_fields VALUES(2254,358,'destinations','List<NavigationRailDestination>','Defines the appearance of the button items that are arrayed within the navigation rail.','定义导航栏内排列的按钮项的外观。',4,1);
INSERT INTO widget_fields VALUES(2255,358,'selectedIndex','int?','The index into [destinations] for the current selected [NavigationRailDestination] or null if no destination is selected.','当前选择的 [NavigationRailDestination] 在 [destinations] 中的索引，如果没有选择目标则为 null。',5,0);
INSERT INTO widget_fields VALUES(2256,358,'onDestinationSelected','ValueChanged<int>?','Called when one of the [destinations] is selected.','选择 [destinations] 之一时调用。',6,0);
INSERT INTO widget_fields VALUES(2257,358,'elevation','double?','The rail''s elevation or z-coordinate.','导航栏的高度或 z 坐标。',7,0);
INSERT INTO widget_fields VALUES(2258,358,'groupAlignment','double?','The vertical alignment for the group of [destinations] within the rail.','导航栏内 [destinations] 组的垂直对齐。',8,0);
INSERT INTO widget_fields VALUES(2259,358,'labelType','NavigationRailLabelType?','Defines the layout and behavior of the labels for the default, unextended [NavigationRail].','定义默认、未扩展 [NavigationRail] 的标签布局和行为。',9,0);
INSERT INTO widget_fields VALUES(2260,358,'unselectedLabelTextStyle','TextStyle?','The [TextStyle] of a destination''s label when it is unselected.','目标未选择时其标签的 [TextStyle]。',10,0);
INSERT INTO widget_fields VALUES(2261,358,'selectedLabelTextStyle','TextStyle?','The [TextStyle] of a destination''s label when it is selected.','目标选择时其标签的 [TextStyle]。',11,0);
INSERT INTO widget_fields VALUES(2262,358,'unselectedIconTheme','IconThemeData?','The visual properties of the icon in the unselected destination.','未选择目标中图标的视觉属性。',12,0);
INSERT INTO widget_fields VALUES(2263,358,'selectedIconTheme','IconThemeData?','The visual properties of the icon in the selected destination.','选择目标中图标的视觉属性。',13,0);
INSERT INTO widget_fields VALUES(2264,358,'minWidth','double?','The smallest possible width for the rail regardless of the destination''s icon or label size.','无论目标的图标或标签大小如何，导航栏的最小可能宽度。',14,0);
INSERT INTO widget_fields VALUES(2265,358,'minExtendedWidth','double?','The final width when the animation is complete for setting [extended] to true.','将 [extended] 设置为 true 的动画完成时的最终宽度。',15,0);
INSERT INTO widget_fields VALUES(2266,358,'useIndicator','bool?','If `true`, adds a rounded [NavigationIndicator] behind the selected destination''s icon.','如果为 `true`，在选定目标的图标后面添加圆形 [NavigationIndicator]。',16,0);
INSERT INTO widget_fields VALUES(2267,358,'indicatorColor','Color?','Overrides the default value of [NavigationRail]''s selection indicator color, when [useIndicator] is true.','当 [useIndicator] 为 true 时，覆盖 [NavigationRail] 选择指示器颜色的默认值。',17,0);
INSERT INTO widget_fields VALUES(2268,358,'indicatorShape','ShapeBorder?','Overrides the default value of [NavigationRail]''s selection indicator shape, when [useIndicator] is true.','当 [useIndicator] 为 true 时，覆盖 [NavigationRail] 选择指示器形状的默认值。',18,0);
INSERT INTO widget_fields VALUES(2269,460,'data','NavigationRailThemeData','Specifies the background color, elevation, label text style, icon theme, group alignment, and label type and border values for descendant [NavigationRail] widgets.','为后代 [NavigationRail] 小部件指定背景颜色、高度、标签文本样式、图标主题、组对齐以及标签类型和边框值。',0,1);
INSERT INTO widget_fields VALUES(2270,214,'leading','Widget?','Widget to place at the start of the horizontal toolbar.','放置在水平工具栏开始处的小部件。',0,0);
INSERT INTO widget_fields VALUES(2271,214,'middle','Widget?','Widget to place in the middle of the horizontal toolbar, occupying as much remaining space as possible.','放置在水平工具栏中间的小部件，占用尽可能多的剩余空间。',1,0);
INSERT INTO widget_fields VALUES(2272,214,'trailing','Widget?','Widget to place at the end of the horizontal toolbar.','放置在水平工具栏末端的小部件。',2,0);
INSERT INTO widget_fields VALUES(2273,214,'centerMiddle','bool','Whether to align the [middle] widget to the center of this widget or next to the [leading] widget when false.','是否将 [middle] 小部件对齐到此小部件的中心，或者当为 false 时对齐到 [leading] 小部件旁边。',3,1);
INSERT INTO widget_fields VALUES(2274,214,'middleSpacing','double','The spacing around the [middle] widget on horizontal axis.','水平轴上 [middle] 小部件周围的间距。',4,1);
INSERT INTO widget_fields VALUES(2275,232,'pages','List<Page<dynamic>>','The list of pages with which to populate the history.','用于填充历史记录的页面列表。',0,1);
INSERT INTO widget_fields VALUES(2276,232,'onPopPage','PopPageCallback?','This is deprecated and replaced by [onDidRemovePage].','这已弃用并被 [onDidRemovePage] 替换。',1,0);
INSERT INTO widget_fields VALUES(2277,232,'onDidRemovePage','DidRemovePageCallback?','Called when the [Route] associated with the given [Page] has been removed from the Navigator.','当与给定 [Page] 关联的 [Route] 从 Navigator 中移除时调用。',2,0);
INSERT INTO widget_fields VALUES(2278,232,'transitionDelegate','TransitionDelegate<dynamic>','The delegate used for deciding how routes transition in or off the screen during the [pages] updates.','用于决定在 [pages] 更新期间路由如何进入或离开屏幕的委托。',3,1);
INSERT INTO widget_fields VALUES(2279,232,'initialRoute','String?','The name of the first route to show.','要显示的第一个路由的名称。',4,0);
INSERT INTO widget_fields VALUES(2280,232,'onGenerateRoute','RouteFactory?','Called to generate a route for a given [RouteSettings].','调用以为给定的 [RouteSettings] 生成路由。',5,0);
INSERT INTO widget_fields VALUES(2281,232,'onUnknownRoute','RouteFactory?','Called when [onGenerateRoute] fails to generate a route.','当 [onGenerateRoute] 无法生成路由时调用。',6,0);
INSERT INTO widget_fields VALUES(2282,232,'observers','List<NavigatorObserver>','A list of observers for this navigator.','此导航器的观察者列表。',7,1);
INSERT INTO widget_fields VALUES(2283,232,'restorationScopeId','String?','Restoration ID to save and restore the state of the navigator, including its history.','保存和恢复导航器状态（包括其历史记录）的恢复 ID。',8,0);
INSERT INTO widget_fields VALUES(2284,232,'routeTraversalEdgeBehavior','TraversalEdgeBehavior','Controls the transfer of focus beyond the first and the last items of a focus scope that defines focus traversal of widgets within a route.','控制焦点在定义路由内小部件焦点遍历的焦点范围的第一个和最后一个项目之外的传递。',9,1);
INSERT INTO widget_fields VALUES(2285,232,'routeDirectionalTraversalEdgeBehavior','TraversalEdgeBehavior','Controls the directional transfer of focus beyond the first and the last items of a focus scope that defines focus traversal of widgets within a route.','控制焦点在定义路由内小部件焦点遍历的焦点范围的第一个和最后一个项目之外的方向传递。',10,1);
INSERT INTO widget_fields VALUES(2286,232,'onGenerateInitialRoutes','RouteListFactory','Called when the widget is created to generate the initial list of [Route] objects if [initialRoute] is not null.','如果 [initialRoute] 不为 null，在创建小部件时调用以生成初始 [Route] 对象列表。',11,1);
INSERT INTO widget_fields VALUES(2287,232,'reportsRouteUpdateToEngine','bool','Whether this navigator should report route update message back to the engine when the top-most route changes.','当最顶层路由更改时，此导航器是否应向引擎报告路由更新消息。',12,1);
INSERT INTO widget_fields VALUES(2288,232,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',13,1);
INSERT INTO widget_fields VALUES(2289,232,'requestFocus','bool','Whether or not the navigator and it''s new topmost route should request focus when the new route is pushed onto the navigator.','当新路由被推送到导航器上时，导航器及其新的最顶层路由是否应请求焦点。',14,1);
INSERT INTO widget_fields VALUES(2290,461,'child','Widget','The widget to place below this in the widget tree.','在小部件树中放置在此下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2291,461,'enabled','bool','Whether this widget''s ability to handle system back gestures is enabled or disabled.','此小部件处理系统返回手势的能力是启用还是禁用。',1,1);
INSERT INTO widget_fields VALUES(2292,461,'onPop','VoidCallback?','Called when a handleable pop event happens.','发生可处理的弹出事件时调用。',2,0);
INSERT INTO widget_fields VALUES(2293,461,'onPopWithResult','PopResultCallback<T>?','Called when a handleable pop event happens.','发生可处理的弹出事件时调用。',3,0);
INSERT INTO widget_fields VALUES(2294,251,'controller','ScrollController?','An object that can be used to control the position to which the outer scroll view is scrolled.','可用于控制外部滚动视图滚动到的位置的对象。',0,0);
INSERT INTO widget_fields VALUES(2295,251,'scrollDirection','Axis','{@macro flutter.widgets.scroll_view.scrollDirection}','{@macro flutter.widgets.scroll_view.scrollDirection}',1,1);
INSERT INTO widget_fields VALUES(2296,251,'reverse','bool','Whether the scroll view scrolls in the reading direction.','滚动视图是否在阅读方向上滚动。',2,1);
INSERT INTO widget_fields VALUES(2297,251,'physics','ScrollPhysics?','How the scroll view should respond to user input.','滚动视图应如何响应用户输入。',3,0);
INSERT INTO widget_fields VALUES(2298,251,'headerSliverBuilder','NestedScrollViewHeaderSliversBuilder','A builder for any widgets that are to precede the inner scroll views (as given by [body]).','用于构建在内部滚动视图（由 [body] 给出）之前的任何小部件的构建器。',4,1);
INSERT INTO widget_fields VALUES(2299,251,'body','Widget','The widget to show inside the [NestedScrollView].','在 [NestedScrollView] 内显示的小部件。',5,1);
INSERT INTO widget_fields VALUES(2300,251,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',6,1);
INSERT INTO widget_fields VALUES(2301,251,'floatHeaderSlivers','bool','Whether or not the [NestedScrollView]''s coordinator should prioritize the outer scrollable over the inner when scrolling back.','[NestedScrollView] 的协调器在向后滚动时是否应优先考虑外部可滚动而不是内部。',7,1);
INSERT INTO widget_fields VALUES(2302,251,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',8,1);
INSERT INTO widget_fields VALUES(2303,251,'hitTestBehavior','HitTestBehavior','{@macro flutter.widgets.scrollable.hitTestBehavior}','{@macro flutter.widgets.scrollable.hitTestBehavior}',9,1);
INSERT INTO widget_fields VALUES(2304,251,'restorationId','String?','{@macro flutter.widgets.scrollable.restorationId}','{@macro flutter.widgets.scrollable.restorationId}',10,0);
INSERT INTO widget_fields VALUES(2305,251,'scrollBehavior','ScrollBehavior?','{@macro flutter.widgets.scrollable.scrollBehavior}','{@macro flutter.widgets.scrollable.scrollBehavior}',11,0);
INSERT INTO widget_fields VALUES(2306,344,'handle','SliverOverlapAbsorberHandle','The handle to the [SliverOverlapAbsorber] that is feeding this injector.','正在为此注入器提供数据的 [SliverOverlapAbsorber] 的句柄。',0,1);
INSERT INTO widget_fields VALUES(2307,220,'onNotification','NotificationListenerCallback<T>?','Called when a notification of the appropriate type arrives at this location in the tree.','当适当类型的通知到达树中的此位置时调用。',0,0);
INSERT INTO widget_fields VALUES(2308,71,'offstage','bool','Whether the child is hidden from the rest of the tree.','子项是否从树的其余部分隐藏。',0,1);
INSERT INTO widget_fields VALUES(2309,73,'opacity','double','The fraction to scale the child''s alpha value.','缩放子项 alpha 值的分数。',0,1);
INSERT INTO widget_fields VALUES(2310,73,'alwaysIncludeSemantics','bool','Whether the semantic information of the children is always included.','是否始终包含子项的语义信息。',1,1);
INSERT INTO widget_fields VALUES(2311,203,'builder','OrientationWidgetBuilder','Builds the widgets below this widget given this widget''s orientation.','根据此小部件的方向构建此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2312,463,'data','OutlinedButtonThemeData','The configuration of this theme.','此主题的配置。',0,1);
INSERT INTO widget_fields VALUES(2313,464,'spacing','double','The width of the gap between [children] for the default horizontal layout.','默认水平布局中 [children] 之间间隙的宽度。',0,1);
INSERT INTO widget_fields VALUES(2314,464,'alignment','MainAxisAlignment?','Defines the [children]''s horizontal layout according to the same rules as for [Row.mainAxisAlignment].','根据与 [Row.mainAxisAlignment] 相同的规则定义 [children] 的水平布局。',1,0);
INSERT INTO widget_fields VALUES(2315,464,'overflowSpacing','double','The height of the gap between [children] in the vertical "overflow" layout.','垂直',2,1);
INSERT INTO widget_fields VALUES(2316,464,'overflowAlignment','OverflowBarAlignment','The horizontal alignment of the [children] within the vertical "overflow" layout.','垂直',3,1);
INSERT INTO widget_fields VALUES(2317,464,'overflowDirection','VerticalDirection','Defines the order that the [children] appear in, if the horizontal layout overflows.','如果水平布局溢出，定义 [children] 出现的顺序。',4,1);
INSERT INTO widget_fields VALUES(2318,464,'textDirection','TextDirection?','Determines the order that the [children] appear in for the default horizontal layout, and the interpretation of [OverflowBarAlignment.start] and [OverflowBarAlignment.end] for the vertical overflow layout.','确定默认水平布局中 [children] 出现的顺序，以及垂直溢出布局中 [OverflowBarAlignment.start] 和 [OverflowBarAlignment.end] 的解释。',5,0);
INSERT INTO widget_fields VALUES(2319,83,'alignment','AlignmentGeometry','How to align the child.','如何对齐子项。',0,1);
INSERT INTO widget_fields VALUES(2320,83,'minWidth','double?','The minimum width constraint to give the child. Set this to null (the default) to use the constraint from the parent instead.','给子项的最小宽度约束。将此设置为 null（默认值）以使用来自父项的约束。',1,0);
INSERT INTO widget_fields VALUES(2321,83,'maxWidth','double?','The maximum width constraint to give the child. Set this to null (the default) to use the constraint from the parent instead.','给子项的最大宽度约束。将此设置为 null（默认值）以使用来自父项的约束。',2,0);
INSERT INTO widget_fields VALUES(2322,83,'minHeight','double?','The minimum height constraint to give the child. Set this to null (the default) to use the constraint from the parent instead.','给子项的最小高度约束。将此设置为 null（默认值）以使用来自父项的约束。',3,0);
INSERT INTO widget_fields VALUES(2323,83,'maxHeight','double?','The maximum height constraint to give the child. Set this to null (the default) to use the constraint from the parent instead.','给子项的最大高度约束。将此设置为 null（默认值）以使用来自父项的约束。',4,0);
INSERT INTO widget_fields VALUES(2324,83,'fit','OverflowBoxFit','The way to size the render object.','调整渲染对象大小的方式。',5,1);
INSERT INTO widget_fields VALUES(2325,182,'initialEntries','List<OverlayEntry>','The entries to include in the overlay initially.','最初包含在覆盖层中的条目。',0,1);
INSERT INTO widget_fields VALUES(2326,182,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',1,1);
INSERT INTO widget_fields VALUES(2327,465,'controller','OverlayPortalController','The controller to show, hide and bring to top the overlay child.','显示、隐藏和置顶覆盖子项的控制器。',0,1);
INSERT INTO widget_fields VALUES(2328,465,'overlayChildBuilder','WidgetBuilder','A [WidgetBuilder] used to build a widget below this widget in the tree, that renders on the closest [Overlay].','用于在树中此小部件下方构建小部件的 [WidgetBuilder]，该小部件在最近的 [Overlay] 上渲染。',1,1);
INSERT INTO widget_fields VALUES(2329,465,'child','Widget?','A widget below this widget in the tree.','树中此小部件下方的小部件。',2,0);
INSERT INTO widget_fields VALUES(2330,74,'padding','EdgeInsetsGeometry','The amount of space by which to inset the child.','插入子项的空间量。',0,1);
INSERT INTO widget_fields VALUES(2331,210,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2332,210,'bucket','PageStorageBucket','The page storage bucket to use for this subtree.','用于此子树的页面存储桶。',1,1);
INSERT INTO widget_fields VALUES(2333,165,'allowImplicitScrolling','bool','Controls whether the widget''s pages will respond to [RenderObject.showOnScreen], which will allow for implicit accessibility scrolling.','控制小部件的页面是否会响应 [RenderObject.showOnScreen]，这将允许隐式辅助功能滚动。',0,1);
INSERT INTO widget_fields VALUES(2334,165,'restorationId','String?','{@macro flutter.widgets.scrollable.restorationId}','{@macro flutter.widgets.scrollable.restorationId}',1,0);
INSERT INTO widget_fields VALUES(2335,165,'scrollDirection','Axis','The [Axis] along which the scroll view''s offset increases with each page.','滚动视图的偏移随每页增加的 [Axis]。',2,1);
INSERT INTO widget_fields VALUES(2336,165,'reverse','bool','Whether the page view scrolls in the reading direction.','页面视图是否在阅读方向上滚动。',3,1);
INSERT INTO widget_fields VALUES(2337,165,'controller','PageController?','An object that can be used to control the position to which this page view is scrolled.','可用于控制此页面视图滚动到的位置的对象。',4,0);
INSERT INTO widget_fields VALUES(2338,165,'physics','ScrollPhysics?','How the page view should respond to user input.','页面视图应如何响应用户输入。',5,0);
INSERT INTO widget_fields VALUES(2339,165,'pageSnapping','bool','Set to false to disable page snapping, useful for custom scroll behavior.','设置为 false 以禁用页面捕捉，对自定义滚动行为很有用。',6,1);
INSERT INTO widget_fields VALUES(2340,165,'onPageChanged','ValueChanged<int>?','Called whenever the page in the center of the viewport changes.','每当视口中心的页面更改时调用。',7,0);
INSERT INTO widget_fields VALUES(2341,165,'childrenDelegate','SliverChildDelegate','A delegate that provides the children for the [PageView].','为 [PageView] 提供子项的委托。',8,1);
INSERT INTO widget_fields VALUES(2342,165,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',9,1);
INSERT INTO widget_fields VALUES(2343,165,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',10,1);
INSERT INTO widget_fields VALUES(2344,165,'hitTestBehavior','HitTestBehavior','{@macro flutter.widgets.scrollable.hitTestBehavior}','{@macro flutter.widgets.scrollable.hitTestBehavior}',11,1);
INSERT INTO widget_fields VALUES(2345,165,'scrollBehavior','ScrollBehavior?','{@macro flutter.widgets.scrollable.scrollBehavior}','{@macro flutter.widgets.scrollable.scrollBehavior}',12,0);
INSERT INTO widget_fields VALUES(2346,165,'padEnds','bool','Whether to add padding to both ends of the list.','是否在列表的两端添加内边距。',13,1);
INSERT INTO widget_fields VALUES(2347,235,'header','Widget?','The table card''s optional header.','表格卡片的可选标题。',0,0);
INSERT INTO widget_fields VALUES(2348,235,'actions','List<Widget>?','Icon buttons to show at the top end side of the table. The [header] must not be null to show the actions.','在表格顶部末端显示的图标按钮。[header] 不能为 null 才能显示操作。',1,0);
INSERT INTO widget_fields VALUES(2349,235,'columns','List<DataColumn>','The configuration and labels for the columns in the table.','表格中列的配置和标签。',2,1);
INSERT INTO widget_fields VALUES(2350,235,'sortColumnIndex','int?','The current primary sort key''s column.','当前主要排序键的列。',3,0);
INSERT INTO widget_fields VALUES(2351,235,'sortAscending','bool','Whether the column mentioned in [sortColumnIndex], if any, is sorted in ascending order.','[sortColumnIndex] 中提到的列（如果有）是否按升序排序。',4,1);
INSERT INTO widget_fields VALUES(2352,235,'onSelectAll','ValueSetter<bool?>?','Invoked when the user selects or unselects every row, using the checkbox in the heading row.','当用户使用标题行中的复选框选择或取消选择每一行时调用。',5,0);
INSERT INTO widget_fields VALUES(2353,235,'dataRowMinHeight','double?','The minimum height of each row (excluding the row that contains column headings).','每行的最小高度（不包括包含列标题的行）。',6,0);
INSERT INTO widget_fields VALUES(2354,235,'dataRowMaxHeight','double?','The maximum height of each row (excluding the row that contains column headings).','每行的最大高度（不包括包含列标题的行）。',7,0);
INSERT INTO widget_fields VALUES(2355,235,'headingRowHeight','double','The height of the heading row.','标题行的高度。',8,1);
INSERT INTO widget_fields VALUES(2356,235,'horizontalMargin','double','The horizontal margin between the edges of the table and the content in the first and last cells of each row.','表格边缘与每行第一个和最后一个单元格中内容之间的水平边距。',9,1);
INSERT INTO widget_fields VALUES(2357,235,'columnSpacing','double','The horizontal margin between the contents of each data column.','每个数据列内容之间的水平边距。',10,1);
INSERT INTO widget_fields VALUES(2358,235,'showCheckboxColumn','bool','{@macro flutter.material.dataTable.showCheckboxColumn}','{@macro flutter.material.dataTable.showCheckboxColumn}',11,1);
INSERT INTO widget_fields VALUES(2359,235,'showFirstLastButtons','bool','Flag to display the pagination buttons to go to the first and last pages.','显示转到第一页和最后一页的分页按钮的标志。',12,1);
INSERT INTO widget_fields VALUES(2360,235,'initialFirstRowIndex','int?','The index of the first row to display when the widget is first created.','首次创建小部件时要显示的第一行的索引。',13,0);
INSERT INTO widget_fields VALUES(2361,235,'dividerThickness','double?','{@macro flutter.material.dataTable.dividerThickness}','{@macro flutter.material.dataTable.dividerThickness}',14,0);
INSERT INTO widget_fields VALUES(2362,235,'onPageChanged','ValueChanged<int>?','Invoked when the user switches to another page.','用户切换到另一页时调用。',15,0);
INSERT INTO widget_fields VALUES(2363,235,'rowsPerPage','int','The number of rows to show on each page.','每页显示的行数。',16,1);
INSERT INTO widget_fields VALUES(2364,235,'availableRowsPerPage','List<int>','The options to offer for the rowsPerPage.','为 rowsPerPage 提供的选项。',17,1);
INSERT INTO widget_fields VALUES(2365,235,'onRowsPerPageChanged','ValueChanged<int?>?','Invoked when the user selects a different number of rows per page.','用户选择不同的每页行数时调用。',18,0);
INSERT INTO widget_fields VALUES(2366,235,'source','DataTableSource','The data source which provides data to show in each row.','提供在每行中显示的数据的数据源。',19,1);
INSERT INTO widget_fields VALUES(2367,235,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',20,1);
INSERT INTO widget_fields VALUES(2368,235,'checkboxHorizontalMargin','double?','Horizontal margin around the checkbox, if it is displayed.','复选框周围的水平边距（如果显示）。',21,0);
INSERT INTO widget_fields VALUES(2369,235,'arrowHeadColor','Color?','Defines the color of the arrow heads in the footer.','定义页脚中箭头头的颜色。',22,0);
INSERT INTO widget_fields VALUES(2370,235,'controller','ScrollController?','{@macro flutter.widgets.scroll_view.controller}','{@macro flutter.widgets.scroll_view.controller}',23,0);
INSERT INTO widget_fields VALUES(2371,235,'primary','bool?','{@macro flutter.widgets.scroll_view.primary}','{@macro flutter.widgets.scroll_view.primary}',24,0);
INSERT INTO widget_fields VALUES(2372,235,'headingRowColor','MaterialStateProperty<Color?>?','{@macro flutter.material.dataTable.headingRowColor}','{@macro flutter.material.dataTable.headingRowColor}',25,0);
INSERT INTO widget_fields VALUES(2373,235,'showEmptyRows','bool','Controls the visibility of empty rows on the last page of a [PaginatedDataTable].','控制 [PaginatedDataTable] 最后一页上空行的可见性。',26,1);
INSERT INTO widget_fields VALUES(2374,312,'optionsMask','int','The mask is created by shifting 1 by the index of the specific [PerformanceOverlayOption] to enable.','掩码是通过将 1 按要启用的特定 [PerformanceOverlayOption] 的索引移位创建的。',0,1);
INSERT INTO widget_fields VALUES(2375,296,'shape','BoxShape','The type of shape.','形状的类型。',0,1);
INSERT INTO widget_fields VALUES(2376,296,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',1,1);
INSERT INTO widget_fields VALUES(2377,296,'borderRadius','BorderRadius?','The border radius of the rounded corners.','圆角的边框半径。',2,0);
INSERT INTO widget_fields VALUES(2378,296,'elevation','double','The z-coordinate relative to the parent at which to place this physical object.','相对于父级放置此物理对象的 z 坐标。',3,1);
INSERT INTO widget_fields VALUES(2379,296,'color','Color','The background color.','背景颜色。',4,1);
INSERT INTO widget_fields VALUES(2380,296,'shadowColor','Color','The shadow color.','阴影颜色。',5,1);
INSERT INTO widget_fields VALUES(2381,279,'clipper','CustomClipper<Path>','Determines which clip to use.','确定使用哪个裁剪。',0,1);
INSERT INTO widget_fields VALUES(2382,279,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',1,1);
INSERT INTO widget_fields VALUES(2383,279,'elevation','double','The z-coordinate relative to the parent at which to place this physical object.','相对于父级放置此物理对象的 z 坐标。',2,1);
INSERT INTO widget_fields VALUES(2384,279,'color','Color','The background color.','背景颜色。',3,1);
INSERT INTO widget_fields VALUES(2385,279,'shadowColor','Color','When elevation is non zero the color to use for the shadow color.','当高度非零时用于阴影颜色的颜色。',4,1);
INSERT INTO widget_fields VALUES(2386,36,'color','Color','The color to draw the placeholder box.','绘制占位符框的颜色。',0,1);
INSERT INTO widget_fields VALUES(2387,36,'strokeWidth','double','The width of the lines in the placeholder box.','占位符框中线条的宽度。',1,1);
INSERT INTO widget_fields VALUES(2388,36,'fallbackWidth','double','The width to use when the placeholder is in a situation with an unbounded width.','当占位符处于无界宽度情况时使用的宽度。',2,1);
INSERT INTO widget_fields VALUES(2389,36,'fallbackHeight','double','The height to use when the placeholder is in a situation with an unbounded height.','当占位符处于无界高度情况时使用的高度。',3,1);
INSERT INTO widget_fields VALUES(2390,36,'child','Widget?','The [child] contained by the placeholder box.','占位符框包含的 [child]。',4,0);
INSERT INTO widget_fields VALUES(2391,466,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(2392,466,'menus','List<PlatformMenuItem>','The list of menu items that are the top level children of the [PlatformMenuBar].','作为 [PlatformMenuBar] 顶级子项的菜单项列表。',1,1);
INSERT INTO widget_fields VALUES(2393,467,'child','Widget','See `_platform_selectable_region_context_menu_io.dart`.','请参阅 `_platform_selectable_region_context_menu_io.dart`。',0,1);
INSERT INTO widget_fields VALUES(2394,468,'viewType','String','The unique identifier for the view type to be embedded.','要嵌入的视图类型的唯一标识符。',0,1);
INSERT INTO widget_fields VALUES(2395,469,'controller','PlatformViewController','The controller for the platform view integrated by this [PlatformViewSurface].','此 [PlatformViewSurface] 集成的平台视图的控制器。',0,1);
INSERT INTO widget_fields VALUES(2396,469,'gestureRecognizers','Set<Factory<OneSequenceGestureRecognizer>>','Which gestures should be forwarded to the PlatformView.','哪些手势应转发到 PlatformView。',1,1);
INSERT INTO widget_fields VALUES(2397,469,'hitTestBehavior','PlatformViewHitTestBehavior','{@macro flutter.widgets.AndroidView.hitTestBehavior}','{@macro flutter.widgets.AndroidView.hitTestBehavior}',2,1);
INSERT INTO widget_fields VALUES(2398,470,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2399,470,'onPopInvokedWithResult','PopInvokedWithResultCallback<T>?','{@template flutter.widgets.PopScope.onPopInvokedWithResult} Called after a route pop was handled. {@endtemplate}','{@template flutter.widgets.PopScope.onPopInvokedWithResult} 在处理路由弹出后调用。{@endtemplate}',1,0);
INSERT INTO widget_fields VALUES(2400,470,'onPopInvoked','PopInvokedCallback?','Called after a route pop was handled.','在处理路由弹出后调用。',2,0);
INSERT INTO widget_fields VALUES(2401,470,'canPop','bool','{@template flutter.widgets.PopScope.canPop} When false, blocks the current route from being popped.','{@template flutter.widgets.PopScope.canPop} 当为 false 时，阻止当前路由被弹出。',3,1);
INSERT INTO widget_fields VALUES(2402,56,'itemBuilder','PopupMenuItemBuilder<T>','Called when the button is pressed to create the items to show in the menu.','按下按钮时调用以创建要在菜单中显示的项目。',0,1);
INSERT INTO widget_fields VALUES(2403,56,'initialValue','T?','The value of the menu item, if any, that should be highlighted when the menu opens.','菜单打开时应突出显示的菜单项的值（如果有）。',1,0);
INSERT INTO widget_fields VALUES(2404,56,'onOpened','VoidCallback?','Called when the popup menu is shown.','显示弹出菜单时调用。',2,0);
INSERT INTO widget_fields VALUES(2405,56,'onSelected','PopupMenuItemSelected<T>?','Called when the user selects a value from the popup menu created by this button.','用户从此按钮创建的弹出菜单中选择值时调用。',3,0);
INSERT INTO widget_fields VALUES(2406,56,'onCanceled','PopupMenuCanceled?','Called when the user dismisses the popup menu without selecting an item.','用户在不选择项目的情况下关闭弹出菜单时调用。',4,0);
INSERT INTO widget_fields VALUES(2407,56,'tooltip','String?','Text that describes the action that will occur when the button is pressed.','描述按下按钮时将发生的操作的文本。',5,0);
INSERT INTO widget_fields VALUES(2408,56,'elevation','double?','The z-coordinate at which to place the menu when open. This controls the size of the shadow below the menu.','菜单打开时放置菜单的 z 坐标。这控制菜单下方阴影的大小。',6,0);
INSERT INTO widget_fields VALUES(2409,56,'shadowColor','Color?','The color used to paint the shadow below the menu.','用于绘制菜单下方阴影的颜色。',7,0);
INSERT INTO widget_fields VALUES(2410,56,'surfaceTintColor','Color?','The color used as an overlay on [color] to indicate elevation.','用作 [color] 上的覆盖以指示高度的颜色。',8,0);
INSERT INTO widget_fields VALUES(2411,56,'padding','EdgeInsetsGeometry','Matches IconButton''s 8 dps padding by default. In some cases, notably where this button appears as the trailing element of a list item, it''s useful to be able to set the padding to zero.','默认匹配 IconButton 的 8 dps 内边距。在某些情况下，特别是当此按钮作为列表项的尾随元素出现时，能够将内边距设置为零很有用。',9,1);
INSERT INTO widget_fields VALUES(2412,56,'menuPadding','EdgeInsetsGeometry?','If provided, menu padding is used for empty space around the outside of the popup menu.','如果提供，菜单内边距用于弹出菜单外部的空白空间。',10,0);
INSERT INTO widget_fields VALUES(2413,56,'splashRadius','double?','The splash radius.','飞溅半径。',11,0);
INSERT INTO widget_fields VALUES(2414,56,'child','Widget?','If provided, [child] is the widget used for this button and the button will utilize an [InkWell] for taps.','如果提供，[child] 是用于此按钮的小部件，按钮将利用 [InkWell] 进行点击。',12,0);
INSERT INTO widget_fields VALUES(2415,56,'borderRadius','BorderRadius?','The border radius for the [InkWell] that wraps the [child].','包装 [child] 的 [InkWell] 的边框半径。',13,0);
INSERT INTO widget_fields VALUES(2416,56,'icon','Widget?','If provided, the [icon] is used for this button and the button will behave like an [IconButton].','如果提供，[icon] 用于此按钮，按钮将表现得像 [IconButton]。',14,0);
INSERT INTO widget_fields VALUES(2417,56,'offset','Offset','The offset is applied relative to the initial position set by the [position].','偏移相对于由 [position] 设置的初始位置应用。',15,1);
INSERT INTO widget_fields VALUES(2418,56,'enabled','bool','Whether this popup menu button is interactive.','此弹出菜单按钮是否可交互。',16,1);
INSERT INTO widget_fields VALUES(2419,56,'shape','ShapeBorder?','If provided, the shape used for the menu.','如果提供，用于菜单的形状。',17,0);
INSERT INTO widget_fields VALUES(2420,56,'color','Color?','If provided, the background color used for the menu.','如果提供，用于菜单的背景颜色。',18,0);
INSERT INTO widget_fields VALUES(2421,56,'iconColor','Color?','If provided, this color is used for the button icon.','如果提供，此颜色用于按钮图标。',19,0);
INSERT INTO widget_fields VALUES(2422,56,'enableFeedback','bool?','Whether detected gestures should provide acoustic and/or haptic feedback.','检测到的手势是否应提供声音和/或触觉反馈。',20,0);
INSERT INTO widget_fields VALUES(2423,56,'iconSize','double?','If provided, the size of the [Icon].','如果提供，[Icon] 的大小。',21,0);
INSERT INTO widget_fields VALUES(2424,56,'constraints','BoxConstraints?','Optional size constraints for the menu.','菜单的可选大小约束。',22,0);
INSERT INTO widget_fields VALUES(2425,56,'position','PopupMenuPosition?','Whether the popup menu is positioned over or under the popup menu button.','弹出菜单是位于弹出菜单按钮上方还是下方。',23,0);
INSERT INTO widget_fields VALUES(2426,56,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',24,1);
INSERT INTO widget_fields VALUES(2427,56,'useRootNavigator','bool','Used to determine whether to push the menu to the [Navigator] furthest from or nearest to the given `context`.','用于确定是否将菜单推送到距离给定 `context` 最远或最近的 [Navigator]。',25,1);
INSERT INTO widget_fields VALUES(2428,56,'popUpAnimationStyle','AnimationStyle?','Used to override the default animation curves and durations of the popup menu''s open and close transitions.','用于覆盖弹出菜单打开和关闭过渡的默认动画曲线和持续时间。',26,0);
INSERT INTO widget_fields VALUES(2429,56,'routeSettings','RouteSettings?','Optional route settings for the menu.','菜单的可选路由设置。',27,0);
INSERT INTO widget_fields VALUES(2430,56,'style','ButtonStyle?','Customizes this icon button''s appearance.','自定义此图标按钮的外观。',28,0);
INSERT INTO widget_fields VALUES(2431,56,'requestFocus','bool?','Whether to request focus when the menu appears.','菜单出现时是否请求焦点。',29,0);
INSERT INTO widget_fields VALUES(2432,174,'height','double','The height of the divider entry.','分隔符条目的高度。',0,1);
INSERT INTO widget_fields VALUES(2433,174,'thickness','double?','The thickness of the line drawn within the [PopupMenuDivider].','在 [PopupMenuDivider] 内绘制的线的厚度。',1,0);
INSERT INTO widget_fields VALUES(2434,174,'indent','double?','The amount of empty space to the leading edge of the [PopupMenuDivider].','[PopupMenuDivider] 前导边缘的空白空间量。',2,0);
INSERT INTO widget_fields VALUES(2435,174,'endIndent','double?','The amount of empty space to the trailing edge of the [PopupMenuDivider].','[PopupMenuDivider] 尾随边缘的空白空间量。',3,0);
INSERT INTO widget_fields VALUES(2436,174,'radius','BorderRadiusGeometry?','The amount of radius for the border of the [PopupMenuDivider].','[PopupMenuDivider] 边框的半径量。',4,0);
INSERT INTO widget_fields VALUES(2437,174,'color','Color?','{@macro flutter.material.Divider.color}','{@macro flutter.material.Divider.color}',5,0);
INSERT INTO widget_fields VALUES(2438,472,'value','T?','The value that will be returned by [showMenu] if this entry is selected.','如果选择此条目，[showMenu] 将返回的值。',0,0);
INSERT INTO widget_fields VALUES(2439,472,'onTap','VoidCallback?','Called when the menu item is tapped.','点击菜单项时调用。',1,0);
INSERT INTO widget_fields VALUES(2440,472,'enabled','bool','Whether the user is permitted to select this item.','是否允许用户选择此项目。',2,1);
INSERT INTO widget_fields VALUES(2441,472,'height','double','The minimum height of the menu item.','菜单项的最小高度。',3,1);
INSERT INTO widget_fields VALUES(2442,472,'padding','EdgeInsets?','The padding of the menu item.','菜单项的内边距。',4,0);
INSERT INTO widget_fields VALUES(2443,472,'textStyle','TextStyle?','The text style of the popup menu item.','弹出菜单项的文本样式。',5,0);
INSERT INTO widget_fields VALUES(2444,472,'labelTextStyle','MaterialStateProperty<TextStyle?>?','The label style of the popup menu item.','弹出菜单项的标签样式。',6,0);
INSERT INTO widget_fields VALUES(2445,472,'mouseCursor','MouseCursor?','{@template flutter.material.popupmenu.mouseCursor} The cursor for a mouse pointer when it enters or is hovering over the widget.','{@template flutter.material.popupmenu.mouseCursor} 鼠标指针进入或悬停在小部件上时的光标。',7,0);
INSERT INTO widget_fields VALUES(2446,472,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',8,0);
INSERT INTO widget_fields VALUES(2447,330,'data','PopupMenuThemeData','The properties for descendant popup menu widgets.','后代弹出菜单小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(2448,108,'left','double?','The distance that the child''s left edge is inset from the left of the stack.','子项左边缘从堆栈左侧插入的距离。',0,0);
INSERT INTO widget_fields VALUES(2449,108,'top','double?','The distance that the child''s top edge is inset from the top of the stack.','子项顶边缘从堆栈顶部插入的距离。',1,0);
INSERT INTO widget_fields VALUES(2450,108,'right','double?','The distance that the child''s right edge is inset from the right of the stack.','子项右边缘从堆栈右侧插入的距离。',2,0);
INSERT INTO widget_fields VALUES(2451,108,'bottom','double?','The distance that the child''s bottom edge is inset from the bottom of the stack.','子项底边缘从堆栈底部插入的距离。',3,0);
INSERT INTO widget_fields VALUES(2452,108,'width','double?','The child''s width.','子项的宽度。',4,0);
INSERT INTO widget_fields VALUES(2453,108,'height','double?','The child''s height.','子项的高度。',5,0);
INSERT INTO widget_fields VALUES(2454,159,'start','double?','The distance that the child''s leading edge is inset from the leading edge of the stack.','子项前导边缘从堆栈前导边缘插入的距离。',0,0);
INSERT INTO widget_fields VALUES(2455,159,'top','double?','The distance that the child''s top edge is inset from the top of the stack.','子项顶边缘从堆栈顶部插入的距离。',1,0);
INSERT INTO widget_fields VALUES(2456,159,'end','double?','The distance that the child''s trailing edge is inset from the trailing edge of the stack.','子项尾随边缘从堆栈尾随边缘插入的距离。',2,0);
INSERT INTO widget_fields VALUES(2457,159,'bottom','double?','The distance that the child''s bottom edge is inset from the bottom of the stack.','子项底边缘从堆栈底部插入的距离。',3,0);
INSERT INTO widget_fields VALUES(2458,159,'width','double?','The child''s width.','子项的宽度。',4,0);
INSERT INTO widget_fields VALUES(2459,159,'height','double?','The child''s height.','子项的高度。',5,0);
INSERT INTO widget_fields VALUES(2460,159,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',6,1);
INSERT INTO widget_fields VALUES(2461,93,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2462,204,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2463,204,'preferredSize','Size',NULL,NULL,1,1);
INSERT INTO widget_fields VALUES(2464,335,'controller','ScrollController?','The [ScrollController] associated with the subtree.','与子树关联的 [ScrollController]。',0,0);
INSERT INTO widget_fields VALUES(2465,335,'scrollDirection','Axis?','The [Axis] this controller is configured for [ScrollView]s to automatically inherit.','此控制器配置为 [ScrollView] 自动继承的 [Axis]。',1,0);
INSERT INTO widget_fields VALUES(2466,335,'automaticallyInheritForPlatforms','Set<TargetPlatform>','The [TargetPlatform]s this controller is configured for [ScrollView]s to automatically inherit.','此控制器配置为 [ScrollView] 自动继承的 [TargetPlatform]。',2,1);
INSERT INTO widget_fields VALUES(2467,474,'value','double?','If non-null, the value of this progress indicator.','如果非空，此进度指示器的值。',0,0);
INSERT INTO widget_fields VALUES(2468,474,'backgroundColor','Color?','The progress indicator''s background color.','进度指示器的背景颜色。',1,0);
INSERT INTO widget_fields VALUES(2469,474,'color','Color?','{@template flutter.progress_indicator.ProgressIndicator.color} The progress indicator''s color.','{@template flutter.progress_indicator.ProgressIndicator.color} 进度指示器的颜色。',2,0);
INSERT INTO widget_fields VALUES(2470,474,'valueColor','Animation<Color?>?','The progress indicator''s color as an animated value.','进度指示器的颜色作为动画值。',3,0);
INSERT INTO widget_fields VALUES(2471,474,'semanticsLabel','String?','{@template flutter.progress_indicator.ProgressIndicator.semanticsLabel} The [SemanticsProperties.label] for this progress indicator.','{@template flutter.progress_indicator.ProgressIndicator.semanticsLabel} 此进度指示器的 [SemanticsProperties.label]。',4,0);
INSERT INTO widget_fields VALUES(2472,474,'semanticsValue','String?','{@template flutter.progress_indicator.ProgressIndicator.semanticsValue} The [SemanticsProperties.value] for this progress indicator.','{@template flutter.progress_indicator.ProgressIndicator.semanticsValue} 此进度指示器的 [SemanticsProperties.value]。',5,0);
INSERT INTO widget_fields VALUES(2473,475,'data','ProgressIndicatorThemeData','The properties for descendant [ProgressIndicator] widgets.','后代 [ProgressIndicator] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(2474,476,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2475,45,'value','T','The value represented by this radio button.','此单选按钮表示的值。',0,1);
INSERT INTO widget_fields VALUES(2476,45,'groupValue','T?','The currently selected value for a group of radio buttons.','一组单选按钮的当前选定值。',1,0);
INSERT INTO widget_fields VALUES(2477,45,'onChanged','ValueChanged<T?>?','Called when the user selects this radio button.','用户选择此单选按钮时调用。',2,0);
INSERT INTO widget_fields VALUES(2478,45,'mouseCursor','MouseCursor?','{@template flutter.material.radio.mouseCursor} The cursor for a mouse pointer when it enters or is hovering over the widget.','{@template flutter.material.radio.mouseCursor} 鼠标指针进入或悬停在小部件上时的光标。',3,0);
INSERT INTO widget_fields VALUES(2479,45,'toggleable','bool','Set to true if this radio button is allowed to be returned to an indeterminate state by selecting it again when selected.','如果此单选按钮在选中时再次选择可以返回到不确定状态，则设置为 true。',4,1);
INSERT INTO widget_fields VALUES(2480,45,'activeColor','Color?','The color to use when this radio button is selected.','选择此单选按钮时使用的颜色。',5,0);
INSERT INTO widget_fields VALUES(2481,45,'fillColor','MaterialStateProperty<Color?>?','{@template flutter.material.radio.fillColor} The color that fills the radio button, in all [WidgetState]s.','{@template flutter.material.radio.fillColor} 在所有 [WidgetState] 中填充单选按钮的颜色。',6,0);
INSERT INTO widget_fields VALUES(2482,45,'materialTapTargetSize','MaterialTapTargetSize?','{@template flutter.material.radio.materialTapTargetSize} Configures the minimum size of the tap target. {@endtemplate}','{@template flutter.material.radio.materialTapTargetSize} 配置点击目标的最小大小。{@endtemplate}',7,0);
INSERT INTO widget_fields VALUES(2483,45,'visualDensity','VisualDensity?','{@template flutter.material.radio.visualDensity} Defines how compact the radio''s layout will be. {@endtemplate}','{@template flutter.material.radio.visualDensity} 定义单选按钮布局的紧凑程度。{@endtemplate}',8,0);
INSERT INTO widget_fields VALUES(2484,45,'focusColor','Color?','The color for the radio''s [Material] when it has the input focus.','单选按钮具有输入焦点时其 [Material] 的颜色。',9,0);
INSERT INTO widget_fields VALUES(2485,45,'hoverColor','Color?','{@template flutter.material.radio.hoverColor} The color for the radio''s [Material] when a pointer is hovering over it.','{@template flutter.material.radio.hoverColor} 指针悬停在单选按钮上时其 [Material] 的颜色。',10,0);
INSERT INTO widget_fields VALUES(2486,45,'overlayColor','MaterialStateProperty<Color?>?','{@template flutter.material.radio.overlayColor} The color for the radio''s [Material].','{@template flutter.material.radio.overlayColor} 单选按钮的 [Material] 的颜色。',11,0);
INSERT INTO widget_fields VALUES(2487,45,'splashRadius','double?','{@template flutter.material.radio.splashRadius} The splash radius of the circular [Material] ink response. {@endtemplate}','{@template flutter.material.radio.splashRadius} 圆形 [Material] 墨水响应的飞溅半径。{@endtemplate}',12,0);
INSERT INTO widget_fields VALUES(2488,45,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',13,0);
INSERT INTO widget_fields VALUES(2489,45,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',14,1);
INSERT INTO widget_fields VALUES(2490,45,'useCupertinoCheckmarkStyle','bool','Controls whether the checkmark style is used in an iOS-style radio.','控制是否在 iOS 风格的单选按钮中使用复选标记样式。',15,1);
INSERT INTO widget_fields VALUES(2491,19,'value','T','The value represented by this radio button.','此单选按钮表示的值。',0,1);
INSERT INTO widget_fields VALUES(2492,19,'groupValue','T?','The currently selected value for this group of radio buttons.','此单选按钮组当前选择的值。',1,0);
INSERT INTO widget_fields VALUES(2493,19,'onChanged','ValueChanged<T?>?','Called when the user selects this radio button.','用户选择此单选按钮时调用。',2,0);
INSERT INTO widget_fields VALUES(2494,19,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',3,0);
INSERT INTO widget_fields VALUES(2495,19,'toggleable','bool','Set to true if this radio list tile is allowed to be returned to an indeterminate state by selecting it again when selected.','设置为 true 如果此单选列表磁贴允许通过在选中时再次选择它来返回到不确定状态。',4,1);
INSERT INTO widget_fields VALUES(2496,19,'activeColor','Color?','The color to use when this radio button is selected.','选择此单选按钮时使用的颜色。',5,0);
INSERT INTO widget_fields VALUES(2497,19,'fillColor','MaterialStateProperty<Color?>?','The color that fills the radio button.','填充单选按钮的颜色。',6,0);
INSERT INTO widget_fields VALUES(2498,19,'materialTapTargetSize','MaterialTapTargetSize?','{@macro flutter.material.radio.materialTapTargetSize}','{@macro flutter.material.radio.materialTapTargetSize}',7,0);
INSERT INTO widget_fields VALUES(2499,19,'hoverColor','Color?','{@macro flutter.material.radio.hoverColor}','{@macro flutter.material.radio.hoverColor}',8,0);
INSERT INTO widget_fields VALUES(2500,19,'overlayColor','MaterialStateProperty<Color?>?','The color for the radio''s [Material].','单选按钮的 [Material] 的颜色。',9,0);
INSERT INTO widget_fields VALUES(2501,19,'splashRadius','double?','{@macro flutter.material.radio.splashRadius}','{@macro flutter.material.radio.splashRadius}',10,0);
INSERT INTO widget_fields VALUES(2502,19,'title','Widget?','The primary content of the list tile.','列表磁贴的主要内容。',11,0);
INSERT INTO widget_fields VALUES(2503,19,'subtitle','Widget?','Additional content displayed below the title.','显示在标题下方的附加内容。',12,0);
INSERT INTO widget_fields VALUES(2504,19,'secondary','Widget?','A widget to display on the opposite side of the tile from the radio button.','在磁贴上与单选按钮相对侧显示的小部件。',13,0);
INSERT INTO widget_fields VALUES(2505,19,'isThreeLine','bool','Whether this list tile is intended to display three lines of text.','此列表磁贴是否旨在显示三行文本。',14,1);
INSERT INTO widget_fields VALUES(2506,19,'dense','bool?','Whether this list tile is part of a vertically dense list.','此列表磁贴是否是垂直密集列表的一部分。',15,0);
INSERT INTO widget_fields VALUES(2507,19,'selected','bool','Whether to render icons and text in the [activeColor].','是否在 [activeColor] 中渲染图标和文本。',16,1);
INSERT INTO widget_fields VALUES(2508,19,'controlAffinity','ListTileControlAffinity?','Where to place the control relative to the text.','控件相对于文本的放置位置。',17,0);
INSERT INTO widget_fields VALUES(2509,19,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',18,1);
INSERT INTO widget_fields VALUES(2510,19,'contentPadding','EdgeInsetsGeometry?','Defines the insets surrounding the contents of the tile.','定义磁贴内容周围的插入。',19,0);
INSERT INTO widget_fields VALUES(2511,19,'shape','ShapeBorder?','If specified, [shape] defines the shape of the [RadioListTile]''s [InkWell] border.','如果指定，[shape] 定义 [RadioListTile] 的 [InkWell] 边框的形状。',20,0);
INSERT INTO widget_fields VALUES(2512,19,'tileColor','Color?','If specified, defines the background color for `RadioListTile` when [RadioListTile.selected] is false.','如果指定，当 [RadioListTile.selected] 为 false 时定义 `RadioListTile` 的背景颜色。',21,0);
INSERT INTO widget_fields VALUES(2513,19,'selectedTileColor','Color?','If non-null, defines the background color when [RadioListTile.selected] is true.','如果非空，当 [RadioListTile.selected] 为 true 时定义背景颜色。',22,0);
INSERT INTO widget_fields VALUES(2514,19,'visualDensity','VisualDensity?','Defines how compact the list tile''s layout will be.','定义列表磁贴布局的紧凑程度。',23,0);
INSERT INTO widget_fields VALUES(2515,19,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',24,0);
INSERT INTO widget_fields VALUES(2516,19,'onFocusChange','ValueChanged<bool>?','{@macro flutter.material.inkwell.onFocusChange}','{@macro flutter.material.inkwell.onFocusChange}',25,0);
INSERT INTO widget_fields VALUES(2517,19,'enableFeedback','bool?','{@macro flutter.material.ListTile.enableFeedback}','{@macro flutter.material.ListTile.enableFeedback}',26,0);
INSERT INTO widget_fields VALUES(2518,19,'internalAddSemanticForOnTap','bool','Whether to add button:true to the semantics if onTap is provided. This is a temporary flag to help changing the behavior of ListTile onTap semantics.','如果提供了 onTap，是否向语义添加 button:true。这是一个临时标志，用于帮助更改 ListTile onTap 语义的行为。',27,1);
INSERT INTO widget_fields VALUES(2519,19,'useCupertinoCheckmarkStyle','bool','Whether to use the checkbox style for the [CupertinoRadio] control.','是否为 [CupertinoRadio] 控件使用复选框样式。',28,1);
INSERT INTO widget_fields VALUES(2520,19,'radioScaleFactor','double','Controls the scaling factor applied to the [Radio] within the [RadioListTile].','控制应用于 [RadioListTile] 内 [Radio] 的缩放因子。',29,1);
INSERT INTO widget_fields VALUES(2521,477,'value','T','The value represented by this radio button.','此单选按钮表示的值。',0,1);
INSERT INTO widget_fields VALUES(2522,477,'groupValue','T?','The currently selected value for a group of radio buttons.','一组单选按钮当前选择的值。',1,0);
INSERT INTO widget_fields VALUES(2523,477,'toggleable','bool','Set to true if this radio button is allowed to be returned to an indeterminate state by selecting it again when selected.','设置为 true 如果此单选按钮允许通过在选中时再次选择它来返回到不确定状态。',2,1);
INSERT INTO widget_fields VALUES(2524,477,'onChanged','ValueChanged<T?>?','Called when the user selects this radio button.','用户选择此单选按钮时调用。',3,0);
INSERT INTO widget_fields VALUES(2525,477,'onHover','ValueChanged<bool>?','Called when a pointer enters or exits the button response area.','指针进入或退出按钮响应区域时调用。',4,0);
INSERT INTO widget_fields VALUES(2526,477,'onFocusChange','ValueChanged<bool>?','Handler called when the focus changes.','焦点更改时调用的处理程序。',5,0);
INSERT INTO widget_fields VALUES(2527,477,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',6,0);
INSERT INTO widget_fields VALUES(2528,477,'shortcut','MenuSerializableShortcut?','The optional shortcut that selects this [MenuItemButton].','选择此 [MenuItemButton] 的可选快捷方式。',7,0);
INSERT INTO widget_fields VALUES(2529,477,'style','ButtonStyle?','Customizes this button''s appearance.','自定义此按钮的外观。',8,0);
INSERT INTO widget_fields VALUES(2530,477,'statesController','MaterialStatesController?','{@macro flutter.material.inkwell.statesController}','{@macro flutter.material.inkwell.statesController}',9,0);
INSERT INTO widget_fields VALUES(2531,477,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',10,1);
INSERT INTO widget_fields VALUES(2532,477,'trailingIcon','Widget?','An optional icon to display after the [child] label.','在 [child] 标签后显示的可选图标。',11,0);
INSERT INTO widget_fields VALUES(2533,477,'closeOnActivate','bool','{@macro flutter.material.menu_anchor.closeOnActivate}','{@macro flutter.material.menu_anchor.closeOnActivate}',12,1);
INSERT INTO widget_fields VALUES(2534,477,'child','Widget?','The widget displayed in the center of this button.','显示在此按钮中心的小部件。',13,0);
INSERT INTO widget_fields VALUES(2535,478,'data','RadioThemeData','The properties used for all descendant [Radio] widgets.','用于所有后代 [Radio] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(2536,44,'values','RangeValues','The currently selected values for this range slider.','此范围滑块当前选择的值。',0,1);
INSERT INTO widget_fields VALUES(2537,44,'onChanged','ValueChanged<RangeValues>?','Called when the user is selecting a new value for the slider by dragging.','用户通过拖动为滑块选择新值时调用。',1,0);
INSERT INTO widget_fields VALUES(2538,44,'onChangeStart','ValueChanged<RangeValues>?','Called when the user starts selecting new values for the slider.','用户开始为滑块选择新值时调用。',2,0);
INSERT INTO widget_fields VALUES(2539,44,'onChangeEnd','ValueChanged<RangeValues>?','Called when the user is done selecting new values for the slider.','用户完成为滑块选择新值时调用。',3,0);
INSERT INTO widget_fields VALUES(2540,44,'min','double','The minimum value the user can select.','用户可以选择的最小值。',4,1);
INSERT INTO widget_fields VALUES(2541,44,'max','double','The maximum value the user can select.','用户可以选择的最大值。',5,1);
INSERT INTO widget_fields VALUES(2542,44,'divisions','int?','The number of discrete divisions.','离散分割的数量。',6,0);
INSERT INTO widget_fields VALUES(2543,44,'labels','RangeLabels?','Labels to show as text in the [SliderThemeData.rangeValueIndicatorShape] when the slider is active and [SliderThemeData.showValueIndicator] is satisfied.','当滑块处于活动状态且满足 [SliderThemeData.showValueIndicator] 时，在 [SliderThemeData.rangeValueIndicatorShape] 中显示为文本的标签。',7,0);
INSERT INTO widget_fields VALUES(2544,44,'activeColor','Color?','The color of the track''s active segment, i.e. the span of track between the thumbs.','轨道活动段的颜色，即拇指之间的轨道跨度。',8,0);
INSERT INTO widget_fields VALUES(2545,44,'inactiveColor','Color?','The color of the track''s inactive segments, i.e. the span of tracks between the min and the start thumb, and the end thumb and the max.','轨道非活动段的颜色，即最小值和开始拇指之间以及结束拇指和最大值之间的轨道跨度。',9,0);
INSERT INTO widget_fields VALUES(2546,44,'overlayColor','MaterialStateProperty<Color?>?','The highlight color that''s typically used to indicate that the range slider thumb is hovered or dragged.','通常用于指示范围滑块拇指被悬停或拖动的高亮颜色。',10,0);
INSERT INTO widget_fields VALUES(2547,44,'mouseCursor','MaterialStateProperty<MouseCursor?>?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',11,0);
INSERT INTO widget_fields VALUES(2548,44,'semanticFormatterCallback','SemanticFormatterCallback?','The callback used to create a semantic value from the slider''s values.','用于从滑块值创建语义值的回调。',12,0);
INSERT INTO widget_fields VALUES(2549,479,'fieldViewBuilder','AutocompleteFieldViewBuilder?','{@template flutter.widgets.RawAutocomplete.fieldViewBuilder} Builds the field whose input is used to get the options.','{@template flutter.widgets.RawAutocomplete.fieldViewBuilder} 构建其输入用于获取选项的字段。',0,0);
INSERT INTO widget_fields VALUES(2550,479,'focusNode','FocusNode?','The [FocusNode] that is used for the text field.','用于文本字段的 [FocusNode]。',1,0);
INSERT INTO widget_fields VALUES(2551,479,'optionsViewBuilder','AutocompleteOptionsViewBuilder<T>','{@template flutter.widgets.RawAutocomplete.optionsViewBuilder} Builds the selectable options widgets from a list of options objects.','{@template flutter.widgets.RawAutocomplete.optionsViewBuilder} 从选项对象列表构建可选择的选项小部件。',2,1);
INSERT INTO widget_fields VALUES(2552,479,'optionsViewOpenDirection','OptionsViewOpenDirection','{@template flutter.widgets.RawAutocomplete.optionsViewOpenDirection} The direction in which to open the options-view overlay.','{@template flutter.widgets.RawAutocomplete.optionsViewOpenDirection} 打开选项视图覆盖的方向。',3,1);
INSERT INTO widget_fields VALUES(2553,479,'displayStringForOption','AutocompleteOptionToString<T>','{@template flutter.widgets.RawAutocomplete.displayStringForOption} Returns the string to display in the field when the option is selected.','{@template flutter.widgets.RawAutocomplete.displayStringForOption} 返回选择选项时在字段中显示的字符串。',4,1);
INSERT INTO widget_fields VALUES(2554,479,'onSelected','AutocompleteOnSelected<T>?','{@template flutter.widgets.RawAutocomplete.onSelected} Called when an option is selected by the user. {@endtemplate}','{@template flutter.widgets.RawAutocomplete.onSelected} 用户选择选项时调用。{@endtemplate}',5,0);
INSERT INTO widget_fields VALUES(2555,479,'optionsBuilder','AutocompleteOptionsBuilder<T>','{@template flutter.widgets.RawAutocomplete.optionsBuilder} A function that returns the current selectable options objects given the current TextEditingValue. {@endtemplate}','{@template flutter.widgets.RawAutocomplete.optionsBuilder} 给定当前 TextEditingValue 返回当前可选择选项对象的函数。{@endtemplate}',6,1);
INSERT INTO widget_fields VALUES(2556,479,'textEditingController','TextEditingController?','The [TextEditingController] that is used for the text field.','用于文本字段的 [TextEditingController]。',7,0);
INSERT INTO widget_fields VALUES(2557,479,'initialValue','TextEditingValue?','{@template flutter.widgets.RawAutocomplete.initialValue} The initial value to use for the text field. {@endtemplate}','{@template flutter.widgets.RawAutocomplete.initialValue} 用于文本字段的初始值。{@endtemplate}',8,0);
INSERT INTO widget_fields VALUES(2558,153,'defaultProperties','ChipThemeData?','Defines the defaults for the chip properties if they are not specified elsewhere.','如果芯片属性未在其他地方指定，则定义芯片属性的默认值。',0,0);
INSERT INTO widget_fields VALUES(2559,153,'avatar','Widget?',NULL,NULL,1,0);
INSERT INTO widget_fields VALUES(2560,153,'label','Widget',NULL,NULL,2,1);
INSERT INTO widget_fields VALUES(2561,153,'labelStyle','TextStyle?',NULL,NULL,3,0);
INSERT INTO widget_fields VALUES(2562,153,'labelPadding','EdgeInsetsGeometry?',NULL,NULL,4,0);
INSERT INTO widget_fields VALUES(2563,153,'deleteIcon','Widget',NULL,NULL,5,1);
INSERT INTO widget_fields VALUES(2564,153,'onDeleted','VoidCallback?',NULL,NULL,6,0);
INSERT INTO widget_fields VALUES(2565,153,'deleteIconColor','Color?',NULL,NULL,7,0);
INSERT INTO widget_fields VALUES(2566,153,'deleteButtonTooltipMessage','String?',NULL,NULL,8,0);
INSERT INTO widget_fields VALUES(2567,153,'onSelected','ValueChanged<bool>?',NULL,NULL,9,0);
INSERT INTO widget_fields VALUES(2568,153,'onPressed','VoidCallback?',NULL,NULL,10,0);
INSERT INTO widget_fields VALUES(2569,153,'pressElevation','double?',NULL,NULL,11,0);
INSERT INTO widget_fields VALUES(2570,153,'selected','bool',NULL,NULL,12,1);
INSERT INTO widget_fields VALUES(2571,153,'isEnabled','bool',NULL,NULL,13,1);
INSERT INTO widget_fields VALUES(2572,153,'disabledColor','Color?',NULL,NULL,14,0);
INSERT INTO widget_fields VALUES(2573,153,'selectedColor','Color?',NULL,NULL,15,0);
INSERT INTO widget_fields VALUES(2574,153,'tooltip','String?',NULL,NULL,16,0);
INSERT INTO widget_fields VALUES(2575,153,'side','BorderSide?',NULL,NULL,17,0);
INSERT INTO widget_fields VALUES(2576,153,'shape','OutlinedBorder?',NULL,NULL,18,0);
INSERT INTO widget_fields VALUES(2577,153,'clipBehavior','Clip',NULL,NULL,19,1);
INSERT INTO widget_fields VALUES(2578,153,'focusNode','FocusNode?',NULL,NULL,20,0);
INSERT INTO widget_fields VALUES(2579,153,'autofocus','bool',NULL,NULL,21,1);
INSERT INTO widget_fields VALUES(2580,153,'color','WidgetStateProperty<Color?>?',NULL,NULL,22,0);
INSERT INTO widget_fields VALUES(2581,153,'backgroundColor','Color?',NULL,NULL,23,0);
INSERT INTO widget_fields VALUES(2582,153,'padding','EdgeInsetsGeometry?',NULL,NULL,24,0);
INSERT INTO widget_fields VALUES(2583,153,'visualDensity','VisualDensity?',NULL,NULL,25,0);
INSERT INTO widget_fields VALUES(2584,153,'materialTapTargetSize','MaterialTapTargetSize?',NULL,NULL,26,0);
INSERT INTO widget_fields VALUES(2585,153,'elevation','double?',NULL,NULL,27,0);
INSERT INTO widget_fields VALUES(2586,153,'shadowColor','Color?',NULL,NULL,28,0);
INSERT INTO widget_fields VALUES(2587,153,'surfaceTintColor','Color?',NULL,NULL,29,0);
INSERT INTO widget_fields VALUES(2588,153,'iconTheme','IconThemeData?',NULL,NULL,30,0);
INSERT INTO widget_fields VALUES(2589,153,'selectedShadowColor','Color?',NULL,NULL,31,0);
INSERT INTO widget_fields VALUES(2590,153,'showCheckmark','bool?',NULL,NULL,32,0);
INSERT INTO widget_fields VALUES(2591,153,'checkmarkColor','Color?',NULL,NULL,33,0);
INSERT INTO widget_fields VALUES(2592,153,'avatarBorder','ShapeBorder',NULL,NULL,34,1);
INSERT INTO widget_fields VALUES(2593,153,'avatarBoxConstraints','BoxConstraints?',NULL,NULL,35,0);
INSERT INTO widget_fields VALUES(2594,153,'deleteIconBoxConstraints','BoxConstraints?',NULL,NULL,36,0);
INSERT INTO widget_fields VALUES(2595,153,'chipAnimationStyle','ChipAnimationStyle?',NULL,NULL,37,0);
INSERT INTO widget_fields VALUES(2596,153,'mouseCursor','MouseCursor?',NULL,NULL,38,0);
INSERT INTO widget_fields VALUES(2597,153,'tapEnabled','bool','If set, this indicates that the chip should be disabled if all of the tap callbacks ([onSelected], [onPressed]) are null.','如果设置，这表示如果所有点击回调（[onSelected]、[onPressed]）都为 null，则应禁用芯片。',39,1);
INSERT INTO widget_fields VALUES(2598,248,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(2599,248,'gestures','Map<Type, GestureRecognizerFactory>','The gestures that this widget will attempt to recognize.','此小部件将尝试识别的手势。',1,1);
INSERT INTO widget_fields VALUES(2600,248,'behavior','HitTestBehavior?','How this gesture detector should behave during hit testing.','此手势检测器在命中测试期间应如何表现。',2,0);
INSERT INTO widget_fields VALUES(2601,248,'excludeFromSemantics','bool','Whether to exclude these gestures from the semantics tree. For example, the long-press gesture for showing a tooltip is excluded because the tooltip itself is included in the semantics tree directly and so having a gesture to show it would result in duplication of information.','是否从语义树中排除这些手势。例如，显示工具提示的长按手势被排除，因为工具提示本身直接包含在语义树中，因此具有显示它的手势会导致信息重复。',3,1);
INSERT INTO widget_fields VALUES(2602,248,'semantics','SemanticsGestureDelegate?','Describes the semantics notations that should be added to the underlying render object [RenderSemanticsGestureHandler].','描述应添加到底层渲染对象 [RenderSemanticsGestureHandler] 的语义符号。',4,0);
INSERT INTO widget_fields VALUES(2603,313,'image','ui.Image?','The image to display.','要显示的图像。',0,0);
INSERT INTO widget_fields VALUES(2604,313,'debugImageLabel','String?','A string identifying the source of the image.','标识图像来源的字符串。',1,0);
INSERT INTO widget_fields VALUES(2605,313,'width','double?','If non-null, require the image to have this width.','如果非空，要求图像具有此宽度。',2,0);
INSERT INTO widget_fields VALUES(2606,313,'height','double?','If non-null, require the image to have this height.','如果非空，要求图像具有此高度。',3,0);
INSERT INTO widget_fields VALUES(2607,313,'scale','double','The linear scale factor for drawing this image at its intended size.','以其预期大小绘制此图像的线性比例因子。',4,1);
INSERT INTO widget_fields VALUES(2608,313,'color','Color?','If non-null, this color is blended with each image pixel using [colorBlendMode].','如果非空，此颜色使用 [colorBlendMode] 与每个图像像素混合。',5,0);
INSERT INTO widget_fields VALUES(2609,313,'opacity','Animation<double>?','If non-null, the value from the [Animation] is multiplied with the opacity of each image pixel before painting onto the canvas.','如果非空，在绘制到画布之前，[Animation] 的值与每个图像像素的不透明度相乘。',6,0);
INSERT INTO widget_fields VALUES(2610,313,'filterQuality','FilterQuality','Used to set the filterQuality of the image.','用于设置图像的 filterQuality。',7,1);
INSERT INTO widget_fields VALUES(2611,313,'colorBlendMode','BlendMode?','Used to combine [color] with this image.','用于将 [color] 与此图像组合。',8,0);
INSERT INTO widget_fields VALUES(2612,313,'fit','BoxFit?','How to inscribe the image into the space allocated during layout.','如何将图像刻入布局期间分配的空间。',9,0);
INSERT INTO widget_fields VALUES(2613,313,'alignment','AlignmentGeometry','How to align the image within its bounds.','如何在其边界内对齐图像。',10,1);
INSERT INTO widget_fields VALUES(2614,313,'repeat','ImageRepeat','How to paint any portions of the layout bounds not covered by the image.','如何绘制图像未覆盖的布局边界的任何部分。',11,1);
INSERT INTO widget_fields VALUES(2615,313,'centerSlice','Rect?','The center slice for a nine-patch image.','九宫格图像的中心切片。',12,0);
INSERT INTO widget_fields VALUES(2616,313,'matchTextDirection','bool','Whether to paint the image in the direction of the [TextDirection].','是否在 [TextDirection] 的方向上绘制图像。',13,1);
INSERT INTO widget_fields VALUES(2617,313,'invertColors','bool','Whether the colors of the image are inverted when drawn.','绘制时是否反转图像的颜色。',14,1);
INSERT INTO widget_fields VALUES(2618,313,'isAntiAlias','bool','Whether to paint the image with anti-aliasing.','是否使用抗锯齿绘制图像。',15,1);
INSERT INTO widget_fields VALUES(2619,254,'focusNode','FocusNode','Controls whether this widget has keyboard focus.','控制此小部件是否具有键盘焦点。',0,1);
INSERT INTO widget_fields VALUES(2620,254,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',1,1);
INSERT INTO widget_fields VALUES(2621,254,'includeSemantics','bool','{@macro flutter.widgets.Focus.includeSemantics}','{@macro flutter.widgets.Focus.includeSemantics}',2,1);
INSERT INTO widget_fields VALUES(2622,254,'onKey','ValueChanged<RawKeyEvent>?','Called whenever this widget receives a raw keyboard event.','每当此小部件接收到原始键盘事件时调用。',3,0);
INSERT INTO widget_fields VALUES(2623,254,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',4,1);
INSERT INTO widget_fields VALUES(2624,360,'child','Widget?','An optional widget to position inside the len of the [RawMagnifier].','在 [RawMagnifier] 镜头内定位的可选小部件。',0,0);
INSERT INTO widget_fields VALUES(2625,360,'decoration','MagnifierDecoration','This magnifier''s decoration.','此放大镜的装饰。',1,1);
INSERT INTO widget_fields VALUES(2626,360,'clipBehavior','Clip','Whether and how to clip the parts of [decoration] that render inside the loupe.','是否以及如何裁剪在放大镜内渲染的 [decoration] 部分。',2,1);
INSERT INTO widget_fields VALUES(2627,360,'focalPointOffset','Offset','The offset of the magnifier from [RawMagnifier]''s center.','放大镜从 [RawMagnifier] 中心的偏移。',3,1);
INSERT INTO widget_fields VALUES(2628,360,'magnificationScale','double','How "zoomed in" the magnification subject is in the lens.','放大主体在镜头中的',4,1);
INSERT INTO widget_fields VALUES(2629,360,'size','Size','The size of the magnifier.','放大镜的大小。',5,1);
INSERT INTO widget_fields VALUES(2630,175,'onPressed','VoidCallback?','Called when the button is tapped or otherwise activated.','点击或以其他方式激活按钮时调用。',0,0);
INSERT INTO widget_fields VALUES(2631,175,'onLongPress','VoidCallback?','Called when the button is long-pressed.','长按按钮时调用。',1,0);
INSERT INTO widget_fields VALUES(2632,175,'onHighlightChanged','ValueChanged<bool>?','Called by the underlying [InkWell] widget''s [InkWell.onHighlightChanged] callback.','由底层 [InkWell] 小部件的 [InkWell.onHighlightChanged] 回调调用。',2,0);
INSERT INTO widget_fields VALUES(2633,175,'mouseCursor','MouseCursor?','{@template flutter.material.RawMaterialButton.mouseCursor} The cursor for a mouse pointer when it enters or is hovering over the button.','{@template flutter.material.RawMaterialButton.mouseCursor} 鼠标指针进入或悬停在按钮上时的光标。',3,0);
INSERT INTO widget_fields VALUES(2634,175,'textStyle','TextStyle?','Defines the default text style, with [Material.textStyle], for the button''s [child].','使用 [Material.textStyle] 为按钮的 [child] 定义默认文本样式。',4,0);
INSERT INTO widget_fields VALUES(2635,175,'fillColor','Color?','The color of the button''s [Material].','按钮的 [Material] 的颜色。',5,0);
INSERT INTO widget_fields VALUES(2636,175,'focusColor','Color?','The color for the button''s [Material] when it has the input focus.','按钮具有输入焦点时其 [Material] 的颜色。',6,0);
INSERT INTO widget_fields VALUES(2637,175,'hoverColor','Color?','The color for the button''s [Material] when a pointer is hovering over it.','指针悬停在按钮上时其 [Material] 的颜色。',7,0);
INSERT INTO widget_fields VALUES(2638,175,'highlightColor','Color?','The highlight color for the button''s [InkWell].','按钮的 [InkWell] 的高亮颜色。',8,0);
INSERT INTO widget_fields VALUES(2639,175,'splashColor','Color?','The splash color for the button''s [InkWell].','按钮的 [InkWell] 的飞溅颜色。',9,0);
INSERT INTO widget_fields VALUES(2640,175,'elevation','double','The elevation for the button''s [Material] when the button is [enabled] but not pressed.','按钮 [enabled] 但未按下时按钮的 [Material] 的高度。',10,1);
INSERT INTO widget_fields VALUES(2641,175,'hoverElevation','double','The elevation for the button''s [Material] when the button is [enabled] and a pointer is hovering over it.','按钮 [enabled] 且指针悬停在其上时按钮的 [Material] 的高度。',11,1);
INSERT INTO widget_fields VALUES(2642,175,'focusElevation','double','The elevation for the button''s [Material] when the button is [enabled] and has the input focus.','按钮 [enabled] 且具有输入焦点时按钮的 [Material] 的高度。',12,1);
INSERT INTO widget_fields VALUES(2643,175,'highlightElevation','double','The elevation for the button''s [Material] when the button is [enabled] and pressed.','按钮 [enabled] 且被按下时按钮的 [Material] 的高度。',13,1);
INSERT INTO widget_fields VALUES(2644,175,'disabledElevation','double','The elevation for the button''s [Material] when the button is not [enabled].','按钮未 [enabled] 时按钮的 [Material] 的高度。',14,1);
INSERT INTO widget_fields VALUES(2645,175,'padding','EdgeInsetsGeometry','The internal padding for the button''s [child].','按钮的 [child] 的内部内边距。',15,1);
INSERT INTO widget_fields VALUES(2646,175,'visualDensity','VisualDensity','Defines how compact the button''s layout will be.','定义按钮布局的紧凑程度。',16,1);
INSERT INTO widget_fields VALUES(2647,175,'constraints','BoxConstraints','Defines the button''s size.','定义按钮的大小。',17,1);
INSERT INTO widget_fields VALUES(2648,175,'shape','ShapeBorder','The shape of the button''s [Material].','按钮的 [Material] 的形状。',18,1);
INSERT INTO widget_fields VALUES(2649,175,'animationDuration','Duration','Defines the duration of animated changes for [shape] and [elevation].','定义 [shape] 和 [elevation] 动画更改的持续时间。',19,1);
INSERT INTO widget_fields VALUES(2650,175,'child','Widget?','Typically the button''s label.','通常是按钮的标签。',20,0);
INSERT INTO widget_fields VALUES(2651,175,'materialTapTargetSize','MaterialTapTargetSize','Configures the minimum size of the tap target.','配置点击目标的最小大小。',21,1);
INSERT INTO widget_fields VALUES(2652,175,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',22,0);
INSERT INTO widget_fields VALUES(2653,175,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',23,1);
INSERT INTO widget_fields VALUES(2654,175,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',24,1);
INSERT INTO widget_fields VALUES(2655,175,'enableFeedback','bool','Whether detected gestures should provide acoustic and/or haptic feedback.','检测到的手势是否应提供声音和/或触觉反馈。',25,1);
INSERT INTO widget_fields VALUES(2656,480,'onOpen','VoidCallback?','A callback that is invoked when the menu is opened.','菜单打开时调用的回调。',0,0);
INSERT INTO widget_fields VALUES(2657,480,'onClose','VoidCallback?','A callback that is invoked when the menu is closed.','菜单关闭时调用的回调。',1,0);
INSERT INTO widget_fields VALUES(2658,480,'builder','RawMenuAnchorChildBuilder?','A builder that builds the widget that this [RawMenuAnchor] surrounds.','构建此 [RawMenuAnchor] 围绕的小部件的构建器。',2,0);
INSERT INTO widget_fields VALUES(2659,480,'child','Widget?','The optional child to be passed to the [builder].','要传递给 [builder] 的可选子项。',3,0);
INSERT INTO widget_fields VALUES(2660,480,'overlayBuilder','RawMenuAnchorOverlayBuilder','The [overlayBuilder] function is passed a [RawMenuOverlayInfo] object that defines the anchor''s [Rect], the [Size] of the overlay, the [TapRegion.groupId] for the menu system, and the position [Offset] passed to [MenuController.open].','[overlayBuilder] 函数传递一个 [RawMenuOverlayInfo] 对象，该对象定义锚点的 [Rect]、覆盖的 [Size]、菜单系统的 [TapRegion.groupId] 以及传递给 [MenuController.open] 的位置 [Offset]。',4,1);
INSERT INTO widget_fields VALUES(2661,480,'useRootOverlay','bool','{@template flutter.widgets.RawMenuAnchor.useRootOverlay} Whether the menu panel should be rendered in the root [Overlay].','{@template flutter.widgets.RawMenuAnchor.useRootOverlay} 菜单面板是否应在根 [Overlay] 中渲染。',5,1);
INSERT INTO widget_fields VALUES(2662,480,'childFocusNode','FocusNode?','The [FocusNode] attached to the widget that takes focus when the menu is opened or closed.','附加到在菜单打开或关闭时获得焦点的小部件的 [FocusNode]。',6,0);
INSERT INTO widget_fields VALUES(2663,480,'consumeOutsideTaps','bool','Whether or not a tap event that closes the menu will be permitted to continue on to the gesture arena.','关闭菜单的点击事件是否被允许继续到手势竞技场。',7,1);
INSERT INTO widget_fields VALUES(2664,480,'controller','MenuController','A [MenuController] that allows opening and closing of the menu from other widgets.','允许从其他小部件打开和关闭菜单的 [MenuController]。',8,1);
INSERT INTO widget_fields VALUES(2665,481,'child','Widget','The child displayed by the [RawMenuAnchorGroup].','[RawMenuAnchorGroup] 显示的子项。',0,1);
INSERT INTO widget_fields VALUES(2666,481,'controller','MenuController','An [MenuController] that allows the closing of the menu from other widgets.','允许从其他小部件关闭菜单的 [MenuController]。',1,1);
INSERT INTO widget_fields VALUES(2667,482,'child','Widget','{@template flutter.widgets.Scrollbar.child} The widget below this widget in the tree.','{@template flutter.widgets.Scrollbar.child} 树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2668,482,'controller','ScrollController?','{@template flutter.widgets.Scrollbar.controller} The [ScrollController] used to implement Scrollbar dragging.','{@template flutter.widgets.Scrollbar.controller} 用于实现滚动条拖动的 [ScrollController]。',1,0);
INSERT INTO widget_fields VALUES(2669,482,'thumbVisibility','bool?','{@template flutter.widgets.Scrollbar.thumbVisibility} Indicates that the scrollbar thumb should be visible, even when a scroll is not underway.','{@template flutter.widgets.Scrollbar.thumbVisibility} 指示滚动条拇指应该可见，即使没有进行滚动。',2,0);
INSERT INTO widget_fields VALUES(2670,482,'shape','OutlinedBorder?','The [OutlinedBorder] of the scrollbar''s thumb.','滚动条拇指的 [OutlinedBorder]。',3,0);
INSERT INTO widget_fields VALUES(2671,482,'radius','Radius?','The [Radius] of the scrollbar thumb''s rounded rectangle corners.','滚动条拇指圆角矩形角的 [Radius]。',4,0);
INSERT INTO widget_fields VALUES(2672,482,'thickness','double?','The thickness of the scrollbar in the cross axis of the scrollable.','滚动条在可滚动交叉轴上的厚度。',5,0);
INSERT INTO widget_fields VALUES(2673,482,'thumbColor','Color?','The color of the scrollbar thumb.','滚动条拇指的颜色。',6,0);
INSERT INTO widget_fields VALUES(2674,482,'minThumbLength','double','The preferred smallest size the scrollbar thumb can shrink to when the total scrollable extent is large, the current visible viewport is small, and the viewport is not overscrolled.','当总可滚动范围很大、当前可见视口很小且视口未过度滚动时，滚动条拇指可以缩小到的首选最小大小。',7,1);
INSERT INTO widget_fields VALUES(2675,482,'minOverscrollLength','double?','The preferred smallest size the scrollbar thumb can shrink to when viewport is overscrolled.','当视口过度滚动时，滚动条拇指可以缩小到的首选最小大小。',8,0);
INSERT INTO widget_fields VALUES(2676,482,'trackVisibility','bool?','{@template flutter.widgets.Scrollbar.trackVisibility} Indicates that the scrollbar track should be visible.','{@template flutter.widgets.Scrollbar.trackVisibility} 指示滚动条轨道应该可见。',9,0);
INSERT INTO widget_fields VALUES(2677,482,'trackRadius','Radius?','The [Radius] of the scrollbar track''s rounded rectangle corners.','滚动条轨道圆角矩形角的 [Radius]。',10,0);
INSERT INTO widget_fields VALUES(2678,482,'trackColor','Color?','The color of the scrollbar track.','滚动条轨道的颜色。',11,0);
INSERT INTO widget_fields VALUES(2679,482,'trackBorderColor','Color?','The color of the scrollbar track''s border.','滚动条轨道边框的颜色。',12,0);
INSERT INTO widget_fields VALUES(2680,482,'fadeDuration','Duration','The [Duration] of the fade animation.','淡入淡出动画的 [Duration]。',13,1);
INSERT INTO widget_fields VALUES(2681,482,'timeToFade','Duration','The [Duration] of time until the fade animation begins.','淡入淡出动画开始前的时间 [Duration]。',14,1);
INSERT INTO widget_fields VALUES(2682,482,'pressDuration','Duration','The [Duration] of time that a LongPress will trigger the drag gesture of the scrollbar thumb.','长按将触发滚动条拇指拖动手势的时间 [Duration]。',15,1);
INSERT INTO widget_fields VALUES(2683,482,'notificationPredicate','ScrollNotificationPredicate','{@template flutter.widgets.Scrollbar.notificationPredicate} A check that specifies whether a [ScrollNotification] should be handled by this widget.','{@template flutter.widgets.Scrollbar.notificationPredicate} 指定 [ScrollNotification] 是否应由此小部件处理的检查。',16,1);
INSERT INTO widget_fields VALUES(2684,482,'interactive','bool?','{@template flutter.widgets.Scrollbar.interactive} Whether the Scrollbar should be interactive and respond to dragging on the thumb, or tapping in the track area.','{@template flutter.widgets.Scrollbar.interactive} 滚动条是否应该是交互式的并响应拇指拖动或轨道区域点击。',17,0);
INSERT INTO widget_fields VALUES(2685,482,'scrollbarOrientation','ScrollbarOrientation?','{@macro flutter.widgets.Scrollbar.scrollbarOrientation}','{@macro flutter.widgets.Scrollbar.scrollbarOrientation}',18,0);
INSERT INTO widget_fields VALUES(2686,482,'mainAxisMargin','double','Distance from the scrollbar thumb''s start or end to the nearest edge of the viewport in logical pixels. It affects the amount of available paint area.','滚动条拇指的开始或结束到视口最近边缘的距离（以逻辑像素为单位）。它影响可用绘制区域的数量。',19,1);
INSERT INTO widget_fields VALUES(2687,482,'crossAxisMargin','double','Distance from the scrollbar thumb''s side to the nearest cross axis edge in logical pixels.','滚动条拇指侧面到最近交叉轴边缘的距离（以逻辑像素为单位）。',20,1);
INSERT INTO widget_fields VALUES(2688,482,'padding','EdgeInsets?','The insets by which the scrollbar thumb and track should be padded.','滚动条拇指和轨道应填充的插入。',21,0);
INSERT INTO widget_fields VALUES(2689,483,'view','FlutterView','The [FlutterView] into which [child] is drawn.','绘制 [child] 的 [FlutterView]。',0,1);
INSERT INTO widget_fields VALUES(2690,483,'child','Widget','The widget below this widget in the tree, which will be drawn into the [view].','树中此小部件下方的小部件，将绘制到 [view] 中。',1,1);
INSERT INTO widget_fields VALUES(2691,484,'image','WebImageInfo','The underlying HTML element to be displayed.','要显示的底层 HTML 元素。',0,1);
INSERT INTO widget_fields VALUES(2692,484,'debugImageLabel','String?','A debug label explaining the image.','解释图像的调试标签。',1,0);
INSERT INTO widget_fields VALUES(2693,484,'width','double?','The requested width for this widget.','此小部件的请求宽度。',2,0);
INSERT INTO widget_fields VALUES(2694,484,'height','double?','The requested height for this widget.','此小部件的请求高度。',3,0);
INSERT INTO widget_fields VALUES(2695,484,'fit','BoxFit?','How the HTML element should be inscribed in the box constraining it.','HTML 元素应如何刻入约束它的框中。',4,0);
INSERT INTO widget_fields VALUES(2696,484,'alignment','AlignmentGeometry','How the image should be aligned in the box constraining it.','图像应如何在约束它的框中对齐。',5,1);
INSERT INTO widget_fields VALUES(2697,484,'matchTextDirection','bool','Whether or not the alignment of the image should match the text direction.','图像的对齐是否应与文本方向匹配。',6,1);
INSERT INTO widget_fields VALUES(2698,49,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2699,49,'displacement','double','The distance from the child''s top or bottom [edgeOffset] where the refresh indicator will settle. During the drag that exposes the refresh indicator, its actual displacement may significantly exceed this value.','从子项的顶部或底部 [edgeOffset] 到刷新指示器将停留的距离。在暴露刷新指示器的拖动过程中，其实际位移可能会显著超过此值。',1,1);
INSERT INTO widget_fields VALUES(2700,49,'edgeOffset','double','The offset where [RefreshProgressIndicator] starts to appear on drag start.','[RefreshProgressIndicator] 在拖动开始时开始出现的偏移。',2,1);
INSERT INTO widget_fields VALUES(2701,49,'onRefresh','RefreshCallback','A function that''s called when the user has dragged the refresh indicator far enough to demonstrate that they want the app to refresh. The returned [Future] must complete when the refresh operation is finished.','当用户拖动刷新指示器足够远以表明他们希望应用程序刷新时调用的函数。返回的 [Future] 必须在刷新操作完成时完成。',3,1);
INSERT INTO widget_fields VALUES(2702,49,'onStatusChange','ValueChanged<RefreshIndicatorStatus?>?','Called to get the current status of the [RefreshIndicator] to update the UI as needed. This is an optional parameter, used to fine tune app cases.','调用以获取 [RefreshIndicator] 的当前状态以根据需要更新 UI。这是一个可选参数，用于微调应用程序案例。',4,0);
INSERT INTO widget_fields VALUES(2703,49,'color','Color?','The progress indicator''s foreground color. The current theme''s [ColorScheme.primary] by default.','进度指示器的前景色。默认为当前主题的 [ColorScheme.primary]。',5,0);
INSERT INTO widget_fields VALUES(2704,49,'backgroundColor','Color?','The progress indicator''s background color. The current theme''s [ThemeData.canvasColor] by default.','进度指示器的背景色。默认为当前主题的 [ThemeData.canvasColor]。',6,0);
INSERT INTO widget_fields VALUES(2705,49,'notificationPredicate','ScrollNotificationPredicate','A check that specifies whether a [ScrollNotification] should be handled by this widget.','指定 [ScrollNotification] 是否应由此小部件处理的检查。',7,1);
INSERT INTO widget_fields VALUES(2706,49,'semanticsLabel','String?','{@macro flutter.progress_indicator.ProgressIndicator.semanticsLabel}','{@macro flutter.progress_indicator.ProgressIndicator.semanticsLabel}',8,0);
INSERT INTO widget_fields VALUES(2707,49,'semanticsValue','String?','{@macro flutter.progress_indicator.ProgressIndicator.semanticsValue}','{@macro flutter.progress_indicator.ProgressIndicator.semanticsValue}',9,0);
INSERT INTO widget_fields VALUES(2708,49,'strokeWidth','double','Defines [strokeWidth] for `RefreshIndicator`.','为 `RefreshIndicator` 定义 [strokeWidth]。',10,1);
INSERT INTO widget_fields VALUES(2709,49,'triggerMode','RefreshIndicatorTriggerMode','Defines how this [RefreshIndicator] can be triggered when users overscroll.','定义当用户过度滚动时如何触发此 [RefreshIndicator]。',11,1);
INSERT INTO widget_fields VALUES(2710,49,'elevation','double','Defines the elevation of the underlying [RefreshIndicator].','定义底层 [RefreshIndicator] 的高度。',12,1);
INSERT INTO widget_fields VALUES(2711,485,'elevation','double','{@macro flutter.material.material.elevation}','{@macro flutter.material.material.elevation}',0,1);
INSERT INTO widget_fields VALUES(2712,485,'indicatorMargin','EdgeInsetsGeometry','The amount of space by which to inset the whole indicator. It accommodates the [elevation] of the indicator.','插入整个指示器的空间量。它适应指示器的 [elevation]。',1,1);
INSERT INTO widget_fields VALUES(2713,485,'indicatorPadding','EdgeInsetsGeometry','The amount of space by which to inset the inner refresh indicator.','插入内部刷新指示器的空间量。',2,1);
INSERT INTO widget_fields VALUES(2714,115,'size','Size','The [Positioned] widget''s offsets are relative to a box of this size whose origin is 0,0.','[Positioned] 小部件的偏移相对于原点为 0,0 的此大小的框。',0,1);
INSERT INTO widget_fields VALUES(2715,115,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,1);
INSERT INTO widget_fields VALUES(2716,289,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(2717,289,'container','RenderObjectWithChildMixin<T>','The [RenderObject] that is the parent of the [Element] created by this widget.','作为此小部件创建的 [Element] 的父级的 [RenderObject]。',1,1);
INSERT INTO widget_fields VALUES(2718,289,'debugShortDescription','String?','A short description of this widget used by debugging aids.','调试辅助工具使用的此小部件的简短描述。',2,0);
INSERT INTO widget_fields VALUES(2719,488,'child','Widget','The widget for which the application would like to respond to a tap and drag gesture by starting a reordering drag on a reorderable list.','应用程序希望通过在可重新排序列表上开始重新排序拖动来响应点击和拖动手势的小部件。',0,1);
INSERT INTO widget_fields VALUES(2720,488,'index','int','The index of the associated item that will be dragged in the list.','将在列表中拖动的关联项目的索引。',1,1);
INSERT INTO widget_fields VALUES(2721,488,'enabled','bool','Whether the [child] item can be dragged and moved in the list.','[child] 项目是否可以在列表中拖动和移动。',2,1);
INSERT INTO widget_fields VALUES(2722,489,'itemBuilder','IndexedWidgetBuilder','{@template flutter.widgets.reorderable_list.itemBuilder} Called, as needed, to build list item widgets.','{@template flutter.widgets.reorderable_list.itemBuilder} 根据需要调用以构建列表项小部件。',0,1);
INSERT INTO widget_fields VALUES(2723,489,'itemCount','int','{@template flutter.widgets.reorderable_list.itemCount} The number of items in the list.','{@template flutter.widgets.reorderable_list.itemCount} 列表中的项目数。',1,1);
INSERT INTO widget_fields VALUES(2724,489,'onReorder','ReorderCallback','{@template flutter.widgets.reorderable_list.onReorder} A callback used by the list to report that a list item has been dragged to a new location in the list and the application should update the order of the items. {@endtemplate}','{@template flutter.widgets.reorderable_list.onReorder} 列表用于报告列表项已拖动到列表中新位置且应用程序应更新项目顺序的回调。{@endtemplate}',2,1);
INSERT INTO widget_fields VALUES(2725,489,'onReorderStart','void Function(int index)?','{@template flutter.widgets.reorderable_list.onReorderStart} A callback that is called when an item drag has started.','{@template flutter.widgets.reorderable_list.onReorderStart} 项目拖动开始时调用的回调。',3,0);
INSERT INTO widget_fields VALUES(2726,489,'onReorderEnd','void Function(int index)?','{@template flutter.widgets.reorderable_list.onReorderEnd} A callback that is called when the dragged item is dropped.','{@template flutter.widgets.reorderable_list.onReorderEnd} 拖动的项目被放下时调用的回调。',4,0);
INSERT INTO widget_fields VALUES(2727,489,'proxyDecorator','ReorderItemProxyDecorator?','{@template flutter.widgets.reorderable_list.proxyDecorator} A callback that allows the app to add an animated decoration around an item when it is being dragged. {@endtemplate}','{@template flutter.widgets.reorderable_list.proxyDecorator} 允许应用程序在拖动项目时在其周围添加动画装饰的回调。{@endtemplate}',5,0);
INSERT INTO widget_fields VALUES(2728,489,'padding','EdgeInsetsGeometry?','{@template flutter.widgets.reorderable_list.padding} The amount of space by which to inset the list contents.','{@template flutter.widgets.reorderable_list.padding} 插入列表内容的空间量。',6,0);
INSERT INTO widget_fields VALUES(2729,489,'scrollDirection','Axis','{@macro flutter.widgets.scroll_view.scrollDirection}','{@macro flutter.widgets.scroll_view.scrollDirection}',7,1);
INSERT INTO widget_fields VALUES(2730,489,'reverse','bool','{@macro flutter.widgets.scroll_view.reverse}','{@macro flutter.widgets.scroll_view.reverse}',8,1);
INSERT INTO widget_fields VALUES(2731,489,'controller','ScrollController?','{@macro flutter.widgets.scroll_view.controller}','{@macro flutter.widgets.scroll_view.controller}',9,0);
INSERT INTO widget_fields VALUES(2732,489,'primary','bool?','{@macro flutter.widgets.scroll_view.primary}','{@macro flutter.widgets.scroll_view.primary}',10,0);
INSERT INTO widget_fields VALUES(2733,489,'physics','ScrollPhysics?','{@macro flutter.widgets.scroll_view.physics}','{@macro flutter.widgets.scroll_view.physics}',11,0);
INSERT INTO widget_fields VALUES(2734,489,'shrinkWrap','bool','{@macro flutter.widgets.scroll_view.shrinkWrap}','{@macro flutter.widgets.scroll_view.shrinkWrap}',12,1);
INSERT INTO widget_fields VALUES(2735,489,'anchor','double','{@macro flutter.widgets.scroll_view.anchor}','{@macro flutter.widgets.scroll_view.anchor}',13,1);
INSERT INTO widget_fields VALUES(2736,489,'cacheExtent','double?','{@macro flutter.rendering.RenderViewportBase.cacheExtent}','{@macro flutter.rendering.RenderViewportBase.cacheExtent}',14,0);
INSERT INTO widget_fields VALUES(2737,489,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',15,1);
INSERT INTO widget_fields VALUES(2738,489,'keyboardDismissBehavior','ScrollViewKeyboardDismissBehavior?','{@macro flutter.widgets.scroll_view.keyboardDismissBehavior}','{@macro flutter.widgets.scroll_view.keyboardDismissBehavior}',16,0);
INSERT INTO widget_fields VALUES(2739,489,'restorationId','String?','{@macro flutter.widgets.scrollable.restorationId}','{@macro flutter.widgets.scrollable.restorationId}',17,0);
INSERT INTO widget_fields VALUES(2740,489,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',18,1);
INSERT INTO widget_fields VALUES(2741,489,'itemExtent','double?','{@macro flutter.widgets.list_view.itemExtent}','{@macro flutter.widgets.list_view.itemExtent}',19,0);
INSERT INTO widget_fields VALUES(2742,489,'itemExtentBuilder','ItemExtentBuilder?','{@macro flutter.widgets.list_view.itemExtentBuilder}','{@macro flutter.widgets.list_view.itemExtentBuilder}',20,0);
INSERT INTO widget_fields VALUES(2743,489,'prototypeItem','Widget?','{@macro flutter.widgets.list_view.prototypeItem}','{@macro flutter.widgets.list_view.prototypeItem}',21,0);
INSERT INTO widget_fields VALUES(2744,489,'autoScrollerVelocityScalar','double?','{@macro flutter.widgets.EdgeDraggingAutoScroller.velocityScalar}','{@macro flutter.widgets.EdgeDraggingAutoScroller.velocityScalar}',22,0);
INSERT INTO widget_fields VALUES(2745,489,'dragBoundaryProvider','ReorderDragBoundaryProvider?','{@template flutter.widgets.reorderable_list.dragBoundaryProvider} A callback used to provide drag boundaries during drag-and-drop reordering.','{@template flutter.widgets.reorderable_list.dragBoundaryProvider} 在拖放重新排序期间用于提供拖动边界的回调。',23,0);
INSERT INTO widget_fields VALUES(2746,177,'itemBuilder','IndexedWidgetBuilder','{@macro flutter.widgets.reorderable_list.itemBuilder}','{@macro flutter.widgets.reorderable_list.itemBuilder}',0,1);
INSERT INTO widget_fields VALUES(2747,177,'itemCount','int','{@macro flutter.widgets.reorderable_list.itemCount}','{@macro flutter.widgets.reorderable_list.itemCount}',1,1);
INSERT INTO widget_fields VALUES(2748,177,'onReorder','ReorderCallback','{@macro flutter.widgets.reorderable_list.onReorder}','{@macro flutter.widgets.reorderable_list.onReorder}',2,1);
INSERT INTO widget_fields VALUES(2749,177,'onReorderStart','void Function(int index)?','{@macro flutter.widgets.reorderable_list.onReorderStart}','{@macro flutter.widgets.reorderable_list.onReorderStart}',3,0);
INSERT INTO widget_fields VALUES(2750,177,'onReorderEnd','void Function(int index)?','{@macro flutter.widgets.reorderable_list.onReorderEnd}','{@macro flutter.widgets.reorderable_list.onReorderEnd}',4,0);
INSERT INTO widget_fields VALUES(2751,177,'proxyDecorator','ReorderItemProxyDecorator?','{@macro flutter.widgets.reorderable_list.proxyDecorator}','{@macro flutter.widgets.reorderable_list.proxyDecorator}',5,0);
INSERT INTO widget_fields VALUES(2752,177,'buildDefaultDragHandles','bool','If true: on desktop platforms, a drag handle is stacked over the center of each item''s trailing edge; on mobile platforms, a long press anywhere on the item starts a drag.','如果为 true：在桌面平台上，拖动手柄堆叠在每个项目尾随边缘的中心；在移动平台上，在项目上的任何地方长按都会开始拖动。',6,1);
INSERT INTO widget_fields VALUES(2753,177,'padding','EdgeInsets?','{@macro flutter.widgets.reorderable_list.padding}','{@macro flutter.widgets.reorderable_list.padding}',7,0);
INSERT INTO widget_fields VALUES(2754,177,'header','Widget?','A non-reorderable header item to show before the items of the list.','在列表项目之前显示的不可重新排序的标题项目。',8,0);
INSERT INTO widget_fields VALUES(2755,177,'footer','Widget?','A non-reorderable footer item to show after the items of the list.','在列表项目之后显示的不可重新排序的页脚项目。',9,0);
INSERT INTO widget_fields VALUES(2756,177,'scrollDirection','Axis','{@macro flutter.widgets.scroll_view.scrollDirection}','{@macro flutter.widgets.scroll_view.scrollDirection}',10,1);
INSERT INTO widget_fields VALUES(2757,177,'reverse','bool','{@macro flutter.widgets.scroll_view.reverse}','{@macro flutter.widgets.scroll_view.reverse}',11,1);
INSERT INTO widget_fields VALUES(2758,177,'scrollController','ScrollController?','{@macro flutter.widgets.scroll_view.controller}','{@macro flutter.widgets.scroll_view.controller}',12,0);
INSERT INTO widget_fields VALUES(2759,177,'primary','bool?','{@macro flutter.widgets.scroll_view.primary} Defaults to true when [scrollDirection] is [Axis.vertical] and [scrollController] is null.','{@macro flutter.widgets.scroll_view.primary} 当 [scrollDirection] 为 [Axis.vertical] 且 [scrollController] 为 null 时默认为 true。',13,0);
INSERT INTO widget_fields VALUES(2760,177,'physics','ScrollPhysics?','{@macro flutter.widgets.scroll_view.physics}','{@macro flutter.widgets.scroll_view.physics}',14,0);
INSERT INTO widget_fields VALUES(2761,177,'shrinkWrap','bool','{@macro flutter.widgets.scroll_view.shrinkWrap}','{@macro flutter.widgets.scroll_view.shrinkWrap}',15,1);
INSERT INTO widget_fields VALUES(2762,177,'anchor','double','{@macro flutter.widgets.scroll_view.anchor}','{@macro flutter.widgets.scroll_view.anchor}',16,1);
INSERT INTO widget_fields VALUES(2763,177,'cacheExtent','double?','{@macro flutter.rendering.RenderViewportBase.cacheExtent}','{@macro flutter.rendering.RenderViewportBase.cacheExtent}',17,0);
INSERT INTO widget_fields VALUES(2764,177,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',18,1);
INSERT INTO widget_fields VALUES(2765,177,'keyboardDismissBehavior','ScrollViewKeyboardDismissBehavior?','{@macro flutter.widgets.scroll_view.keyboardDismissBehavior}','{@macro flutter.widgets.scroll_view.keyboardDismissBehavior}',19,0);
INSERT INTO widget_fields VALUES(2766,177,'restorationId','String?','{@macro flutter.widgets.scrollable.restorationId}','{@macro flutter.widgets.scrollable.restorationId}',20,0);
INSERT INTO widget_fields VALUES(2767,177,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',21,1);
INSERT INTO widget_fields VALUES(2768,177,'itemExtent','double?','{@macro flutter.widgets.list_view.itemExtent}','{@macro flutter.widgets.list_view.itemExtent}',22,0);
INSERT INTO widget_fields VALUES(2769,177,'itemExtentBuilder','ItemExtentBuilder?','{@macro flutter.widgets.list_view.itemExtentBuilder}','{@macro flutter.widgets.list_view.itemExtentBuilder}',23,0);
INSERT INTO widget_fields VALUES(2770,177,'prototypeItem','Widget?','{@macro flutter.widgets.list_view.prototypeItem}','{@macro flutter.widgets.list_view.prototypeItem}',24,0);
INSERT INTO widget_fields VALUES(2771,177,'autoScrollerVelocityScalar','double?','{@macro flutter.widgets.EdgeDraggingAutoScroller.velocityScalar}','{@macro flutter.widgets.EdgeDraggingAutoScroller.velocityScalar}',25,0);
INSERT INTO widget_fields VALUES(2772,177,'dragBoundaryProvider','ReorderDragBoundaryProvider?','{@macro flutter.widgets.reorderable_list.dragBoundaryProvider}','{@macro flutter.widgets.reorderable_list.dragBoundaryProvider}',26,0);
INSERT INTO widget_fields VALUES(2773,177,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the drag handle.','鼠标指针进入或悬停在拖动手柄上时的光标。',27,0);
INSERT INTO widget_fields VALUES(2774,490,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2775,490,'restorationId','String?','The restoration ID used by this widget to obtain a child bucket from the surrounding [RestorationScope].','此小部件用于从周围的 [RestorationScope] 获取子存储桶的恢复 ID。',1,0);
INSERT INTO widget_fields VALUES(2776,101,'text','InlineSpan','The text to display in this widget.','在此小部件中显示的文本。',0,1);
INSERT INTO widget_fields VALUES(2777,101,'textAlign','TextAlign','How the text should be aligned horizontally.','文本应如何水平对齐。',1,1);
INSERT INTO widget_fields VALUES(2778,101,'textDirection','TextDirection?','The directionality of the text.','文本的方向性。',2,0);
INSERT INTO widget_fields VALUES(2779,101,'softWrap','bool','Whether the text should break at soft line breaks.','文本是否应在软换行符处换行。',3,1);
INSERT INTO widget_fields VALUES(2780,101,'overflow','TextOverflow','How visual overflow should be handled.','应如何处理视觉溢出。',4,1);
INSERT INTO widget_fields VALUES(2781,101,'textScaler','TextScaler','{@macro flutter.painting.textPainter.textScaler}','{@macro flutter.painting.textPainter.textScaler}',5,1);
INSERT INTO widget_fields VALUES(2782,101,'maxLines','int?','An optional maximum number of lines for the text to span, wrapping if necessary. If the text exceeds the given number of lines, it will be truncated according to [overflow].','文本跨越的可选最大行数，必要时换行。如果文本超过给定的行数，它将根据 [overflow] 被截断。',6,0);
INSERT INTO widget_fields VALUES(2783,101,'locale','Locale?','Used to select a font when the same Unicode character can be rendered differently, depending on the locale.','当同一个 Unicode 字符可以根据区域设置以不同方式渲染时，用于选择字体。',7,0);
INSERT INTO widget_fields VALUES(2784,101,'strutStyle','StrutStyle?','{@macro flutter.painting.textPainter.strutStyle}','{@macro flutter.painting.textPainter.strutStyle}',8,0);
INSERT INTO widget_fields VALUES(2785,101,'textWidthBasis','TextWidthBasis','{@macro flutter.painting.textPainter.textWidthBasis}','{@macro flutter.painting.textPainter.textWidthBasis}',9,1);
INSERT INTO widget_fields VALUES(2786,101,'textHeightBehavior','ui.TextHeightBehavior?','{@macro dart.ui.textHeightBehavior}','{@macro dart.ui.textHeightBehavior}',10,0);
INSERT INTO widget_fields VALUES(2787,101,'selectionRegistrar','SelectionRegistrar?','The [SelectionRegistrar] this rich text is subscribed to.','此富文本订阅的 [SelectionRegistrar]。',11,0);
INSERT INTO widget_fields VALUES(2788,101,'selectionColor','Color?','The color to use when painting the selection.','绘制选择时使用的颜色。',12,0);
INSERT INTO widget_fields VALUES(2789,491,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2790,491,'restorationId','String?','The restoration ID used to identify the child bucket that this widget will insert into the tree.','用于标识此小部件将插入树中的子存储桶的恢复 ID。',1,0);
INSERT INTO widget_fields VALUES(2791,492,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(2792,492,'debugShortDescription','String?','A short description of this widget used by debugging aids.','调试辅助工具使用的此小部件的简短描述。',1,0);
INSERT INTO widget_fields VALUES(2793,72,'quarterTurns','int','The number of clockwise quarter turns the child should be rotated.','子项应顺时针旋转的四分之一圈数。',0,1);
INSERT INTO widget_fields VALUES(2794,493,'routeInformationProvider','RouteInformationProvider?','The route information provider for the router.','路由器的路由信息提供者。',0,0);
INSERT INTO widget_fields VALUES(2795,493,'routeInformationParser','RouteInformationParser<T>?','The route information parser for the router.','路由器的路由信息解析器。',1,0);
INSERT INTO widget_fields VALUES(2796,493,'routerDelegate','RouterDelegate<T>','The router delegate for the router.','路由器的路由器委托。',2,1);
INSERT INTO widget_fields VALUES(2797,493,'backButtonDispatcher','BackButtonDispatcher?','The back button dispatcher for the router.','路由器的返回按钮调度器。',3,0);
INSERT INTO widget_fields VALUES(2798,493,'restorationScopeId','String?','Restoration ID to save and restore the state of the [Router].','保存和恢复 [Router] 状态的恢复 ID。',4,0);
INSERT INTO widget_fields VALUES(2799,207,'left','bool','Whether to avoid system intrusions on the left.','是否避免左侧的系统入侵。',0,1);
INSERT INTO widget_fields VALUES(2800,207,'top','bool','Whether to avoid system intrusions at the top of the screen, typically the system status bar.','是否避免屏幕顶部的系统入侵，通常是系统状态栏。',1,1);
INSERT INTO widget_fields VALUES(2801,207,'right','bool','Whether to avoid system intrusions on the right.','是否避免右侧的系统入侵。',2,1);
INSERT INTO widget_fields VALUES(2802,207,'bottom','bool','Whether to avoid system intrusions on the bottom side of the screen.','是否避免屏幕底部的系统入侵。',3,1);
INSERT INTO widget_fields VALUES(2803,207,'minimum','EdgeInsets','This minimum padding to apply.','要应用的最小内边距。',4,1);
INSERT INTO widget_fields VALUES(2804,207,'maintainBottomViewPadding','bool','Specifies whether the [SafeArea] should maintain the bottom [MediaQueryData.viewPadding] instead of the bottom [MediaQueryData.padding], defaults to false.','指定 [SafeArea] 是否应维护底部 [MediaQueryData.viewPadding] 而不是底部 [MediaQueryData.padding]，默认为 false。',5,1);
INSERT INTO widget_fields VALUES(2805,207,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',6,1);
INSERT INTO widget_fields VALUES(2806,64,'extendBody','bool','If true, and [bottomNavigationBar] or [persistentFooterButtons] is specified, then the [body] extends to the bottom of the Scaffold, instead of only extending to the top of the [bottomNavigationBar] or the [persistentFooterButtons].','如果为 true，并且指定了 [bottomNavigationBar] 或 [persistentFooterButtons]，则 [body] 扩展到 Scaffold 的底部，而不是仅扩展到 [bottomNavigationBar] 或 [persistentFooterButtons] 的顶部。',0,1);
INSERT INTO widget_fields VALUES(2807,64,'extendBodyBehindAppBar','bool','If true, and an [appBar] is specified, then the height of the [body] is extended to include the height of the app bar and the top of the body is aligned with the top of the app bar.','如果为 true，并且指定了 [appBar]，则 [body] 的高度扩展为包括应用栏的高度，并且主体的顶部与应用栏的顶部对齐。',1,1);
INSERT INTO widget_fields VALUES(2808,64,'appBar','PreferredSizeWidget?','An app bar to display at the top of the scaffold.','在脚手架顶部显示的应用栏。',2,0);
INSERT INTO widget_fields VALUES(2809,64,'body','Widget?','The primary content of the scaffold.','脚手架的主要内容。',3,0);
INSERT INTO widget_fields VALUES(2810,64,'floatingActionButton','Widget?','A button displayed floating above [body], in the bottom right corner.','显示在 [body] 上方、右下角的浮动按钮。',4,0);
INSERT INTO widget_fields VALUES(2811,64,'floatingActionButtonLocation','FloatingActionButtonLocation?','Responsible for determining where the [floatingActionButton] should go.','负责确定 [floatingActionButton] 应该放在哪里。',5,0);
INSERT INTO widget_fields VALUES(2812,64,'floatingActionButtonAnimator','FloatingActionButtonAnimator?','Animator to move the [floatingActionButton] to a new [floatingActionButtonLocation].','将 [floatingActionButton] 移动到新 [floatingActionButtonLocation] 的动画器。',6,0);
INSERT INTO widget_fields VALUES(2813,64,'persistentFooterButtons','List<Widget>?','A set of buttons that are displayed at the bottom of the scaffold.','显示在脚手架底部的一组按钮。',7,0);
INSERT INTO widget_fields VALUES(2814,64,'persistentFooterAlignment','AlignmentDirectional','The alignment of the [persistentFooterButtons] inside the [OverflowBar].','[OverflowBar] 内 [persistentFooterButtons] 的对齐。',8,1);
INSERT INTO widget_fields VALUES(2815,64,'drawer','Widget?','A panel displayed to the side of the [body], often hidden on mobile devices. Swipes in from either left-to-right ([TextDirection.ltr]) or right-to-left ([TextDirection.rtl])','显示在 [body] 侧面的面板，通常在移动设备上隐藏。从左到右 ([TextDirection.ltr]) 或从右到左 ([TextDirection.rtl]) 滑入',9,0);
INSERT INTO widget_fields VALUES(2816,64,'onDrawerChanged','DrawerCallback?','Optional callback that is called when the [Scaffold.drawer] is opened or closed.','打开或关闭 [Scaffold.drawer] 时调用的可选回调。',10,0);
INSERT INTO widget_fields VALUES(2817,64,'endDrawer','Widget?','A panel displayed to the side of the [body], often hidden on mobile devices. Swipes in from right-to-left ([TextDirection.ltr]) or left-to-right ([TextDirection.rtl])','显示在 [body] 侧面的面板，通常在移动设备上隐藏。从右到左 ([TextDirection.ltr]) 或从左到右 ([TextDirection.rtl]) 滑入',11,0);
INSERT INTO widget_fields VALUES(2818,64,'onEndDrawerChanged','DrawerCallback?','Optional callback that is called when the [Scaffold.endDrawer] is opened or closed.','打开或关闭 [Scaffold.endDrawer] 时调用的可选回调。',12,0);
INSERT INTO widget_fields VALUES(2819,64,'drawerScrimColor','Color?','The color to use for the scrim that obscures primary content while a drawer is open.','抽屉打开时用于遮挡主要内容的纱幕颜色。',13,0);
INSERT INTO widget_fields VALUES(2820,64,'backgroundColor','Color?','The color of the [Material] widget that underlies the entire Scaffold.','整个 Scaffold 下方的 [Material] 小部件的颜色。',14,0);
INSERT INTO widget_fields VALUES(2821,64,'bottomNavigationBar','Widget?','A bottom navigation bar to display at the bottom of the scaffold.','在脚手架底部显示的底部导航栏。',15,0);
INSERT INTO widget_fields VALUES(2822,64,'bottomSheet','Widget?','The persistent bottom sheet to display.','要显示的持久底部表单。',16,0);
INSERT INTO widget_fields VALUES(2823,64,'resizeToAvoidBottomInset','bool?','If true the [body] and the scaffold''s floating widgets should size themselves to avoid the onscreen keyboard whose height is defined by the ambient [MediaQuery]''s [MediaQueryData.viewInsets] `bottom` property.','如果为 true，[body] 和脚手架的浮动小部件应调整自身大小以避免屏幕键盘，其高度由环境 [MediaQuery] 的 [MediaQueryData.viewInsets] `bottom` 属性定义。',17,0);
INSERT INTO widget_fields VALUES(2824,64,'primary','bool','Whether this scaffold is being displayed at the top of the screen.','此脚手架是否显示在屏幕顶部。',18,1);
INSERT INTO widget_fields VALUES(2825,64,'drawerDragStartBehavior','DragStartBehavior','{@macro flutter.material.DrawerController.dragStartBehavior}','{@macro flutter.material.DrawerController.dragStartBehavior}',19,1);
INSERT INTO widget_fields VALUES(2826,64,'drawerEdgeDragWidth','double?','The width of the area within which a horizontal swipe will open the drawer.','水平滑动将打开抽屉的区域宽度。',20,0);
INSERT INTO widget_fields VALUES(2827,64,'drawerEnableOpenDragGesture','bool','Determines if the [Scaffold.drawer] can be opened with a drag gesture on mobile.','确定 [Scaffold.drawer] 是否可以在移动设备上通过拖动手势打开。',21,1);
INSERT INTO widget_fields VALUES(2828,64,'endDrawerEnableOpenDragGesture','bool','Determines if the [Scaffold.endDrawer] can be opened with a gesture on mobile.','确定 [Scaffold.endDrawer] 是否可以在移动设备上通过手势打开。',22,1);
INSERT INTO widget_fields VALUES(2829,64,'restorationId','String?','Restoration ID to save and restore the state of the [Scaffold].','保存和恢复 [Scaffold] 状态的恢复 ID。',23,0);
INSERT INTO widget_fields VALUES(2830,494,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2831,253,'axisDirection','AxisDirection','{@template flutter.widgets.Scrollable.axisDirection} The direction in which this widget scrolls.','{@template flutter.widgets.Scrollable.axisDirection} 此小部件滚动的方向。',0,1);
INSERT INTO widget_fields VALUES(2832,253,'controller','ScrollController?','{@template flutter.widgets.Scrollable.controller} An object that can be used to control the position to which this widget is scrolled.','{@template flutter.widgets.Scrollable.controller} 可用于控制此小部件滚动到的位置的对象。',1,0);
INSERT INTO widget_fields VALUES(2833,253,'physics','ScrollPhysics?','{@template flutter.widgets.Scrollable.physics} How the widgets should respond to user input.','{@template flutter.widgets.Scrollable.physics} 小部件应如何响应用户输入。',2,0);
INSERT INTO widget_fields VALUES(2834,253,'viewportBuilder','ViewportBuilder','Builds the viewport through which the scrollable content is displayed.','构建显示可滚动内容的视口。',3,1);
INSERT INTO widget_fields VALUES(2835,253,'incrementCalculator','ScrollIncrementCalculator?','{@template flutter.widgets.Scrollable.incrementCalculator} An optional function that will be called to calculate the distance to scroll when the scrollable is asked to scroll via the keyboard using a [ScrollAction].','{@template flutter.widgets.Scrollable.incrementCalculator} 当要求可滚动通过使用 [ScrollAction] 的键盘滚动时，将调用以计算滚动距离的可选函数。',4,0);
INSERT INTO widget_fields VALUES(2836,253,'excludeFromSemantics','bool','{@template flutter.widgets.scrollable.excludeFromSemantics} Whether the scroll actions introduced by this [Scrollable] are exposed in the semantics tree.','{@template flutter.widgets.scrollable.excludeFromSemantics} 此 [Scrollable] 引入的滚动操作是否在语义树中公开。',5,1);
INSERT INTO widget_fields VALUES(2837,253,'hitTestBehavior','HitTestBehavior','{@template flutter.widgets.scrollable.hitTestBehavior} Defines the behavior of gesture detector used in this [Scrollable].','{@template flutter.widgets.scrollable.hitTestBehavior} 定义此 [Scrollable] 中使用的手势检测器的行为。',6,1);
INSERT INTO widget_fields VALUES(2838,253,'semanticChildCount','int?','The number of children that will contribute semantic information.','将贡献语义信息的子项数。',7,0);
INSERT INTO widget_fields VALUES(2839,253,'dragStartBehavior','DragStartBehavior','{@template flutter.widgets.scrollable.dragStartBehavior} Determines the way that drag start behavior is handled.','{@template flutter.widgets.scrollable.dragStartBehavior} 确定处理拖动开始行为的方式。',8,1);
INSERT INTO widget_fields VALUES(2840,253,'restorationId','String?','{@template flutter.widgets.scrollable.restorationId} Restoration ID to save and restore the scroll offset of the scrollable.','{@template flutter.widgets.scrollable.restorationId} 保存和恢复可滚动滚动偏移的恢复 ID。',9,0);
INSERT INTO widget_fields VALUES(2841,253,'scrollBehavior','ScrollBehavior?','{@template flutter.widgets.scrollable.scrollBehavior} A [ScrollBehavior] that will be applied to this widget individually.','{@template flutter.widgets.scrollable.scrollBehavior} 将单独应用于此小部件的 [ScrollBehavior]。',10,0);
INSERT INTO widget_fields VALUES(2842,253,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',11,1);
INSERT INTO widget_fields VALUES(2843,194,'child','Widget','{@macro flutter.widgets.Scrollbar.child}','{@macro flutter.widgets.Scrollbar.child}',0,1);
INSERT INTO widget_fields VALUES(2844,194,'controller','ScrollController?','{@macro flutter.widgets.Scrollbar.controller}','{@macro flutter.widgets.Scrollbar.controller}',1,0);
INSERT INTO widget_fields VALUES(2845,194,'thumbVisibility','bool?','{@macro flutter.widgets.Scrollbar.thumbVisibility}','{@macro flutter.widgets.Scrollbar.thumbVisibility}',2,0);
INSERT INTO widget_fields VALUES(2846,194,'trackVisibility','bool?','{@macro flutter.widgets.Scrollbar.trackVisibility}','{@macro flutter.widgets.Scrollbar.trackVisibility}',3,0);
INSERT INTO widget_fields VALUES(2847,194,'thickness','double?','The thickness of the scrollbar in the cross axis of the scrollable.','滚动条在可滚动交叉轴上的厚度。',4,0);
INSERT INTO widget_fields VALUES(2848,194,'radius','Radius?','The [Radius] of the scrollbar thumb''s rounded rectangle corners.','滚动条拇指圆角矩形角的 [Radius]。',5,0);
INSERT INTO widget_fields VALUES(2849,194,'interactive','bool?','{@macro flutter.widgets.Scrollbar.interactive}','{@macro flutter.widgets.Scrollbar.interactive}',6,0);
INSERT INTO widget_fields VALUES(2850,194,'notificationPredicate','ScrollNotificationPredicate?','{@macro flutter.widgets.Scrollbar.notificationPredicate}','{@macro flutter.widgets.Scrollbar.notificationPredicate}',7,0);
INSERT INTO widget_fields VALUES(2851,194,'scrollbarOrientation','ScrollbarOrientation?','{@macro flutter.widgets.Scrollbar.scrollbarOrientation}','{@macro flutter.widgets.Scrollbar.scrollbarOrientation}',8,0);
INSERT INTO widget_fields VALUES(2852,496,'data','ScrollbarThemeData','The properties used for all descendant [Scrollbar] widgets.','用于所有后代 [Scrollbar] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(2853,180,'behavior','ScrollBehavior','How [Scrollable] widgets that are descendants of [child] should behave.','作为 [child] 后代的 [Scrollable] 小部件应如何表现。',0,1);
INSERT INTO widget_fields VALUES(2854,495,'child','Widget','The subtree below this widget.','此小部件下方的子树。',0,1);
INSERT INTO widget_fields VALUES(2855,349,'scrollDirection','Axis','{@template flutter.widgets.scroll_view.scrollDirection} The [Axis] along which the scroll view''s offset increases.','{@template flutter.widgets.scroll_view.scrollDirection} 滚动视图偏移增加的 [Axis]。',0,1);
INSERT INTO widget_fields VALUES(2856,349,'reverse','bool','{@template flutter.widgets.scroll_view.reverse} Whether the scroll view scrolls in the reading direction.','{@template flutter.widgets.scroll_view.reverse} 滚动视图是否在阅读方向上滚动。',1,1);
INSERT INTO widget_fields VALUES(2857,349,'controller','ScrollController?','{@template flutter.widgets.scroll_view.controller} An object that can be used to control the position to which this scroll view is scrolled.','{@template flutter.widgets.scroll_view.controller} 可用于控制此滚动视图滚动到的位置的对象。',2,0);
INSERT INTO widget_fields VALUES(2858,349,'primary','bool?','{@template flutter.widgets.scroll_view.primary} Whether this is the primary scroll view associated with the parent [PrimaryScrollController].','{@template flutter.widgets.scroll_view.primary} 这是否是与父 [PrimaryScrollController] 关联的主要滚动视图。',3,0);
INSERT INTO widget_fields VALUES(2859,349,'physics','ScrollPhysics?','{@template flutter.widgets.scroll_view.physics} How the scroll view should respond to user input.','{@template flutter.widgets.scroll_view.physics} 滚动视图应如何响应用户输入。',4,0);
INSERT INTO widget_fields VALUES(2860,349,'scrollBehavior','ScrollBehavior?','{@macro flutter.widgets.scrollable.scrollBehavior}','{@macro flutter.widgets.scrollable.scrollBehavior}',5,0);
INSERT INTO widget_fields VALUES(2861,349,'shrinkWrap','bool','{@template flutter.widgets.scroll_view.shrinkWrap} Whether the extent of the scroll view in the [scrollDirection] should be determined by the contents being viewed.','{@template flutter.widgets.scroll_view.shrinkWrap} 滚动视图在 [scrollDirection] 中的范围是否应由正在查看的内容确定。',6,1);
INSERT INTO widget_fields VALUES(2862,349,'center','Key?','The first child in the [GrowthDirection.forward] growth direction.','[GrowthDirection.forward] 增长方向中的第一个子项。',7,0);
INSERT INTO widget_fields VALUES(2863,349,'anchor','double','{@template flutter.widgets.scroll_view.anchor} The relative position of the zero scroll offset.','{@template flutter.widgets.scroll_view.anchor} 零滚动偏移的相对位置。',8,1);
INSERT INTO widget_fields VALUES(2864,349,'cacheExtent','double?','{@macro flutter.rendering.RenderViewportBase.cacheExtent}','{@macro flutter.rendering.RenderViewportBase.cacheExtent}',9,0);
INSERT INTO widget_fields VALUES(2865,349,'semanticChildCount','int?','The number of children that will contribute semantic information.','将贡献语义信息的子项数。',10,0);
INSERT INTO widget_fields VALUES(2866,349,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',11,1);
INSERT INTO widget_fields VALUES(2867,349,'keyboardDismissBehavior','ScrollViewKeyboardDismissBehavior?','{@template flutter.widgets.scroll_view.keyboardDismissBehavior} The [ScrollViewKeyboardDismissBehavior] defines how this [ScrollView] will dismiss the keyboard automatically. {@endtemplate}','{@template flutter.widgets.scroll_view.keyboardDismissBehavior} [ScrollViewKeyboardDismissBehavior] 定义此 [ScrollView] 如何自动关闭键盘。{@endtemplate}',12,0);
INSERT INTO widget_fields VALUES(2868,349,'restorationId','String?','{@macro flutter.widgets.scrollable.restorationId}','{@macro flutter.widgets.scrollable.restorationId}',13,0);
INSERT INTO widget_fields VALUES(2869,349,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',14,1);
INSERT INTO widget_fields VALUES(2870,349,'hitTestBehavior','HitTestBehavior','{@macro flutter.widgets.scrollable.hitTestBehavior}','{@macro flutter.widgets.scrollable.hitTestBehavior}',15,1);
INSERT INTO widget_fields VALUES(2871,497,'isFullScreen','bool?','Whether the search view grows to fill the entire screen when the [SearchAnchor] is tapped.','点击 [SearchAnchor] 时搜索视图是否增长以填充整个屏幕。',0,0);
INSERT INTO widget_fields VALUES(2872,497,'searchController','SearchController?','An optional controller that allows opening and closing of the search view from other widgets.','允许从其他小部件打开和关闭搜索视图的可选控制器。',1,0);
INSERT INTO widget_fields VALUES(2873,497,'viewBuilder','ViewBuilder?','Optional callback to obtain a widget to lay out the suggestion list of the search view.','获取小部件以布局搜索视图建议列表的可选回调。',2,0);
INSERT INTO widget_fields VALUES(2874,497,'viewLeading','Widget?','An optional widget to display before the text input field when the search view is open.','搜索视图打开时在文本输入字段之前显示的可选小部件。',3,0);
INSERT INTO widget_fields VALUES(2875,497,'viewTrailing','Iterable<Widget>?','An optional widget list to display after the text input field when the search view is open.','搜索视图打开时在文本输入字段之后显示的可选小部件列表。',4,0);
INSERT INTO widget_fields VALUES(2876,497,'viewHintText','String?','Text that is displayed when the search bar''s input field is empty.','搜索栏输入字段为空时显示的文本。',5,0);
INSERT INTO widget_fields VALUES(2877,497,'viewBackgroundColor','Color?','The search view''s background fill color.','搜索视图的背景填充颜色。',6,0);
INSERT INTO widget_fields VALUES(2878,497,'viewElevation','double?','The elevation of the search view''s [Material].','搜索视图的 [Material] 的高度。',7,0);
INSERT INTO widget_fields VALUES(2879,497,'viewSurfaceTintColor','Color?','The surface tint color of the search view''s [Material].','搜索视图的 [Material] 的表面色调颜色。',8,0);
INSERT INTO widget_fields VALUES(2880,497,'viewSide','BorderSide?','The color and weight of the search view''s outline.','搜索视图轮廓的颜色和权重。',9,0);
INSERT INTO widget_fields VALUES(2881,497,'viewShape','OutlinedBorder?','The shape of the search view''s underlying [Material].','搜索视图底层 [Material] 的形状。',10,0);
INSERT INTO widget_fields VALUES(2882,497,'viewBarPadding','EdgeInsetsGeometry?','The padding to use for the search view''s search bar.','用于搜索视图搜索栏的内边距。',11,0);
INSERT INTO widget_fields VALUES(2883,497,'headerHeight','double?','The height of the search field on the search view.','搜索视图上搜索字段的高度。',12,0);
INSERT INTO widget_fields VALUES(2884,497,'headerTextStyle','TextStyle?','The style to use for the text being edited on the search view.','用于搜索视图上正在编辑的文本的样式。',13,0);
INSERT INTO widget_fields VALUES(2885,497,'headerHintStyle','TextStyle?','The style to use for the [viewHintText] on the search view.','用于搜索视图上 [viewHintText] 的样式。',14,0);
INSERT INTO widget_fields VALUES(2886,497,'dividerColor','Color?','The color of the divider on the search view.','搜索视图上分隔符的颜色。',15,0);
INSERT INTO widget_fields VALUES(2887,497,'viewConstraints','BoxConstraints?','Optional size constraints for the search view.','搜索视图的可选大小约束。',16,0);
INSERT INTO widget_fields VALUES(2888,497,'viewPadding','EdgeInsetsGeometry?','The padding to use for the search view.','用于搜索视图的内边距。',17,0);
INSERT INTO widget_fields VALUES(2889,497,'shrinkWrap','bool?','Whether the search view should shrink-wrap its contents.','搜索视图是否应收缩包装其内容。',18,0);
INSERT INTO widget_fields VALUES(2890,497,'textCapitalization','TextCapitalization?','{@macro flutter.widgets.editableText.textCapitalization}','{@macro flutter.widgets.editableText.textCapitalization}',19,0);
INSERT INTO widget_fields VALUES(2891,497,'viewOnChanged','ValueChanged<String>?','Called each time the user modifies the search view''s text field.','每次用户修改搜索视图的文本字段时调用。',20,0);
INSERT INTO widget_fields VALUES(2892,497,'viewOnSubmitted','ValueChanged<String>?','Called when the user indicates that they are done editing the text in the text field of a search view. Typically this is called when the user presses the enter key.','当用户指示他们已完成编辑搜索视图文本字段中的文本时调用。通常在用户按下回车键时调用。',21,0);
INSERT INTO widget_fields VALUES(2893,497,'viewOnClose','VoidCallback?','Called when the search view is closed.','搜索视图关闭时调用。',22,0);
INSERT INTO widget_fields VALUES(2894,497,'viewOnOpen','VoidCallback?','Called when the search view is opened.','搜索视图打开时调用。',23,0);
INSERT INTO widget_fields VALUES(2895,497,'builder','SearchAnchorChildBuilder','Called to create a widget which can open a search view route when it is tapped.','调用以创建点击时可以打开搜索视图路由的小部件。',24,1);
INSERT INTO widget_fields VALUES(2896,497,'suggestionsBuilder','SuggestionsBuilder','Called to get the suggestion list for the search view.','调用以获取搜索视图的建议列表。',25,1);
INSERT INTO widget_fields VALUES(2897,497,'textInputAction','TextInputAction?','{@macro flutter.widgets.TextField.textInputAction}','{@macro flutter.widgets.TextField.textInputAction}',26,0);
INSERT INTO widget_fields VALUES(2898,497,'keyboardType','TextInputType?','The type of action button to use for the keyboard.','用于键盘的操作按钮类型。',27,0);
INSERT INTO widget_fields VALUES(2899,497,'enabled','bool','Whether or not this widget is currently interactive.','此小部件当前是否可交互。',28,1);
INSERT INTO widget_fields VALUES(2900,498,'controller','TextEditingController?','Controls the text being edited in the search bar''s text field.','控制搜索栏文本字段中正在编辑的文本。',0,0);
INSERT INTO widget_fields VALUES(2901,498,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',1,0);
INSERT INTO widget_fields VALUES(2902,498,'hintText','String?','Text that suggests what sort of input the field accepts.','建议字段接受何种输入的文本。',2,0);
INSERT INTO widget_fields VALUES(2903,498,'leading','Widget?','A widget to display before the text input field.','在文本输入字段之前显示的小部件。',3,0);
INSERT INTO widget_fields VALUES(2904,498,'trailing','Iterable<Widget>?','A list of Widgets to display in a row after the text field.','在文本字段之后一行显示的小部件列表。',4,0);
INSERT INTO widget_fields VALUES(2905,498,'onTap','GestureTapCallback?','Called when the user taps this search bar.','用户点击此搜索栏时调用。',5,0);
INSERT INTO widget_fields VALUES(2906,498,'onTapOutside','TapRegionCallback?','Called when the user taps outside the search bar.','用户点击搜索栏外部时调用。',6,0);
INSERT INTO widget_fields VALUES(2907,498,'onChanged','ValueChanged<String>?','Invoked upon user input.','用户输入时调用。',7,0);
INSERT INTO widget_fields VALUES(2908,498,'onSubmitted','ValueChanged<String>?','Called when the user indicates that they are done editing the text in the field.','当用户指示他们已完成编辑字段中的文本时调用。',8,0);
INSERT INTO widget_fields VALUES(2909,498,'constraints','BoxConstraints?','Optional size constraints for the search bar.','搜索栏的可选大小约束。',9,0);
INSERT INTO widget_fields VALUES(2910,498,'elevation','MaterialStateProperty<double?>?','The elevation of the search bar''s [Material].','搜索栏的 [Material] 的高度。',10,0);
INSERT INTO widget_fields VALUES(2911,498,'backgroundColor','MaterialStateProperty<Color?>?','The search bar''s background fill color.','搜索栏的背景填充颜色。',11,0);
INSERT INTO widget_fields VALUES(2912,498,'shadowColor','MaterialStateProperty<Color?>?','The shadow color of the search bar''s [Material].','搜索栏的 [Material] 的阴影颜色。',12,0);
INSERT INTO widget_fields VALUES(2913,498,'surfaceTintColor','MaterialStateProperty<Color?>?','The surface tint color of the search bar''s [Material].','搜索栏的 [Material] 的表面色调颜色。',13,0);
INSERT INTO widget_fields VALUES(2914,498,'overlayColor','MaterialStateProperty<Color?>?','The highlight color that''s typically used to indicate that the search bar is focused, hovered, or pressed.','通常用于指示搜索栏被聚焦、悬停或按下的高亮颜色。',14,0);
INSERT INTO widget_fields VALUES(2915,498,'side','MaterialStateProperty<BorderSide?>?','The color and weight of the search bar''s outline.','搜索栏轮廓的颜色和权重。',15,0);
INSERT INTO widget_fields VALUES(2916,498,'shape','MaterialStateProperty<OutlinedBorder?>?','The shape of the search bar''s underlying [Material].','搜索栏底层 [Material] 的形状。',16,0);
INSERT INTO widget_fields VALUES(2917,498,'padding','MaterialStateProperty<EdgeInsetsGeometry?>?','The padding between the search bar''s boundary and its contents.','搜索栏边界与其内容之间的内边距。',17,0);
INSERT INTO widget_fields VALUES(2918,498,'textStyle','MaterialStateProperty<TextStyle?>?','The style to use for the text being edited.','用于正在编辑的文本的样式。',18,0);
INSERT INTO widget_fields VALUES(2919,498,'hintStyle','MaterialStateProperty<TextStyle?>?','The style to use for the [hintText].','用于 [hintText] 的样式。',19,0);
INSERT INTO widget_fields VALUES(2920,498,'textCapitalization','TextCapitalization?','{@macro flutter.widgets.editableText.textCapitalization}','{@macro flutter.widgets.editableText.textCapitalization}',20,0);
INSERT INTO widget_fields VALUES(2921,498,'enabled','bool','Whether or not this widget is currently interactive.','此小部件当前是否可交互。',21,1);
INSERT INTO widget_fields VALUES(2922,498,'autoFocus','bool','{@macro flutter.widgets.editableText.autofocus}','{@macro flutter.widgets.editableText.autofocus}',22,1);
INSERT INTO widget_fields VALUES(2923,498,'textInputAction','TextInputAction?','{@macro flutter.widgets.TextField.textInputAction}','{@macro flutter.widgets.TextField.textInputAction}',23,0);
INSERT INTO widget_fields VALUES(2924,498,'keyboardType','TextInputType?','The type of action button to use for the keyboard.','用于键盘的操作按钮类型。',24,0);
INSERT INTO widget_fields VALUES(2925,498,'scrollPadding','EdgeInsets','{@macro flutter.widgets.editableText.scrollPadding}','{@macro flutter.widgets.editableText.scrollPadding}',25,1);
INSERT INTO widget_fields VALUES(2926,498,'contextMenuBuilder','EditableTextContextMenuBuilder?','{@macro flutter.widgets.EditableText.contextMenuBuilder}','{@macro flutter.widgets.EditableText.contextMenuBuilder}',26,0);
INSERT INTO widget_fields VALUES(2927,499,'data','SearchBarThemeData','The properties used for all descendant [SearchBar] widgets.','用于所有后代 [SearchBar] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(2928,500,'data','SearchViewThemeData','The properties used for all descendant [SearchAnchor] widgets.','用于所有后代 [SearchAnchor] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(2929,501,'segments','List<ButtonSegment<T>>','Descriptions of the segments in the button.','按钮中段的描述。',0,1);
INSERT INTO widget_fields VALUES(2930,501,'direction','Axis','The orientation of the button''s [segments].','按钮的 [segments] 的方向。',1,1);
INSERT INTO widget_fields VALUES(2931,501,'selected','Set<T>','The set of [ButtonSegment.value]s that indicate which [segments] are selected.','指示哪些 [segments] 被选中的 [ButtonSegment.value] 集合。',2,1);
INSERT INTO widget_fields VALUES(2932,501,'onSelectionChanged','void Function(Set<T>)?','The function that is called when the selection changes.','选择更改时调用的函数。',3,0);
INSERT INTO widget_fields VALUES(2933,501,'multiSelectionEnabled','bool','Determines if multiple segments can be selected at one time.','确定是否可以同时选择多个段。',4,1);
INSERT INTO widget_fields VALUES(2934,501,'emptySelectionAllowed','bool','Determines if having no selected segments is allowed.','确定是否允许没有选中的段。',5,1);
INSERT INTO widget_fields VALUES(2935,501,'expandedInsets','EdgeInsets?','Determines the segmented button''s size and padding based on [expandedInsets].','根据 [expandedInsets] 确定分段按钮的大小和内边距。',6,0);
INSERT INTO widget_fields VALUES(2936,501,'style','ButtonStyle?','Customizes this button''s appearance.','自定义此按钮的外观。',7,0);
INSERT INTO widget_fields VALUES(2937,501,'showSelectedIcon','bool','Determines if the [selectedIcon] (usually an icon using [Icons.check]) is displayed on the selected segments.','确定是否在选中的段上显示 [selectedIcon]（通常是使用 [Icons.check] 的图标）。',8,1);
INSERT INTO widget_fields VALUES(2938,501,'selectedIcon','Widget?','An icon that is used to indicate a segment is selected.','用于指示段被选中的图标。',9,0);
INSERT INTO widget_fields VALUES(2939,502,'data','SegmentedButtonThemeData','Specifies the visual properties used by descendant [SegmentedButton] widgets.','指定后代 [SegmentedButton] 小部件使用的视觉属性。',0,1);
INSERT INTO widget_fields VALUES(2940,503,'magnifierConfiguration','TextMagnifierConfiguration','The configuration for the magnifier used with selections in this region.','此区域中选择使用的放大镜配置。',0,1);
INSERT INTO widget_fields VALUES(2941,503,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',1,0);
INSERT INTO widget_fields VALUES(2942,503,'child','Widget','The child widget this selection area applies to.','此选择区域应用的子小部件。',2,1);
INSERT INTO widget_fields VALUES(2943,503,'contextMenuBuilder','SelectableRegionContextMenuBuilder?','{@macro flutter.widgets.EditableText.contextMenuBuilder}','{@macro flutter.widgets.EditableText.contextMenuBuilder}',3,0);
INSERT INTO widget_fields VALUES(2944,503,'selectionControls','TextSelectionControls','The delegate to build the selection handles and toolbar for mobile devices.','为移动设备构建选择手柄和工具栏的委托。',4,1);
INSERT INTO widget_fields VALUES(2945,503,'onSelectionChanged','ValueChanged<SelectedContent?>?','Called when the selected content changes.','选中内容更改时调用。',5,0);
INSERT INTO widget_fields VALUES(2946,504,'selectionStatusNotifier','ValueListenable<SelectableRegionSelectionStatus>','Tracks updates to the [SelectableRegionSelectionStatus] of the owning [SelectableRegion].','跟踪拥有 [SelectableRegion] 的 [SelectableRegionSelectionStatus] 的更新。',0,1);
INSERT INTO widget_fields VALUES(2947,53,'data','String?','The text to display.','要显示的文本。',0,0);
INSERT INTO widget_fields VALUES(2948,53,'textSpan','TextSpan?','The text to display as a [TextSpan].','要显示为 [TextSpan] 的文本。',1,0);
INSERT INTO widget_fields VALUES(2949,53,'focusNode','FocusNode?','Defines the focus for this widget.','定义此小部件的焦点。',2,0);
INSERT INTO widget_fields VALUES(2950,53,'style','TextStyle?','The style to use for the text.','用于文本的样式。',3,0);
INSERT INTO widget_fields VALUES(2951,53,'strutStyle','StrutStyle?','{@macro flutter.widgets.editableText.strutStyle}','{@macro flutter.widgets.editableText.strutStyle}',4,0);
INSERT INTO widget_fields VALUES(2952,53,'textAlign','TextAlign?','{@macro flutter.widgets.editableText.textAlign}','{@macro flutter.widgets.editableText.textAlign}',5,0);
INSERT INTO widget_fields VALUES(2953,53,'textDirection','TextDirection?','{@macro flutter.widgets.editableText.textDirection}','{@macro flutter.widgets.editableText.textDirection}',6,0);
INSERT INTO widget_fields VALUES(2954,53,'textScaleFactor','double?','{@macro flutter.widgets.editableText.textScaleFactor}','{@macro flutter.widgets.editableText.textScaleFactor}',7,0);
INSERT INTO widget_fields VALUES(2955,53,'textScaler','TextScaler?','{@macro flutter.painting.textPainter.textScaler}','{@macro flutter.painting.textPainter.textScaler}',8,0);
INSERT INTO widget_fields VALUES(2956,53,'autofocus','bool','{@macro flutter.widgets.editableText.autofocus}','{@macro flutter.widgets.editableText.autofocus}',9,1);
INSERT INTO widget_fields VALUES(2957,53,'minLines','int?','{@macro flutter.widgets.editableText.minLines}','{@macro flutter.widgets.editableText.minLines}',10,0);
INSERT INTO widget_fields VALUES(2958,53,'maxLines','int?','{@macro flutter.widgets.editableText.maxLines}','{@macro flutter.widgets.editableText.maxLines}',11,0);
INSERT INTO widget_fields VALUES(2959,53,'showCursor','bool','{@macro flutter.widgets.editableText.showCursor}','{@macro flutter.widgets.editableText.showCursor}',12,1);
INSERT INTO widget_fields VALUES(2960,53,'cursorWidth','double','{@macro flutter.widgets.editableText.cursorWidth}','{@macro flutter.widgets.editableText.cursorWidth}',13,1);
INSERT INTO widget_fields VALUES(2961,53,'cursorHeight','double?','{@macro flutter.widgets.editableText.cursorHeight}','{@macro flutter.widgets.editableText.cursorHeight}',14,0);
INSERT INTO widget_fields VALUES(2962,53,'cursorRadius','Radius?','{@macro flutter.widgets.editableText.cursorRadius}','{@macro flutter.widgets.editableText.cursorRadius}',15,0);
INSERT INTO widget_fields VALUES(2963,53,'cursorColor','Color?','The color of the cursor.','光标的颜色。',16,0);
INSERT INTO widget_fields VALUES(2964,53,'selectionColor','Color?','The color to use when painting the selection.','绘制选择时使用的颜色。',17,0);
INSERT INTO widget_fields VALUES(2965,53,'selectionHeightStyle','ui.BoxHeightStyle','Controls how tall the selection highlight boxes are computed to be.','控制选择高亮框的计算高度。',18,1);
INSERT INTO widget_fields VALUES(2966,53,'selectionWidthStyle','ui.BoxWidthStyle','Controls how wide the selection highlight boxes are computed to be.','控制选择高亮框的计算宽度。',19,1);
INSERT INTO widget_fields VALUES(2967,53,'enableInteractiveSelection','bool','{@macro flutter.widgets.editableText.enableInteractiveSelection}','{@macro flutter.widgets.editableText.enableInteractiveSelection}',20,1);
INSERT INTO widget_fields VALUES(2968,53,'selectionControls','TextSelectionControls?','{@macro flutter.widgets.editableText.selectionControls}','{@macro flutter.widgets.editableText.selectionControls}',21,0);
INSERT INTO widget_fields VALUES(2969,53,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',22,1);
INSERT INTO widget_fields VALUES(2970,53,'toolbarOptions','ToolbarOptions?','Configuration of toolbar options.','工具栏选项的配置。',23,0);
INSERT INTO widget_fields VALUES(2971,53,'onTap','GestureTapCallback?','Called when the user taps on this selectable text.','用户点击此可选择文本时调用。',24,0);
INSERT INTO widget_fields VALUES(2972,53,'scrollPhysics','ScrollPhysics?','{@macro flutter.widgets.editableText.scrollPhysics}','{@macro flutter.widgets.editableText.scrollPhysics}',25,0);
INSERT INTO widget_fields VALUES(2973,53,'scrollBehavior','ScrollBehavior?','{@macro flutter.widgets.editableText.scrollBehavior}','{@macro flutter.widgets.editableText.scrollBehavior}',26,0);
INSERT INTO widget_fields VALUES(2974,53,'semanticsLabel','String?','{@macro flutter.widgets.Text.semanticsLabel}','{@macro flutter.widgets.Text.semanticsLabel}',27,0);
INSERT INTO widget_fields VALUES(2975,53,'textHeightBehavior','TextHeightBehavior?','{@macro dart.ui.textHeightBehavior}','{@macro dart.ui.textHeightBehavior}',28,0);
INSERT INTO widget_fields VALUES(2976,53,'textWidthBasis','TextWidthBasis?','{@macro flutter.painting.textPainter.textWidthBasis}','{@macro flutter.painting.textPainter.textWidthBasis}',29,0);
INSERT INTO widget_fields VALUES(2977,53,'onSelectionChanged','SelectionChangedCallback?','{@macro flutter.widgets.editableText.onSelectionChanged}','{@macro flutter.widgets.editableText.onSelectionChanged}',30,0);
INSERT INTO widget_fields VALUES(2978,53,'contextMenuBuilder','EditableTextContextMenuBuilder?','{@macro flutter.widgets.EditableText.contextMenuBuilder}','{@macro flutter.widgets.EditableText.contextMenuBuilder}',31,0);
INSERT INTO widget_fields VALUES(2979,53,'magnifierConfiguration','TextMagnifierConfiguration?','The configuration for the magnifier used when the text is selected.','选择文本时使用的放大镜配置。',32,0);
INSERT INTO widget_fields VALUES(2980,505,'magnifierConfiguration','TextMagnifierConfiguration?','The configuration for the magnifier in the selection region.','选择区域中放大镜的配置。',0,0);
INSERT INTO widget_fields VALUES(2981,505,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',1,0);
INSERT INTO widget_fields VALUES(2982,505,'selectionControls','TextSelectionControls?','The delegate to build the selection handles and toolbar.','构建选择手柄和工具栏的委托。',2,0);
INSERT INTO widget_fields VALUES(2983,505,'contextMenuBuilder','SelectableRegionContextMenuBuilder?','{@macro flutter.widgets.EditableText.contextMenuBuilder}','{@macro flutter.widgets.EditableText.contextMenuBuilder}',3,0);
INSERT INTO widget_fields VALUES(2984,505,'onSelectionChanged','ValueChanged<SelectedContent?>?','Called when the selected content changes.','选中内容更改时调用。',4,0);
INSERT INTO widget_fields VALUES(2985,505,'child','Widget','The child widget this selection area applies to.','此选择区域应用的子小部件。',5,1);
INSERT INTO widget_fields VALUES(2986,506,'registrar','SelectionRegistrar?','The [SelectionRegistrar] this container is registered to.','此容器注册到的 [SelectionRegistrar]。',0,0);
INSERT INTO widget_fields VALUES(2987,506,'child','Widget','{@macro flutter.widgets.ProxyWidget.child}','{@macro flutter.widgets.ProxyWidget.child}',1,1);
INSERT INTO widget_fields VALUES(2988,506,'delegate','SelectionContainerDelegate?','The delegate for [SelectionEvent]s sent to this selection container.','发送到此选择容器的 [SelectionEvent] 的委托。',2,0);
INSERT INTO widget_fields VALUES(2989,507,'selectionNotifier','SelectionListenerNotifier','Notifies listeners when the selection has changed.','选择更改时通知监听器。',0,1);
INSERT INTO widget_fields VALUES(2990,507,'child','Widget','The child widget this selection listener applies to.','此选择监听器应用的子小部件。',1,1);
INSERT INTO widget_fields VALUES(2991,508,'registrar','SelectionRegistrar?','The [SelectionRegistrar] hosted by this widget.','此小部件托管的 [SelectionRegistrar]。',0,0);
INSERT INTO widget_fields VALUES(2992,509,'properties','SemanticsProperties','Contains properties used by assistive technologies to make the application more accessible.','包含辅助技术用于使应用程序更易于访问的属性。',0,1);
INSERT INTO widget_fields VALUES(2993,509,'container','bool','If [container] is true, this widget will introduce a new node in the semantics tree. Otherwise, the semantics will be merged with the semantics of any ancestors (if the ancestor allows that).','如果 [container] 为 true，此小部件将在语义树中引入新节点。否则，语义将与任何祖先的语义合并（如果祖先允许）。',1,1);
INSERT INTO widget_fields VALUES(2994,509,'explicitChildNodes','bool','Whether descendants of this widget are allowed to add semantic information to the [SemanticsNode] annotated by this widget.','此小部件的后代是否允许向此小部件注释的 [SemanticsNode] 添加语义信息。',2,1);
INSERT INTO widget_fields VALUES(2995,509,'excludeSemantics','bool','Whether to replace all child semantics with this node.','是否用此节点替换所有子语义。',3,1);
INSERT INTO widget_fields VALUES(2996,509,'blockUserActions','bool','Whether to block user interactions for the rendering subtree.','是否阻止渲染子树的用户交互。',4,1);
INSERT INTO widget_fields VALUES(2997,510,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(2998,510,'labelStyle','TextStyle','The [TextStyle] to use when rendering semantics labels.','渲染语义标签时使用的 [TextStyle]。',1,1);
INSERT INTO widget_fields VALUES(2999,277,'shaderCallback','ShaderCallback','Called to create the [dart:ui.Shader] that generates the mask.','调用以创建生成蒙版的 [dart:ui.Shader]。',0,1);
INSERT INTO widget_fields VALUES(3000,277,'blendMode','BlendMode','The [BlendMode] to use when applying the shader to the child.','将着色器应用于子项时使用的 [BlendMode]。',1,1);
INSERT INTO widget_fields VALUES(3001,511,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(3002,512,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(3003,513,'manager','ShortcutManager?','The [ShortcutManager] that will manage the mapping between key combinations and [Action]s.','将管理键组合和 [Action] 之间映射的 [ShortcutManager]。',0,0);
INSERT INTO widget_fields VALUES(3004,513,'child','Widget','The child widget for this [Shortcuts] widget.','此 [Shortcuts] 小部件的子小部件。',1,1);
INSERT INTO widget_fields VALUES(3005,513,'debugLabel','String?','The debug label that is printed for this node when logged.','记录时为此节点打印的调试标签。',2,0);
INSERT INTO widget_fields VALUES(3006,513,'includeSemantics','bool','{@macro flutter.widgets.Focus.includeSemantics}','{@macro flutter.widgets.Focus.includeSemantics}',3,1);
INSERT INTO widget_fields VALUES(3007,343,'axisDirection','AxisDirection','The direction in which the [offset]''s [ViewportOffset.pixels] increases.','[offset] 的 [ViewportOffset.pixels] 增加的方向。',0,1);
INSERT INTO widget_fields VALUES(3008,343,'crossAxisDirection','AxisDirection?','The direction in which child should be laid out in the cross axis.','子项应在交叉轴上布局的方向。',1,0);
INSERT INTO widget_fields VALUES(3009,343,'offset','ViewportOffset','Which part of the content inside the viewport should be visible.','视口内容的哪一部分应该可见。',2,1);
INSERT INTO widget_fields VALUES(3010,343,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',3,1);
INSERT INTO widget_fields VALUES(3011,128,'title','Widget?','The (optional) title of the dialog is displayed in a large font at the top of the dialog.','对话框的（可选）标题以大字体显示在对话框顶部。',0,0);
INSERT INTO widget_fields VALUES(3012,128,'titlePadding','EdgeInsetsGeometry','Padding around the title.','标题周围的内边距。',1,1);
INSERT INTO widget_fields VALUES(3013,128,'titleTextStyle','TextStyle?','Style for the text in the [title] of this [SimpleDialog].','此 [SimpleDialog] 的 [title] 中文本的样式。',2,0);
INSERT INTO widget_fields VALUES(3014,128,'children','List<Widget>?','The (optional) content of the dialog is displayed in a [SingleChildScrollView] underneath the title.','对话框的（可选）内容显示在标题下方的 [SingleChildScrollView] 中。',3,0);
INSERT INTO widget_fields VALUES(3015,128,'contentPadding','EdgeInsetsGeometry','Padding around the content.','内容周围的内边距。',4,1);
INSERT INTO widget_fields VALUES(3016,128,'backgroundColor','Color?','{@macro flutter.material.dialog.backgroundColor}','{@macro flutter.material.dialog.backgroundColor}',5,0);
INSERT INTO widget_fields VALUES(3017,128,'elevation','double?','{@macro flutter.material.dialog.elevation}','{@macro flutter.material.dialog.elevation}',6,0);
INSERT INTO widget_fields VALUES(3018,128,'shadowColor','Color?','{@macro flutter.material.dialog.shadowColor}','{@macro flutter.material.dialog.shadowColor}',7,0);
INSERT INTO widget_fields VALUES(3019,128,'surfaceTintColor','Color?','{@macro flutter.material.dialog.surfaceTintColor}','{@macro flutter.material.dialog.surfaceTintColor}',8,0);
INSERT INTO widget_fields VALUES(3020,128,'semanticLabel','String?','The semantic label of the dialog used by accessibility frameworks to announce screen transitions when the dialog is opened and closed.','辅助功能框架用于在打开和关闭对话框时宣布屏幕转换的对话框语义标签。',9,0);
INSERT INTO widget_fields VALUES(3021,128,'insetPadding','EdgeInsets?','{@macro flutter.material.dialog.insetPadding}','{@macro flutter.material.dialog.insetPadding}',10,0);
INSERT INTO widget_fields VALUES(3022,128,'clipBehavior','Clip?','{@macro flutter.material.dialog.clipBehavior}','{@macro flutter.material.dialog.clipBehavior}',11,0);
INSERT INTO widget_fields VALUES(3023,128,'shape','ShapeBorder?','{@macro flutter.material.dialog.shape}','{@macro flutter.material.dialog.shape}',12,0);
INSERT INTO widget_fields VALUES(3024,128,'alignment','AlignmentGeometry?','{@macro flutter.material.dialog.shape}','{@macro flutter.material.dialog.shape}',13,0);
INSERT INTO widget_fields VALUES(3025,133,'onPressed','VoidCallback?','The callback that is called when this option is selected.','选择此选项时调用的回调。',0,0);
INSERT INTO widget_fields VALUES(3026,133,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,0);
INSERT INTO widget_fields VALUES(3027,133,'padding','EdgeInsets?','The amount of space to surround the [child] with.','围绕 [child] 的空间量。',2,0);
INSERT INTO widget_fields VALUES(3028,514,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,0);
INSERT INTO widget_fields VALUES(3029,164,'scrollDirection','Axis','{@macro flutter.widgets.scroll_view.scrollDirection}','{@macro flutter.widgets.scroll_view.scrollDirection}',0,1);
INSERT INTO widget_fields VALUES(3030,164,'reverse','bool','Whether the scroll view scrolls in the reading direction.','滚动视图是否在阅读方向上滚动。',1,1);
INSERT INTO widget_fields VALUES(3031,164,'padding','EdgeInsetsGeometry?','The amount of space by which to inset the child.','插入子项的空间量。',2,0);
INSERT INTO widget_fields VALUES(3032,164,'controller','ScrollController?','An object that can be used to control the position to which this scroll view is scrolled.','可用于控制此滚动视图滚动到的位置的对象。',3,0);
INSERT INTO widget_fields VALUES(3033,164,'primary','bool?','{@macro flutter.widgets.scroll_view.primary}','{@macro flutter.widgets.scroll_view.primary}',4,0);
INSERT INTO widget_fields VALUES(3034,164,'physics','ScrollPhysics?','How the scroll view should respond to user input.','滚动视图应如何响应用户输入。',5,0);
INSERT INTO widget_fields VALUES(3035,164,'child','Widget?','The widget that scrolls.','滚动的小部件。',6,0);
INSERT INTO widget_fields VALUES(3036,164,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',7,1);
INSERT INTO widget_fields VALUES(3037,164,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',8,1);
INSERT INTO widget_fields VALUES(3038,164,'hitTestBehavior','HitTestBehavior','{@macro flutter.widgets.scrollable.hitTestBehavior}','{@macro flutter.widgets.scrollable.hitTestBehavior}',9,1);
INSERT INTO widget_fields VALUES(3039,164,'restorationId','String?','{@macro flutter.widgets.scrollable.restorationId}','{@macro flutter.widgets.scrollable.restorationId}',10,0);
INSERT INTO widget_fields VALUES(3040,164,'keyboardDismissBehavior','ScrollViewKeyboardDismissBehavior?','{@macro flutter.widgets.scroll_view.keyboardDismissBehavior}','{@macro flutter.widgets.scroll_view.keyboardDismissBehavior}',11,0);
INSERT INTO widget_fields VALUES(3041,76,'width','double?','If non-null, requires the child to have exactly this width.','如果非空，要求子项具有确切的此宽度。',0,0);
INSERT INTO widget_fields VALUES(3042,76,'height','double?','If non-null, requires the child to have exactly this height.','如果非空，要求子项具有确切的此高度。',1,0);
INSERT INTO widget_fields VALUES(3043,84,'alignment','AlignmentGeometry','How to align the child.','如何对齐子项。',0,1);
INSERT INTO widget_fields VALUES(3044,84,'size','Size','The size this widget should attempt to be.','此小部件应尝试达到的大小。',1,1);
INSERT INTO widget_fields VALUES(3045,92,'axis','Axis','[Axis.horizontal] if [sizeFactor] modifies the width, otherwise [Axis.vertical].','如果 [sizeFactor] 修改宽度则为 [Axis.horizontal]，否则为 [Axis.vertical]。',0,1);
INSERT INTO widget_fields VALUES(3046,92,'axisAlignment','double','Describes how to align the child along the axis that [sizeFactor] is modifying.','描述如何沿着 [sizeFactor] 正在修改的轴对齐子项。',1,1);
INSERT INTO widget_fields VALUES(3047,92,'fixedCrossAxisSizeFactor','double?','The factor by which to multiply the cross axis size of the child.','乘以子项交叉轴大小的因子。',2,0);
INSERT INTO widget_fields VALUES(3048,92,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',3,0);
INSERT INTO widget_fields VALUES(3049,42,'value','double','The currently selected value for this slider.','此滑块当前选择的值。',0,1);
INSERT INTO widget_fields VALUES(3050,42,'secondaryTrackValue','double?','The secondary track value for this slider.','此滑块的次要轨道值。',1,0);
INSERT INTO widget_fields VALUES(3051,42,'onChanged','ValueChanged<double>?','Called during a drag when the user is selecting a new value for the slider by dragging.','用户通过拖动为滑块选择新值时在拖动期间调用。',2,0);
INSERT INTO widget_fields VALUES(3052,42,'onChangeStart','ValueChanged<double>?','Called when the user starts selecting a new value for the slider.','用户开始为滑块选择新值时调用。',3,0);
INSERT INTO widget_fields VALUES(3053,42,'onChangeEnd','ValueChanged<double>?','Called when the user is done selecting a new value for the slider.','用户完成为滑块选择新值时调用。',4,0);
INSERT INTO widget_fields VALUES(3054,42,'min','double','The minimum value the user can select.','用户可以选择的最小值。',5,1);
INSERT INTO widget_fields VALUES(3055,42,'max','double','The maximum value the user can select.','用户可以选择的最大值。',6,1);
INSERT INTO widget_fields VALUES(3056,42,'divisions','int?','The number of discrete divisions.','离散分割的数量。',7,0);
INSERT INTO widget_fields VALUES(3057,42,'label','String?','A label to show above the slider when the slider is active and [SliderThemeData.showValueIndicator] is satisfied.','当滑块处于活动状态且满足 [SliderThemeData.showValueIndicator] 时在滑块上方显示的标签。',8,0);
INSERT INTO widget_fields VALUES(3058,42,'activeColor','Color?','The color to use for the portion of the slider track that is active.','用于滑块轨道活动部分的颜色。',9,0);
INSERT INTO widget_fields VALUES(3059,42,'inactiveColor','Color?','The color for the inactive portion of the slider track.','滑块轨道非活动部分的颜色。',10,0);
INSERT INTO widget_fields VALUES(3060,42,'secondaryActiveColor','Color?','The color to use for the portion of the slider track between the thumb and the [Slider.secondaryTrackValue].','用于拇指和 [Slider.secondaryTrackValue] 之间滑块轨道部分的颜色。',11,0);
INSERT INTO widget_fields VALUES(3061,42,'thumbColor','Color?','The color of the thumb.','拇指的颜色。',12,0);
INSERT INTO widget_fields VALUES(3062,42,'overlayColor','MaterialStateProperty<Color?>?','The highlight color that''s typically used to indicate that the slider thumb is focused, hovered, or dragged.','通常用于指示滑块拇指被聚焦、悬停或拖动的高亮颜色。',13,0);
INSERT INTO widget_fields VALUES(3063,42,'mouseCursor','MouseCursor?','{@template flutter.material.slider.mouseCursor} The cursor for a mouse pointer when it enters or is hovering over the widget.','{@template flutter.material.slider.mouseCursor} 鼠标指针进入或悬停在小部件上时的光标。',14,0);
INSERT INTO widget_fields VALUES(3064,42,'semanticFormatterCallback','SemanticFormatterCallback?','The callback used to create a semantic value from a slider value.','用于从滑块值创建语义值的回调。',15,0);
INSERT INTO widget_fields VALUES(3065,42,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',16,0);
INSERT INTO widget_fields VALUES(3066,42,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',17,1);
INSERT INTO widget_fields VALUES(3067,42,'allowedInteraction','SliderInteraction?','Allowed way for the user to interact with the [Slider].','用户与 [Slider] 交互的允许方式。',18,0);
INSERT INTO widget_fields VALUES(3068,42,'padding','EdgeInsetsGeometry?','Determines the padding around the [Slider].','确定 [Slider] 周围的内边距。',19,0);
INSERT INTO widget_fields VALUES(3069,42,'year2023','bool?','When true, the [Slider] will use the 2023 Material Design 3 appearance. Defaults to true.','当为 true 时，[Slider] 将使用 2023 Material Design 3 外观。默认为 true。',20,0);
INSERT INTO widget_fields VALUES(3070,331,'data','SliderThemeData','Specifies the color and shape values for descendant slider widgets.','指定后代滑块小部件的颜色和形状值。',0,1);
INSERT INTO widget_fields VALUES(3071,112,'textDirection','TextDirection?','The direction to use for the x offset described by the [position].','用于 [position] 描述的 x 偏移的方向。',0,0);
INSERT INTO widget_fields VALUES(3072,112,'transformHitTests','bool','Whether hit testing should be affected by the slide animation.','命中测试是否应受滑动动画影响。',1,1);
INSERT INTO widget_fields VALUES(3073,112,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',2,0);
INSERT INTO widget_fields VALUES(3074,515,'gridDelegate','SliverGridDelegate','{@macro flutter.widgets.AnimatedGrid.gridDelegate}','{@macro flutter.widgets.AnimatedGrid.gridDelegate}',0,1);
INSERT INTO widget_fields VALUES(3075,516,'sliver','Widget?','The sliver below this widget in the tree.','树中此小部件下方的 sliver。',0,0);
INSERT INTO widget_fields VALUES(3076,516,'opacity','double','The target opacity.','目标不透明度。',1,1);
INSERT INTO widget_fields VALUES(3077,516,'alwaysIncludeSemantics','bool','Whether the semantic information of the children is always included.','是否始终包含子项的语义信息。',2,1);
INSERT INTO widget_fields VALUES(3078,184,'leading','Widget?','{@macro flutter.material.appbar.leading}','{@macro flutter.material.appbar.leading}',0,0);
INSERT INTO widget_fields VALUES(3079,184,'automaticallyImplyLeading','bool','{@macro flutter.material.appbar.automaticallyImplyLeading}','{@macro flutter.material.appbar.automaticallyImplyLeading}',1,1);
INSERT INTO widget_fields VALUES(3080,184,'title','Widget?','{@macro flutter.material.appbar.title}','{@macro flutter.material.appbar.title}',2,0);
INSERT INTO widget_fields VALUES(3081,184,'actions','List<Widget>?','{@macro flutter.material.appbar.actions}','{@macro flutter.material.appbar.actions}',3,0);
INSERT INTO widget_fields VALUES(3082,184,'flexibleSpace','Widget?','{@macro flutter.material.appbar.flexibleSpace}','{@macro flutter.material.appbar.flexibleSpace}',4,0);
INSERT INTO widget_fields VALUES(3083,184,'bottom','PreferredSizeWidget?','{@macro flutter.material.appbar.bottom}','{@macro flutter.material.appbar.bottom}',5,0);
INSERT INTO widget_fields VALUES(3084,184,'elevation','double?','{@macro flutter.material.appbar.elevation}','{@macro flutter.material.appbar.elevation}',6,0);
INSERT INTO widget_fields VALUES(3085,184,'scrolledUnderElevation','double?','{@macro flutter.material.appbar.scrolledUnderElevation}','{@macro flutter.material.appbar.scrolledUnderElevation}',7,0);
INSERT INTO widget_fields VALUES(3086,184,'shadowColor','Color?','{@macro flutter.material.appbar.shadowColor}','{@macro flutter.material.appbar.shadowColor}',8,0);
INSERT INTO widget_fields VALUES(3087,184,'surfaceTintColor','Color?','{@macro flutter.material.appbar.surfaceTintColor}','{@macro flutter.material.appbar.surfaceTintColor}',9,0);
INSERT INTO widget_fields VALUES(3088,184,'forceElevated','bool','Whether to show the shadow appropriate for the [elevation] even if the content is not scrolled under the [AppBar].','即使内容未滚动到 [AppBar] 下方，是否显示适合 [elevation] 的阴影。',10,1);
INSERT INTO widget_fields VALUES(3089,184,'backgroundColor','Color?','{@macro flutter.material.appbar.backgroundColor}','{@macro flutter.material.appbar.backgroundColor}',11,0);
INSERT INTO widget_fields VALUES(3090,184,'foregroundColor','Color?','{@macro flutter.material.appbar.foregroundColor}','{@macro flutter.material.appbar.foregroundColor}',12,0);
INSERT INTO widget_fields VALUES(3091,184,'iconTheme','IconThemeData?','{@macro flutter.material.appbar.iconTheme}','{@macro flutter.material.appbar.iconTheme}',13,0);
INSERT INTO widget_fields VALUES(3092,184,'actionsIconTheme','IconThemeData?','{@macro flutter.material.appbar.actionsIconTheme}','{@macro flutter.material.appbar.actionsIconTheme}',14,0);
INSERT INTO widget_fields VALUES(3093,184,'primary','bool','{@macro flutter.material.appbar.primary}','{@macro flutter.material.appbar.primary}',15,1);
INSERT INTO widget_fields VALUES(3094,184,'centerTitle','bool?','{@macro flutter.material.appbar.centerTitle}','{@macro flutter.material.appbar.centerTitle}',16,0);
INSERT INTO widget_fields VALUES(3095,184,'excludeHeaderSemantics','bool','{@macro flutter.material.appbar.excludeHeaderSemantics}','{@macro flutter.material.appbar.excludeHeaderSemantics}',17,1);
INSERT INTO widget_fields VALUES(3096,184,'titleSpacing','double?','{@macro flutter.material.appbar.titleSpacing}','{@macro flutter.material.appbar.titleSpacing}',18,0);
INSERT INTO widget_fields VALUES(3097,184,'collapsedHeight','double?','Defines the height of the app bar when it is collapsed.','定义应用栏折叠时的高度。',19,0);
INSERT INTO widget_fields VALUES(3098,184,'expandedHeight','double?','The size of the app bar when it is fully expanded.','应用栏完全展开时的大小。',20,0);
INSERT INTO widget_fields VALUES(3099,184,'floating','bool','Whether the app bar should become visible as soon as the user scrolls towards the app bar.','用户向应用栏滚动时应用栏是否应立即变为可见。',21,1);
INSERT INTO widget_fields VALUES(3100,184,'pinned','bool','Whether the app bar should remain visible at the start of the scroll view.','应用栏是否应在滚动视图的开始处保持可见。',22,1);
INSERT INTO widget_fields VALUES(3101,184,'shape','ShapeBorder?','{@macro flutter.material.appbar.shape}','{@macro flutter.material.appbar.shape}',23,0);
INSERT INTO widget_fields VALUES(3102,184,'snap','bool','If [snap] and [floating] are true then the floating app bar will "snap" into view.','如果 [snap] 和 [floating] 都为 true，则浮动应用栏将',24,1);
INSERT INTO widget_fields VALUES(3103,184,'stretch','bool','Whether the app bar should stretch to fill the over-scroll area.','应用栏是否应拉伸以填充过度滚动区域。',25,1);
INSERT INTO widget_fields VALUES(3104,184,'stretchTriggerOffset','double','The offset of overscroll required to activate [onStretchTrigger].','激活 [onStretchTrigger] 所需的过度滚动偏移。',26,1);
INSERT INTO widget_fields VALUES(3105,184,'onStretchTrigger','AsyncCallback?','The callback function to be executed when a user over-scrolls to the offset specified by [stretchTriggerOffset].','当用户过度滚动到 [stretchTriggerOffset] 指定的偏移时要执行的回调函数。',27,0);
INSERT INTO widget_fields VALUES(3106,184,'toolbarHeight','double','{@macro flutter.material.appbar.toolbarHeight}','{@macro flutter.material.appbar.toolbarHeight}',28,1);
INSERT INTO widget_fields VALUES(3107,184,'leadingWidth','double?','{@macro flutter.material.appbar.leadingWidth}','{@macro flutter.material.appbar.leadingWidth}',29,0);
INSERT INTO widget_fields VALUES(3108,184,'toolbarTextStyle','TextStyle?','{@macro flutter.material.appbar.toolbarTextStyle}','{@macro flutter.material.appbar.toolbarTextStyle}',30,0);
INSERT INTO widget_fields VALUES(3109,184,'titleTextStyle','TextStyle?','{@macro flutter.material.appbar.titleTextStyle}','{@macro flutter.material.appbar.titleTextStyle}',31,0);
INSERT INTO widget_fields VALUES(3110,184,'systemOverlayStyle','SystemUiOverlayStyle?','{@macro flutter.material.appbar.systemOverlayStyle}','{@macro flutter.material.appbar.systemOverlayStyle}',32,0);
INSERT INTO widget_fields VALUES(3111,184,'forceMaterialTransparency','bool','{@macro flutter.material.appbar.forceMaterialTransparency}','{@macro flutter.material.appbar.forceMaterialTransparency}',33,1);
INSERT INTO widget_fields VALUES(3112,184,'useDefaultSemanticsOrder','bool','{@macro flutter.material.appbar.useDefaultSemanticsOrder}','{@macro flutter.material.appbar.useDefaultSemanticsOrder}',34,1);
INSERT INTO widget_fields VALUES(3113,184,'clipBehavior','Clip?','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',35,0);
INSERT INTO widget_fields VALUES(3114,184,'actionsPadding','EdgeInsetsGeometry?','{@macro flutter.material.appbar.actionsPadding}','{@macro flutter.material.appbar.actionsPadding}',36,0);
INSERT INTO widget_fields VALUES(3115,270,'maxExtent','double','The cross axis extent to apply to the sliver child.','应用于 sliver 子项的交叉轴范围。',0,1);
INSERT INTO widget_fields VALUES(3116,270,'sliver','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,1);
INSERT INTO widget_fields VALUES(3117,271,'flex','int','Flex value for allocating cross axis extent left after laying out the children with constrained cross axis. The children with flex values will have the remaining extent allocated proportionally to their flex value. This must an integer between 0 and infinity, exclusive.','在布局具有约束交叉轴的子项后，用于分配剩余交叉轴范围的弹性值。具有弹性值的子项将按其弹性值的比例分配剩余范围。这必须是 0 和无穷大之间的整数，不包括边界。',0,1);
INSERT INTO widget_fields VALUES(3118,518,'opacity','Animation<double>','The animation that controls the opacity of the sliver child.','控制 sliver 子项不透明度的动画。',0,1);
INSERT INTO widget_fields VALUES(3119,518,'alwaysIncludeSemantics','bool','Whether the semantic information of the sliver child is always included.','是否始终包含 sliver 子项的语义信息。',1,1);
INSERT INTO widget_fields VALUES(3120,306,'child','Widget?','Box child widget that fills the remaining space in the viewport.','填充视口中剩余空间的框子小部件。',0,0);
INSERT INTO widget_fields VALUES(3121,306,'hasScrollBody','bool','Indicates whether the child has a scrollable body, this value cannot be null.','指示子项是否具有可滚动主体，此值不能为 null。',1,1);
INSERT INTO widget_fields VALUES(3122,306,'fillOverscroll','bool','Indicates whether the child should stretch to fill the overscroll area created by certain scroll physics, such as iOS'' default scroll physics. This flag is only relevant when [hasScrollBody] is false.','指示子项是否应拉伸以填充由某些滚动物理（如 iOS 的默认滚动物理）创建的过度滚动区域。此标志仅在 [hasScrollBody] 为 false 时相关。',2,1);
INSERT INTO widget_fields VALUES(3123,187,'viewportFraction','double','The fraction of the viewport that each child should fill in the main axis.','每个子项在主轴上应填充的视口分数。',0,1);
INSERT INTO widget_fields VALUES(3124,187,'padEnds','bool','Whether to add padding to both ends of the list.','是否在列表的两端添加内边距。',1,1);
INSERT INTO widget_fields VALUES(3125,187,'delegate','SliverChildDelegate','{@macro flutter.widgets.SliverMultiBoxAdaptorWidget.delegate}','{@macro flutter.widgets.SliverMultiBoxAdaptorWidget.delegate}',2,1);
INSERT INTO widget_fields VALUES(3126,186,'itemExtent','double','The extent the children are forced to have in the main axis.','子项在主轴上被强制具有的范围。',0,1);
INSERT INTO widget_fields VALUES(3127,519,'animationStyle','AnimationStyle?','Non null properties override the default durations (300ms) and curves (Curves.easeInOut) for subsequent header animations.','非空属性覆盖后续标题动画的默认持续时间（300ms）和曲线（Curves.easeInOut）。',0,0);
INSERT INTO widget_fields VALUES(3128,519,'snapMode','FloatingHeaderSnapMode?','Specifies how a partially visible [SliverFloatingHeader] animates into a view when a user scroll gesture ends.','指定当用户滚动手势结束时，部分可见的 [SliverFloatingHeader] 如何动画进入视图。',1,0);
INSERT INTO widget_fields VALUES(3129,519,'child','Widget','The widget contained by this sliver.','此 sliver 包含的小部件。',2,1);
INSERT INTO widget_fields VALUES(3130,188,'gridDelegate','SliverGridDelegate','The delegate that controls the size and position of the children.','控制子项大小和位置的委托。',0,1);
INSERT INTO widget_fields VALUES(3131,305,'ignoring','bool','Whether this sliver is ignored during hit testing.','此 sliver 在命中测试期间是否被忽略。',0,1);
INSERT INTO widget_fields VALUES(3132,305,'ignoringSemantics','bool?','Whether the semantics of this sliver is ignored when compiling the semantics tree.','编译语义树时是否忽略此 sliver 的语义。',1,0);
INSERT INTO widget_fields VALUES(3133,520,'delegate','SliverChildDelegate','{@template flutter.widgets.SliverMultiBoxAdaptorWidget.delegate} The delegate that provides the children for this widget.','{@template flutter.widgets.SliverMultiBoxAdaptorWidget.delegate} 为此小部件提供子项的委托。',0,1);
INSERT INTO widget_fields VALUES(3134,521,'offstage','bool','Whether the sliver child is hidden from the rest of the tree.','sliver 子项是否从树的其余部分隐藏。',0,1);
INSERT INTO widget_fields VALUES(3135,192,'opacity','double','The fraction to scale the sliver child''s alpha value.','缩放 sliver 子项 alpha 值的分数。',0,1);
INSERT INTO widget_fields VALUES(3136,192,'alwaysIncludeSemantics','bool','Whether the semantic information of the sliver child is always included.','是否始终包含 sliver 子项的语义信息。',1,1);
INSERT INTO widget_fields VALUES(3137,307,'handle','SliverOverlapAbsorberHandle','The object in which the absorbed overlap is recorded.','记录吸收重叠的对象。',0,1);
INSERT INTO widget_fields VALUES(3138,308,'handle','SliverOverlapAbsorberHandle','The handle to the [SliverOverlapAbsorber] that is feeding this injector.','正在为此注入器提供数据的 [SliverOverlapAbsorber] 的句柄。',0,1);
INSERT INTO widget_fields VALUES(3139,191,'padding','EdgeInsetsGeometry','The amount of space by which to inset the child sliver.','插入子 sliver 的空间量。',0,1);
INSERT INTO widget_fields VALUES(3140,190,'delegate','SliverPersistentHeaderDelegate','Configuration for the sliver''s layout.','sliver 布局的配置。',0,1);
INSERT INTO widget_fields VALUES(3141,190,'pinned','bool','Whether to stick the header to the start of the viewport once it has reached its minimum size.','标题达到最小大小后是否粘贴到视口的开始处。',1,1);
INSERT INTO widget_fields VALUES(3142,190,'floating','bool','Whether the header should immediately grow again if the user reverses scroll direction.','如果用户反转滚动方向，标题是否应立即再次增长。',2,1);
INSERT INTO widget_fields VALUES(3143,314,'prototypeItem','Widget','Defines the main axis extent of all of this sliver''s children.','定义此 sliver 所有子项的主轴范围。',0,1);
INSERT INTO widget_fields VALUES(3144,522,'itemBuilder','IndexedWidgetBuilder','{@macro flutter.widgets.reorderable_list.itemBuilder}','{@macro flutter.widgets.reorderable_list.itemBuilder}',0,1);
INSERT INTO widget_fields VALUES(3145,522,'findChildIndexCallback','ChildIndexGetter?','{@macro flutter.widgets.SliverChildBuilderDelegate.findChildIndexCallback}','{@macro flutter.widgets.SliverChildBuilderDelegate.findChildIndexCallback}',1,0);
INSERT INTO widget_fields VALUES(3146,522,'itemCount','int','{@macro flutter.widgets.reorderable_list.itemCount}','{@macro flutter.widgets.reorderable_list.itemCount}',2,1);
INSERT INTO widget_fields VALUES(3147,522,'onReorder','ReorderCallback','{@macro flutter.widgets.reorderable_list.onReorder}','{@macro flutter.widgets.reorderable_list.onReorder}',3,1);
INSERT INTO widget_fields VALUES(3148,522,'onReorderStart','void Function(int)?','{@macro flutter.widgets.reorderable_list.onReorderStart}','{@macro flutter.widgets.reorderable_list.onReorderStart}',4,0);
INSERT INTO widget_fields VALUES(3149,522,'onReorderEnd','void Function(int)?','{@macro flutter.widgets.reorderable_list.onReorderEnd}','{@macro flutter.widgets.reorderable_list.onReorderEnd}',5,0);
INSERT INTO widget_fields VALUES(3150,522,'proxyDecorator','ReorderItemProxyDecorator?','{@macro flutter.widgets.reorderable_list.proxyDecorator}','{@macro flutter.widgets.reorderable_list.proxyDecorator}',6,0);
INSERT INTO widget_fields VALUES(3151,522,'itemExtent','double?','{@macro flutter.widgets.list_view.itemExtent}','{@macro flutter.widgets.list_view.itemExtent}',7,0);
INSERT INTO widget_fields VALUES(3152,522,'itemExtentBuilder','ItemExtentBuilder?','{@macro flutter.widgets.list_view.itemExtentBuilder}','{@macro flutter.widgets.list_view.itemExtentBuilder}',8,0);
INSERT INTO widget_fields VALUES(3153,522,'prototypeItem','Widget?','{@macro flutter.widgets.list_view.prototypeItem}','{@macro flutter.widgets.list_view.prototypeItem}',9,0);
INSERT INTO widget_fields VALUES(3154,522,'autoScrollerVelocityScalar','double','{@macro flutter.widgets.EdgeDraggingAutoScroller.velocityScalar}','{@macro flutter.widgets.EdgeDraggingAutoScroller.velocityScalar}',10,1);
INSERT INTO widget_fields VALUES(3155,522,'dragBoundaryProvider','ReorderDragBoundaryProvider?','{@macro flutter.widgets.reorderable_list.dragBoundaryProvider}','{@macro flutter.widgets.reorderable_list.dragBoundaryProvider}',11,0);
INSERT INTO widget_fields VALUES(3156,523,'minExtentPrototype','Widget?','Laid out once to define the minimum size of this sliver along the [CustomScrollView.scrollDirection] axis.','布局一次以定义此 sliver 沿 [CustomScrollView.scrollDirection] 轴的最小大小。',0,0);
INSERT INTO widget_fields VALUES(3157,523,'maxExtentPrototype','Widget?','Laid out once to define the maximum size of this sliver along the [CustomScrollView.scrollDirection] axis.','布局一次以定义此 sliver 沿 [CustomScrollView.scrollDirection] 轴的最大大小。',1,0);
INSERT INTO widget_fields VALUES(3158,523,'child','Widget?','The widget contained by this sliver.','此 sliver 包含的小部件。',2,0);
INSERT INTO widget_fields VALUES(3159,524,'left','bool','Whether to avoid system intrusions on the left.','是否避免左侧的系统入侵。',0,1);
INSERT INTO widget_fields VALUES(3160,524,'top','bool','Whether to avoid system intrusions at the top of the screen, typically the system status bar.','是否避免屏幕顶部的系统入侵，通常是系统状态栏。',1,1);
INSERT INTO widget_fields VALUES(3161,524,'right','bool','Whether to avoid system intrusions on the right.','是否避免右侧的系统入侵。',2,1);
INSERT INTO widget_fields VALUES(3162,524,'bottom','bool','Whether to avoid system intrusions on the bottom side of the screen.','是否避免屏幕底部的系统入侵。',3,1);
INSERT INTO widget_fields VALUES(3163,524,'minimum','EdgeInsets','This minimum padding to apply.','要应用的最小内边距。',4,1);
INSERT INTO widget_fields VALUES(3164,524,'sliver','Widget','The sliver below this sliver in the tree.','树中此 sliver 下方的 sliver。',5,1);
INSERT INTO widget_fields VALUES(3165,525,'itemExtentBuilder','ItemExtentBuilder','The children extent builder.','子项范围构建器。',0,1);
INSERT INTO widget_fields VALUES(3166,526,'sliver','Widget','The sliver to show or hide, as controlled by [visible].','要显示或隐藏的 sliver，由 [visible] 控制。',0,1);
INSERT INTO widget_fields VALUES(3167,526,'replacementSliver','Widget','The widget to use when the sliver child is not [visible], assuming that none of the `maintain` flags (in particular, [maintainState]) are set.','当 sliver 子项不 [visible] 时使用的小部件，假设没有设置任何 `maintain` 标志（特别是 [maintainState]）。',1,1);
INSERT INTO widget_fields VALUES(3168,526,'visible','bool','Switches between showing the [sliver] or hiding it.','在显示 [sliver] 或隐藏它之间切换。',2,1);
INSERT INTO widget_fields VALUES(3169,526,'maintainState','bool','Whether to maintain the [State] objects of the [sliver] subtree when it is not [visible].','当 [sliver] 子树不 [visible] 时是否维护其 [State] 对象。',3,1);
INSERT INTO widget_fields VALUES(3170,526,'maintainAnimation','bool','Whether to maintain animations within the [sliver] subtree when it is not [visible].','当 [sliver] 子树不 [visible] 时是否维护其中的动画。',4,1);
INSERT INTO widget_fields VALUES(3171,526,'maintainSize','bool','Whether to maintain space for where the sliver would have been.','是否为 sliver 本来所在的位置维护空间。',5,1);
INSERT INTO widget_fields VALUES(3172,526,'maintainSemantics','bool','Whether to maintain the semantics for the sliver when it is hidden (e.g. for accessibility).','当 sliver 隐藏时是否维护其语义（例如用于辅助功能）。',6,1);
INSERT INTO widget_fields VALUES(3173,526,'maintainInteractivity','bool','Whether to allow the sliver to be interactive when hidden.','隐藏时是否允许 sliver 可交互。',7,1);
INSERT INTO widget_fields VALUES(3174,140,'content','Widget','The primary content of the snack bar.','快餐栏的主要内容。',0,1);
INSERT INTO widget_fields VALUES(3175,140,'backgroundColor','Color?','The snack bar''s background color.','快餐栏的背景颜色。',1,0);
INSERT INTO widget_fields VALUES(3176,140,'elevation','double?','The z-coordinate at which to place the snack bar. This controls the size of the shadow below the snack bar.','放置快餐栏的 z 坐标。这控制快餐栏下方阴影的大小。',2,0);
INSERT INTO widget_fields VALUES(3177,140,'margin','EdgeInsetsGeometry?','Empty space to surround the snack bar.','围绕快餐栏的空白空间。',3,0);
INSERT INTO widget_fields VALUES(3178,140,'padding','EdgeInsetsGeometry?','The amount of padding to apply to the snack bar''s content and optional action.','应用于快餐栏内容和可选操作的内边距量。',4,0);
INSERT INTO widget_fields VALUES(3179,140,'width','double?','The width of the snack bar.','快餐栏的宽度。',5,0);
INSERT INTO widget_fields VALUES(3180,140,'shape','ShapeBorder?','The shape of the snack bar''s [Material].','快餐栏的 [Material] 的形状。',6,0);
INSERT INTO widget_fields VALUES(3181,140,'hitTestBehavior','HitTestBehavior?','Defines how the snack bar area, including margin, will behave during hit testing.','定义快餐栏区域（包括边距）在命中测试期间的行为方式。',7,0);
INSERT INTO widget_fields VALUES(3182,140,'behavior','SnackBarBehavior?','This defines the behavior and location of the snack bar.','这定义了快餐栏的行为和位置。',8,0);
INSERT INTO widget_fields VALUES(3183,140,'action','SnackBarAction?','(optional) An action that the user can take based on the snack bar.','（可选）用户可以基于快餐栏采取的操作。',9,0);
INSERT INTO widget_fields VALUES(3184,140,'actionOverflowThreshold','double?','(optional) The percentage threshold for action widget''s width before it overflows to a new line.','（可选）操作小部件宽度在溢出到新行之前的百分比阈值。',10,0);
INSERT INTO widget_fields VALUES(3185,140,'showCloseIcon','bool?','(optional) Whether to include a "close" icon widget.','（可选）是否包含',11,0);
INSERT INTO widget_fields VALUES(3186,140,'closeIconColor','Color?','An optional color for the close icon, if [showCloseIcon] is true.','如果 [showCloseIcon] 为 true，关闭图标的可选颜色。',12,0);
INSERT INTO widget_fields VALUES(3187,140,'duration','Duration','The amount of time the snack bar should be displayed.','快餐栏应显示的时间量。',13,1);
INSERT INTO widget_fields VALUES(3188,140,'animation','Animation<double>?','The animation driving the entrance and exit of the snack bar.','驱动快餐栏进入和退出的动画。',14,0);
INSERT INTO widget_fields VALUES(3189,140,'onVisible','VoidCallback?','Called the first time that the snackbar is visible within a [Scaffold].','快餐栏在 [Scaffold] 中首次可见时调用。',15,0);
INSERT INTO widget_fields VALUES(3190,140,'dismissDirection','DismissDirection?','The direction in which the SnackBar can be dismissed.','SnackBar 可以被关闭的方向。',16,0);
INSERT INTO widget_fields VALUES(3191,140,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',17,1);
INSERT INTO widget_fields VALUES(3192,141,'textColor','Color?','The button label color. If not provided, defaults to [SnackBarThemeData.actionTextColor].','按钮标签颜色。如果未提供，默认为 [SnackBarThemeData.actionTextColor]。',0,0);
INSERT INTO widget_fields VALUES(3193,141,'backgroundColor','Color?','The button background fill color. If not provided, defaults to [SnackBarThemeData.actionBackgroundColor].','按钮背景填充颜色。如果未提供，默认为 [SnackBarThemeData.actionBackgroundColor]。',1,0);
INSERT INTO widget_fields VALUES(3194,141,'disabledTextColor','Color?','The button disabled label color. This color is shown after the [SnackBarAction] is dismissed.','按钮禁用标签颜色。此颜色在 [SnackBarAction] 被关闭后显示。',2,0);
INSERT INTO widget_fields VALUES(3195,141,'disabledBackgroundColor','Color?','The button disabled background color. This color is shown after the [SnackBarAction] is dismissed.','按钮禁用背景颜色。此颜色在 [SnackBarAction] 被关闭后显示。',3,0);
INSERT INTO widget_fields VALUES(3196,141,'label','String','The button label.','按钮标签。',4,1);
INSERT INTO widget_fields VALUES(3197,141,'onPressed','VoidCallback','The callback to be called when the button is pressed.','按下按钮时要调用的回调。',5,1);
INSERT INTO widget_fields VALUES(3198,528,'controller','SnapshotController','The controller that determines when to display the children as a snapshot.','确定何时将子项显示为快照的控制器。',0,1);
INSERT INTO widget_fields VALUES(3199,528,'mode','SnapshotMode','Configuration that controls how the snapshot widget decides to paint its children.','控制快照小部件如何决定绘制其子项的配置。',1,1);
INSERT INTO widget_fields VALUES(3200,528,'autoresize','bool','Whether or not changes in render object size should automatically re-create the snapshot.','渲染对象大小的更改是否应自动重新创建快照。',2,1);
INSERT INTO widget_fields VALUES(3201,528,'painter','SnapshotPainter','The painter used to paint the child snapshot or child widgets.','用于绘制子快照或子小部件的绘制器。',3,1);
INSERT INTO widget_fields VALUES(3202,107,'flex','int','The flex factor to use in determining how much space to take up.','用于确定占用多少空间的弹性因子。',0,1);
INSERT INTO widget_fields VALUES(3203,529,'anchor','Offset','{@template flutter.material.SpellCheckSuggestionsToolbar.anchor} The focal point below which the toolbar attempts to position itself. {@endtemplate}','{@template flutter.material.SpellCheckSuggestionsToolbar.anchor} 工具栏尝试定位自己的焦点下方。{@endtemplate}',0,1);
INSERT INTO widget_fields VALUES(3204,529,'buttonItems','List<ContextMenuButtonItem>','The [ContextMenuButtonItem]s that will be turned into the correct button widgets and displayed in the spell check suggestions toolbar.','将转换为正确按钮小部件并显示在拼写检查建议工具栏中的 [ContextMenuButtonItem]。',1,1);
INSERT INTO widget_fields VALUES(3205,97,'alignment','AlignmentGeometry','How to align the non-positioned and partially-positioned children in the stack.','如何在堆栈中对齐非定位和部分定位的子项。',0,1);
INSERT INTO widget_fields VALUES(3206,97,'textDirection','TextDirection?','The text direction with which to resolve [alignment].','用于解析 [alignment] 的文本方向。',1,0);
INSERT INTO widget_fields VALUES(3207,97,'fit','StackFit','How to size the non-positioned children in the stack.','如何调整堆栈中非定位子项的大小。',2,1);
INSERT INTO widget_fields VALUES(3208,97,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',3,1);
INSERT INTO widget_fields VALUES(3209,242,'builder','StatefulWidgetBuilder','Called to obtain the child widget.','调用以获取子小部件。',0,1);
INSERT INTO widget_fields VALUES(3210,233,'animation','Animation<double>','The animation to which this widget is listening.','此小部件正在监听的动画。',0,1);
INSERT INTO widget_fields VALUES(3211,200,'steps','List<Step>','The steps of the stepper whose titles, subtitles, icons always get shown.','步进器的步骤，其标题、副标题、图标始终显示。',0,1);
INSERT INTO widget_fields VALUES(3212,200,'physics','ScrollPhysics?','How the stepper''s scroll view should respond to user input.','步进器的滚动视图应如何响应用户输入。',1,0);
INSERT INTO widget_fields VALUES(3213,200,'controller','ScrollController?','An object that can be used to control the position to which this scroll view is scrolled.','可用于控制此滚动视图滚动到的位置的对象。',2,0);
INSERT INTO widget_fields VALUES(3214,200,'type','StepperType','The type of stepper that determines the layout. In the case of [StepperType.horizontal], the content of the current step is displayed underneath as opposed to the [StepperType.vertical] case where it is displayed in-between.','确定布局的步进器类型。在 [StepperType.horizontal] 的情况下，当前步骤的内容显示在下方，而不是 [StepperType.vertical] 情况下显示在中间。',3,1);
INSERT INTO widget_fields VALUES(3215,200,'currentStep','int','The index into [steps] of the current step whose content is displayed.','显示其内容的当前步骤在 [steps] 中的索引。',4,1);
INSERT INTO widget_fields VALUES(3216,200,'onStepTapped','ValueChanged<int>?','The callback called when a step is tapped, with its index passed as an argument.','点击步骤时调用的回调，将其索引作为参数传递。',5,0);
INSERT INTO widget_fields VALUES(3217,200,'onStepContinue','VoidCallback?','The callback called when the ''continue'' button is tapped.','点击',6,0);
INSERT INTO widget_fields VALUES(3218,200,'onStepCancel','VoidCallback?','The callback called when the ''cancel'' button is tapped.','点击',7,0);
INSERT INTO widget_fields VALUES(3219,200,'controlsBuilder','ControlsWidgetBuilder?','The callback for creating custom controls.','创建自定义控件的回调。',8,0);
INSERT INTO widget_fields VALUES(3220,200,'elevation','double?','The elevation of this stepper''s [Material] when [type] is [StepperType.horizontal].','当 [type] 为 [StepperType.horizontal] 时此步进器的 [Material] 的高度。',9,0);
INSERT INTO widget_fields VALUES(3221,200,'margin','EdgeInsetsGeometry?','Custom margin on vertical stepper.','垂直步进器上的自定义边距。',10,0);
INSERT INTO widget_fields VALUES(3222,200,'connectorColor','MaterialStateProperty<Color>?','Customize connected lines colors.','自定义连接线颜色。',11,0);
INSERT INTO widget_fields VALUES(3223,200,'connectorThickness','double?','The thickness of the connecting lines.','连接线的厚度。',12,0);
INSERT INTO widget_fields VALUES(3224,200,'stepIconBuilder','StepIconBuilder?','Callback for creating custom icons for the [steps].','为 [steps] 创建自定义图标的回调。',13,0);
INSERT INTO widget_fields VALUES(3225,200,'stepIconHeight','double?','Overrides the default step icon size height.','覆盖默认步骤图标大小高度。',14,0);
INSERT INTO widget_fields VALUES(3226,200,'stepIconWidth','double?','Overrides the default step icon size width.','覆盖默认步骤图标大小宽度。',15,0);
INSERT INTO widget_fields VALUES(3227,200,'stepIconMargin','EdgeInsets?','Overrides the default step icon margin.','覆盖默认步骤图标边距。',16,0);
INSERT INTO widget_fields VALUES(3228,200,'clipBehavior','Clip','The [Step.content] will be clipped to this Clip type.','[Step.content] 将被裁剪到此 Clip 类型。',17,1);
INSERT INTO widget_fields VALUES(3229,173,'builder','AsyncWidgetBuilder<T>','The build strategy currently used by this builder.','此构建器当前使用的构建策略。',0,1);
INSERT INTO widget_fields VALUES(3230,173,'initialData','T?','The data that will be used to create the initial snapshot.','将用于创建初始快照的数据。',1,0);
INSERT INTO widget_fields VALUES(3231,532,'stream','Stream<T>?','The asynchronous computation to which this builder is currently connected, possibly null. When changed, the current summary is updated using [afterDisconnected], if the previous stream was not null, followed by [afterConnected], if the new stream is not null.','此构建器当前连接的异步计算，可能为 null。更改时，如果先前的流不为 null，则使用 [afterDisconnected] 更新当前摘要，如果新流不为 null，则使用 [afterConnected]。',0,0);
INSERT INTO widget_fields VALUES(3232,533,'axisDirection','AxisDirection','{@macro flutter.overscroll.axisDirection}','{@macro flutter.overscroll.axisDirection}',0,1);
INSERT INTO widget_fields VALUES(3233,533,'notificationPredicate','ScrollNotificationPredicate','{@macro flutter.overscroll.notificationPredicate}','{@macro flutter.overscroll.notificationPredicate}',1,1);
INSERT INTO widget_fields VALUES(3234,533,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',2,1);
INSERT INTO widget_fields VALUES(3235,533,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',3,0);
INSERT INTO widget_fields VALUES(3236,534,'onHover','ValueChanged<bool>?','Called when a pointer enters or exits the button response area.','指针进入或退出按钮响应区域时调用。',0,0);
INSERT INTO widget_fields VALUES(3237,534,'onFocusChange','ValueChanged<bool>?','Handler called when the focus changes.','焦点更改时调用的处理程序。',1,0);
INSERT INTO widget_fields VALUES(3238,534,'onOpen','VoidCallback?','A callback that is invoked when the menu is opened.','菜单打开时调用的回调。',2,0);
INSERT INTO widget_fields VALUES(3239,534,'onClose','VoidCallback?','A callback that is invoked when the menu is closed.','菜单关闭时调用的回调。',3,0);
INSERT INTO widget_fields VALUES(3240,534,'controller','MenuController?','An optional [MenuController] for this submenu.','此子菜单的可选 [MenuController]。',4,0);
INSERT INTO widget_fields VALUES(3241,534,'style','ButtonStyle?','Customizes this button''s appearance.','自定义此按钮的外观。',5,0);
INSERT INTO widget_fields VALUES(3242,534,'menuStyle','MenuStyle?','The [MenuStyle] of the menu specified by [menuChildren].','由 [menuChildren] 指定的菜单的 [MenuStyle]。',6,0);
INSERT INTO widget_fields VALUES(3243,534,'alignmentOffset','Offset?','The offset of the menu relative to the alignment origin determined by [MenuStyle.alignment] on the [style] attribute.','菜单相对于由 [style] 属性上的 [MenuStyle.alignment] 确定的对齐原点的偏移。',7,0);
INSERT INTO widget_fields VALUES(3244,534,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',8,1);
INSERT INTO widget_fields VALUES(3245,534,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',9,0);
INSERT INTO widget_fields VALUES(3246,534,'statesController','MaterialStatesController?','{@macro flutter.material.inkwell.statesController}','{@macro flutter.material.inkwell.statesController}',10,0);
INSERT INTO widget_fields VALUES(3247,534,'leadingIcon','Widget?','An optional icon to display before the [child].','在 [child] 之前显示的可选图标。',11,0);
INSERT INTO widget_fields VALUES(3248,534,'submenuIcon','MaterialStateProperty<Widget?>?','If provided, the widget replaces the default [SubmenuButton] arrow icon.','如果提供，小部件将替换默认的 [SubmenuButton] 箭头图标。',12,0);
INSERT INTO widget_fields VALUES(3249,534,'trailingIcon','Widget?','An optional icon to display after the [child].','在 [child] 之后显示的可选图标。',13,0);
INSERT INTO widget_fields VALUES(3250,534,'useRootOverlay','bool','{@macro flutter.widgets.RawMenuAnchor.useRootOverlay}','{@macro flutter.widgets.RawMenuAnchor.useRootOverlay}',14,1);
INSERT INTO widget_fields VALUES(3251,534,'menuChildren','List<Widget>','The list of widgets that appear in the menu when it is opened.','菜单打开时出现在菜单中的小部件列表。',15,1);
INSERT INTO widget_fields VALUES(3252,534,'child','Widget?','The widget displayed in the middle portion of this button.','显示在此按钮中间部分的小部件。',16,0);
INSERT INTO widget_fields VALUES(3253,40,'value','bool','Whether this switch is on or off.','此开关是打开还是关闭。',0,1);
INSERT INTO widget_fields VALUES(3254,40,'onChanged','ValueChanged<bool>?','Called when the user toggles the switch on or off.','用户打开或关闭开关时调用。',1,0);
INSERT INTO widget_fields VALUES(3255,40,'activeColor','Color?','{@template flutter.material.switch.activeColor} The color to use when this switch is on. {@endtemplate}','{@template flutter.material.switch.activeColor} 此开关打开时使用的颜色。{@endtemplate}',2,0);
INSERT INTO widget_fields VALUES(3256,40,'activeTrackColor','Color?','{@template flutter.material.switch.activeTrackColor} The color to use on the track when this switch is on. {@endtemplate}','{@template flutter.material.switch.activeTrackColor} 此开关打开时轨道上使用的颜色。{@endtemplate}',3,0);
INSERT INTO widget_fields VALUES(3257,40,'inactiveThumbColor','Color?','{@template flutter.material.switch.inactiveThumbColor} The color to use on the thumb when this switch is off. {@endtemplate}','{@template flutter.material.switch.inactiveThumbColor} 此开关关闭时拇指上使用的颜色。{@endtemplate}',4,0);
INSERT INTO widget_fields VALUES(3258,40,'inactiveTrackColor','Color?','{@template flutter.material.switch.inactiveTrackColor} The color to use on the track when this switch is off. {@endtemplate}','{@template flutter.material.switch.inactiveTrackColor} 此开关关闭时轨道上使用的颜色。{@endtemplate}',5,0);
INSERT INTO widget_fields VALUES(3259,40,'activeThumbImage','ImageProvider?','{@template flutter.material.switch.activeThumbImage} An image to use on the thumb of this switch when the switch is on. {@endtemplate}','{@template flutter.material.switch.activeThumbImage} 开关打开时在此开关拇指上使用的图像。{@endtemplate}',6,0);
INSERT INTO widget_fields VALUES(3260,40,'onActiveThumbImageError','ImageErrorListener?','{@template flutter.material.switch.onActiveThumbImageError} An optional error callback for errors emitted when loading [activeThumbImage]. {@endtemplate}','{@template flutter.material.switch.onActiveThumbImageError} 加载 [activeThumbImage] 时发出错误的可选错误回调。{@endtemplate}',7,0);
INSERT INTO widget_fields VALUES(3261,40,'inactiveThumbImage','ImageProvider?','{@template flutter.material.switch.inactiveThumbImage} An image to use on the thumb of this switch when the switch is off. {@endtemplate}','{@template flutter.material.switch.inactiveThumbImage} 开关关闭时在此开关拇指上使用的图像。{@endtemplate}',8,0);
INSERT INTO widget_fields VALUES(3262,40,'onInactiveThumbImageError','ImageErrorListener?','{@template flutter.material.switch.onInactiveThumbImageError} An optional error callback for errors emitted when loading [inactiveThumbImage]. {@endtemplate}','{@template flutter.material.switch.onInactiveThumbImageError} 加载 [inactiveThumbImage] 时发出错误的可选错误回调。{@endtemplate}',9,0);
INSERT INTO widget_fields VALUES(3263,40,'thumbColor','MaterialStateProperty<Color?>?','{@template flutter.material.switch.thumbColor} The color of this [Switch]''s thumb.','{@template flutter.material.switch.thumbColor} 此 [Switch] 拇指的颜色。',10,0);
INSERT INTO widget_fields VALUES(3264,40,'trackColor','MaterialStateProperty<Color?>?','{@template flutter.material.switch.trackColor} The color of this [Switch]''s track.','{@template flutter.material.switch.trackColor} 此 [Switch] 轨道的颜色。',11,0);
INSERT INTO widget_fields VALUES(3265,40,'trackOutlineColor','MaterialStateProperty<Color?>?','{@template flutter.material.switch.trackOutlineColor} The outline color of this [Switch]''s track.','{@template flutter.material.switch.trackOutlineColor} 此 [Switch] 轨道的轮廓颜色。',12,0);
INSERT INTO widget_fields VALUES(3266,40,'trackOutlineWidth','MaterialStateProperty<double?>?','{@template flutter.material.switch.trackOutlineWidth} The outline width of this [Switch]''s track.','{@template flutter.material.switch.trackOutlineWidth} 此 [Switch] 轨道的轮廓宽度。',13,0);
INSERT INTO widget_fields VALUES(3267,40,'thumbIcon','MaterialStateProperty<Icon?>?','{@template flutter.material.switch.thumbIcon} The icon to use on the thumb of this switch','{@template flutter.material.switch.thumbIcon} 在此开关拇指上使用的图标',14,0);
INSERT INTO widget_fields VALUES(3268,40,'materialTapTargetSize','MaterialTapTargetSize?','{@template flutter.material.switch.materialTapTargetSize} Configures the minimum size of the tap target. {@endtemplate}','{@template flutter.material.switch.materialTapTargetSize} 配置点击目标的最小大小。{@endtemplate}',15,0);
INSERT INTO widget_fields VALUES(3269,40,'applyCupertinoTheme','bool?','{@macro flutter.cupertino.CupertinoSwitch.applyTheme}','{@macro flutter.cupertino.CupertinoSwitch.applyTheme}',16,0);
INSERT INTO widget_fields VALUES(3270,40,'dragStartBehavior','DragStartBehavior','{@macro flutter.cupertino.CupertinoSwitch.dragStartBehavior}','{@macro flutter.cupertino.CupertinoSwitch.dragStartBehavior}',17,1);
INSERT INTO widget_fields VALUES(3271,40,'mouseCursor','MouseCursor?','{@template flutter.material.switch.mouseCursor} The cursor for a mouse pointer when it enters or is hovering over the widget.','{@template flutter.material.switch.mouseCursor} 鼠标指针进入或悬停在小部件上时的光标。',18,0);
INSERT INTO widget_fields VALUES(3272,40,'focusColor','Color?','The color for the button''s [Material] when it has the input focus.','按钮具有输入焦点时按钮的 [Material] 的颜色。',19,0);
INSERT INTO widget_fields VALUES(3273,40,'hoverColor','Color?','The color for the button''s [Material] when a pointer is hovering over it.','指针悬停在按钮上时按钮的 [Material] 的颜色。',20,0);
INSERT INTO widget_fields VALUES(3274,40,'overlayColor','MaterialStateProperty<Color?>?','{@template flutter.material.switch.overlayColor} The color for the switch''s [Material].','{@template flutter.material.switch.overlayColor} 开关的 [Material] 的颜色。',21,0);
INSERT INTO widget_fields VALUES(3275,40,'splashRadius','double?','{@template flutter.material.switch.splashRadius} The splash radius of the circular [Material] ink response. {@endtemplate}','{@template flutter.material.switch.splashRadius} 圆形 [Material] 墨水响应的飞溅半径。{@endtemplate}',22,0);
INSERT INTO widget_fields VALUES(3276,40,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',23,0);
INSERT INTO widget_fields VALUES(3277,40,'onFocusChange','ValueChanged<bool>?','{@macro flutter.material.inkwell.onFocusChange}','{@macro flutter.material.inkwell.onFocusChange}',24,0);
INSERT INTO widget_fields VALUES(3278,40,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',25,1);
INSERT INTO widget_fields VALUES(3279,40,'padding','EdgeInsetsGeometry?','The amount of space to surround the child inside the bounds of the [Switch].','在 [Switch] 边界内围绕子项的空间量。',26,0);
INSERT INTO widget_fields VALUES(3280,18,'value','bool','Whether this switch is checked.','此开关是否被选中。',0,1);
INSERT INTO widget_fields VALUES(3281,18,'onChanged','ValueChanged<bool>?','Called when the user toggles the switch on or off.','用户打开或关闭开关时调用。',1,0);
INSERT INTO widget_fields VALUES(3282,18,'activeColor','Color?','{@macro flutter.material.switch.activeColor}','{@macro flutter.material.switch.activeColor}',2,0);
INSERT INTO widget_fields VALUES(3283,18,'activeTrackColor','Color?','{@macro flutter.material.switch.activeTrackColor}','{@macro flutter.material.switch.activeTrackColor}',3,0);
INSERT INTO widget_fields VALUES(3284,18,'inactiveThumbColor','Color?','{@macro flutter.material.switch.inactiveThumbColor}','{@macro flutter.material.switch.inactiveThumbColor}',4,0);
INSERT INTO widget_fields VALUES(3285,18,'inactiveTrackColor','Color?','{@macro flutter.material.switch.inactiveTrackColor}','{@macro flutter.material.switch.inactiveTrackColor}',5,0);
INSERT INTO widget_fields VALUES(3286,18,'activeThumbImage','ImageProvider?','{@macro flutter.material.switch.activeThumbImage}','{@macro flutter.material.switch.activeThumbImage}',6,0);
INSERT INTO widget_fields VALUES(3287,18,'onActiveThumbImageError','ImageErrorListener?','{@macro flutter.material.switch.onActiveThumbImageError}','{@macro flutter.material.switch.onActiveThumbImageError}',7,0);
INSERT INTO widget_fields VALUES(3288,18,'inactiveThumbImage','ImageProvider?','{@macro flutter.material.switch.inactiveThumbImage}','{@macro flutter.material.switch.inactiveThumbImage}',8,0);
INSERT INTO widget_fields VALUES(3289,18,'onInactiveThumbImageError','ImageErrorListener?','{@macro flutter.material.switch.onInactiveThumbImageError}','{@macro flutter.material.switch.onInactiveThumbImageError}',9,0);
INSERT INTO widget_fields VALUES(3290,18,'thumbColor','MaterialStateProperty<Color?>?','The color of this switch''s thumb.','此开关拇指的颜色。',10,0);
INSERT INTO widget_fields VALUES(3291,18,'trackColor','MaterialStateProperty<Color?>?','The color of this switch''s track.','此开关轨道的颜色。',11,0);
INSERT INTO widget_fields VALUES(3292,18,'trackOutlineColor','MaterialStateProperty<Color?>?','{@macro flutter.material.switch.trackOutlineColor}','{@macro flutter.material.switch.trackOutlineColor}',12,0);
INSERT INTO widget_fields VALUES(3293,18,'thumbIcon','MaterialStateProperty<Icon?>?','The icon to use on the thumb of this switch','在此开关拇指上使用的图标',13,0);
INSERT INTO widget_fields VALUES(3294,18,'materialTapTargetSize','MaterialTapTargetSize?','{@macro flutter.material.switch.materialTapTargetSize}','{@macro flutter.material.switch.materialTapTargetSize}',14,0);
INSERT INTO widget_fields VALUES(3295,18,'dragStartBehavior','DragStartBehavior','{@macro flutter.cupertino.CupertinoSwitch.dragStartBehavior}','{@macro flutter.cupertino.CupertinoSwitch.dragStartBehavior}',15,1);
INSERT INTO widget_fields VALUES(3296,18,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',16,0);
INSERT INTO widget_fields VALUES(3297,18,'overlayColor','MaterialStateProperty<Color?>?','The color for the switch''s [Material].','开关的 [Material] 的颜色。',17,0);
INSERT INTO widget_fields VALUES(3298,18,'splashRadius','double?','{@macro flutter.material.switch.splashRadius}','{@macro flutter.material.switch.splashRadius}',18,0);
INSERT INTO widget_fields VALUES(3299,18,'focusNode','FocusNode?','{@macro flutter.widgets.Focus.focusNode}','{@macro flutter.widgets.Focus.focusNode}',19,0);
INSERT INTO widget_fields VALUES(3300,18,'onFocusChange','ValueChanged<bool>?','{@macro flutter.material.inkwell.onFocusChange}','{@macro flutter.material.inkwell.onFocusChange}',20,0);
INSERT INTO widget_fields VALUES(3301,18,'autofocus','bool','{@macro flutter.widgets.Focus.autofocus}','{@macro flutter.widgets.Focus.autofocus}',21,1);
INSERT INTO widget_fields VALUES(3302,18,'tileColor','Color?','{@macro flutter.material.ListTile.tileColor}','{@macro flutter.material.ListTile.tileColor}',22,0);
INSERT INTO widget_fields VALUES(3303,18,'title','Widget?','The primary content of the list tile.','列表瓦片的主要内容。',23,0);
INSERT INTO widget_fields VALUES(3304,18,'subtitle','Widget?','Additional content displayed below the title.','显示在标题下方的附加内容。',24,0);
INSERT INTO widget_fields VALUES(3305,18,'secondary','Widget?','A widget to display on the opposite side of the tile from the switch.','在瓦片与开关相对侧显示的小部件。',25,0);
INSERT INTO widget_fields VALUES(3306,18,'isThreeLine','bool','Whether this list tile is intended to display three lines of text.','此列表瓦片是否旨在显示三行文本。',26,1);
INSERT INTO widget_fields VALUES(3307,18,'dense','bool?','Whether this list tile is part of a vertically dense list.','此列表瓦片是否是垂直密集列表的一部分。',27,0);
INSERT INTO widget_fields VALUES(3308,18,'contentPadding','EdgeInsetsGeometry?','The tile''s internal padding.','瓦片的内部内边距。',28,0);
INSERT INTO widget_fields VALUES(3309,18,'selected','bool','Whether to render icons and text in the [activeColor].','是否以 [activeColor] 渲染图标和文本。',29,1);
INSERT INTO widget_fields VALUES(3310,18,'controlAffinity','ListTileControlAffinity?','Defines the position of control and [secondary], relative to text.','定义控件和 [secondary] 相对于文本的位置。',30,0);
INSERT INTO widget_fields VALUES(3311,18,'shape','ShapeBorder?','{@macro flutter.material.ListTile.shape}','{@macro flutter.material.ListTile.shape}',31,0);
INSERT INTO widget_fields VALUES(3312,18,'selectedTileColor','Color?','If non-null, defines the background color when [SwitchListTile.selected] is true.','如果非空，定义 [SwitchListTile.selected] 为 true 时的背景颜色。',32,0);
INSERT INTO widget_fields VALUES(3313,18,'visualDensity','VisualDensity?','Defines how compact the list tile''s layout will be.','定义列表瓦片布局的紧凑程度。',33,0);
INSERT INTO widget_fields VALUES(3314,18,'enableFeedback','bool?','{@macro flutter.material.ListTile.enableFeedback}','{@macro flutter.material.ListTile.enableFeedback}',34,0);
INSERT INTO widget_fields VALUES(3315,18,'hoverColor','Color?','The color for the tile''s [Material] when a pointer is hovering over it.','指针悬停在瓦片上时瓦片的 [Material] 的颜色。',35,0);
INSERT INTO widget_fields VALUES(3316,18,'applyCupertinoTheme','bool?','{@macro flutter.cupertino.CupertinoSwitch.applyTheme}','{@macro flutter.cupertino.CupertinoSwitch.applyTheme}',36,0);
INSERT INTO widget_fields VALUES(3317,18,'internalAddSemanticForOnTap','bool','Whether to add button:true to the semantics if onTap is provided. This is a temporary flag to help changing the behavior of ListTile onTap semantics.','如果提供了 onTap，是否向语义添加 button:true。这是一个临时标志，用于帮助更改 ListTile onTap 语义的行为。',37,1);
INSERT INTO widget_fields VALUES(3318,535,'data','SwitchThemeData','The properties used for all descendant [Switch] widgets.','用于所有后代 [Switch] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(3319,536,'anchor','Rect','The [Rect] that the context menu should point to.','上下文菜单应指向的 [Rect]。',0,1);
INSERT INTO widget_fields VALUES(3320,536,'items','List<IOSSystemContextMenuItem>','A list of the items to be displayed in the system context menu.','要在系统上下文菜单中显示的项目列表。',1,1);
INSERT INTO widget_fields VALUES(3321,536,'onSystemHide','VoidCallback?','Called when the system hides this context menu.','系统隐藏此上下文菜单时调用。',2,0);
INSERT INTO widget_fields VALUES(3322,148,'text','String?','The text to display as the tab''s label.','作为选项卡标签显示的文本。',0,0);
INSERT INTO widget_fields VALUES(3323,148,'child','Widget?','The widget to be used as the tab''s label.','用作选项卡标签的小部件。',1,0);
INSERT INTO widget_fields VALUES(3324,148,'icon','Widget?','An icon to display as the tab''s label.','作为选项卡标签显示的图标。',2,0);
INSERT INTO widget_fields VALUES(3325,148,'iconMargin','EdgeInsetsGeometry?','The margin added around the tab''s icon.','选项卡图标周围添加的边距。',3,0);
INSERT INTO widget_fields VALUES(3326,148,'height','double?','The height of the [Tab].','[Tab] 的高度。',4,0);
INSERT INTO widget_fields VALUES(3327,58,'tabs','List<Widget>','Typically a list of two or more [Tab] widgets.','通常是两个或更多 [Tab] 小部件的列表。',0,1);
INSERT INTO widget_fields VALUES(3328,58,'controller','TabController?','This widget''s selection and animation state.','此小部件的选择和动画状态。',1,0);
INSERT INTO widget_fields VALUES(3329,58,'isScrollable','bool','Whether this tab bar can be scrolled horizontally.','此选项卡栏是否可以水平滚动。',2,1);
INSERT INTO widget_fields VALUES(3330,58,'padding','EdgeInsetsGeometry?','The amount of space by which to inset the tab bar.','插入选项卡栏的空间量。',3,0);
INSERT INTO widget_fields VALUES(3331,58,'indicatorColor','Color?','The color of the line that appears below the selected tab.','出现在选定选项卡下方的线的颜色。',4,0);
INSERT INTO widget_fields VALUES(3332,58,'indicatorWeight','double','The thickness of the line that appears below the selected tab.','出现在选定选项卡下方的线的厚度。',5,1);
INSERT INTO widget_fields VALUES(3333,58,'indicatorPadding','EdgeInsetsGeometry','The padding for the indicator.','指示器的内边距。',6,1);
INSERT INTO widget_fields VALUES(3334,58,'indicator','Decoration?','Defines the appearance of the selected tab indicator.','定义选定选项卡指示器的外观。',7,0);
INSERT INTO widget_fields VALUES(3335,58,'automaticIndicatorColorAdjustment','bool','Whether this tab bar should automatically adjust the [indicatorColor].','此选项卡栏是否应自动调整 [indicatorColor]。',8,1);
INSERT INTO widget_fields VALUES(3336,58,'indicatorSize','TabBarIndicatorSize?','Defines how the selected tab indicator''s size is computed.','定义如何计算选定选项卡指示器的大小。',9,0);
INSERT INTO widget_fields VALUES(3337,58,'dividerColor','Color?','The color of the divider.','分隔符的颜色。',10,0);
INSERT INTO widget_fields VALUES(3338,58,'dividerHeight','double?','The height of the divider.','分隔符的高度。',11,0);
INSERT INTO widget_fields VALUES(3339,58,'labelColor','Color?','The color of selected tab labels.','选定选项卡标签的颜色。',12,0);
INSERT INTO widget_fields VALUES(3340,58,'unselectedLabelColor','Color?','The color of unselected tab labels.','未选定选项卡标签的颜色。',13,0);
INSERT INTO widget_fields VALUES(3341,58,'labelStyle','TextStyle?','The text style of the selected tab labels.','选定选项卡标签的文本样式。',14,0);
INSERT INTO widget_fields VALUES(3342,58,'unselectedLabelStyle','TextStyle?','The text style of the unselected tab labels.','未选定选项卡标签的文本样式。',15,0);
INSERT INTO widget_fields VALUES(3343,58,'labelPadding','EdgeInsetsGeometry?','The padding added to each of the tab labels.','添加到每个选项卡标签的内边距。',16,0);
INSERT INTO widget_fields VALUES(3344,58,'overlayColor','MaterialStateProperty<Color?>?','Defines the ink response focus, hover, and splash colors.','定义墨水响应焦点、悬停和飞溅颜色。',17,0);
INSERT INTO widget_fields VALUES(3345,58,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',18,1);
INSERT INTO widget_fields VALUES(3346,58,'mouseCursor','MouseCursor?','{@template flutter.material.tabs.mouseCursor} The cursor for a mouse pointer when it enters or is hovering over the individual tab widgets.','{@template flutter.material.tabs.mouseCursor} 鼠标指针进入或悬停在各个选项卡小部件上时的光标。',19,0);
INSERT INTO widget_fields VALUES(3347,58,'enableFeedback','bool?','Whether detected gestures should provide acoustic and/or haptic feedback.','检测到的手势是否应提供声音和/或触觉反馈。',20,0);
INSERT INTO widget_fields VALUES(3348,58,'onTap','ValueChanged<int>?','An optional callback that''s called when the [TabBar] is tapped.','点击 [TabBar] 时调用的可选回调。',21,0);
INSERT INTO widget_fields VALUES(3349,58,'onHover','TabValueChanged<bool>?','An optional callback that''s called when a [Tab]''s hover state in the [TabBar] changes.','[TabBar] 中 [Tab] 的悬停状态发生变化时调用的可选回调。',22,0);
INSERT INTO widget_fields VALUES(3350,58,'onFocusChange','TabValueChanged<bool>?','An optional callback that''s called when a [Tab]''s focus state in the [TabBar] changes.','[TabBar] 中 [Tab] 的焦点状态发生变化时调用的可选回调。',23,0);
INSERT INTO widget_fields VALUES(3351,58,'physics','ScrollPhysics?','How the [TabBar]''s scroll view should respond to user input.','[TabBar] 的滚动视图应如何响应用户输入。',24,0);
INSERT INTO widget_fields VALUES(3352,58,'splashFactory','InteractiveInkFeatureFactory?','Creates the tab bar''s [InkWell] splash factory, which defines the appearance of "ink" splashes that occur in response to taps.','创建选项卡栏的 [InkWell] 飞溅工厂，定义响应点击而出现的',25,0);
INSERT INTO widget_fields VALUES(3353,58,'splashBorderRadius','BorderRadius?','Defines the clipping radius of splashes that extend outside the bounds of the tab.','定义延伸到选项卡边界之外的飞溅的裁剪半径。',26,0);
INSERT INTO widget_fields VALUES(3354,58,'tabAlignment','TabAlignment?','Specifies the horizontal alignment of the tabs within a [TabBar].','指定 [TabBar] 内选项卡的水平对齐。',27,0);
INSERT INTO widget_fields VALUES(3355,58,'textScaler','TextScaler?','Specifies the text scaling behavior for the [Tab] label.','指定 [Tab] 标签的文本缩放行为。',28,0);
INSERT INTO widget_fields VALUES(3356,58,'indicatorAnimation','TabIndicatorAnimation?','Specifies the animation behavior of the tab indicator.','指定选项卡指示器的动画行为。',29,0);
INSERT INTO widget_fields VALUES(3357,59,'controller','TabController?','This widget''s selection and animation state.','此小部件的选择和动画状态。',0,0);
INSERT INTO widget_fields VALUES(3358,59,'children','List<Widget>','One widget per tab.','每个选项卡一个小部件。',1,1);
INSERT INTO widget_fields VALUES(3359,59,'physics','ScrollPhysics?','How the page view should respond to user input.','页面视图应如何响应用户输入。',2,0);
INSERT INTO widget_fields VALUES(3360,59,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',3,1);
INSERT INTO widget_fields VALUES(3361,59,'viewportFraction','double','{@macro flutter.widgets.pageview.viewportFraction}','{@macro flutter.widgets.pageview.viewportFraction}',4,1);
INSERT INTO widget_fields VALUES(3362,59,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',5,1);
INSERT INTO widget_fields VALUES(3363,110,'children','List<TableRow>','The rows of the table.','表格的行。',0,1);
INSERT INTO widget_fields VALUES(3364,110,'columnWidths','Map<int, TableColumnWidth>?','How the horizontal extents of the columns of this table should be determined.','如何确定此表格列的水平范围。',1,0);
INSERT INTO widget_fields VALUES(3365,110,'defaultColumnWidth','TableColumnWidth','How to determine with widths of columns that don''t have an explicit sizing algorithm.','如何确定没有显式大小算法的列的宽度。',2,1);
INSERT INTO widget_fields VALUES(3366,110,'textDirection','TextDirection?','The direction in which the columns are ordered.','列的排序方向。',3,0);
INSERT INTO widget_fields VALUES(3367,110,'border','TableBorder?','The style to use when painting the boundary and interior divisions of the table.','绘制表格边界和内部分割时使用的样式。',4,0);
INSERT INTO widget_fields VALUES(3368,110,'defaultVerticalAlignment','TableCellVerticalAlignment','How cells that do not explicitly specify a vertical alignment are aligned vertically.','未明确指定垂直对齐的单元格如何垂直对齐。',5,1);
INSERT INTO widget_fields VALUES(3369,110,'textBaseline','TextBaseline?','The text baseline to use when aligning rows using [TableCellVerticalAlignment.baseline].','使用 [TableCellVerticalAlignment.baseline] 对齐行时使用的文本基线。',6,0);
INSERT INTO widget_fields VALUES(3370,317,'verticalAlignment','TableCellVerticalAlignment?','How this cell is aligned vertically.','此单元格如何垂直对齐。',0,0);
INSERT INTO widget_fields VALUES(3371,317,'child','Widget','The child of this cell.','此单元格的子项。',1,1);
INSERT INTO widget_fields VALUES(3372,205,'controller','TabController?','This widget''s selection and animation state.','此小部件的选择和动画状态。',0,0);
INSERT INTO widget_fields VALUES(3373,205,'indicatorSize','double','The indicator circle''s diameter (the default value is 12.0).','指示器圆圈的直径（默认值为 12.0）。',1,1);
INSERT INTO widget_fields VALUES(3374,205,'color','Color?','The indicator circle''s fill color for unselected pages.','未选定页面的指示器圆圈的填充颜色。',2,0);
INSERT INTO widget_fields VALUES(3375,205,'selectedColor','Color?','The indicator circle''s fill color for selected pages and border color for all indicator circles.','选定页面的指示器圆圈的填充颜色和所有指示器圆圈的边框颜色。',3,0);
INSERT INTO widget_fields VALUES(3376,205,'borderStyle','BorderStyle?','The indicator circle''s border style.','指示器圆圈的边框样式。',4,0);
INSERT INTO widget_fields VALUES(3377,206,'backgroundColor','Color','The indicator circle''s background color.','指示器圆圈的背景颜色。',0,1);
INSERT INTO widget_fields VALUES(3378,206,'borderColor','Color','The indicator circle''s border color.','指示器圆圈的边框颜色。',1,1);
INSERT INTO widget_fields VALUES(3379,206,'size','double','The indicator circle''s diameter.','指示器圆圈的直径。',2,1);
INSERT INTO widget_fields VALUES(3380,206,'borderStyle','BorderStyle','The indicator circle''s border style.','指示器圆圈的边框样式。',3,1);
INSERT INTO widget_fields VALUES(3381,280,'enabled','bool','Whether or not this [TapRegion] is enabled as part of the composite region.','此 [TapRegion] 是否作为复合区域的一部分启用。',0,1);
INSERT INTO widget_fields VALUES(3382,280,'behavior','HitTestBehavior','How to behave during hit testing when deciding how the hit test propagates to children and whether to consider targets behind this [TapRegion].','在命中测试期间如何表现，决定命中测试如何传播到子项以及是否考虑此 [TapRegion] 后面的目标。',1,1);
INSERT INTO widget_fields VALUES(3383,280,'onTapOutside','TapRegionCallback?','A callback to be invoked when a tap down is detected outside of this [TapRegion] and any other region with the same [groupId], if any.','在此 [TapRegion] 和具有相同 [groupId] 的任何其他区域之外检测到点击向下时要调用的回调（如果有）。',2,0);
INSERT INTO widget_fields VALUES(3384,280,'onTapInside','TapRegionCallback?','A callback to be invoked when a tap down is detected inside of this [TapRegion], or any other tap region with the same [groupId], if any.','在此 [TapRegion] 内部或具有相同 [groupId] 的任何其他点击区域内检测到点击向下时要调用的回调（如果有）。',3,0);
INSERT INTO widget_fields VALUES(3385,280,'onTapUpOutside','TapRegionUpCallback?','A callback to be invoked when a tap up is detected outside of this [TapRegion] and any other region with the same [groupId], if any.','在此 [TapRegion] 和具有相同 [groupId] 的任何其他区域之外检测到点击向上时要调用的回调（如果有）。',4,0);
INSERT INTO widget_fields VALUES(3386,280,'onTapUpInside','TapRegionUpCallback?','A callback to be invoked when a tap up is detected inside of this [TapRegion], or any other tap region with the same [groupId], if any.','在此 [TapRegion] 内部或具有相同 [groupId] 的任何其他点击区域内检测到点击向上时要调用的回调（如果有）。',5,0);
INSERT INTO widget_fields VALUES(3387,280,'groupId','Object?','An optional group ID that groups [TapRegion]s together so that they operate as one region. If any member of a group is hit by a particular tap, then the [onTapOutside] / [onTapUpOutside] will not be called for any members of the group. If any member of the group is hit, then all members will have their [onTapInside] / [onTapUpInside] called.','将 [TapRegion] 组合在一起以便它们作为一个区域操作的可选组 ID。如果组的任何成员被特定点击命中，则不会为组的任何成员调用 [onTapOutside] / [onTapUpOutside]。如果组的任何成员被命中，则所有成员都将调用其 [onTapInside] / [onTapUpInside]。',6,0);
INSERT INTO widget_fields VALUES(3388,280,'consumeOutsideTaps','bool','If true, then the group that this region belongs to will stop the propagation of all events in the gesture arena.','如果为 true，则此区域所属的组将停止手势竞技场中所有事件的传播。',7,1);
INSERT INTO widget_fields VALUES(3389,280,'debugLabel','String?','An optional debug label to help with debugging in debug mode.','在调试模式下帮助调试的可选调试标签。',8,0);
INSERT INTO widget_fields VALUES(3390,2,'data','String?','The text to display.','要显示的文本。',0,0);
INSERT INTO widget_fields VALUES(3391,2,'textSpan','InlineSpan?','The text to display as a [InlineSpan].','要显示为 [InlineSpan] 的文本。',1,0);
INSERT INTO widget_fields VALUES(3392,2,'style','TextStyle?','If non-null, the style to use for this text.','如果非空，用于此文本的样式。',2,0);
INSERT INTO widget_fields VALUES(3393,2,'strutStyle','StrutStyle?','{@macro flutter.painting.textPainter.strutStyle}','{@macro flutter.painting.textPainter.strutStyle}',3,0);
INSERT INTO widget_fields VALUES(3394,2,'textAlign','TextAlign?','How the text should be aligned horizontally.','文本应如何水平对齐。',4,0);
INSERT INTO widget_fields VALUES(3395,2,'textDirection','TextDirection?','The directionality of the text.','文本的方向性。',5,0);
INSERT INTO widget_fields VALUES(3396,2,'locale','Locale?','Used to select a font when the same Unicode character can be rendered differently, depending on the locale.','当同一个 Unicode 字符可以根据区域设置以不同方式呈现时，用于选择字体。',6,0);
INSERT INTO widget_fields VALUES(3397,2,'softWrap','bool?','Whether the text should break at soft line breaks.','文本是否应在软换行符处换行。',7,0);
INSERT INTO widget_fields VALUES(3398,2,'overflow','TextOverflow?','How visual overflow should be handled.','应如何处理视觉溢出。',8,0);
INSERT INTO widget_fields VALUES(3399,2,'textScaleFactor','double?','Deprecated. Will be removed in a future version of Flutter. Use [textScaler] instead.','已弃用。将在 Flutter 的未来版本中删除。请改用 [textScaler]。',9,0);
INSERT INTO widget_fields VALUES(3400,2,'textScaler','TextScaler?','{@macro flutter.painting.textPainter.textScaler}','{@macro flutter.painting.textPainter.textScaler}',10,0);
INSERT INTO widget_fields VALUES(3401,2,'maxLines','int?','An optional maximum number of lines for the text to span, wrapping if necessary. If the text exceeds the given number of lines, it will be truncated according to [overflow].','文本跨越的可选最大行数，必要时换行。如果文本超过给定的行数，将根据 [overflow] 截断。',11,0);
INSERT INTO widget_fields VALUES(3402,2,'semanticsLabel','String?','{@template flutter.widgets.Text.semanticsLabel} An alternative semantics label for this text.','{@template flutter.widgets.Text.semanticsLabel} 此文本的替代语义标签。',12,0);
INSERT INTO widget_fields VALUES(3403,2,'semanticsIdentifier','String?','A unique identifier for the semantics node for this widget.','此小部件语义节点的唯一标识符。',13,0);
INSERT INTO widget_fields VALUES(3404,2,'textWidthBasis','TextWidthBasis?','{@macro flutter.painting.textPainter.textWidthBasis}','{@macro flutter.painting.textPainter.textWidthBasis}',14,0);
INSERT INTO widget_fields VALUES(3405,2,'textHeightBehavior','ui.TextHeightBehavior?','{@macro dart.ui.textHeightBehavior}','{@macro dart.ui.textHeightBehavior}',15,0);
INSERT INTO widget_fields VALUES(3406,2,'selectionColor','Color?','The color to use when painting the selection.','绘制选择时使用的颜色。',16,0);
INSERT INTO widget_fields VALUES(3407,539,'data','TextButtonThemeData','The configuration of this theme.','此主题的配置。',0,1);
INSERT INTO widget_fields VALUES(3408,54,'magnifierConfiguration','TextMagnifierConfiguration?','The configuration for the magnifier of this text field.','此文本字段放大镜的配置。',0,0);
INSERT INTO widget_fields VALUES(3409,54,'groupId','Object','{@macro flutter.widgets.editableText.groupId}','{@macro flutter.widgets.editableText.groupId}',1,1);
INSERT INTO widget_fields VALUES(3410,54,'controller','TextEditingController?','Controls the text being edited.','控制正在编辑的文本。',2,0);
INSERT INTO widget_fields VALUES(3411,54,'focusNode','FocusNode?','Defines the keyboard focus for this widget.','定义此小部件的键盘焦点。',3,0);
INSERT INTO widget_fields VALUES(3412,54,'decoration','InputDecoration?','The decoration to show around the text field.','在文本字段周围显示的装饰。',4,0);
INSERT INTO widget_fields VALUES(3413,54,'keyboardType','TextInputType','{@macro flutter.widgets.editableText.keyboardType}','{@macro flutter.widgets.editableText.keyboardType}',5,1);
INSERT INTO widget_fields VALUES(3414,54,'textInputAction','TextInputAction?','{@template flutter.widgets.TextField.textInputAction} The type of action button to use for the keyboard.','{@template flutter.widgets.TextField.textInputAction} 用于键盘的操作按钮类型。',6,0);
INSERT INTO widget_fields VALUES(3415,54,'textCapitalization','TextCapitalization','{@macro flutter.widgets.editableText.textCapitalization}','{@macro flutter.widgets.editableText.textCapitalization}',7,1);
INSERT INTO widget_fields VALUES(3416,54,'style','TextStyle?','The style to use for the text being edited.','用于正在编辑的文本的样式。',8,0);
INSERT INTO widget_fields VALUES(3417,54,'strutStyle','StrutStyle?','{@macro flutter.widgets.editableText.strutStyle}','{@macro flutter.widgets.editableText.strutStyle}',9,0);
INSERT INTO widget_fields VALUES(3418,54,'textAlign','TextAlign','{@macro flutter.widgets.editableText.textAlign}','{@macro flutter.widgets.editableText.textAlign}',10,1);
INSERT INTO widget_fields VALUES(3419,54,'textAlignVertical','TextAlignVertical?','{@macro flutter.material.InputDecorator.textAlignVertical}','{@macro flutter.material.InputDecorator.textAlignVertical}',11,0);
INSERT INTO widget_fields VALUES(3420,54,'textDirection','TextDirection?','{@macro flutter.widgets.editableText.textDirection}','{@macro flutter.widgets.editableText.textDirection}',12,0);
INSERT INTO widget_fields VALUES(3421,54,'autofocus','bool','{@macro flutter.widgets.editableText.autofocus}','{@macro flutter.widgets.editableText.autofocus}',13,1);
INSERT INTO widget_fields VALUES(3422,54,'statesController','MaterialStatesController?','Represents the interactive "state" of this widget in terms of a set of [WidgetState]s, including [WidgetState.disabled], [WidgetState.hovered], [WidgetState.error], and [WidgetState.focused].','表示此小部件在一组 [WidgetState] 方面的交互',14,0);
INSERT INTO widget_fields VALUES(3423,54,'obscuringCharacter','String','{@macro flutter.widgets.editableText.obscuringCharacter}','{@macro flutter.widgets.editableText.obscuringCharacter}',15,1);
INSERT INTO widget_fields VALUES(3424,54,'obscureText','bool','{@macro flutter.widgets.editableText.obscureText}','{@macro flutter.widgets.editableText.obscureText}',16,1);
INSERT INTO widget_fields VALUES(3425,54,'autocorrect','bool','{@macro flutter.widgets.editableText.autocorrect}','{@macro flutter.widgets.editableText.autocorrect}',17,1);
INSERT INTO widget_fields VALUES(3426,54,'smartDashesType','SmartDashesType','{@macro flutter.services.TextInputConfiguration.smartDashesType}','{@macro flutter.services.TextInputConfiguration.smartDashesType}',18,1);
INSERT INTO widget_fields VALUES(3427,54,'smartQuotesType','SmartQuotesType','{@macro flutter.services.TextInputConfiguration.smartQuotesType}','{@macro flutter.services.TextInputConfiguration.smartQuotesType}',19,1);
INSERT INTO widget_fields VALUES(3428,54,'enableSuggestions','bool','{@macro flutter.services.TextInputConfiguration.enableSuggestions}','{@macro flutter.services.TextInputConfiguration.enableSuggestions}',20,1);
INSERT INTO widget_fields VALUES(3429,54,'maxLines','int?','{@macro flutter.widgets.editableText.maxLines}  * [expands], which determines whether the field should fill the height of    its parent.','{@macro flutter.widgets.editableText.maxLines}  * [expands]，确定字段是否应填充其父项的高度。',21,0);
INSERT INTO widget_fields VALUES(3430,54,'minLines','int?','{@macro flutter.widgets.editableText.minLines}  * [expands], which determines whether the field should fill the height of    its parent.','{@macro flutter.widgets.editableText.minLines}  * [expands]，确定字段是否应填充其父项的高度。',22,0);
INSERT INTO widget_fields VALUES(3431,54,'expands','bool','{@macro flutter.widgets.editableText.expands}','{@macro flutter.widgets.editableText.expands}',23,1);
INSERT INTO widget_fields VALUES(3432,54,'readOnly','bool','{@macro flutter.widgets.editableText.readOnly}','{@macro flutter.widgets.editableText.readOnly}',24,1);
INSERT INTO widget_fields VALUES(3433,54,'toolbarOptions','ToolbarOptions?','Configuration of toolbar options.','工具栏选项的配置。',25,0);
INSERT INTO widget_fields VALUES(3434,54,'showCursor','bool?','{@macro flutter.widgets.editableText.showCursor}','{@macro flutter.widgets.editableText.showCursor}',26,0);
INSERT INTO widget_fields VALUES(3435,54,'maxLength','int?','The maximum number of characters (Unicode grapheme clusters) to allow in the text field.','文本字段中允许的最大字符数（Unicode 字素簇）。',27,0);
INSERT INTO widget_fields VALUES(3436,54,'maxLengthEnforcement','MaxLengthEnforcement?','Determines how the [maxLength] limit should be enforced.','确定如何强制执行 [maxLength] 限制。',28,0);
INSERT INTO widget_fields VALUES(3437,54,'onChanged','ValueChanged<String>?','{@macro flutter.widgets.editableText.onChanged}','{@macro flutter.widgets.editableText.onChanged}',29,0);
INSERT INTO widget_fields VALUES(3438,54,'onEditingComplete','VoidCallback?','{@macro flutter.widgets.editableText.onEditingComplete}','{@macro flutter.widgets.editableText.onEditingComplete}',30,0);
INSERT INTO widget_fields VALUES(3439,54,'onSubmitted','ValueChanged<String>?','{@macro flutter.widgets.editableText.onSubmitted}','{@macro flutter.widgets.editableText.onSubmitted}',31,0);
INSERT INTO widget_fields VALUES(3440,54,'onAppPrivateCommand','AppPrivateCommandCallback?','{@macro flutter.widgets.editableText.onAppPrivateCommand}','{@macro flutter.widgets.editableText.onAppPrivateCommand}',32,0);
INSERT INTO widget_fields VALUES(3441,54,'inputFormatters','List<TextInputFormatter>?','{@macro flutter.widgets.editableText.inputFormatters}','{@macro flutter.widgets.editableText.inputFormatters}',33,0);
INSERT INTO widget_fields VALUES(3442,54,'enabled','bool?','If false the text field is "disabled": it ignores taps and its [decoration] is rendered in grey.','如果为 false，文本字段被',34,0);
INSERT INTO widget_fields VALUES(3443,54,'ignorePointers','bool?','Determines whether this widget ignores pointer events.','确定此小部件是否忽略指针事件。',35,0);
INSERT INTO widget_fields VALUES(3444,54,'cursorWidth','double','{@macro flutter.widgets.editableText.cursorWidth}','{@macro flutter.widgets.editableText.cursorWidth}',36,1);
INSERT INTO widget_fields VALUES(3445,54,'cursorHeight','double?','{@macro flutter.widgets.editableText.cursorHeight}','{@macro flutter.widgets.editableText.cursorHeight}',37,0);
INSERT INTO widget_fields VALUES(3446,54,'cursorRadius','Radius?','{@macro flutter.widgets.editableText.cursorRadius}','{@macro flutter.widgets.editableText.cursorRadius}',38,0);
INSERT INTO widget_fields VALUES(3447,54,'cursorOpacityAnimates','bool?','{@macro flutter.widgets.editableText.cursorOpacityAnimates}','{@macro flutter.widgets.editableText.cursorOpacityAnimates}',39,0);
INSERT INTO widget_fields VALUES(3448,54,'cursorColor','Color?','The color of the cursor.','光标的颜色。',40,0);
INSERT INTO widget_fields VALUES(3449,54,'cursorErrorColor','Color?','The color of the cursor when the [InputDecorator] is showing an error.','[InputDecorator] 显示错误时光标的颜色。',41,0);
INSERT INTO widget_fields VALUES(3450,54,'selectionHeightStyle','ui.BoxHeightStyle','Controls how tall the selection highlight boxes are computed to be.','控制选择高亮框的计算高度。',42,1);
INSERT INTO widget_fields VALUES(3451,54,'selectionWidthStyle','ui.BoxWidthStyle','Controls how wide the selection highlight boxes are computed to be.','控制选择高亮框的计算宽度。',43,1);
INSERT INTO widget_fields VALUES(3452,54,'keyboardAppearance','Brightness?','The appearance of the keyboard.','键盘的外观。',44,0);
INSERT INTO widget_fields VALUES(3453,54,'scrollPadding','EdgeInsets','{@macro flutter.widgets.editableText.scrollPadding}','{@macro flutter.widgets.editableText.scrollPadding}',45,1);
INSERT INTO widget_fields VALUES(3454,54,'enableInteractiveSelection','bool','{@macro flutter.widgets.editableText.enableInteractiveSelection}','{@macro flutter.widgets.editableText.enableInteractiveSelection}',46,1);
INSERT INTO widget_fields VALUES(3455,54,'selectionControls','TextSelectionControls?','{@macro flutter.widgets.editableText.selectionControls}','{@macro flutter.widgets.editableText.selectionControls}',47,0);
INSERT INTO widget_fields VALUES(3456,54,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',48,1);
INSERT INTO widget_fields VALUES(3457,54,'onTap','GestureTapCallback?','{@template flutter.material.textfield.onTap} Called for the first tap in a series of taps.','{@template flutter.material.textfield.onTap} 为一系列点击中的第一次点击调用。',49,0);
INSERT INTO widget_fields VALUES(3458,54,'onTapAlwaysCalled','bool','Whether [onTap] should be called for every tap.','是否应为每次点击调用 [onTap]。',50,1);
INSERT INTO widget_fields VALUES(3459,54,'onTapOutside','TapRegionCallback?','{@macro flutter.widgets.editableText.onTapOutside}','{@macro flutter.widgets.editableText.onTapOutside}',51,0);
INSERT INTO widget_fields VALUES(3460,54,'onTapUpOutside','TapRegionUpCallback?','{@macro flutter.widgets.editableText.onTapUpOutside}','{@macro flutter.widgets.editableText.onTapUpOutside}',52,0);
INSERT INTO widget_fields VALUES(3461,54,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',53,0);
INSERT INTO widget_fields VALUES(3462,54,'buildCounter','InputCounterWidgetBuilder?','Callback that generates a custom [InputDecoration.counter] widget.','生成自定义 [InputDecoration.counter] 小部件的回调。',54,0);
INSERT INTO widget_fields VALUES(3463,54,'scrollPhysics','ScrollPhysics?','{@macro flutter.widgets.editableText.scrollPhysics}','{@macro flutter.widgets.editableText.scrollPhysics}',55,0);
INSERT INTO widget_fields VALUES(3464,54,'scrollController','ScrollController?','{@macro flutter.widgets.editableText.scrollController}','{@macro flutter.widgets.editableText.scrollController}',56,0);
INSERT INTO widget_fields VALUES(3465,54,'autofillHints','Iterable<String>?','{@macro flutter.widgets.editableText.autofillHints} {@macro flutter.services.AutofillConfiguration.autofillHints}','{@macro flutter.widgets.editableText.autofillHints} {@macro flutter.services.AutofillConfiguration.autofillHints}',57,0);
INSERT INTO widget_fields VALUES(3466,54,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',58,1);
INSERT INTO widget_fields VALUES(3467,54,'restorationId','String?','{@template flutter.material.textfield.restorationId} Restoration ID to save and restore the state of the text field.','{@template flutter.material.textfield.restorationId} 用于保存和恢复文本字段状态的恢复 ID。',59,0);
INSERT INTO widget_fields VALUES(3468,54,'scribbleEnabled','bool','{@macro flutter.widgets.editableText.scribbleEnabled}','{@macro flutter.widgets.editableText.scribbleEnabled}',60,1);
INSERT INTO widget_fields VALUES(3469,54,'stylusHandwritingEnabled','bool','{@macro flutter.widgets.editableText.stylusHandwritingEnabled}','{@macro flutter.widgets.editableText.stylusHandwritingEnabled}',61,1);
INSERT INTO widget_fields VALUES(3470,54,'enableIMEPersonalizedLearning','bool','{@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning}','{@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning}',62,1);
INSERT INTO widget_fields VALUES(3471,54,'contentInsertionConfiguration','ContentInsertionConfiguration?','{@macro flutter.widgets.editableText.contentInsertionConfiguration}','{@macro flutter.widgets.editableText.contentInsertionConfiguration}',63,0);
INSERT INTO widget_fields VALUES(3472,54,'contextMenuBuilder','EditableTextContextMenuBuilder?','{@macro flutter.widgets.EditableText.contextMenuBuilder}','{@macro flutter.widgets.EditableText.contextMenuBuilder}',64,0);
INSERT INTO widget_fields VALUES(3473,54,'canRequestFocus','bool','Determine whether this text field can request the primary focus.','确定此文本字段是否可以请求主要焦点。',65,1);
INSERT INTO widget_fields VALUES(3474,54,'undoController','UndoHistoryController?','{@macro flutter.widgets.undoHistory.controller}','{@macro flutter.widgets.undoHistory.controller}',66,0);
INSERT INTO widget_fields VALUES(3475,54,'spellCheckConfiguration','SpellCheckConfiguration?','{@macro flutter.widgets.EditableText.spellCheckConfiguration}','{@macro flutter.widgets.EditableText.spellCheckConfiguration}',67,0);
INSERT INTO widget_fields VALUES(3476,199,'controller','TextEditingController?','Controls the text being edited.','控制正在编辑的文本。',0,0);
INSERT INTO widget_fields VALUES(3477,199,'groupId','Object','{@macro flutter.widgets.editableText.groupId}','{@macro flutter.widgets.editableText.groupId}',1,1);
INSERT INTO widget_fields VALUES(3478,199,'onChanged','ValueChanged<String>?','{@template flutter.material.TextFormField.onChanged} Called when the user initiates a change to the TextField''s value: when they have inserted or deleted text or reset the form. {@endtemplate}','{@template flutter.material.TextFormField.onChanged} 当用户启动对 TextField 值的更改时调用：当他们插入或删除文本或重置表单时。{@endtemplate}',2,0);
INSERT INTO widget_fields VALUES(3479,540,'magnifierInfo','ValueNotifier<MagnifierInfo>','The current status of the user''s touch.','用户触摸的当前状态。',0,1);
INSERT INTO widget_fields VALUES(3480,541,'onTapTrackStart','VoidCallback?','{@template flutter.gestures.selectionrecognizers.TextSelectionGestureDetector.onTapTrackStart} Callback used to indicate that a tap tracking has started upon a [PointerDownEvent]. {@endtemplate}','{@template flutter.gestures.selectionrecognizers.TextSelectionGestureDetector.onTapTrackStart} 用于指示在 [PointerDownEvent] 上已开始点击跟踪的回调。{@endtemplate}',0,0);
INSERT INTO widget_fields VALUES(3481,541,'onTapTrackReset','VoidCallback?','{@template flutter.gestures.selectionrecognizers.TextSelectionGestureDetector.onTapTrackReset} Callback used to indicate that a tap tracking has been reset which happens on the next [PointerDownEvent] after the timer between two taps elapses, the recognizer loses the arena, the gesture is cancelled or the recognizer is disposed of. {@endtemplate}','{@template flutter.gestures.selectionrecognizers.TextSelectionGestureDetector.onTapTrackReset} 用于指示点击跟踪已重置的回调，这发生在两次点击之间的计时器过期后的下一个 [PointerDownEvent] 上，识别器失去竞技场，手势被取消或识别器被处置。{@endtemplate}',1,0);
INSERT INTO widget_fields VALUES(3482,541,'onTapDown','GestureTapDragDownCallback?','Called for every tap down including every tap down that''s part of a double click or a long press, except touches that include enough movement to not qualify as taps (e.g. pans and flings).','为每次点击向下调用，包括作为双击或长按一部分的每次点击向下，除了包含足够移动而不符合点击条件的触摸（例如平移和滑动）。',2,0);
INSERT INTO widget_fields VALUES(3483,541,'onForcePressStart','GestureForcePressStartCallback?','Called when a pointer has tapped down and the force of the pointer has just become greater than [ForcePressGestureRecognizer.startPressure].','当指针已点击向下且指针的力刚刚变得大于 [ForcePressGestureRecognizer.startPressure] 时调用。',3,0);
INSERT INTO widget_fields VALUES(3484,541,'onForcePressEnd','GestureForcePressEndCallback?','Called when a pointer that had previously triggered [onForcePressStart] is lifted off the screen.','当先前触发 [onForcePressStart] 的指针从屏幕上抬起时调用。',4,0);
INSERT INTO widget_fields VALUES(3485,541,'onSecondaryTap','GestureTapCallback?','Called for a tap event with the secondary mouse button.','使用辅助鼠标按钮的点击事件调用。',5,0);
INSERT INTO widget_fields VALUES(3486,541,'onSecondaryTapDown','GestureTapDownCallback?','Called for a tap down event with the secondary mouse button.','使用辅助鼠标按钮的点击向下事件调用。',6,0);
INSERT INTO widget_fields VALUES(3487,541,'onSingleTapUp','GestureTapDragUpCallback?','Called for the first tap in a series of taps, consecutive taps do not call this method.','为一系列点击中的第一次点击调用，连续点击不调用此方法。',7,0);
INSERT INTO widget_fields VALUES(3488,541,'onSingleTapCancel','GestureCancelCallback?','Called for each touch that becomes recognized as a gesture that is not a short tap, such as a long tap or drag. It is called at the moment when another gesture from the touch is recognized.','为每个被识别为非短点击手势（如长点击或拖动）的触摸调用。在触摸的另一个手势被识别的那一刻调用。',8,0);
INSERT INTO widget_fields VALUES(3489,541,'onUserTap','GestureTapCallback?','Called for the first tap in a series of taps when [onUserTapAlwaysCalled] is disabled, which is the default behavior.','当 [onUserTapAlwaysCalled] 被禁用时（这是默认行为），为一系列点击中的第一次点击调用。',9,0);
INSERT INTO widget_fields VALUES(3490,541,'onSingleLongTapStart','GestureLongPressStartCallback?','Called for a single long tap that''s sustained for longer than [kLongPressTimeout] but not necessarily lifted. Not called for a double-tap-hold, which calls [onDoubleTapDown] instead.','为持续时间超过 [kLongPressTimeout] 但不一定抬起的单次长点击调用。不为双击保持调用，而是调用 [onDoubleTapDown]。',10,0);
INSERT INTO widget_fields VALUES(3491,541,'onSingleLongTapMoveUpdate','GestureLongPressMoveUpdateCallback?','Called after [onSingleLongTapStart] when the pointer is dragged.','在 [onSingleLongTapStart] 之后当指针被拖动时调用。',11,0);
INSERT INTO widget_fields VALUES(3492,541,'onSingleLongTapEnd','GestureLongPressEndCallback?','Called after [onSingleLongTapStart] when the pointer is lifted.','在 [onSingleLongTapStart] 之后当指针抬起时调用。',12,0);
INSERT INTO widget_fields VALUES(3493,541,'onDoubleTapDown','GestureTapDragDownCallback?','Called after a momentary hold or a short tap that is close in space and time (within [kDoubleTapTimeout]) to a previous short tap.','在短暂保持或在空间和时间上接近（在 [kDoubleTapTimeout] 内）先前短点击的短点击之后调用。',13,0);
INSERT INTO widget_fields VALUES(3494,541,'onTripleTapDown','GestureTapDragDownCallback?','Called after a momentary hold or a short tap that is close in space and time (within [kDoubleTapTimeout]) to a previous double-tap.','在短暂保持或在空间和时间上接近（在 [kDoubleTapTimeout] 内）先前双击的短点击之后调用。',14,0);
INSERT INTO widget_fields VALUES(3495,541,'onDragSelectionStart','GestureTapDragStartCallback?','Called when a mouse starts dragging to select text.','当鼠标开始拖动以选择文本时调用。',15,0);
INSERT INTO widget_fields VALUES(3496,541,'onDragSelectionUpdate','GestureTapDragUpdateCallback?','Called repeatedly as a mouse moves while dragging.','当鼠标在拖动时移动时重复调用。',16,0);
INSERT INTO widget_fields VALUES(3497,541,'onDragSelectionEnd','GestureTapDragEndCallback?','Called when a mouse that was previously dragging is released.','当先前拖动的鼠标被释放时调用。',17,0);
INSERT INTO widget_fields VALUES(3498,541,'onUserTapAlwaysCalled','bool','Whether [onUserTap] will be called for all taps including consecutive taps.','是否为所有点击（包括连续点击）调用 [onUserTap]。',18,1);
INSERT INTO widget_fields VALUES(3499,541,'behavior','HitTestBehavior?','How this gesture detector should behave during hit testing.','此手势检测器在命中测试期间应如何表现。',19,0);
INSERT INTO widget_fields VALUES(3500,541,'child','Widget','Child below this widget.','此小部件下方的子项。',20,1);
INSERT INTO widget_fields VALUES(3501,542,'data','TextSelectionThemeData','The properties for descendant [TextField] and [SelectableText] widgets.','后代 [TextField] 和 [SelectableText] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(3502,543,'anchorAbove','Offset','{@template flutter.material.TextSelectionToolbar.anchorAbove} The focal point above which the toolbar attempts to position itself.','{@template flutter.material.TextSelectionToolbar.anchorAbove} 工具栏尝试定位自己的上方焦点。',0,1);
INSERT INTO widget_fields VALUES(3503,543,'anchorBelow','Offset','{@template flutter.material.TextSelectionToolbar.anchorBelow} The focal point below which the toolbar attempts to position itself, if it doesn''t fit above [anchorAbove]. {@endtemplate}','{@template flutter.material.TextSelectionToolbar.anchorBelow} 如果工具栏不适合在 [anchorAbove] 上方，则工具栏尝试定位自己的下方焦点。{@endtemplate}',1,1);
INSERT INTO widget_fields VALUES(3504,543,'children','List<Widget>','{@template flutter.material.TextSelectionToolbar.children} The children that will be displayed in the text selection toolbar.','{@template flutter.material.TextSelectionToolbar.children} 将在文本选择工具栏中显示的子项。',2,1);
INSERT INTO widget_fields VALUES(3505,543,'toolbarBuilder','ToolbarBuilder','{@template flutter.material.TextSelectionToolbar.toolbarBuilder} Builds the toolbar container.','{@template flutter.material.TextSelectionToolbar.toolbarBuilder} 构建工具栏容器。',3,1);
INSERT INTO widget_fields VALUES(3506,544,'child','Widget','{@template flutter.material.TextSelectionToolbarTextButton.child} The child of this button.','{@template flutter.material.TextSelectionToolbarTextButton.child} 此按钮的子项。',0,1);
INSERT INTO widget_fields VALUES(3507,544,'onPressed','VoidCallback?','{@template flutter.material.TextSelectionToolbarTextButton.onPressed} Called when this button is pressed. {@endtemplate}','{@template flutter.material.TextSelectionToolbarTextButton.onPressed} 按下此按钮时调用。{@endtemplate}',1,0);
INSERT INTO widget_fields VALUES(3508,544,'padding','EdgeInsets','The padding between the button''s edge and its child.','按钮边缘与其子项之间的内边距。',2,1);
INSERT INTO widget_fields VALUES(3509,544,'alignment','AlignmentGeometry?','The alignment of the button''s child.','按钮子项的对齐。',3,0);
INSERT INTO widget_fields VALUES(3510,545,'textureId','int','The identity of the backend texture.','后端纹理的标识。',0,1);
INSERT INTO widget_fields VALUES(3511,545,'freeze','bool','When true the texture will not be updated with new frames.','为 true 时，纹理不会用新帧更新。',1,1);
INSERT INTO widget_fields VALUES(3512,545,'filterQuality','FilterQuality','{@template flutter.widgets.Texture.filterQuality} The quality of sampling the texture and rendering it on screen.','{@template flutter.widgets.Texture.filterQuality} 采样纹理并在屏幕上渲染的质量。',2,1);
INSERT INTO widget_fields VALUES(3513,168,'data','ThemeData','Specifies the color and typography values for descendant widgets.','指定后代小部件的颜色和排版值。',0,1);
INSERT INTO widget_fields VALUES(3514,168,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,1);
INSERT INTO widget_fields VALUES(3515,246,'enabled','bool','The requested ticker mode for this subtree.','此子树请求的计时器模式。',0,1);
INSERT INTO widget_fields VALUES(3516,246,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,1);
INSERT INTO widget_fields VALUES(3517,546,'initialTime','TimeOfDay','The time initially selected when the dialog is shown.','显示对话框时最初选择的时间。',0,1);
INSERT INTO widget_fields VALUES(3518,546,'cancelText','String?','Optionally provide your own text for the cancel button.','可选择为取消按钮提供您自己的文本。',1,0);
INSERT INTO widget_fields VALUES(3519,546,'confirmText','String?','Optionally provide your own text for the confirm button.','可选择为确认按钮提供您自己的文本。',2,0);
INSERT INTO widget_fields VALUES(3520,546,'helpText','String?','Optionally provide your own help text to the header of the time picker.','可选择为时间选择器标题提供您自己的帮助文本。',3,0);
INSERT INTO widget_fields VALUES(3521,546,'errorInvalidText','String?','Optionally provide your own validation error text.','可选择提供您自己的验证错误文本。',4,0);
INSERT INTO widget_fields VALUES(3522,546,'hourLabelText','String?','Optionally provide your own hour label text.','可选择提供您自己的小时标签文本。',5,0);
INSERT INTO widget_fields VALUES(3523,546,'minuteLabelText','String?','Optionally provide your own minute label text.','可选择提供您自己的分钟标签文本。',6,0);
INSERT INTO widget_fields VALUES(3524,546,'restorationId','String?','Restoration ID to save and restore the state of the [TimePickerDialog].','保存和恢复 [TimePickerDialog] 状态的恢复 ID。',7,0);
INSERT INTO widget_fields VALUES(3525,546,'initialEntryMode','TimePickerEntryMode','The entry mode for the picker. Whether it''s text input or a dial.','选择器的输入模式。是文本输入还是表盘。',8,1);
INSERT INTO widget_fields VALUES(3526,546,'orientation','Orientation?','The optional [orientation] parameter sets the [Orientation] to use when displaying the dialog.','可选的 [orientation] 参数设置显示对话框时使用的 [Orientation]。',9,0);
INSERT INTO widget_fields VALUES(3527,546,'onEntryModeChanged','EntryModeChangeCallback?','Callback called when the selected entry mode is changed.','选定的输入模式更改时调用的回调。',10,0);
INSERT INTO widget_fields VALUES(3528,546,'switchToInputEntryModeIcon','Icon?','{@macro flutter.material.time_picker.switchToInputEntryModeIcon}','{@macro flutter.material.time_picker.switchToInputEntryModeIcon}',11,0);
INSERT INTO widget_fields VALUES(3529,546,'switchToTimerEntryModeIcon','Icon?','{@macro flutter.material.time_picker.switchToTimerEntryModeIcon}','{@macro flutter.material.time_picker.switchToTimerEntryModeIcon}',12,0);
INSERT INTO widget_fields VALUES(3530,547,'data','TimePickerThemeData','The properties for descendant time picker widgets.','后代时间选择器小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(3531,208,'title','String','A one-line description of this app for use in the window manager.','在窗口管理器中使用的此应用程序的单行描述。',0,1);
INSERT INTO widget_fields VALUES(3532,208,'color','Color','A color that the window manager should use to identify this app. Must be an opaque color (i.e. color.alpha must be 255 (0xFF)), and must not be null.','窗口管理器应用于识别此应用程序的颜色。必须是不透明颜色（即 color.alpha 必须为 255 (0xFF)），且不能为 null。',1,1);
INSERT INTO widget_fields VALUES(3533,208,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',2,1);
INSERT INTO widget_fields VALUES(3534,33,'children','List<Widget>','The toggle button widgets.','切换按钮小部件。',0,1);
INSERT INTO widget_fields VALUES(3535,33,'isSelected','List<bool>','The corresponding selection state of each toggle button.','每个切换按钮对应的选择状态。',1,1);
INSERT INTO widget_fields VALUES(3536,33,'onPressed','void Function(int index)?','The callback that is called when a button is tapped.','点击按钮时调用的回调。',2,0);
INSERT INTO widget_fields VALUES(3537,33,'mouseCursor','MouseCursor?','{@macro flutter.material.RawMaterialButton.mouseCursor}','{@macro flutter.material.RawMaterialButton.mouseCursor}',3,0);
INSERT INTO widget_fields VALUES(3538,33,'tapTargetSize','MaterialTapTargetSize?','Configures the minimum size of the area within which the buttons may be pressed.','配置可以按下按钮的区域的最小大小。',4,0);
INSERT INTO widget_fields VALUES(3539,33,'textStyle','TextStyle?','The [TextStyle] to apply to any text in these toggle buttons.','应用于这些切换按钮中任何文本的 [TextStyle]。',5,0);
INSERT INTO widget_fields VALUES(3540,33,'constraints','BoxConstraints?','Defines the button''s size.','定义按钮的大小。',6,0);
INSERT INTO widget_fields VALUES(3541,33,'color','Color?','The color for descendant [Text] and [Icon] widgets if the button is enabled and not selected.','如果按钮已启用且未选中，后代 [Text] 和 [Icon] 小部件的颜色。',7,0);
INSERT INTO widget_fields VALUES(3542,33,'selectedColor','Color?','The color for descendant [Text] and [Icon] widgets if the button is selected.','如果按钮被选中，后代 [Text] 和 [Icon] 小部件的颜色。',8,0);
INSERT INTO widget_fields VALUES(3543,33,'disabledColor','Color?','The color for descendant [Text] and [Icon] widgets if the button is disabled.','如果按钮被禁用，后代 [Text] 和 [Icon] 小部件的颜色。',9,0);
INSERT INTO widget_fields VALUES(3544,33,'fillColor','Color?','The fill color for selected toggle buttons.','选中的切换按钮的填充颜色。',10,0);
INSERT INTO widget_fields VALUES(3545,33,'focusColor','Color?','The color to use for filling the button when the button has input focus.','按钮具有输入焦点时用于填充按钮的颜色。',11,0);
INSERT INTO widget_fields VALUES(3546,33,'highlightColor','Color?','The highlight color for the button''s [InkWell].','按钮的 [InkWell] 的高亮颜色。',12,0);
INSERT INTO widget_fields VALUES(3547,33,'splashColor','Color?','The splash color for the button''s [InkWell].','按钮的 [InkWell] 的飞溅颜色。',13,0);
INSERT INTO widget_fields VALUES(3548,33,'hoverColor','Color?','The color to use for filling the button when the button has a pointer hovering over it.','指针悬停在按钮上时用于填充按钮的颜色。',14,0);
INSERT INTO widget_fields VALUES(3549,33,'focusNodes','List<FocusNode>?','The list of [FocusNode]s, corresponding to each toggle button.','对应于每个切换按钮的 [FocusNode] 列表。',15,0);
INSERT INTO widget_fields VALUES(3550,33,'renderBorder','bool','Whether or not to render a border around each toggle button.','是否在每个切换按钮周围渲染边框。',16,1);
INSERT INTO widget_fields VALUES(3551,33,'borderColor','Color?','The border color to display when the toggle button is enabled and not selected.','切换按钮启用且未选中时显示的边框颜色。',17,0);
INSERT INTO widget_fields VALUES(3552,33,'selectedBorderColor','Color?','The border color to display when the toggle button is selected.','切换按钮被选中时显示的边框颜色。',18,0);
INSERT INTO widget_fields VALUES(3553,33,'disabledBorderColor','Color?','The border color to display when the toggle button is disabled.','切换按钮被禁用时显示的边框颜色。',19,0);
INSERT INTO widget_fields VALUES(3554,33,'borderWidth','double?','The width of the border surrounding each toggle button.','围绕每个切换按钮的边框宽度。',20,0);
INSERT INTO widget_fields VALUES(3555,33,'borderRadius','BorderRadius?','The radii of the border''s corners.','边框角的半径。',21,0);
INSERT INTO widget_fields VALUES(3556,33,'direction','Axis','The direction along which the buttons are rendered.','按钮渲染的方向。',22,1);
INSERT INTO widget_fields VALUES(3557,33,'verticalDirection','VerticalDirection','If [direction] is [Axis.vertical], this parameter determines whether to lay out the buttons starting from the first or last child from top to bottom.','如果 [direction] 是 [Axis.vertical]，此参数确定是否从上到下从第一个或最后一个子项开始布局按钮。',23,1);
INSERT INTO widget_fields VALUES(3558,332,'data','ToggleButtonsThemeData','Specifies the color and border values for descendant [ToggleButtons] widgets.','指定后代 [ToggleButtons] 小部件的颜色和边框值。',0,1);
INSERT INTO widget_fields VALUES(3559,50,'message','String?','The text to display in the tooltip.','在工具提示中显示的文本。',0,0);
INSERT INTO widget_fields VALUES(3560,50,'richMessage','InlineSpan?','The rich text to display in the tooltip.','在工具提示中显示的富文本。',1,0);
INSERT INTO widget_fields VALUES(3561,50,'height','double?','The minimum height of the [Tooltip]''s message.','[Tooltip] 消息的最小高度。',2,0);
INSERT INTO widget_fields VALUES(3562,50,'constraints','BoxConstraints?','Constrains the size of the [Tooltip]''s message.','约束 [Tooltip] 消息的大小。',3,0);
INSERT INTO widget_fields VALUES(3563,50,'padding','EdgeInsetsGeometry?','The amount of space by which to inset the [Tooltip]''s message.','插入 [Tooltip] 消息的空间量。',4,0);
INSERT INTO widget_fields VALUES(3564,50,'margin','EdgeInsetsGeometry?','The empty space that surrounds the tooltip.','围绕工具提示的空白空间。',5,0);
INSERT INTO widget_fields VALUES(3565,50,'verticalOffset','double?','The vertical gap between the widget and the displayed tooltip.','小部件与显示的工具提示之间的垂直间隙。',6,0);
INSERT INTO widget_fields VALUES(3566,50,'preferBelow','bool?','Whether the tooltip defaults to being displayed below the widget.','工具提示是否默认显示在小部件下方。',7,0);
INSERT INTO widget_fields VALUES(3567,50,'excludeFromSemantics','bool?','Whether the tooltip''s [message] or [richMessage] should be excluded from the semantics tree.','工具提示的 [message] 或 [richMessage] 是否应从语义树中排除。',8,0);
INSERT INTO widget_fields VALUES(3568,50,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',9,0);
INSERT INTO widget_fields VALUES(3569,50,'decoration','Decoration?','Specifies the tooltip''s shape and background color.','指定工具提示的形状和背景颜色。',10,0);
INSERT INTO widget_fields VALUES(3570,50,'textStyle','TextStyle?','The style to use for the message of the tooltip.','用于工具提示消息的样式。',11,0);
INSERT INTO widget_fields VALUES(3571,50,'textAlign','TextAlign?','How the message of the tooltip is aligned horizontally.','工具提示消息如何水平对齐。',12,0);
INSERT INTO widget_fields VALUES(3572,50,'waitDuration','Duration?','The length of time that a pointer must hover over a tooltip''s widget before the tooltip will be shown.','指针必须悬停在工具提示小部件上多长时间才会显示工具提示。',13,0);
INSERT INTO widget_fields VALUES(3573,50,'showDuration','Duration?','The length of time that the tooltip will be shown after a long press is released (if triggerMode is [TooltipTriggerMode.longPress]) or a tap is released (if triggerMode is [TooltipTriggerMode.tap]). This property does not affect mouse pointer devices.','长按释放后（如果 triggerMode 是 [TooltipTriggerMode.longPress]）或点击释放后（如果 triggerMode 是 [TooltipTriggerMode.tap]）工具提示将显示的时间长度。此属性不影响鼠标指针设备。',14,0);
INSERT INTO widget_fields VALUES(3574,50,'exitDuration','Duration?','The length of time that a pointer must have stopped hovering over a tooltip''s widget before the tooltip will be hidden.','指针必须停止悬停在工具提示小部件上多长时间才会隐藏工具提示。',15,0);
INSERT INTO widget_fields VALUES(3575,50,'enableTapToDismiss','bool','Whether the tooltip can be dismissed by tap.','工具提示是否可以通过点击关闭。',16,1);
INSERT INTO widget_fields VALUES(3576,50,'triggerMode','TooltipTriggerMode?','The [TooltipTriggerMode] that will show the tooltip.','将显示工具提示的 [TooltipTriggerMode]。',17,0);
INSERT INTO widget_fields VALUES(3577,50,'enableFeedback','bool?','Whether the tooltip should provide acoustic and/or haptic feedback.','工具提示是否应提供声音和/或触觉反馈。',18,0);
INSERT INTO widget_fields VALUES(3578,50,'onTriggered','TooltipTriggeredCallback?','Called when the Tooltip is triggered.','触发工具提示时调用。',19,0);
INSERT INTO widget_fields VALUES(3579,50,'mouseCursor','MouseCursor?','The cursor for a mouse pointer when it enters or is hovering over the widget.','鼠标指针进入或悬停在小部件上时的光标。',20,0);
INSERT INTO widget_fields VALUES(3580,50,'ignorePointer','bool?','Whether this tooltip should be invisible to hit testing.','此工具提示是否应对命中测试不可见。',21,0);
INSERT INTO widget_fields VALUES(3581,333,'data','TooltipThemeData','The properties for descendant [Tooltip] widgets.','后代 [Tooltip] 小部件的属性。',0,1);
INSERT INTO widget_fields VALUES(3582,548,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(3583,548,'visible','bool','Determines the visibility of [Tooltip] widgets that inherit from this widget.','确定从此小部件继承的 [Tooltip] 小部件的可见性。',1,1);
INSERT INTO widget_fields VALUES(3584,78,'transform','Matrix4','The matrix to transform the child by during painting.','绘制期间变换子项的矩阵。',0,1);
INSERT INTO widget_fields VALUES(3585,78,'origin','Offset?','The origin of the coordinate system (relative to the upper left corner of this render object) in which to apply the matrix.','应用矩阵的坐标系原点（相对于此渲染对象的左上角）。',1,0);
INSERT INTO widget_fields VALUES(3586,78,'alignment','AlignmentGeometry?','The alignment of the origin, relative to the size of the box.','原点的对齐，相对于框的大小。',2,0);
INSERT INTO widget_fields VALUES(3587,78,'transformHitTests','bool','Whether to apply the transformation when performing hit tests.','执行命中测试时是否应用变换。',3,1);
INSERT INTO widget_fields VALUES(3588,78,'filterQuality','FilterQuality?','The filter quality with which to apply the transform as a bitmap operation.','将变换作为位图操作应用时的过滤质量。',4,0);
INSERT INTO widget_fields VALUES(3589,549,'tree','List<TreeSliverNode<T>>','The list of [TreeSliverNode]s that may be displayed in the [TreeSliver].','可能在 [TreeSliver] 中显示的 [TreeSliverNode] 列表。',0,1);
INSERT INTO widget_fields VALUES(3590,549,'treeNodeBuilder','TreeSliverNodeBuilder','Called to build and entry of the [TreeSliver] for the given node.','调用以为给定节点构建和输入 [TreeSliver]。',1,1);
INSERT INTO widget_fields VALUES(3591,549,'treeRowExtentBuilder','TreeSliverRowExtentBuilder','Called to calculate the extent of the widget built for the given [TreeSliverNode].','调用以计算为给定 [TreeSliverNode] 构建的小部件的范围。',2,1);
INSERT INTO widget_fields VALUES(3592,549,'controller','TreeSliverController?','If provided, the controller can be used to expand and collapse [TreeSliverNode]s, or lookup information about the current state of the [TreeSliver].','如果提供，控制器可用于展开和折叠 [TreeSliverNode]，或查找有关 [TreeSliver] 当前状态的信息。',3,0);
INSERT INTO widget_fields VALUES(3593,549,'onNodeToggle','TreeSliverNodeCallback?','Called when a [TreeSliverNode] expands or collapses.','[TreeSliverNode] 展开或折叠时调用。',4,0);
INSERT INTO widget_fields VALUES(3594,549,'toggleAnimationStyle','AnimationStyle?','The default [AnimationStyle] for expanding and collapsing nodes in the [TreeSliver].','[TreeSliver] 中展开和折叠节点的默认 [AnimationStyle]。',5,0);
INSERT INTO widget_fields VALUES(3595,549,'indentation','TreeSliverIndentationType','The number of pixels children will be offset by in the cross axis based on their [TreeSliverNode.depth].','子项将根据其 [TreeSliverNode.depth] 在交叉轴上偏移的像素数。',6,1);
INSERT INTO widget_fields VALUES(3596,549,'addAutomaticKeepAlives','bool','{@macro flutter.widgets.SliverChildBuilderDelegate.addAutomaticKeepAlives}','{@macro flutter.widgets.SliverChildBuilderDelegate.addAutomaticKeepAlives}',7,1);
INSERT INTO widget_fields VALUES(3597,549,'addRepaintBoundaries','bool','{@macro flutter.widgets.SliverChildBuilderDelegate.addRepaintBoundaries}','{@macro flutter.widgets.SliverChildBuilderDelegate.addRepaintBoundaries}',8,1);
INSERT INTO widget_fields VALUES(3598,549,'addSemanticIndexes','bool','{@macro flutter.widgets.SliverChildBuilderDelegate.addSemanticIndexes}','{@macro flutter.widgets.SliverChildBuilderDelegate.addSemanticIndexes}',9,1);
INSERT INTO widget_fields VALUES(3599,549,'semanticIndexCallback','SemanticIndexCallback','{@macro flutter.widgets.SliverChildBuilderDelegate.semanticIndexCallback}','{@macro flutter.widgets.SliverChildBuilderDelegate.semanticIndexCallback}',10,1);
INSERT INTO widget_fields VALUES(3600,549,'semanticIndexOffset','int','{@macro flutter.widgets.SliverChildBuilderDelegate.semanticIndexOffset}','{@macro flutter.widgets.SliverChildBuilderDelegate.semanticIndexOffset}',11,1);
INSERT INTO widget_fields VALUES(3601,549,'findChildIndexCallback','int? Function(Key)?','{@macro flutter.widgets.SliverChildBuilderDelegate.findChildIndexCallback}','{@macro flutter.widgets.SliverChildBuilderDelegate.findChildIndexCallback}',12,0);
INSERT INTO widget_fields VALUES(3602,226,'tween','Tween<T>','Defines the target value for the animation.','定义动画的目标值。',0,1);
INSERT INTO widget_fields VALUES(3603,226,'builder','ValueWidgetBuilder<T>','Called every time the animation value changes.','每次动画值更改时调用。',1,1);
INSERT INTO widget_fields VALUES(3604,226,'child','Widget?','The child widget to pass to the builder.','传递给构建器的子小部件。',2,0);
INSERT INTO widget_fields VALUES(3605,551,'diagonalDragBehavior','DiagonalDragBehavior','How scrolling gestures should lock to one axis, or allow free movement in both axes.','滚动手势应如何锁定到一个轴，或允许在两个轴上自由移动。',0,1);
INSERT INTO widget_fields VALUES(3606,551,'horizontalDetails','ScrollableDetails','The configuration of the horizontal [Scrollable].','水平 [Scrollable] 的配置。',1,1);
INSERT INTO widget_fields VALUES(3607,551,'verticalDetails','ScrollableDetails','The configuration of the vertical [Scrollable].','垂直 [Scrollable] 的配置。',2,1);
INSERT INTO widget_fields VALUES(3608,551,'viewportBuilder','TwoDimensionalViewportBuilder','Builds the viewport through which the scrollable content is displayed.','构建显示可滚动内容的视口。',3,1);
INSERT INTO widget_fields VALUES(3609,551,'incrementCalculator','ScrollIncrementCalculator?','{@macro flutter.widgets.Scrollable.incrementCalculator}','{@macro flutter.widgets.Scrollable.incrementCalculator}',4,0);
INSERT INTO widget_fields VALUES(3610,551,'restorationId','String?','{@macro flutter.widgets.scrollable.restorationId}','{@macro flutter.widgets.scrollable.restorationId}',5,0);
INSERT INTO widget_fields VALUES(3611,551,'excludeFromSemantics','bool','{@macro flutter.widgets.scrollable.excludeFromSemantics}','{@macro flutter.widgets.scrollable.excludeFromSemantics}',6,1);
INSERT INTO widget_fields VALUES(3612,551,'hitTestBehavior','HitTestBehavior','{@macro flutter.widgets.scrollable.hitTestBehavior}','{@macro flutter.widgets.scrollable.hitTestBehavior}',7,1);
INSERT INTO widget_fields VALUES(3613,551,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',8,1);
INSERT INTO widget_fields VALUES(3614,550,'delegate','TwoDimensionalChildDelegate','A delegate that provides the children for the [TwoDimensionalScrollView].','为 [TwoDimensionalScrollView] 提供子项的委托。',0,1);
INSERT INTO widget_fields VALUES(3615,550,'cacheExtent','double?','{@macro flutter.rendering.RenderViewportBase.cacheExtent}','{@macro flutter.rendering.RenderViewportBase.cacheExtent}',1,0);
INSERT INTO widget_fields VALUES(3616,550,'diagonalDragBehavior','DiagonalDragBehavior','Whether scrolling gestures should lock to one axes, allow free movement in both axes, or be evaluated on a weighted scale.','滚动手势是否应锁定到一个轴、允许在两个轴上自由移动，或在加权尺度上评估。',2,1);
INSERT INTO widget_fields VALUES(3617,550,'primary','bool?','{@macro flutter.widgets.scroll_view.primary}','{@macro flutter.widgets.scroll_view.primary}',3,0);
INSERT INTO widget_fields VALUES(3618,550,'mainAxis','Axis','The main axis of the two.','两者中的主轴。',4,1);
INSERT INTO widget_fields VALUES(3619,550,'verticalDetails','ScrollableDetails','The configuration of the vertical Scrollable.','垂直 Scrollable 的配置。',5,1);
INSERT INTO widget_fields VALUES(3620,550,'horizontalDetails','ScrollableDetails','The configuration of the horizontal Scrollable.','水平 Scrollable 的配置。',6,1);
INSERT INTO widget_fields VALUES(3621,550,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',7,1);
INSERT INTO widget_fields VALUES(3622,550,'keyboardDismissBehavior','ScrollViewKeyboardDismissBehavior?','{@macro flutter.widgets.scroll_view.keyboardDismissBehavior}','{@macro flutter.widgets.scroll_view.keyboardDismissBehavior}',8,0);
INSERT INTO widget_fields VALUES(3623,550,'hitTestBehavior','HitTestBehavior','{@macro flutter.widgets.scrollable.hitTestBehavior}','{@macro flutter.widgets.scrollable.hitTestBehavior}',9,1);
INSERT INTO widget_fields VALUES(3624,550,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',10,1);
INSERT INTO widget_fields VALUES(3625,552,'verticalOffset','ViewportOffset','Which part of the content inside the viewport should be visible in the vertical axis.','视口内容的哪一部分应在垂直轴上可见。',0,1);
INSERT INTO widget_fields VALUES(3626,552,'verticalAxisDirection','AxisDirection','The direction in which the [verticalOffset]''s [ViewportOffset.pixels] increases.','[verticalOffset] 的 [ViewportOffset.pixels] 增加的方向。',1,1);
INSERT INTO widget_fields VALUES(3627,552,'horizontalOffset','ViewportOffset','Which part of the content inside the viewport should be visible in the horizontal axis.','视口内容的哪一部分应在水平轴上可见。',2,1);
INSERT INTO widget_fields VALUES(3628,552,'horizontalAxisDirection','AxisDirection','The direction in which the [horizontalOffset]''s [ViewportOffset.pixels] increases.','[horizontalOffset] 的 [ViewportOffset.pixels] 增加的方向。',3,1);
INSERT INTO widget_fields VALUES(3629,552,'mainAxis','Axis','The main axis of the two.','两者中的主轴。',4,1);
INSERT INTO widget_fields VALUES(3630,552,'cacheExtent','double?','{@macro flutter.rendering.RenderViewportBase.cacheExtent}','{@macro flutter.rendering.RenderViewportBase.cacheExtent}',5,0);
INSERT INTO widget_fields VALUES(3631,552,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',6,1);
INSERT INTO widget_fields VALUES(3632,552,'delegate','TwoDimensionalChildDelegate','A delegate that provides the children for the [TwoDimensionalViewport].','为 [TwoDimensionalViewport] 提供子项的委托。',7,1);
INSERT INTO widget_fields VALUES(3633,81,'textDirection','TextDirection?','The text direction to use when interpreting the [alignment] if it is an [AlignmentDirectional].','如果 [alignment] 是 [AlignmentDirectional]，解释 [alignment] 时使用的文本方向。',0,0);
INSERT INTO widget_fields VALUES(3634,81,'alignment','AlignmentGeometry','The alignment to use when laying out the child.','布局子项时使用的对齐。',1,1);
INSERT INTO widget_fields VALUES(3635,81,'constrainedAxis','Axis?','The axis to retain constraints on, if any.','要保留约束的轴（如果有）。',2,0);
INSERT INTO widget_fields VALUES(3636,81,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',3,1);
INSERT INTO widget_fields VALUES(3637,81,'child','Widget?','The widget below this widget in the tree.','树中此小部件下方的小部件。',4,0);
INSERT INTO widget_fields VALUES(3638,241,'value','ValueNotifier<T>','The value to track over time.','要随时间跟踪的值。',0,1);
INSERT INTO widget_fields VALUES(3639,241,'shouldChangeUndoStack','bool Function(T? oldValue, T newValue)?','Called when checking whether a value change should be pushed onto the undo stack.','检查值更改是否应推送到撤销堆栈时调用。',1,0);
INSERT INTO widget_fields VALUES(3640,241,'undoStackModifier','T Function(T value)?','Called right before a new entry is pushed to the undo stack.','在新条目推送到撤销堆栈之前调用。',2,0);
INSERT INTO widget_fields VALUES(3641,241,'onTriggered','void Function(T value)','Called when an undo or redo causes a state change.','撤销或重做导致状态更改时调用。',3,1);
INSERT INTO widget_fields VALUES(3642,241,'focusNode','FocusNode','The [FocusNode] that will be used to listen for focus to set the initial undo state for the element.','将用于监听焦点以设置元素初始撤销状态的 [FocusNode]。',4,1);
INSERT INTO widget_fields VALUES(3643,241,'controller','UndoHistoryController?','{@template flutter.widgets.undoHistory.controller} Controls the undo state.','{@template flutter.widgets.undoHistory.controller} 控制撤销状态。',5,0);
INSERT INTO widget_fields VALUES(3644,241,'child','Widget','The child widget of [UndoHistory].','[UndoHistory] 的子小部件。',6,1);
INSERT INTO widget_fields VALUES(3645,554,'bucket','RestorationBucket?','The [RestorationBucket] that this widget will insert into the widget tree.','此小部件将插入小部件树的 [RestorationBucket]。',0,0);
INSERT INTO widget_fields VALUES(3646,22,'decoration','Decoration?','The header''s background. If decoration is null then a [BoxDecoration] with its background color set to the current theme''s primaryColor is used.','标题的背景。如果 decoration 为 null，则使用背景颜色设置为当前主题的 primaryColor 的 [BoxDecoration]。',0,0);
INSERT INTO widget_fields VALUES(3647,22,'margin','EdgeInsetsGeometry?','The margin around the drawer header.','抽屉标题周围的边距。',1,0);
INSERT INTO widget_fields VALUES(3648,22,'currentAccountPicture','Widget?','A widget placed in the upper-left corner that represents the current user''s account. Normally a [CircleAvatar].','放置在左上角代表当前用户帐户的小部件。通常是 [CircleAvatar]。',2,0);
INSERT INTO widget_fields VALUES(3649,22,'otherAccountsPictures','List<Widget>?','A list of widgets that represent the current user''s other accounts. Up to three of these widgets will be arranged in a row in the header''s upper-right corner. Normally a list of [CircleAvatar] widgets.','代表当前用户其他帐户的小部件列表。这些小部件中最多三个将在标题右上角排成一行。通常是 [CircleAvatar] 小部件列表。',3,0);
INSERT INTO widget_fields VALUES(3650,22,'currentAccountPictureSize','Size','The size of the [currentAccountPicture].','[currentAccountPicture] 的大小。',4,1);
INSERT INTO widget_fields VALUES(3651,22,'otherAccountsPicturesSize','Size','The size of each widget in [otherAccountsPicturesSize].','[otherAccountsPicturesSize] 中每个小部件的大小。',5,1);
INSERT INTO widget_fields VALUES(3652,22,'accountName','Widget?','A widget that represents the user''s current account name. It is displayed on the left, below the [currentAccountPicture].','代表用户当前帐户名称的小部件。它显示在左侧，[currentAccountPicture] 下方。',6,0);
INSERT INTO widget_fields VALUES(3653,22,'accountEmail','Widget?','A widget that represents the email address of the user''s current account. It is displayed on the left, below the [accountName].','代表用户当前帐户电子邮件地址的小部件。它显示在左侧，[accountName] 下方。',7,0);
INSERT INTO widget_fields VALUES(3654,22,'onDetailsPressed','VoidCallback?','A callback that is called when the horizontal area which contains the [accountName] and [accountEmail] is tapped.','点击包含 [accountName] 和 [accountEmail] 的水平区域时调用的回调。',8,0);
INSERT INTO widget_fields VALUES(3655,22,'arrowColor','Color','The [Color] of the arrow icon.','箭头图标的 [Color]。',9,1);
INSERT INTO widget_fields VALUES(3656,255,'valueListenable','ValueListenable<T>','The [ValueListenable] whose value you depend on in order to build.','您依赖其值来构建的 [ValueListenable]。',0,1);
INSERT INTO widget_fields VALUES(3657,255,'builder','ValueWidgetBuilder<T>','A [ValueWidgetBuilder] which builds a widget depending on the [valueListenable]''s value.','根据 [valueListenable] 的值构建小部件的 [ValueWidgetBuilder]。',1,1);
INSERT INTO widget_fields VALUES(3658,255,'child','Widget?','A [valueListenable]-independent widget which is passed back to the [builder].','与 [valueListenable] 无关的小部件，传递回 [builder]。',2,0);
INSERT INTO widget_fields VALUES(3659,35,'width','double?','The divider''s width.','分隔符的宽度。',0,0);
INSERT INTO widget_fields VALUES(3660,35,'thickness','double?','The thickness of the line drawn within the divider.','分隔符内绘制的线的厚度。',1,0);
INSERT INTO widget_fields VALUES(3661,35,'indent','double?','The amount of empty space on top of the divider.','分隔符顶部的空白空间量。',2,0);
INSERT INTO widget_fields VALUES(3662,35,'endIndent','double?','The amount of empty space under the divider.','分隔符底部的空白空间量。',3,0);
INSERT INTO widget_fields VALUES(3663,35,'color','Color?','The color to use when painting the line.','绘制线条时使用的颜色。',4,0);
INSERT INTO widget_fields VALUES(3664,35,'radius','BorderRadiusGeometry?','The amount of radius for the border of the divider.','分隔符边框的半径量。',5,0);
INSERT INTO widget_fields VALUES(3665,555,'view','FlutterView','The [FlutterView] into which [child] is drawn.','绘制 [child] 的 [FlutterView]。',0,1);
INSERT INTO widget_fields VALUES(3666,555,'child','Widget','The widget below this widget in the tree, which will be drawn into the [view].','树中此小部件下方的小部件，将绘制到 [view] 中。',1,1);
INSERT INTO widget_fields VALUES(3667,556,'view','Widget?','The widget that defines the view anchored to this widget.','定义锚定到此小部件的视图的小部件。',0,0);
INSERT INTO widget_fields VALUES(3668,556,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',1,1);
INSERT INTO widget_fields VALUES(3669,340,'axisDirection','AxisDirection','The direction in which the [offset]''s [ViewportOffset.pixels] increases.','[offset] 的 [ViewportOffset.pixels] 增加的方向。',0,1);
INSERT INTO widget_fields VALUES(3670,340,'crossAxisDirection','AxisDirection?','The direction in which child should be laid out in the cross axis.','子项在交叉轴上应布局的方向。',1,0);
INSERT INTO widget_fields VALUES(3671,340,'anchor','double','The relative position of the zero scroll offset.','零滚动偏移的相对位置。',2,1);
INSERT INTO widget_fields VALUES(3672,340,'offset','ViewportOffset','Which part of the content inside the viewport should be visible.','视口内容的哪一部分应该可见。',3,1);
INSERT INTO widget_fields VALUES(3673,340,'center','Key?','The first child in the [GrowthDirection.forward] growth direction.','[GrowthDirection.forward] 增长方向中的第一个子项。',4,0);
INSERT INTO widget_fields VALUES(3674,340,'cacheExtent','double?','{@macro flutter.rendering.RenderViewportBase.cacheExtent}','{@macro flutter.rendering.RenderViewportBase.cacheExtent}',5,0);
INSERT INTO widget_fields VALUES(3675,340,'cacheExtentStyle','CacheExtentStyle','{@macro flutter.rendering.RenderViewportBase.cacheExtentStyle}','{@macro flutter.rendering.RenderViewportBase.cacheExtentStyle}',6,1);
INSERT INTO widget_fields VALUES(3676,340,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',7,1);
INSERT INTO widget_fields VALUES(3677,10,'child','Widget','The widget to show or hide, as controlled by [visible].','要显示或隐藏的小部件，由 [visible] 控制。',0,1);
INSERT INTO widget_fields VALUES(3678,10,'replacement','Widget','The widget to use when the child is not [visible], assuming that none of the `maintain` flags (in particular, [maintainState]) are set.','当子项不 [visible] 时使用的小部件，假设没有设置任何 `maintain` 标志（特别是 [maintainState]）。',1,1);
INSERT INTO widget_fields VALUES(3679,10,'visible','bool','Switches between showing the [child] or hiding it.','在显示 [child] 或隐藏它之间切换。',2,1);
INSERT INTO widget_fields VALUES(3680,10,'maintainState','bool','Whether to maintain the [State] objects of the [child] subtree when it is not [visible].','当 [child] 子树不 [visible] 时是否维护其 [State] 对象。',3,1);
INSERT INTO widget_fields VALUES(3681,10,'maintainAnimation','bool','Whether to maintain animations within the [child] subtree when it is not [visible].','当 [child] 子树不 [visible] 时是否维护其中的动画。',4,1);
INSERT INTO widget_fields VALUES(3682,10,'maintainSize','bool','Whether to maintain space for where the widget would have been.','是否为小部件本来所在的位置维护空间。',5,1);
INSERT INTO widget_fields VALUES(3683,10,'maintainSemantics','bool','Whether to maintain the semantics for the widget when it is hidden (e.g. for accessibility).','当小部件隐藏时是否维护其语义（例如用于辅助功能）。',6,1);
INSERT INTO widget_fields VALUES(3684,10,'maintainInteractivity','bool','Whether to allow the widget to be interactive when hidden.','隐藏时是否允许小部件可交互。',7,1);
INSERT INTO widget_fields VALUES(3685,234,'child','Widget','The widget that is being inspected.','正在被检查的小部件。',0,1);
INSERT INTO widget_fields VALUES(3686,234,'exitWidgetSelectionButtonBuilder','ExitWidgetSelectionButtonBuilder?','A builder that is called to create the exit select-mode button.','调用以创建退出选择模式按钮的构建器。',1,0);
INSERT INTO widget_fields VALUES(3687,234,'moveExitWidgetSelectionButtonBuilder','MoveExitWidgetSelectionButtonBuilder?','A builder that is called to create the button that moves the exit select- mode button to the right or left.','调用以创建将退出选择模式按钮向右或向左移动的按钮的构建器。',2,0);
INSERT INTO widget_fields VALUES(3688,234,'tapBehaviorButtonBuilder','TapBehaviorButtonBuilder?','A builder that is called to create the button that changes the default tap behavior when Select Widget mode is enabled.','调用以创建在启用选择小部件模式时更改默认点击行为的按钮的构建器。',3,0);
INSERT INTO widget_fields VALUES(3689,236,'navigatorKey','GlobalKey<NavigatorState>?','{@template flutter.widgets.widgetsApp.navigatorKey} A key to use when building the [Navigator].','{@template flutter.widgets.widgetsApp.navigatorKey} 构建 [Navigator] 时使用的键。',0,0);
INSERT INTO widget_fields VALUES(3690,236,'onGenerateRoute','RouteFactory?','{@template flutter.widgets.widgetsApp.onGenerateRoute} The route generator callback used when the app is navigated to a named route.','{@template flutter.widgets.widgetsApp.onGenerateRoute} 应用程序导航到命名路由时使用的路由生成器回调。',1,0);
INSERT INTO widget_fields VALUES(3691,236,'onGenerateInitialRoutes','InitialRouteListFactory?','{@template flutter.widgets.widgetsApp.onGenerateInitialRoutes} The routes generator callback used for generating initial routes if [initialRoute] is provided.','{@template flutter.widgets.widgetsApp.onGenerateInitialRoutes} 如果提供了 [initialRoute]，用于生成初始路由的路由生成器回调。',2,0);
INSERT INTO widget_fields VALUES(3692,236,'pageRouteBuilder','PageRouteFactory?','The [PageRoute] generator callback used when the app is navigated to a named route.','应用程序导航到命名路由时使用的 [PageRoute] 生成器回调。',3,0);
INSERT INTO widget_fields VALUES(3693,236,'routeInformationParser','RouteInformationParser<Object>?','{@template flutter.widgets.widgetsApp.routeInformationParser} A delegate to parse the route information from the [routeInformationProvider] into a generic data type to be processed by the [routerDelegate] at a later stage.','{@template flutter.widgets.widgetsApp.routeInformationParser} 将来自 [routeInformationProvider] 的路由信息解析为通用数据类型的委托，以便稍后由 [routerDelegate] 处理。',4,0);
INSERT INTO widget_fields VALUES(3694,236,'routerDelegate','RouterDelegate<Object>?','{@template flutter.widgets.widgetsApp.routerDelegate} A delegate that configures a widget, typically a [Navigator], with parsed result from the [routeInformationParser].','{@template flutter.widgets.widgetsApp.routerDelegate} 使用来自 [routeInformationParser] 的解析结果配置小部件（通常是 [Navigator]）的委托。',5,0);
INSERT INTO widget_fields VALUES(3695,236,'backButtonDispatcher','BackButtonDispatcher?','{@template flutter.widgets.widgetsApp.backButtonDispatcher} A delegate that decide whether to handle the Android back button intent.','{@template flutter.widgets.widgetsApp.backButtonDispatcher} 决定是否处理 Android 返回按钮意图的委托。',6,0);
INSERT INTO widget_fields VALUES(3696,236,'routeInformationProvider','RouteInformationProvider?','{@template flutter.widgets.widgetsApp.routeInformationProvider} A object that provides route information through the [RouteInformationProvider.value] and notifies its listener when its value changes.','{@template flutter.widgets.widgetsApp.routeInformationProvider} 通过 [RouteInformationProvider.value] 提供路由信息并在其值更改时通知其监听器的对象。',7,0);
INSERT INTO widget_fields VALUES(3697,236,'routerConfig','RouterConfig<Object>?','{@template flutter.widgets.widgetsApp.routerConfig} An object to configure the underlying [Router].','{@template flutter.widgets.widgetsApp.routerConfig} 配置底层 [Router] 的对象。',8,0);
INSERT INTO widget_fields VALUES(3698,236,'home','Widget?','{@template flutter.widgets.widgetsApp.home} The widget for the default route of the app ([Navigator.defaultRouteName], which is `/`).','{@template flutter.widgets.widgetsApp.home} 应用程序默认路由的小部件（[Navigator.defaultRouteName]，即 `/`）。',9,0);
INSERT INTO widget_fields VALUES(3699,236,'routes','Map<String, WidgetBuilder>?','The application''s top-level routing table.','应用程序的顶级路由表。',10,0);
INSERT INTO widget_fields VALUES(3700,236,'onUnknownRoute','RouteFactory?','{@template flutter.widgets.widgetsApp.onUnknownRoute} Called when [onGenerateRoute] fails to generate a route, except for the [initialRoute].','{@template flutter.widgets.widgetsApp.onUnknownRoute} 当 [onGenerateRoute] 无法生成路由时调用，除了 [initialRoute]。',11,0);
INSERT INTO widget_fields VALUES(3701,236,'onNavigationNotification','NotificationListenerCallback<NavigationNotification>?','{@template flutter.widgets.widgetsApp.onNavigationNotification} The callback to use when receiving a [NavigationNotification].','{@template flutter.widgets.widgetsApp.onNavigationNotification} 接收 [NavigationNotification] 时使用的回调。',12,0);
INSERT INTO widget_fields VALUES(3702,236,'initialRoute','String?','{@template flutter.widgets.widgetsApp.initialRoute} The name of the first route to show, if a [Navigator] is built.','{@template flutter.widgets.widgetsApp.initialRoute} 如果构建了 [Navigator]，要显示的第一个路由的名称。',13,0);
INSERT INTO widget_fields VALUES(3703,236,'navigatorObservers','List<NavigatorObserver>?','{@template flutter.widgets.widgetsApp.navigatorObservers} The list of observers for the [Navigator] created for this app.','{@template flutter.widgets.widgetsApp.navigatorObservers} 为此应用程序创建的 [Navigator] 的观察者列表。',14,0);
INSERT INTO widget_fields VALUES(3704,236,'builder','TransitionBuilder?','{@template flutter.widgets.widgetsApp.builder} A builder for inserting widgets above the [Navigator] or - when the [WidgetsApp.router] constructor is used - above the [Router] but below the other widgets created by the [WidgetsApp] widget, or for replacing the [Navigator]/[Router] entirely.','{@template flutter.widgets.widgetsApp.builder} 用于在 [Navigator] 上方插入小部件的构建器，或者当使用 [WidgetsApp.router] 构造函数时在 [Router] 上方但在 [WidgetsApp] 小部件创建的其他小部件下方，或者完全替换 [Navigator]/[Router]。',15,0);
INSERT INTO widget_fields VALUES(3705,236,'title','String?','{@template flutter.widgets.widgetsApp.title} A one-line description used by the device to identify the app for the user.','{@template flutter.widgets.widgetsApp.title} 设备用于向用户标识应用程序的单行描述。',16,0);
INSERT INTO widget_fields VALUES(3706,236,'onGenerateTitle','GenerateAppTitle?','{@template flutter.widgets.widgetsApp.onGenerateTitle} If non-null this callback function is called to produce the app''s title string, otherwise [title] is used.','{@template flutter.widgets.widgetsApp.onGenerateTitle} 如果非空，调用此回调函数来生成应用程序的标题字符串，否则使用 [title]。',17,0);
INSERT INTO widget_fields VALUES(3707,236,'textStyle','TextStyle?','The default text style for [Text] in the application.','应用程序中 [Text] 的默认文本样式。',18,0);
INSERT INTO widget_fields VALUES(3708,236,'color','Color','{@template flutter.widgets.widgetsApp.color} The primary color to use for the application in the operating system interface.','{@template flutter.widgets.widgetsApp.color} 在操作系统界面中用于应用程序的主要颜色。',19,1);
INSERT INTO widget_fields VALUES(3709,236,'locale','Locale?','{@template flutter.widgets.widgetsApp.locale} The initial locale for this app''s [Localizations] widget is based on this value.','{@template flutter.widgets.widgetsApp.locale} 此应用程序的 [Localizations] 小部件的初始区域设置基于此值。',20,0);
INSERT INTO widget_fields VALUES(3710,236,'localizationsDelegates','Iterable<LocalizationsDelegate<dynamic>>?','{@template flutter.widgets.widgetsApp.localizationsDelegates} The delegates for this app''s [Localizations] widget.','{@template flutter.widgets.widgetsApp.localizationsDelegates} 此应用程序的 [Localizations] 小部件的委托。',21,0);
INSERT INTO widget_fields VALUES(3711,236,'localeListResolutionCallback','LocaleListResolutionCallback?','{@template flutter.widgets.widgetsApp.localeListResolutionCallback} This callback is responsible for choosing the app''s locale when the app is started, and when the user changes the device''s locale.','{@template flutter.widgets.widgetsApp.localeListResolutionCallback} 此回调负责在应用程序启动时以及用户更改设备区域设置时选择应用程序的区域设置。',22,0);
INSERT INTO widget_fields VALUES(3712,236,'localeResolutionCallback','LocaleResolutionCallback?','{@macro flutter.widgets.widgetsApp.localeListResolutionCallback}','{@macro flutter.widgets.widgetsApp.localeListResolutionCallback}',23,0);
INSERT INTO widget_fields VALUES(3713,236,'supportedLocales','Iterable<Locale>','{@template flutter.widgets.widgetsApp.supportedLocales} The list of locales that this app has been localized for.','{@template flutter.widgets.widgetsApp.supportedLocales} 此应用程序已本地化的区域设置列表。',24,1);
INSERT INTO widget_fields VALUES(3714,236,'showPerformanceOverlay','bool','Turns on a performance overlay.','打开性能覆盖。',25,1);
INSERT INTO widget_fields VALUES(3715,236,'showSemanticsDebugger','bool','Turns on an overlay that shows the accessibility information reported by the framework.','打开显示框架报告的辅助功能信息的覆盖。',26,1);
INSERT INTO widget_fields VALUES(3716,236,'debugShowWidgetInspector','bool','Turns on an overlay that enables inspecting the widget tree.','打开启用检查小部件树的覆盖。',27,1);
INSERT INTO widget_fields VALUES(3717,236,'exitWidgetSelectionButtonBuilder','ExitWidgetSelectionButtonBuilder?','Builds the widget the [WidgetInspector] uses to exit selection mode.','构建 [WidgetInspector] 用于退出选择模式的小部件。',28,0);
INSERT INTO widget_fields VALUES(3718,236,'moveExitWidgetSelectionButtonBuilder','MoveExitWidgetSelectionButtonBuilder?','Builds the widget the [WidgetInspector] uses to move the exit selection mode button.','构建 [WidgetInspector] 用于移动退出选择模式按钮的小部件。',29,0);
INSERT INTO widget_fields VALUES(3719,236,'tapBehaviorButtonBuilder','TapBehaviorButtonBuilder?','Builds the widget the [WidgetInspector] uses to change the default behavior when tapping on widgets in the app.','构建 [WidgetInspector] 用于更改在应用程序中点击小部件时的默认行为的小部件。',30,0);
INSERT INTO widget_fields VALUES(3720,236,'debugShowCheckedModeBanner','bool','{@template flutter.widgets.widgetsApp.debugShowCheckedModeBanner} Turns on a little "DEBUG" banner in debug mode to indicate that the app is in debug mode. This is on by default (in debug mode), to turn it off, set the constructor argument to false. In release mode this has no effect.','{@template flutter.widgets.widgetsApp.debugShowCheckedModeBanner} 在调试模式下打开一个小的',31,1);
INSERT INTO widget_fields VALUES(3721,236,'shortcuts','Map<ShortcutActivator, Intent>?','{@template flutter.widgets.widgetsApp.shortcuts} The default map of keyboard shortcuts to intents for the application.','{@template flutter.widgets.widgetsApp.shortcuts} 应用程序的键盘快捷键到意图的默认映射。',32,0);
INSERT INTO widget_fields VALUES(3722,236,'actions','Map<Type, Action<Intent>>?','{@template flutter.widgets.widgetsApp.actions} The default map of intent keys to actions for the application.','{@template flutter.widgets.widgetsApp.actions} 应用程序的意图键到操作的默认映射。',33,0);
INSERT INTO widget_fields VALUES(3723,236,'restorationScopeId','String?','{@template flutter.widgets.widgetsApp.restorationScopeId} The identifier to use for state restoration of this app.','{@template flutter.widgets.widgetsApp.restorationScopeId} 用于此应用程序状态恢复的标识符。',34,0);
INSERT INTO widget_fields VALUES(3724,236,'useInheritedMediaQuery','bool','{@template flutter.widgets.widgetsApp.useInheritedMediaQuery} Deprecated. This setting is now ignored.','{@template flutter.widgets.widgetsApp.useInheritedMediaQuery} 已弃用。此设置现在被忽略。',35,1);
INSERT INTO widget_fields VALUES(3725,558,'renderBox','RenderBox','The render box to place in the widget tree.','要放置在小部件树中的渲染框。',0,1);
INSERT INTO widget_fields VALUES(3726,558,'onBuild','VoidCallback?','Called when it is safe to update the render box and its descendants. If you update the RenderObject subtree under this widget outside of invocations of this callback, features like hit-testing will fail as the tree will be dirty.','当可以安全地更新渲染框及其后代时调用。如果您在此回调的调用之外更新此小部件下的 RenderObject 子树，诸如命中测试之类的功能将失败，因为树将是脏的。',1,0);
INSERT INTO widget_fields VALUES(3727,558,'onUnmount','VoidCallback?','Called when it is safe to dispose of children that were manually added to the [renderBox].','当可以安全地处置手动添加到 [renderBox] 的子项时调用。',2,0);
INSERT INTO widget_fields VALUES(3728,170,'child','Widget','The widget below this widget in the tree.','树中此小部件下方的小部件。',0,1);
INSERT INTO widget_fields VALUES(3729,170,'onWillPop','WillPopCallback?','Called to veto attempts by the user to dismiss the enclosing [ModalRoute].','调用以否决用户关闭封闭 [ModalRoute] 的尝试。',1,0);
INSERT INTO widget_fields VALUES(3730,98,'direction','Axis','The direction to use as the main axis.','用作主轴的方向。',0,1);
INSERT INTO widget_fields VALUES(3731,98,'alignment','WrapAlignment','How the children within a run should be placed in the main axis.','运行中的子项应如何在主轴上放置。',1,1);
INSERT INTO widget_fields VALUES(3732,98,'spacing','double','How much space to place between children in a run in the main axis.','在主轴上的运行中子项之间放置多少空间。',2,1);
INSERT INTO widget_fields VALUES(3733,98,'runAlignment','WrapAlignment','How the runs themselves should be placed in the cross axis.','运行本身应如何在交叉轴上放置。',3,1);
INSERT INTO widget_fields VALUES(3734,98,'runSpacing','double','How much space to place between the runs themselves in the cross axis.','在交叉轴上运行本身之间放置多少空间。',4,1);
INSERT INTO widget_fields VALUES(3735,98,'crossAxisAlignment','WrapCrossAlignment','How the children within a run should be aligned relative to each other in the cross axis.','运行中的子项应如何在交叉轴上相对于彼此对齐。',5,1);
INSERT INTO widget_fields VALUES(3736,98,'textDirection','TextDirection?','Determines the order to lay children out horizontally and how to interpret `start` and `end` in the horizontal direction.','确定水平布局子项的顺序以及如何解释水平方向上的 `start` 和 `end`。',6,0);
INSERT INTO widget_fields VALUES(3737,98,'verticalDirection','VerticalDirection','Determines the order to lay children out vertically and how to interpret `start` and `end` in the vertical direction.','确定垂直布局子项的顺序以及如何解释垂直方向上的 `start` 和 `end`。',7,1);
INSERT INTO widget_fields VALUES(3738,98,'clipBehavior','Clip','{@macro flutter.material.Material.clipBehavior}','{@macro flutter.material.Material.clipBehavior}',8,1);
INSERT INTO widget_fields VALUES(3739,136,'currentDate','DateTime','The current date.','当前日期。',0,1);
INSERT INTO widget_fields VALUES(3740,136,'firstDate','DateTime','The earliest date the user is permitted to pick.','用户被允许选择的最早日期。',1,1);
INSERT INTO widget_fields VALUES(3741,136,'lastDate','DateTime','The latest date the user is permitted to pick.','用户被允许选择的最晚日期。',2,1);
INSERT INTO widget_fields VALUES(3742,136,'selectedDate','DateTime?','The currently selected date.','当前选定的日期。',3,0);
INSERT INTO widget_fields VALUES(3743,136,'onChanged','ValueChanged<DateTime>','Called when the user picks a year.','用户选择年份时调用。',4,1);
INSERT INTO widget_fields VALUES(3744,136,'dragStartBehavior','DragStartBehavior','{@macro flutter.widgets.scrollable.dragStartBehavior}','{@macro flutter.widgets.scrollable.dragStartBehavior}',5,1);
INSERT INTO widget_fields VALUES(3745,136,'calendarDelegate','CalendarDelegate<DateTime>','{@macro flutter.material.calendar_date_picker.calendarDelegate}','{@macro flutter.material.calendar_date_picker.calendarDelegate}',6,1);
CREATE TABLE widget_desc(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        widget_id INTEGER NOT NULL,
        name VARCHAR(128) NOT NULL,
        info TEXT NOT NULL,
        locale VARCHAR(16) DEFAULT 'zh-cn'
      );
INSERT INTO widget_desc VALUES(1,130,'关于对话框','应用的简介对话框，可指定应用图标、应用名、应用版本号等信息和内部的子组件列表，点击左侧按钮可以跳转到证书页。','zh-cn');
INSERT INTO widget_desc VALUES(2,130,'About Dialog','The application''s introduction dialog, which can specify the application icon, application name, application version number, and other information, as well as the internal sub-component list. Clicking the button on the left can navigate to the certificate page.','en-us');
INSERT INTO widget_desc VALUES(3,193,'关于应用条目','一个点击条目，点击时可以弹出应用相关信息，可指定应用图标、应用名、应用版本号等信息和内部的子组件列表。','zh-cn');
INSERT INTO widget_desc VALUES(4,193,'About App Entry','A clickable entry that can pop up application-related information when clicked. It can specify the application icon, application name, application version number, and other information, as well as a list of internal child components.','en-us');
INSERT INTO widget_desc VALUES(5,295,'吸收点击','容纳一个子组件，可以通过指定ignoring属性，来决定孩子是否忽略手势事件，其本身接受事件。','zh-cn');
INSERT INTO widget_desc VALUES(6,295,'Absorb Click','Contains a child component, and it can decide whether the child ignores gesture events by specifying the ignoring attribute, while it itself accepts events.','en-us');
INSERT INTO widget_desc VALUES(7,286,'AbstractLayoutBuilder','将其构建推迟到布局的小部件的抽象超类。','zh-cn');
INSERT INTO widget_desc VALUES(8,286,'AbstractLayoutBuilder',' An abstract superclass for widgets that defer their building until layout.','en-us');
INSERT INTO widget_desc VALUES(9,13,'事件小条','和Chip组件类似的样式，有一些点击的属性。可以指定点击时的阴影深、点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(10,13,'Action Chip','Similar style to the Chip component, with some clickable properties. You can specify the shadow depth and click event when pressed.','en-us');
INSERT INTO widget_desc VALUES(11,300,'ActionIconTheme','覆盖此小部件子树中 [BackButtonIcon]、[CloseButtonIcon]、[DrawerButtonIcon] 和 [EndDrawerButtonIcon] 的默认图标的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(12,300,'ActionIconTheme',' An inherited widget that overrides the default icon of [BackButtonIcon], [CloseButtonIcon], [DrawerButtonIcon], and [EndDrawerButtonIcon] in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(13,310,'ActionListener','确保正确移除操作上的监听器的辅助小部件。','zh-cn');
INSERT INTO widget_desc VALUES(14,310,'ActionListener',' A helper widget for making sure that listeners on an action are removed properly.','en-us');
INSERT INTO widget_desc VALUES(15,311,'Actions','将 [Intent] 映射到 [Action] 的小部件，供其后代在调用 [Action] 时使用。','zh-cn');
INSERT INTO widget_desc VALUES(16,311,'Actions',' A widget that maps [Intent]s to [Action]s to be used by its descendants when invoking an [Action].','en-us');
INSERT INTO widget_desc VALUES(17,318,'AdaptiveTextSelectionToolbar','当前平台文本选择的默认上下文菜单。','zh-cn');
INSERT INTO widget_desc VALUES(18,318,'AdaptiveTextSelectionToolbar',' The default context menu for text selection for the current platform.','en-us');
INSERT INTO widget_desc VALUES(19,127,'弹出对话框','一个通用的对话框结构，可指定头、中、尾处的组件。拥有标题、内容的文字样式和边距，影深、形状等属性。','zh-cn');
INSERT INTO widget_desc VALUES(20,127,'Popup Dialog','A general dialog structure that can specify components at the head, middle, and tail. It has text styles and margins for the title and content, as well as properties such as elevation and shape.','en-us');
INSERT INTO widget_desc VALUES(21,85,'对齐组件','可容纳一个子组件，可以通过alignment让子组件，定位在父组件宽高的任何指定分率出。','zh-cn');
INSERT INTO widget_desc VALUES(22,85,'Align Component','Can accommodate a child component, and the child component can be positioned at any specified fraction of the parent component''s width and height through alignment.','en-us');
INSERT INTO widget_desc VALUES(23,111,'对齐变换','AnimatedWidget的子类,使用Alignment类型的动画器让子组件在两个Alignment对象之间进行过渡动画。','zh-cn');
INSERT INTO widget_desc VALUES(24,111,'Alignment Transition','A subclass of AnimatedWidget, using an animator of type Alignment to allow child components to transition between two Alignment objects.','en-us');
INSERT INTO widget_desc VALUES(25,321,'AndroidView','在小部件层次结构中嵌入 Android 视图。','zh-cn');
INSERT INTO widget_desc VALUES(26,321,'AndroidView',' Embeds an Android view in the Widget hierarchy.','en-us');
INSERT INTO widget_desc VALUES(27,322,'AndroidViewSurface','将 Android 视图与 Flutter 的合成器、触摸和语义子系统集成。','zh-cn');
INSERT INTO widget_desc VALUES(28,322,'AndroidViewSurface',' Integrates an Android view with Flutter''s compositor, touch, and semantics subsystems.','en-us');
INSERT INTO widget_desc VALUES(29,120,'对齐动画','能让子组件进行Align(对齐)动画，可指定时长和曲线，有动画结束事件。','zh-cn');
INSERT INTO widget_desc VALUES(30,120,'Alignment Animation','Allows child components to perform Align (alignment) animations, with specified duration and curve, and includes an animation end event.','en-us');
INSERT INTO widget_desc VALUES(31,228,'动画构造器','通过 builder 使动画对应的节点变为局部更新，并且可避免子组件刷新，减少构建的时间，提高动画性能。','zh-cn');
INSERT INTO widget_desc VALUES(32,228,'Animated Builder','By using the builder, the corresponding node of the animation can be updated locally, and the refresh of child components can be avoided, reducing the build time and improving animation performance.','en-us');
INSERT INTO widget_desc VALUES(33,123,'容器动画','集合alignment、padding、color、decoration、width、height、constraints、margin、transform于一身，这些属性皆可动画，可指定时长和曲线，有动画结束事件。','zh-cn');
INSERT INTO widget_desc VALUES(34,123,'Container Animation','Combines alignment, padding, color, decoration, width, height, constraints, margin, and transform, all of which can be animated. You can specify the duration and curve, and there is an animation end event.','en-us');
INSERT INTO widget_desc VALUES(35,100,'组件切换','将两个组件切换时呈现动画效果，可指定动画曲线、时长、对齐方式等属性。是一个非常有用的组件。','zh-cn');
INSERT INTO widget_desc VALUES(36,100,'Component Switch','Presents animation effects when switching between two components, allowing you to specify properties such as animation curves, duration, alignment, etc. It is a very useful component.','en-us');
INSERT INTO widget_desc VALUES(37,124,'容器动画','能让子文字组件进行TextStyle(文字样式)动画，可指定时长和曲线，有动画结束事件。','zh-cn');
INSERT INTO widget_desc VALUES(38,124,'Container Animation','Allows child text components to perform TextStyle (text style) animations, with specified duration and curve, and has an animation end event.','en-us');
INSERT INTO widget_desc VALUES(39,260,'动画分率盒','FractionallySizedBox 的动画版本，当 widthFactor 或 heightFactor 变化时， 以及 alignment 改变时，都会在指定的持续时间内自动平滑过渡到子组件的目标尺寸和位置。','zh-cn');
INSERT INTO widget_desc VALUES(40,260,'Animated Fractionally Sized Box','An animated version of FractionallySizedBox, which automatically and smoothly transitions to the target size and position of the child component within the specified duration when the widthFactor or heightFactor changes, or when the alignment changes.','en-us');
INSERT INTO widget_desc VALUES(41,323,'AnimatedGrid','一个滚动容器，当项目插入或从网格中移除时对其进行动画处理。','zh-cn');
INSERT INTO widget_desc VALUES(42,323,'AnimatedGrid',' A scrolling container that animates items when they are inserted into or removed from a grid. in a grid.','en-us');
INSERT INTO widget_desc VALUES(43,125,'图标动画','使用AnimatedIcons的图标数据，可以根据一个动画控制器来使图标进行动画效果。可指定图标大小、颜色等。','zh-cn');
INSERT INTO widget_desc VALUES(44,125,'Icon Animation','Using the icon data of AnimatedIcons, you can animate the icon based on an animation controller. The icon size, color, etc., can be specified.','en-us');
INSERT INTO widget_desc VALUES(45,117,'动画列表','强化版的ListView,可以对item进行动画处理。比如在添加、删除是item的动画。','zh-cn');
INSERT INTO widget_desc VALUES(46,117,'Animated List','An enhanced version of ListView, which can animate items. For example, animations for adding or deleting items.','en-us');
INSERT INTO widget_desc VALUES(47,227,'动画屏障模','内部依赖 ModalBarrier 实现，功能一致，只不过该组件可以传入一个颜色动画，进行过渡展现。','zh-cn');
INSERT INTO widget_desc VALUES(48,227,'Animated Barrier Module','Internally relies on ModalBarrier for implementation, with the same functionality, except that this component can accept a color animation for transition display.','en-us');
INSERT INTO widget_desc VALUES(49,118,'透明动画','能让子组件进行Opacity(透明度)动画，可指定时长和曲线，有动画结束事件。','zh-cn');
INSERT INTO widget_desc VALUES(50,118,'Opacity Animation','Allows child components to perform opacity animations, with specified duration and curve, and has an animation end event.','en-us');
INSERT INTO widget_desc VALUES(51,119,'边距动画','能让子组件进行Padding(内边距)动画，可指定时长和曲线，有动画结束事件。','zh-cn');
INSERT INTO widget_desc VALUES(52,119,'Padding Animation','Allows child components to perform padding animation, with specified duration and curve, and has an animation end event.','en-us');
INSERT INTO widget_desc VALUES(53,225,'物理模块动画','相关属性变化时具有动画效果的PhysicalModel组件，本质是PhysicalModel和动画结合的产物。可指定阴影、影深、圆角、动画时长、结束回调等属性。','zh-cn');
INSERT INTO widget_desc VALUES(54,225,'Animated Physical Model','A PhysicalModel component with animation effects when related properties change, essentially a combination of PhysicalModel and animation. Properties such as shadow, elevation, borderRadius, animation duration, and end callback can be specified.','en-us');
INSERT INTO widget_desc VALUES(55,121,'定位动画','能让子组件进行Positioned(定位)动画，可指定时长和曲线，有动画结束事件。只能用于Stack之中。','zh-cn');
INSERT INTO widget_desc VALUES(56,121,'Positioning Animation','Allows child components to perform Positioned (positioning) animations, with specified duration and curves, and has an animation end event. Can only be used within a Stack.','en-us');
INSERT INTO widget_desc VALUES(57,122,'方向定位动画','能让子组件进行PositionedDirectional(方向定位)动画，可指定时长和曲线，有动画结束事件。只能用于Stack之中。','zh-cn');
INSERT INTO widget_desc VALUES(58,122,'Directional Positioning Animation','Allows child components to perform PositionedDirectional (directional positioning) animations, with specified duration and curve, and has an animation end event. Can only be used within Stack.','en-us');
INSERT INTO widget_desc VALUES(59,259,'旋转动画','给定的旋转量发生变化时，子组件可以自动调整相对于旋转值，且前后值有动画变化。','zh-cn');
INSERT INTO widget_desc VALUES(60,259,'Rotation Animation','When the given rotation amount changes, the child component can automatically adjust relative to the rotation value, and there is an animated transition between the previous and new values.','en-us');
INSERT INTO widget_desc VALUES(61,249,'缩放动画','给定的缩放量发生变化时，子组件可以自动调整相对于缩放值，且前后值有动画变化。','zh-cn');
INSERT INTO widget_desc VALUES(62,249,'Scaling Animation','When the given scaling amount changes, the child component can automatically adjust relative to the scaling value, and there is an animation change between the previous and next values.','en-us');
INSERT INTO widget_desc VALUES(63,201,'尺寸动画','子组件大小发生变化时，进行动画渐变，可指定时长、对齐方式、曲线、vsync等属性。','zh-cn');
INSERT INTO widget_desc VALUES(64,201,'Size Animation','When the size of the child component changes, it animates gradually. You can specify properties such as duration, alignment, curve, vsync, etc.','en-us');
INSERT INTO widget_desc VALUES(65,247,'滑动动画','给定的偏移量发生变化时，子组件可以自动调整相对偏移量，且前后值有动画变化。','zh-cn');
INSERT INTO widget_desc VALUES(66,247,'Slide Animation','When the given offset changes, the child component can automatically adjust the relative offset, and there is an animated change between the previous and current values.','en-us');
INSERT INTO widget_desc VALUES(67,116,'动画切换','当子组件变化时执行动画，需要指定子组件的key进行标识。动画方式可以自定义,能指定动画时长、动画曲线等属性。','zh-cn');
INSERT INTO widget_desc VALUES(68,116,'Animated Switcher','Executes animations when child components change. The key of the child components needs to be specified for identification. The animation method can be customized, and properties such as animation duration and animation curve can be specified.','en-us');
INSERT INTO widget_desc VALUES(69,224,'动画主题','主题变化时具有动画效果的组件，本质是Theme组件和动画结合的产物。可指定ThemeData、动画时长、曲线、结束回调等。相当于增强版的Theme组件。','zh-cn');
INSERT INTO widget_desc VALUES(70,224,'Animated Theme','A component with animation effects when the theme changes, essentially a combination of the Theme component and animation. You can specify ThemeData, animation duration, curve, end callback, etc. It is equivalent to an enhanced version of the Theme component.','en-us');
INSERT INTO widget_desc VALUES(71,362,'AnimatedWidget','当给定的 [Listenable] 值发生变化时重建的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(72,362,'AnimatedWidget',' A widget that rebuilds when the given [Listenable] changes value.','en-us');
INSERT INTO widget_desc VALUES(73,288,'标注区域','有一个泛型，源码中仅在 app_bar, nav_bar 中使用该组件改变状态量、导航栏样式，泛型通常为 SystemUiOverlayStyle。','zh-cn');
INSERT INTO widget_desc VALUES(74,288,'Annotation Area','There is a generic type, which is only used in app_bar and nav_bar in the source code to change the state variables and navigation bar styles. The generic type is usually SystemUiOverlayStyle.','en-us');
INSERT INTO widget_desc VALUES(75,57,'应用头栏','一个应用顶部栏的通用结构，可在指定的部位放置相应的组件，常用于Scaffold组件中。','zh-cn');
INSERT INTO widget_desc VALUES(76,57,'App Header','A common structure for the top bar of an application, where corresponding components can be placed in specified areas, often used in the Scaffold component.','en-us');
INSERT INTO widget_desc VALUES(77,363,'AppKitView','包含 macOS AppKit 视图的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(78,363,'AppKitView',' Widget that contains a macOS AppKit view.','en-us');
INSERT INTO widget_desc VALUES(79,77,'比例盒','可容纳一个子组件，通过指定宽高比aspectRatio，来限定子组件容身区域。','zh-cn');
INSERT INTO widget_desc VALUES(80,77,'Aspect Ratio Box','Can contain a child component, and limit the area of the child component by specifying the aspectRatio.','en-us');
INSERT INTO widget_desc VALUES(81,356,'自动填充','在输入期间，提供联想词浮层展示，以便用户选择，拥有高度的可定制性。','zh-cn');
INSERT INTO widget_desc VALUES(82,356,'Autocomplete','During input, provides a suggestion overlay for users to select from, with a high degree of customization.','en-us');
INSERT INTO widget_desc VALUES(83,364,'AutocompleteHighlightedOption','用于指示应为键盘导航突出显示哪个自动完成选项的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(84,364,'AutocompleteHighlightedOption',' An inherited widget used to indicate which autocomplete option should be highlighted for keyboard navigation.','en-us');
INSERT INTO widget_desc VALUES(85,365,'AutofillGroup','将 [AutofillClient] 组合在一起的 [AutofillScope] 小部件。','zh-cn');
INSERT INTO widget_desc VALUES(86,365,'AutofillGroup',' An [AutofillScope] widget that groups [AutofillClient]s together.','en-us');
INSERT INTO widget_desc VALUES(87,239,'自动保活','在懒加载的列表中，允许子树请求保持状态，单独使用无效果，需要配合 KeepAliveNotification 使用。','zh-cn');
INSERT INTO widget_desc VALUES(88,239,'Automatic Keep Alive','In lazy-loaded lists, allows subtrees to request to maintain state. It has no effect when used alone and needs to be used in conjunction with KeepAliveNotification.','en-us');
INSERT INTO widget_desc VALUES(89,31,'返回按钮','一个具有返回功能的IconButton,返回图标不可更改。在iOS和Android中表现不同','zh-cn');
INSERT INTO widget_desc VALUES(90,31,'Back Button','An IconButton with a back function, the back icon cannot be changed. It behaves differently in iOS and Android.','en-us');
INSERT INTO widget_desc VALUES(91,272,'返回按钮图标','一个返回 Icon 图标, 根据平台展示对应的图标，可以通过 ActionIconTheme 定制主题。','zh-cn');
INSERT INTO widget_desc VALUES(92,272,'Back Button Icon','A return Icon icon, displaying the corresponding icon according to the platform, and the theme can be customized through ActionIconTheme.','en-us');
INSERT INTO widget_desc VALUES(93,366,'BackButtonListener','一个便利小部件，用于注册按下返回按钮时的回调。','zh-cn');
INSERT INTO widget_desc VALUES(94,366,'BackButtonListener',' A convenience widget that registers a callback for when the back button is pressed.','en-us');
INSERT INTO widget_desc VALUES(95,278,'背景滤镜','可容纳一个孩子，并将背景进行模糊滤镜。可以通过Stack将背景模糊实现组件的模糊效果。','zh-cn');
INSERT INTO widget_desc VALUES(96,278,'Background Filter','Can hold a child and apply a blur filter to the background. The background blur effect of the component can be achieved through Stack.','en-us');
INSERT INTO widget_desc VALUES(97,367,'BackdropGroup','为所有选择使用它的子 [BackdropFilter] 小部件建立共享背景层的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(98,367,'BackdropGroup',' A widget that establishes a shared backdrop layer for all child [BackdropFilter] widgets that opt into using it.','en-us');
INSERT INTO widget_desc VALUES(99,258,'标记组件','Badge 是一种 Material 风格的组件，可以在 child 上层添加标记物,构建时依赖 Stack 组件进行叠放。','zh-cn');
INSERT INTO widget_desc VALUES(100,258,'Badge Component','Badge is a Material-style component that can add markers on top of the child. It relies on the Stack component for layering during construction.','en-us');
INSERT INTO widget_desc VALUES(101,368,'BadgeTheme','一个继承小部件，用于覆盖此小部件子树中 [Badge] 的默认颜色样式和大小参数。','zh-cn');
INSERT INTO widget_desc VALUES(102,368,'BadgeTheme',' An inherited widget that overrides the default color style, and size parameters for [Badge]s in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(103,5,'角标组件','用于角标显示的组件。可容纳一个子组件,可选择方位添加角标及信息文字，可设置颜色。','zh-cn');
INSERT INTO widget_desc VALUES(104,5,'Badge Component','A component for displaying badges. It can accommodate one child component, allows for the selection of orientation to add badges and informational text, and can set colors.','en-us');
INSERT INTO widget_desc VALUES(105,75,'基线组件','可容纳一个子组件，通过控制基线高度来控制子组件的位置。一般用于文字组件。','zh-cn');
INSERT INTO widget_desc VALUES(106,75,'Baseline Component','Can contain a child component, and control the position of the child component by adjusting the baseline height. Generally used for text components.','en-us');
INSERT INTO widget_desc VALUES(107,369,'BlockSemantics','一个小部件，用于丢弃在同一语义容器中在其之前绘制的所有小部件的语义。','zh-cn');
INSERT INTO widget_desc VALUES(108,369,'BlockSemantics',' A widget that drops the semantics of all widget that were painted before it in the same semantic container.','en-us');
INSERT INTO widget_desc VALUES(109,61,'底部导航','一个可凹嵌的底部导航栏，通常用于Scaffold组件的底部，可指定颜色、影深、形状等属性，可与PageView实现切页效果。','zh-cn');
INSERT INTO widget_desc VALUES(110,61,'Bottom Navigation','A recessed bottom navigation bar, typically used at the bottom of a Scaffold component, can specify properties such as color, elevation, shape, etc., and can achieve page-switching effects with PageView.','en-us');
INSERT INTO widget_desc VALUES(111,60,'底部导航','一个底部导航栏，通常用于Scaffold组件的底部，可指定颜色和模式，接受点击回调，可与PageView实现切页效果。','zh-cn');
INSERT INTO widget_desc VALUES(112,60,'Bottom Navigation','A bottom navigation bar, usually used at the bottom of the Scaffold component, can specify colors and modes, accepts click callbacks, and can achieve page switching effects with PageView.','en-us');
INSERT INTO widget_desc VALUES(113,371,'BottomNavigationBarTheme','将底部导航栏主题应用于后代 [BottomNavigationBar] 小部件。','zh-cn');
INSERT INTO widget_desc VALUES(114,371,'BottomNavigationBarTheme',' Applies a bottom navigation bar theme to descendant [BottomNavigationBar] widgets.','en-us');
INSERT INTO widget_desc VALUES(115,142,'底部抽屉','作为组件来说是一个简单的结构组件,可指定形状、影深、背景色、内部组件构造器等。一般通过ScaffoldState的showBottomSheet方法从底部弹出。','zh-cn');
INSERT INTO widget_desc VALUES(116,142,'Bottom Drawer','As a component, it is a simple structural component that can specify shape, shadow depth, background color, and internal component constructors. It generally pops up from the bottom through the showBottomSheet method of ScaffoldState.','en-us');
INSERT INTO widget_desc VALUES(117,350,'盒滑动视图','BoxScrollView 是一个继承自 ScrollView 的抽象类，所以无法直接使用，它的子类有 ListView、GridView。一般不自己实现子类使用它','zh-cn');
INSERT INTO widget_desc VALUES(118,350,'Box Scroll View','BoxScrollView is an abstract class that inherits from ScrollView, so it cannot be used directly. Its subclasses include ListView and GridView. Generally, you do not implement subclasses to use it.','en-us');
INSERT INTO widget_desc VALUES(119,202,'构造器','一个不影响子组件占位空间，不具有显示性的组件，存在的唯一价值是提供当前组件对应元素的上下文。','zh-cn');
INSERT INTO widget_desc VALUES(120,202,'Constructor','A component that does not affect the space occupied by child components and has no display properties. Its sole value is to provide the context for the corresponding element of the current component.','en-us');
INSERT INTO widget_desc VALUES(121,29,'按钮栏','接收组件列表，常用于盛放若干个按钮。可指定对齐方式、边距等信息。','zh-cn');
INSERT INTO widget_desc VALUES(122,29,'Button Bar','Receives a list of components, often used to hold several buttons. You can specify alignment, margins, and other information.','en-us');
INSERT INTO widget_desc VALUES(123,338,'按钮条主题','主要用于为后代的ButtonBar组件统一设置默认属性,也可以通过该组件获取默认ButtonBarTheme的属性。','zh-cn');
INSERT INTO widget_desc VALUES(124,338,'Button Bar Theme','Mainly used to set default properties for descendant ButtonBar components uniformly. It can also be used to obtain the properties of the default ButtonBarTheme.','en-us');
INSERT INTO widget_desc VALUES(125,372,'ButtonStyleButton','样式由 [ButtonStyle] 对象定义的按钮的基础 [StatefulWidget] 类。','zh-cn');
INSERT INTO widget_desc VALUES(126,372,'ButtonStyleButton',' The base [StatefulWidget] class for buttons whose style is defined by a [ButtonStyle] object.','en-us');
INSERT INTO widget_desc VALUES(127,326,'按钮样式','主要用于为后代的Button类型组件统一设置默认属性,也可以通过该组件获取默认Button的属性。','zh-cn');
INSERT INTO widget_desc VALUES(128,326,'Button Style','Mainly used to set default properties for descendant Button-type components uniformly, and also to obtain the default properties of a Button through this component.','en-us');
INSERT INTO widget_desc VALUES(129,373,'CalendarDatePicker','显示给定月份的日期网格并允许用户选择日期。','zh-cn');
INSERT INTO widget_desc VALUES(130,373,'CalendarDatePicker',' Displays a grid of days for a given month and allows the user to select a date.','en-us');
INSERT INTO widget_desc VALUES(131,283,'快捷键回调','可以设置组合作为快捷键，在获取焦点后, 响应快捷键事件。','zh-cn');
INSERT INTO widget_desc VALUES(132,283,'Shortcut Callback','You can set combinations as shortcuts, and after gaining focus, respond to shortcut events.','en-us');
INSERT INTO widget_desc VALUES(133,3,'卡片组件',' 基于Material组件实现,用于将单个组件卡片化。并使其具有投影效果，可加外边距，也可以自定义卡片形状。','zh-cn');
INSERT INTO widget_desc VALUES(134,3,'Card Component','Implemented based on Material components, used to cardify a single component. It has a shadow effect, can add margin, and can customize the shape of the card.','en-us');
INSERT INTO widget_desc VALUES(135,374,'CardTheme','为后代 [Card] 小部件定义默认属性值。','zh-cn');
INSERT INTO widget_desc VALUES(136,374,'CardTheme',' Defines default property values for descendant [Card] widgets.','en-us');
INSERT INTO widget_desc VALUES(137,237,'轮播视图','一个符合 Material Design 规范的轮播组件。显示一个可滚动的项目列表，每条目都可以根据选定的布局动态调整大小。','zh-cn');
INSERT INTO widget_desc VALUES(138,237,'Carousel View','A carousel component that conforms to Material Design specifications. Displays a scrollable list of items, each of which can dynamically resize based on the selected layout.','en-us');
INSERT INTO widget_desc VALUES(139,86,'居中组件','可容纳一个子组件，并使其居中于父组件，是Align组件的一种精简模式。','zh-cn');
INSERT INTO widget_desc VALUES(140,86,'Center Component','Can contain a child component and center it within the parent component, serving as a simplified mode of the Align component.','en-us');
INSERT INTO widget_desc VALUES(141,39,'复选框','复选框组件，常用于配置的切换，可指定颜色，接收状态变化回调，也可指定三态。','zh-cn');
INSERT INTO widget_desc VALUES(142,39,'Checkbox','Checkbox component, commonly used for toggling configurations, can specify colors, receive state change callbacks, and can also specify tristate.','en-us');
INSERT INTO widget_desc VALUES(143,17,'复选瓦片','Flutter提供的一个通用列表条目结构，为左中结构,尾部是一个CheckBox。相应位置可插入组件，可以很方便地应对特定的条目。','zh-cn');
INSERT INTO widget_desc VALUES(144,17,'Checkbox Tile','A common list item structure provided by Flutter, featuring a left-middle structure with a CheckBox at the end. Components can be inserted at the corresponding positions, making it easy to handle specific items.','en-us');
INSERT INTO widget_desc VALUES(145,375,'CheckboxMenuButton','将 [Checkbox] 小部件与 [MenuItemButton] 结合的菜单项。','zh-cn');
INSERT INTO widget_desc VALUES(146,375,'CheckboxMenuButton',' A menu item that combines a [Checkbox] widget with a [MenuItemButton].','en-us');
INSERT INTO widget_desc VALUES(147,376,'CheckboxTheme','将复选框主题应用于后代 [Checkbox] 小部件。','zh-cn');
INSERT INTO widget_desc VALUES(148,376,'CheckboxTheme',' Applies a checkbox theme to descendant [Checkbox] widgets.','en-us');
INSERT INTO widget_desc VALUES(149,215,'debug标签','仅在debug运行模式中显示右上角角标，没什么太大卵用。在 MaterialApp 组件源码中有使用场景。','zh-cn');
INSERT INTO widget_desc VALUES(150,215,'debug label','Only shows the corner mark in the upper right corner in debug mode, which is not very useful. There are usage scenarios in the MaterialApp component source code.','en-us');
INSERT INTO widget_desc VALUES(151,377,'CheckedPopupMenuItem','Material Design 弹出菜单中带有勾选标记的项目。','zh-cn');
INSERT INTO widget_desc VALUES(152,377,'CheckedPopupMenuItem',' An item with a checkmark in a Material Design popup menu.','en-us');
INSERT INTO widget_desc VALUES(153,11,'小条组件','一个横向的圆边小条，可以包含左中右三个组件。可以指定颜色、阴影色和点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(154,11,'Chip Component','A horizontal rounded bar that can contain left, middle, and right components. You can specify colors, shadow colors, and click events.','en-us');
INSERT INTO widget_desc VALUES(155,328,'小条样式','主要用于为后代的Chip类型组件统一设置默认属性,也可以通过该组件获取默认Chip的属性。','zh-cn');
INSERT INTO widget_desc VALUES(156,328,'Chip Style','Mainly used to set default properties for Chip type components of descendants, and can also be used to obtain the default properties of Chip.','en-us');
INSERT INTO widget_desc VALUES(157,12,'选择小条','和Chip组件类似的样式，有一些选择的属性。可以指定选中时的颜色、阴影色和选择事件。','zh-cn');
INSERT INTO widget_desc VALUES(158,12,'Choice Strip','Similar in style to the Chip component, with some selectable properties. You can specify the color when selected, the shadow color, and the selection event.','en-us');
INSERT INTO widget_desc VALUES(159,9,'圆形组件','可将一张图片变成圆形，并且中间可以放置一个组件。可指定半径、前景色、背景色等。','zh-cn');
INSERT INTO widget_desc VALUES(160,9,'Circular Component','Can turn an image into a circle, and a component can be placed in the center. You can specify the radius, foreground color, background color, etc.','en-us');
INSERT INTO widget_desc VALUES(161,46,'圆形进度','圆形的进度显示,可指定颜色、线宽、进度等属性。value为null时会不停旋转。','zh-cn');
INSERT INTO widget_desc VALUES(162,46,'Circular Progress','A circular progress display that can specify properties such as color, line width, and progress. It will keep rotating when value is null.','en-us');
INSERT INTO widget_desc VALUES(163,66,'椭圆裁剪','可容纳一个子组件，并将其以宽高为长轴和短轴进行椭圆裁切。','zh-cn');
INSERT INTO widget_desc VALUES(164,66,'Oval Clipping','Can contain a child component and clip it into an ellipse with the width and height as the major and minor axes.','en-us');
INSERT INTO widget_desc VALUES(165,69,'路径裁剪','可容纳一个子组件，并将其按指定路径进行裁剪。可以自定义路径形状，是一个很灵活的裁剪组件。','zh-cn');
INSERT INTO widget_desc VALUES(166,69,'Path Clipping','Can contain a child component and clip it according to the specified path. The path shape can be customized, making it a very flexible clipping component.','en-us');
INSERT INTO widget_desc VALUES(167,67,'矩形裁剪','可容纳一个子组件，并将其进行矩形裁切。可借助SizedBox、Align、AspectRadio等限定组件进行定域。','zh-cn');
INSERT INTO widget_desc VALUES(168,67,'Rectangular Clipping','Can contain a child component and perform rectangular clipping. Can be localized using components such as SizedBox, Align, AspectRatio, etc.','en-us');
INSERT INTO widget_desc VALUES(169,68,'圆角矩形裁剪','可容纳一个子组件，并将其进行圆角矩形裁剪。指定borderRadius作为边角半径。','zh-cn');
INSERT INTO widget_desc VALUES(170,68,'Rounded Rectangle Clipping','Can contain a child component and perform rounded rectangle clipping on it. Specify borderRadius as the corner radius.','en-us');
INSERT INTO widget_desc VALUES(171,378,'ClipRSuperellipse','使用圆角超椭圆裁剪其子项的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(172,378,'ClipRSuperellipse',' A widget that clips its child using a rounded superellipse.','en-us');
INSERT INTO widget_desc VALUES(173,32,'关闭按钮','一个具有关闭功能的IconButton,关闭图标不可更改。','zh-cn');
INSERT INTO widget_desc VALUES(174,32,'Close Button','An IconButton with close functionality, the close icon cannot be changed.','en-us');
INSERT INTO widget_desc VALUES(175,274,'关闭按钮图标','一个关闭 Icon 图标, 根据平台展示对应的图标，可以通过 ActionIconTheme 定制主题。','zh-cn');
INSERT INTO widget_desc VALUES(176,274,'Close Button Icon','A close Icon that displays the corresponding icon based on the platform, and can be customized with ActionIconTheme.','en-us');
INSERT INTO widget_desc VALUES(177,267,'颜色盒','在子组件的布局区域上绘制指定颜色，然后将子组件绘制在背景色上。','zh-cn');
INSERT INTO widget_desc VALUES(178,267,'Color Box','Draws a specified color on the layout area of the child component, then draws the child component on the background color.','en-us');
INSERT INTO widget_desc VALUES(179,88,'滤色器','可容纳一个子组件，可以并将组件按照29中叠色模式和任意组件混合，强大到我不知道该说什么好。app一键全灰了解一下。','zh-cn');
INSERT INTO widget_desc VALUES(180,88,'Color Filter','Can accommodate a child component, and can mix the component with any other component using 29 blending modes, so powerful that I don''t know what to say. Learn about the one-click grayscale app feature.','en-us');
INSERT INTO widget_desc VALUES(181,96,'列布局','排布方向为竖向的Flex布局，可容纳多个组件。其他属性全部一致，详见Flex。','zh-cn');
INSERT INTO widget_desc VALUES(182,96,'Column Layout','A Flex layout with a vertical arrangement direction, capable of accommodating multiple components. All other properties are the same, see Flex for details.','en-us');
INSERT INTO widget_desc VALUES(183,265,'合成变换跟随者','一般与 CompositedTransformTarget 组件联合使用，可以使 Overlay 伴随目标变换。','zh-cn');
INSERT INTO widget_desc VALUES(184,265,'Composited Transform Follower','Generally used in conjunction with the CompositedTransformTarget component to enable the Overlay to follow the target transformation.','en-us');
INSERT INTO widget_desc VALUES(185,266,'合成变换目标','一般与 CompositedTransformFollower 组件联合使用，可以使 Overlay 伴随目标变换。','zh-cn');
INSERT INTO widget_desc VALUES(186,266,'Composite Transform Target','Generally used in conjunction with the CompositedTransformFollower component, it allows the Overlay to follow the target transformation.','en-us');
INSERT INTO widget_desc VALUES(187,80,'约束盒','可容纳一个子组件，通过指定最大、最小宽高,来限定子组件容身区域。','zh-cn');
INSERT INTO widget_desc VALUES(188,80,'Constrained Box','Can contain a child component, and limit the area of the child component by specifying the maximum and minimum width and height.','en-us');
INSERT INTO widget_desc VALUES(189,379,'ConstrainedLayoutBuilder','专门的 [AbstractLayoutBuilder]，其小部件子树依赖于将施加在小部件上的传入 [ConstraintType]。','zh-cn');
INSERT INTO widget_desc VALUES(190,379,'ConstrainedLayoutBuilder',' A specialized [AbstractLayoutBuilder] whose widget subtree depends on the incoming [ConstraintType] that will be imposed on the widget.','en-us');
INSERT INTO widget_desc VALUES(191,380,'ConstraintsTransformBox','对其约束应用任意变换的容器小部件，使用生成的 [BoxConstraints] 调整其子项大小，可选择裁剪或将溢出视为错误。','zh-cn');
INSERT INTO widget_desc VALUES(192,380,'ConstraintsTransformBox',' A container widget that applies an arbitrary transform to its constraints, and sizes its child using the resulting [BoxConstraints], optionally clipping, or treating the overflow as an error.','en-us');
INSERT INTO widget_desc VALUES(193,1,'容器组件','用于容纳单个子组件的容器组件。集成了若干个单子组件的功能，如内外边距、形变、装饰、约束等...','zh-cn');
INSERT INTO widget_desc VALUES(194,1,'Container Component','A container component used to hold a single child component. It integrates several functionalities of single child components, such as padding, margin, transformation, decoration, constraints, etc...','en-us');
INSERT INTO widget_desc VALUES(195,131,'iOS行为单','iOS风格的弹出选择结构，可放多的按钮，一般与CupertinoActionSheetAction联用。','zh-cn');
INSERT INTO widget_desc VALUES(196,131,'iOS Action Sheet','A pop-up selection structure in iOS style that can hold multiple buttons, generally used in conjunction with CupertinoActionSheetAction.','en-us');
INSERT INTO widget_desc VALUES(197,132,'iOS行为单按键','一个按钮，应用场景很少，通常用于CupertinoActionSheet中，接收点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(198,132,'iOS Action Sheet Button','A button with limited use cases, typically used in CupertinoActionSheet to receive click events.','en-us');
INSERT INTO widget_desc VALUES(199,48,'iOS指示器','iOS样式的loading显示组件，可指定半径和是否旋转。','zh-cn');
INSERT INTO widget_desc VALUES(200,48,'iOS Indicator','iOS style loading display component, can specify radius and whether to rotate.','en-us');
INSERT INTO widget_desc VALUES(201,381,'CupertinoAdaptiveTextSelectionToolbar','当前平台的默认 Cupertino 文本选择上下文菜单，包含给定的子项。','zh-cn');
INSERT INTO widget_desc VALUES(202,381,'CupertinoAdaptiveTextSelectionToolbar',' The default Cupertino context menu for text selection for the current platform with the given children.','en-us');
INSERT INTO widget_desc VALUES(203,129,'iOS对话框','iOS风格的通用的对话框结构，可指定头、中、尾处的组件。','zh-cn');
INSERT INTO widget_desc VALUES(204,129,'iOS Dialog','A general dialog structure in iOS style, which can specify components at the head, middle, and tail.','en-us');
INSERT INTO widget_desc VALUES(205,156,'iOS应用','iOS风格应用的顶级组件，包含路由生成器、主题、语言、主页等属性。','zh-cn');
INSERT INTO widget_desc VALUES(206,156,'iOS App','Top-level component for iOS-style apps, including route generator, theme, language, home page, and other attributes.','en-us');
INSERT INTO widget_desc VALUES(207,24,'iOS按钮','iOS风格的按钮。可指定颜色、点击时透明度、内边距、圆角等。可接收点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(208,24,'iOS Button','A button with iOS style. You can specify color, opacity when pressed, padding, border radius, etc. It can receive click events.','en-us');
INSERT INTO widget_desc VALUES(209,238,'复选框·macOS风格','一个 macOS 风格的复选框，支持三态；使用时需要提供 value 值和 onChanged 回调函数。','zh-cn');
INSERT INTO widget_desc VALUES(210,238,'Checkbox·macOS Style','A macOS-style checkbox that supports three states; requires providing a value and an onChanged callback function when used.','en-us');
INSERT INTO widget_desc VALUES(211,143,'ios弹出菜单','一个华丽的iOS风格按钮弹出框,长按时会以动画的形式弹出菜单面板，通常和CupertinoContextMenuAction联用。','zh-cn');
INSERT INTO widget_desc VALUES(212,143,'iOS Pop-up Menu','A gorgeous iOS-style button pop-up box. When long-pressed, a menu panel will pop up in an animated form. It is usually used in conjunction with CupertinoContextMenuAction.','en-us');
INSERT INTO widget_desc VALUES(213,144,'ios弹出菜单按钮','一般只用于CupertinoContextMenu中的点击按钮。可指定孩子和尾部图标，接收点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(214,144,'iOS Popup Menu Button','Generally used only for click buttons in CupertinoContextMenu. Can specify child and trailing icons, and receives click events.','en-us');
INSERT INTO widget_desc VALUES(215,137,'iOS日期选择器','高大上的滑滚日期选择器，可指定选择的类型、日期范围等，接收日期选中事件。','zh-cn');
INSERT INTO widget_desc VALUES(216,137,'iOS Date Picker','A high-end rolling date picker that allows you to specify the type of selection, date range, etc., and receive date selection events.','en-us');
INSERT INTO widget_desc VALUES(217,382,'CupertinoDesktopTextSelectionToolbar','macOS 风格的文本选择工具栏。','zh-cn');
INSERT INTO widget_desc VALUES(218,382,'CupertinoDesktopTextSelectionToolbar',' A macOS-style text selection toolbar.','en-us');
INSERT INTO widget_desc VALUES(219,383,'CupertinoDesktopTextSelectionToolbarButton','Mac 上下文菜单按钮样式的按钮。','zh-cn');
INSERT INTO widget_desc VALUES(220,383,'CupertinoDesktopTextSelectionToolbarButton',' A button in the style of the Mac context menu buttons.','en-us');
INSERT INTO widget_desc VALUES(221,352,'交互视图',' 一个简单的按钮，通常用于CupertinoAlertDialog中，一般不单独使用。','zh-cn');
INSERT INTO widget_desc VALUES(222,352,'Interactive View','A simple button, usually used in CupertinoAlertDialog, and generally not used alone.','en-us');
INSERT INTO widget_desc VALUES(223,384,'CupertinoFormRow','iOS 风格的表单行。','zh-cn');
INSERT INTO widget_desc VALUES(224,384,'CupertinoFormRow',' An iOS-style form row.','en-us');
INSERT INTO widget_desc VALUES(225,385,'CupertinoFormSection','iOS 风格的表单部分。','zh-cn');
INSERT INTO widget_desc VALUES(226,385,'CupertinoFormSection',' An iOS-style form section.','en-us');
INSERT INTO widget_desc VALUES(227,219,'全页面过渡变换','创建一个 iOS 风格的转换，用于唤出全屏对话框。','zh-cn');
INSERT INTO widget_desc VALUES(228,219,'Full Page Transition','Create an iOS-style transition for invoking a full-screen dialog.','en-us');
INSERT INTO widget_desc VALUES(229,386,'CupertinoListSection','iOS 风格的列表部分。','zh-cn');
INSERT INTO widget_desc VALUES(230,386,'CupertinoListSection',' An iOS-style list section.','en-us');
INSERT INTO widget_desc VALUES(231,387,'CupertinoListTile','iOS 风格的列表项。','zh-cn');
INSERT INTO widget_desc VALUES(232,387,'CupertinoListTile',' An iOS-style list tile.','en-us');
INSERT INTO widget_desc VALUES(233,388,'CupertinoListTileChevron','用于表示 `CupertinoListTile` 是带有操作的按钮的典型 iOS 尾随小部件。','zh-cn');
INSERT INTO widget_desc VALUES(234,388,'CupertinoListTileChevron',' A typical iOS trailing widget used to denote that a `CupertinoListTile` is a button with an action.','en-us');
INSERT INTO widget_desc VALUES(235,389,'CupertinoMagnifier','用于在用户手指可能阻挡兴趣点（如选择手柄）的情况下放大文本的 [RawMagnifier]。','zh-cn');
INSERT INTO widget_desc VALUES(236,389,'CupertinoMagnifier',' A [RawMagnifier] used for magnifying text in cases where a user''s finger may be blocking the point of interest, like a selection handle.','en-us');
INSERT INTO widget_desc VALUES(237,62,'iOS导航','一个iOS风格的应用顶部栏的通用结构，可在指定的部位放置相应的组件。可指定背景色、间距、边线等属性。','zh-cn');
INSERT INTO widget_desc VALUES(238,62,'iOS Navigation','A general structure for an iOS-style app top bar, where corresponding components can be placed in specified areas. Attributes such as background color, spacing, and border can be specified.','en-us');
INSERT INTO widget_desc VALUES(239,218,'iOS风格返回按钮','Cupertino风格的导航栏返回按钮,可指定颜色和点击事件,一般不单独使用。','zh-cn');
INSERT INTO widget_desc VALUES(240,218,'iOS Style Back Button','A Cupertino-style navigation bar back button, which can specify color and click events, and is generally not used alone.','en-us');
INSERT INTO widget_desc VALUES(241,157,'iOS页面脚手架','iOS风格的页面布局脚手架结构,可指定顶部的导航栏和页面背景色。','zh-cn');
INSERT INTO widget_desc VALUES(242,157,'iOS Page Scaffold','iOS style page layout scaffold structure, can specify the top navigation bar and page background color.','en-us');
INSERT INTO widget_desc VALUES(243,390,'CupertinoPageScaffoldBackgroundColor','[InheritedWidget] 指示其子项的当前脚手架背景颜色。','zh-cn');
INSERT INTO widget_desc VALUES(244,390,'CupertinoPageScaffoldBackgroundColor',' [InheritedWidget] indicating what the current scaffold background color is for its children.','en-us');
INSERT INTO widget_desc VALUES(245,216,'页面过渡变换','提供一个 iOS 风格的页面过渡动画变换。 ','zh-cn');
INSERT INTO widget_desc VALUES(246,216,'Page Transition Animation','Provides an iOS-style page transition animation.','en-us');
INSERT INTO widget_desc VALUES(247,139,'iOS选择器','高大上的柱面滑动选择器，精妙十足，可指定很多配置属性，接收滑动时选中事件。','zh-cn');
INSERT INTO widget_desc VALUES(248,139,'iOS Picker','A high-end cylindrical sliding picker, very sophisticated, with many configurable attributes, and it receives the selected event when sliding.','en-us');
INSERT INTO widget_desc VALUES(249,391,'CupertinoPickerDefaultSelectionOverlay','[CupertinoPicker] 的默认选择覆盖层。','zh-cn');
INSERT INTO widget_desc VALUES(250,391,'CupertinoPickerDefaultSelectionOverlay',' A default selection overlay for [CupertinoPicker]s.','en-us');
INSERT INTO widget_desc VALUES(251,217,'模糊弹出层','ios 弹出框的圆角矩形模糊背景，源码中应用于 Cupertino 风格的对话框中。','zh-cn');
INSERT INTO widget_desc VALUES(252,217,'Blur Popup Layer','The rounded rectangle blur background of the ios popup box, applied in the source code to the dialog box of the Cupertino style.','en-us');
INSERT INTO widget_desc VALUES(253,240,'单选钮·macOS风格','一个 macOS 风格的选钮，value 和 groupValue 一起决定该单选按钮是否被选中； onChanged 回调点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(254,240,'Radio Button·macOS Style','A macOS-style radio button, where the value and groupValue together determine whether the radio button is selected; the onChanged callback handles click events.','en-us');
INSERT INTO widget_desc VALUES(255,195,'iOS滑动指示栏','iOS风格的滑动指示栏，需要包裹一个可滑动区域，当可滑动时，会显示滑动的bar用于指示。','zh-cn');
INSERT INTO widget_desc VALUES(256,195,'iOS Scroll Indicator','An iOS-style scroll indicator that needs to wrap a scrollable area. When scrollable, it displays a scroll bar for indication.','en-us');
INSERT INTO widget_desc VALUES(257,392,'CupertinoSearchTextField','模仿 UIKit 的 `UISearchTextField` 外观和行为的 [CupertinoTextField]。','zh-cn');
INSERT INTO widget_desc VALUES(258,392,'CupertinoSearchTextField',' A [CupertinoTextField] that mimics the look and behavior of UIKit''s `UISearchTextField`.','en-us');
INSERT INTO widget_desc VALUES(259,262,'iOS多栏切换','iOS风格的多按钮栏，表现和ToggleButtons类似,可指定内边距、选中色、边线色等属性。','zh-cn');
INSERT INTO widget_desc VALUES(260,262,'iOS Multi-Tab Switch','iOS-style multi-button bar, similar in behavior to ToggleButtons, with customizable properties such as padding, selected color, border color, etc.','en-us');
INSERT INTO widget_desc VALUES(261,393,'CupertinoSheetTransition','提供 iOS 风格的表单过渡。','zh-cn');
INSERT INTO widget_desc VALUES(262,393,'CupertinoSheetTransition',' Provides an iOS-style sheet transition.','en-us');
INSERT INTO widget_desc VALUES(263,43,'iOS滑块','iOS风格的滑块组件，可以在指定的最大值和最小值之间拖动选择。可指定颜色，接收进度变化回调。','zh-cn');
INSERT INTO widget_desc VALUES(264,43,'iOS Slider','An iOS-style slider component that allows dragging to select between a specified maximum and minimum value. You can specify colors and receive callbacks for progress changes.','en-us');
INSERT INTO widget_desc VALUES(265,256,'iOS滑动页签','iOS风格的滑动页签，支持点击、滑动切换。可指定页签颜色、背景色、边距等属性。','zh-cn');
INSERT INTO widget_desc VALUES(266,256,'iOS Sliding Tabs','iOS-style sliding tabs, supporting click and slide to switch. You can specify tab color, background color, margin and other properties.','en-us');
INSERT INTO widget_desc VALUES(267,302,'Sliver导航条','iOS11中导航条效果，展开时largeTitle显示,列表上滑后不显示，如果middle为空，largeTitle会以小字号作为middle。','zh-cn');
INSERT INTO widget_desc VALUES(268,302,'Sliver Navigation Bar','The navigation bar effect in iOS11, the largeTitle is displayed when expanded, and it is not displayed when the list is scrolled up. If the middle is empty, the largeTitle will be displayed as the middle in a smaller font size.','en-us');
INSERT INTO widget_desc VALUES(269,303,'Sliver刷新控制器','iOS风格的下拉刷新控制器，可执行异步刷新方法、自定义控制器组件、指示器停留高度和触发加载的滑动高度。','zh-cn');
INSERT INTO widget_desc VALUES(270,303,'Sliver Refresh Controller','iOS-style pull-to-refresh controller that can execute asynchronous refresh methods, customize controller components, set the height at which the indicator stays, and the scroll height that triggers loading.','en-us');
INSERT INTO widget_desc VALUES(271,394,'CupertinoSpellCheckSuggestionsToolbar','iOS 的默认拼写检查建议工具栏。','zh-cn');
INSERT INTO widget_desc VALUES(272,394,'CupertinoSpellCheckSuggestionsToolbar',' The default spell check suggestions toolbar for iOS.','en-us');
INSERT INTO widget_desc VALUES(273,41,'iOS切钮','iOS风格的切换选钮,常用于配置的切换，可指定颜色，接收状态变化回调。','zh-cn');
INSERT INTO widget_desc VALUES(274,41,'iOS Switch','An iOS-style toggle switch, commonly used for configuration toggles, can specify colors, and receives state change callbacks.','en-us');
INSERT INTO widget_desc VALUES(275,63,'iOS页签','一个iOS风格的TabBar,通常用于CupertinoTabScaffold。可指定颜色、图标大小、边线等数据。接收item的点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(276,63,'iOS Tab','An iOS-style TabBar, typically used in CupertinoTabScaffold. Can specify color, icon size, border, and other data. Receives item click events.','en-us');
INSERT INTO widget_desc VALUES(277,158,'iOS页签脚手架','iOS风格的页面布局脚手架结构,可指定最底部的导航切换栏可主体内容页。','zh-cn');
INSERT INTO widget_desc VALUES(278,158,'iOS Tab Scaffold','iOS style page layout scaffold structure, which can specify the bottom navigation bar and the main content page.','en-us');
INSERT INTO widget_desc VALUES(279,229,'Cupertino页面','可以像 MaterialApp 一样维护一个路由栈。通过 routes 、onGenerateRoute 来构建路由，可以通过 navigatorObservers 监听路由。','zh-cn');
INSERT INTO widget_desc VALUES(280,229,'Cupertino Page','Can maintain a routing stack like MaterialApp. Build routes through routes and onGenerateRoute, and listen to routes through navigatorObservers.','en-us');
INSERT INTO widget_desc VALUES(281,245,'iOS风格输入框','Cupertino风格的输入框,属性和TextField类似,可指定控制器、文字样式、装饰线、行数限制、游标样式等。接收输入变化、完成输入等事件。','zh-cn');
INSERT INTO widget_desc VALUES(282,245,'iOS Style Input Box','Cupertino style input box, properties are similar to TextField, can specify controller, text style, decoration line, line limit, cursor style, etc. Receives input change, input completion and other events.','en-us');
INSERT INTO widget_desc VALUES(283,395,'CupertinoTextFormFieldRow','创建包含包装 [CupertinoTextField] 的 [FormField] 的 [CupertinoFormRow]。','zh-cn');
INSERT INTO widget_desc VALUES(284,395,'CupertinoTextFormFieldRow',' Creates a [CupertinoFormRow] containing a [FormField] that wraps a [CupertinoTextField].','en-us');
INSERT INTO widget_desc VALUES(285,396,'CupertinoTextMagnifier','用于在用户手指可能阻挡兴趣点（如选择手柄）的情况下放大文本的 [CupertinoMagnifier]。','zh-cn');
INSERT INTO widget_desc VALUES(286,396,'CupertinoTextMagnifier',' A [CupertinoMagnifier] used for magnifying text in cases where a user''s finger may be blocking the point of interest, like a selection handle.','en-us');
INSERT INTO widget_desc VALUES(287,299,'ios文字选择工具条','对文本选择做出响应的 ios 风格的工具栏','zh-cn');
INSERT INTO widget_desc VALUES(288,299,'iOS Text Selection Toolbar','An iOS-style toolbar that responds to text selection','en-us');
INSERT INTO widget_desc VALUES(289,397,'CupertinoTextSelectionToolbarButton','iOS 文本选择工具栏按钮样式的按钮。','zh-cn');
INSERT INTO widget_desc VALUES(290,397,'CupertinoTextSelectionToolbarButton',' A button in the style of the iOS text selection toolbar buttons.','en-us');
INSERT INTO widget_desc VALUES(291,169,'iOS主题','可通过CupertinoTheme.of获取CupertinoThemeData对象。也可以指定主题应用于CupertinoTheme的后代组件。','zh-cn');
INSERT INTO widget_desc VALUES(292,169,'iOS Theme','You can obtain the CupertinoThemeData object through CupertinoTheme.of. You can also specify the theme to be applied to the descendant components of CupertinoTheme.','en-us');
INSERT INTO widget_desc VALUES(293,138,'iOS时间选择器','高大上的滑滚时间选择器，可指定选择的类型、初始时间、背景色等，接收时间选中事件。','zh-cn');
INSERT INTO widget_desc VALUES(294,138,'iOS Time Picker','A high-end rolling time picker that allows you to specify the type of selection, initial time, background color, etc., and receives time selection events.','en-us');
INSERT INTO widget_desc VALUES(295,337,'用户接口等级','ios 中的概念，内容可视级别 UIUserInterfaceLevel ，分为 base 和 elevated。作为一个 InheritedWidget ，主要就是共享该数据。','zh-cn');
INSERT INTO widget_desc VALUES(296,337,'User Interface Level','A concept in iOS, the content visibility level UIUserInterfaceLevel, divided into base and elevated. As an InheritedWidget, it mainly shares this data.','en-us');
INSERT INTO widget_desc VALUES(297,341,'通用多子布局','使用一个代理类对子组件集进行布局控制,子组件必须使用LayoutId组件进行标识。','zh-cn');
INSERT INTO widget_desc VALUES(298,341,'General Multi-Child Layout','Use a delegate class to control the layout of a set of child components. Child components must be identified using the LayoutId component.','en-us');
INSERT INTO widget_desc VALUES(299,166,'绘制组件','通过CustomPainter进行绘制，可实现一些复杂的自定义绘制组件，是Flutter中自定义组件的灵魂人物。','zh-cn');
INSERT INTO widget_desc VALUES(300,166,'Drawing Component','Drawing through CustomPainter can achieve some complex custom drawing components, and it is the soul of custom components in Flutter.','en-us');
INSERT INTO widget_desc VALUES(301,183,'通用滑动视图','一个通用的滑动结构，可以指定滑动方向、是否反向、滑动控制器等属性。其中包含的子组件们必须是Sliver家族。','zh-cn');
INSERT INTO widget_desc VALUES(302,183,'General Scroll View','A general scroll structure that can specify properties such as scroll direction, whether to reverse, scroll controller, etc. The child components it contains must be from the Sliver family.','en-us');
INSERT INTO widget_desc VALUES(303,285,'通用单子布局','可容纳一个子组件，并指定代理类对子组件进行排布。代理类可获取父容器区域和子组件的区域大小，及区域约束情况。','zh-cn');
INSERT INTO widget_desc VALUES(304,285,'Universal Single Child Layout','Can accommodate one child component and specify a delegate class to arrange the child component. The delegate class can obtain the parent container area, the child component''s area size, and the area constraints.','en-us');
INSERT INTO widget_desc VALUES(305,102,'数据表格','一个表格组件，可以制订逻辑进行点击、修改、排序等操作。','zh-cn');
INSERT INTO widget_desc VALUES(306,102,'Data Table','A table component that can be customized with logic for clicking, editing, sorting, etc.','en-us');
INSERT INTO widget_desc VALUES(307,398,'DataTableTheme','将数据表主题应用于后代 [DataTable] 小部件。','zh-cn');
INSERT INTO widget_desc VALUES(308,398,'DataTableTheme',' Applies a data table theme to descendant [DataTable] widgets.','en-us');
INSERT INTO widget_desc VALUES(309,399,'DatePickerDialog','Material 风格的日期选择器对话框。','zh-cn');
INSERT INTO widget_desc VALUES(310,399,'DatePickerDialog',' A Material-style date picker dialog.','en-us');
INSERT INTO widget_desc VALUES(311,400,'DatePickerTheme','为此小部件子树中的 [DatePickerDialog] 定义视觉属性的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(312,400,'DatePickerTheme',' An inherited widget that defines the visual properties for [DatePickerDialog]s in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(313,339,'日期范围','Material 风格的日期范围选择器，支持日历选择和输入选择。','zh-cn');
INSERT INTO widget_desc VALUES(314,339,'Date Range','Material style date range picker, supports calendar selection and input selection.','en-us');
INSERT INTO widget_desc VALUES(315,70,'装饰盒','可容纳一个子组件，可将其进行装饰。核心属性为decoration,可设置边线、渐变、阴影、背景图等。','zh-cn');
INSERT INTO widget_desc VALUES(316,70,'Decorated Box','Can contain a child component and decorate it. The core property is decoration, which can set borders, gradients, shadows, background images, etc.','en-us');
INSERT INTO widget_desc VALUES(317,113,'装饰变换','AnimatedWidget的子类,使用Decorated类型的动画器让子组件在两个Decorated对象之间进行过渡动画。','zh-cn');
INSERT INTO widget_desc VALUES(318,113,'Decoration Transition','A subclass of AnimatedWidget that uses a Decorated type animator to allow child components to transition between two Decorated objects.','en-us');
INSERT INTO widget_desc VALUES(319,209,'装饰滑片','该组件应用于滑动视口中，可以包裹一个子 Sliver 组件，为其添加 Decoration 装饰效果。','zh-cn');
INSERT INTO widget_desc VALUES(320,209,'Decorated Sliver','This component is used in sliding viewports and can wrap a child Sliver component to add Decoration effects.','en-us');
INSERT INTO widget_desc VALUES(321,320,'默认资源包','一个 InheritedWidget，设置 AssetBundle 对象后，该节点后的节点上下文可以通过 DefaultAssetBundle.of(context) 获取 AssetBundle 对象用于访问资源文件。','zh-cn');
INSERT INTO widget_desc VALUES(322,320,'Default Asset Bundle','An InheritedWidget that sets the AssetBundle object. After setting, the context of the nodes following this node can obtain the AssetBundle object through DefaultAssetBundle.of(context) for accessing resource files.','en-us');
INSERT INTO widget_desc VALUES(323,401,'DefaultSelectionStyle','应用于没有显式样式的后代 [EditableText] 小部件的选择样式。','zh-cn');
INSERT INTO widget_desc VALUES(324,401,'DefaultSelectionStyle',' The selection style to apply to descendant [EditableText] widgets which don''t have an explicit style.','en-us');
INSERT INTO widget_desc VALUES(325,230,'默认页签控制器','在使用 TabBar 和 TabBarView 时，需要同一个控制器实现页签和页面的控制。DefaultTabController 会在未指定控制器时提供默认控制器，简化使用。','zh-cn');
INSERT INTO widget_desc VALUES(326,230,'Default Tab Controller','When using TabBar and TabBarView, the same controller is needed to control both the tabs and the pages. DefaultTabController provides a default controller when no controller is specified, simplifying usage.','en-us');
INSERT INTO widget_desc VALUES(327,402,'DefaultTextEditingShortcuts','具有用于默认文本编辑行为的快捷键的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(328,402,'DefaultTextEditingShortcuts',' A widget with the shortcuts used for the default text editing behavior.','en-us');
INSERT INTO widget_desc VALUES(329,403,'DefaultTextHeightBehavior','将应用于未明确设置 [Text.textHeightBehavior] 的后代 [Text] 和 [EditableText] 小部件的 [TextHeightBehavior]。','zh-cn');
INSERT INTO widget_desc VALUES(330,403,'DefaultTextHeightBehavior',' The [TextHeightBehavior] that will apply to descendant [Text] and [EditableText] widgets which have not explicitly set [Text.textHeightBehavior].','en-us');
INSERT INTO widget_desc VALUES(331,324,'默认字体样式','可容纳一个孩子，为后代的文字指定默认样式。常用于多个相同文字的样式统一，避免一一设置。','zh-cn');
INSERT INTO widget_desc VALUES(332,324,'Default Font Style','Can contain a child, specifying the default style for descendant text. Commonly used to unify the style of multiple identical texts, avoiding setting them one by one.','en-us');
INSERT INTO widget_desc VALUES(333,114,'文字样式变换','AnimatedWidget的子类,使用TextStyle类型的动画器让文字组件在两个TextStyle对象之间进行过渡动画。','zh-cn');
INSERT INTO widget_desc VALUES(334,114,'Text Style Transition','A subclass of AnimatedWidget, using a TextStyle type animator to transition text components between two TextStyle objects.','en-us');
INSERT INTO widget_desc VALUES(335,404,'DesktopTextSelectionToolbar','Material 风格的桌面文本选择工具栏。','zh-cn');
INSERT INTO widget_desc VALUES(336,404,'DesktopTextSelectionToolbar',' A Material-style desktop text selection toolbar.','en-us');
INSERT INTO widget_desc VALUES(337,405,'DesktopTextSelectionToolbarButton','Material 桌面文本选择工具栏的 [TextButton]。','zh-cn');
INSERT INTO widget_desc VALUES(338,405,'DesktopTextSelectionToolbarButton',' A [TextButton] for the Material desktop text selection toolbar.','en-us');
INSERT INTO widget_desc VALUES(339,126,'对话框','最简易的对话框面板,包含一个内容组件,可指定影深、背景色、形状等属性。','zh-cn');
INSERT INTO widget_desc VALUES(340,126,'Dialog Box','The simplest dialog panel, containing a content component, with properties such as shadow depth, background color, shape, etc.','en-us');
INSERT INTO widget_desc VALUES(341,406,'DialogTheme','为 [Dialog] 小部件定义主题。','zh-cn');
INSERT INTO widget_desc VALUES(342,406,'DialogTheme',' Defines a theme for [Dialog] widgets.','en-us');
INSERT INTO widget_desc VALUES(343,319,'定向性','为后代改变有textDirection属性的组件统一设置属性值,也可以通过Directionality.of(context)获取当前textDirection默认属性。','zh-cn');
INSERT INTO widget_desc VALUES(344,319,'Directionality','Set the property value uniformly for components with the textDirection attribute for descendants, or get the default textDirection attribute through Directionality.of(context).','en-us');
INSERT INTO widget_desc VALUES(345,176,'滑动消失','滑动时可显示底部组件，可指定滑动的方向和交叉轴的偏移量。接收确认消失和消失时的回调。','zh-cn');
INSERT INTO widget_desc VALUES(346,176,'Swipe to Dismiss','When swiping, the bottom component can be displayed, and the direction of the swipe and the offset of the cross axis can be specified. Receives callbacks for confirming dismissal and when dismissed.','en-us');
INSERT INTO widget_desc VALUES(347,407,'DisplayFeatureSubScreen','定位 [child] 以避免与将屏幕分割为子屏幕的任何 [DisplayFeature] 重叠。','zh-cn');
INSERT INTO widget_desc VALUES(348,407,'DisplayFeatureSubScreen',' Positions [child] such that it avoids overlapping any [DisplayFeature] that splits the screen into sub-screens.','en-us');
INSERT INTO widget_desc VALUES(349,34,'水平分割线','水平分割线，可指定颜色、高度、粗细、左右边距信息，常用与列表的item分割线。','zh-cn');
INSERT INTO widget_desc VALUES(350,34,'Horizontal Divider','A horizontal divider that can specify color, height, thickness, and left and right margin information, commonly used as a divider for list items.','en-us');
INSERT INTO widget_desc VALUES(351,329,'分割线样式','主要用于为后代的Divider类型组件统一设置默认属性,也可以通过该组件获取默认Divider的属性。','zh-cn');
INSERT INTO widget_desc VALUES(352,329,'Divider Style','Mainly used to set default properties for descendant Divider type components uniformly, and it can also be used to obtain the default properties of Divider.','en-us');
INSERT INTO widget_desc VALUES(353,408,'DragBoundary','为其后代提供 [DragBoundaryDelegate]，其边界由此小部件定义。','zh-cn');
INSERT INTO widget_desc VALUES(354,408,'DragBoundary',' Provides a [DragBoundaryDelegate] for its descendants whose bounds are those defined by this widget.','en-us');
INSERT INTO widget_desc VALUES(355,103,'可拖拽组件','可以让组件在界面上任意拖拽,可存放一个泛型T的数据。通常和DragTarget组合使用，来完成拖拽效果。','zh-cn');
INSERT INTO widget_desc VALUES(356,103,'Draggable Component','Allows the component to be dragged anywhere on the interface, and can store data of a generic type T. It is usually used in combination with DragTarget to achieve the drag effect.','en-us');
INSERT INTO widget_desc VALUES(357,221,'拖滑重置器','它可以通知后代的 DraggableScrollableSheet，将其位置重置为初始状态。','zh-cn');
INSERT INTO widget_desc VALUES(358,221,'Drag and Slide Resetter','It can notify the descendant DraggableScrollableSheet to reset its position to the initial state.','en-us');
INSERT INTO widget_desc VALUES(359,252,'拖滑页','可拖动和滑动的Sheet，可指定最大、最小、最初的分度现在滑动范围。构造器builder需要返回一个可滑动组件。','zh-cn');
INSERT INTO widget_desc VALUES(360,252,'Draggable Sheet','A sheet that can be dragged and scrolled, with the ability to specify the maximum, minimum, and initial fractions within the scroll range. The builder constructor needs to return a scrollable component.','en-us');
INSERT INTO widget_desc VALUES(361,104,'拖拽目标','一个拖拽的目标区域，可接收Draggable组件的信息。可以获取拖拽时的回调。','zh-cn');
INSERT INTO widget_desc VALUES(362,104,'Drag Target','A target area for dragging, which can receive information from the Draggable component. It can get callbacks during dragging.','en-us');
INSERT INTO widget_desc VALUES(363,154,'滑页栏','一般用于Scaffold中的draw和endDraw属性作为左右的滑页栏，可以容纳一个子组件，能指定影深。','zh-cn');
INSERT INTO widget_desc VALUES(364,154,'Drawer','Generally used as the left and right sliding panels in the Scaffold''s draw and endDraw properties. It can contain a child component and can specify the elevation.','en-us');
INSERT INTO widget_desc VALUES(365,276,'抽屉按钮','一个左抽屉图标按钮, 使用 DrawerButtonIcon 展示图标，默认点击事件可以打开左抽屉。','zh-cn');
INSERT INTO widget_desc VALUES(366,276,'Drawer Button','A left drawer icon button, using DrawerButtonIcon to display the icon. The default click event can open the left drawer.','en-us');
INSERT INTO widget_desc VALUES(367,273,'抽屉按钮图标','一个抽屉 Icon 图标, 根据平台展示对应的图标，可以通过 ActionIconTheme 定制主题。','zh-cn');
INSERT INTO widget_desc VALUES(368,273,'Drawer Button Icon','A drawer Icon, which displays the corresponding icon according to the platform, and can be customized with ActionIconTheme.','en-us');
INSERT INTO widget_desc VALUES(369,257,'iOS滑动页签','为 Drawer 组件提供交互行为，一般很少使用。在 Scaffold 组件源码中有使用场景。','zh-cn');
INSERT INTO widget_desc VALUES(370,257,'iOS Sliding Tabs','Provides interactive behavior for the Drawer component, which is rarely used. It is used in the source code of the Scaffold component.','en-us');
INSERT INTO widget_desc VALUES(371,155,'滑页栏标题','一般用于Drawer中，作为滑页栏的头部。可以指定内外边距、装饰、子组件等属性。','zh-cn');
INSERT INTO widget_desc VALUES(372,155,'Drawer Header','Generally used in Drawer, as the header of the drawer. You can specify properties such as padding, decoration, child components, etc.','en-us');
INSERT INTO widget_desc VALUES(373,409,'DrawerTheme','为此小部件子树中的 [Drawer] 定义视觉属性的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(374,409,'DrawerTheme',' An inherited widget that defines visual properties for [Drawer]s in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(375,55,'下拉按钮','用于下拉选择的按钮，可指定图标、影深、提示等属性，接收选中变化的事件。','zh-cn');
INSERT INTO widget_desc VALUES(376,55,'Dropdown Button','A button for dropdown selection, which can specify attributes such as icon, elevation, hint, etc., and receives events for selection changes.','en-us');
INSERT INTO widget_desc VALUES(377,223,'表单下拉框','底层依赖 DropdownButton 实现，所以基本属性类似。但拥有 FormField 的特性，可以回调 onSaved、validator 方法。','zh-cn');
INSERT INTO widget_desc VALUES(378,223,'Form Dropdown','It is implemented based on DropdownButton, so it has similar basic properties. However, it has the characteristics of FormField and can call back the onSaved and validator methods.','en-us');
INSERT INTO widget_desc VALUES(379,181,'下拉按钮隐藏线','用于去除DropdownButton的下划线，本身没有什么应用价值。','zh-cn');
INSERT INTO widget_desc VALUES(380,181,'Dropdown Button Hide Underline','Used to remove the underline of the DropdownButton, it has little practical value.','en-us');
INSERT INTO widget_desc VALUES(381,370,'下拉菜单','下拉选择组件，支持文本输入过滤，可自定义菜单项。底层主要依赖 MenuAnchor 和 TextFiled 实现。','zh-cn');
INSERT INTO widget_desc VALUES(382,370,'Dropdown Menu','Dropdown selection component, supports text input filtering, and allows custom menu items. It mainly relies on MenuAnchor and TextField for implementation.','en-us');
INSERT INTO widget_desc VALUES(383,410,'DropdownMenuItem','由 [DropdownButton] 创建的菜单中的项目。','zh-cn');
INSERT INTO widget_desc VALUES(384,410,'DropdownMenuItem',' An item in a menu created by a [DropdownButton].','en-us');
INSERT INTO widget_desc VALUES(385,411,'DropdownMenuTheme','为此小部件子树中的 [DropdownMenu] 定义视觉属性的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(386,411,'DropdownMenuTheme',' An inherited widget that defines the visual properties for [DropdownMenu]s in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(387,412,'DualTransitionBuilder','根据提供的 [animation] 的 [AnimationStatus] 对其 [child] 进行动画处理的过渡构建器。','zh-cn');
INSERT INTO widget_desc VALUES(388,412,'DualTransitionBuilder',' A transition builder that animates its [child] based on the [AnimationStatus] of the provided [animation].','en-us');
INSERT INTO widget_desc VALUES(389,244,'可编辑文字','可以编辑的文字,是TextField的底层最核心组件，一般不单独使用。','zh-cn');
INSERT INTO widget_desc VALUES(390,244,'Editable Text','Editable text is the core component at the bottom layer of TextField and is generally not used alone.','en-us');
INSERT INTO widget_desc VALUES(391,354,'升起按钮','Material风格的升起按钮，表现和RaisedButton类似。可通过样式更改边框、颜色、阴影等属性。','zh-cn');
INSERT INTO widget_desc VALUES(392,354,'Raised Button','A Material-styled raised button, similar in behavior to RaisedButton. Properties such as border, color, and shadow can be changed through styling.','en-us');
INSERT INTO widget_desc VALUES(393,413,'ElevatedButtonTheme','覆盖其 [ElevatedButton] 后代的默认 [ButtonStyle]。','zh-cn');
INSERT INTO widget_desc VALUES(394,413,'ElevatedButtonTheme',' Overrides the default [ButtonStyle] of its [ElevatedButton] descendants.','en-us');
INSERT INTO widget_desc VALUES(395,361,'右抽屉按钮','一个右抽屉图标按钮, 使用 EndDrawerButtonIcon 展示图标，默认点击事件可以打开右抽屉。','zh-cn');
INSERT INTO widget_desc VALUES(396,361,'Right Drawer Button','A right drawer icon button, using EndDrawerButtonIcon to display the icon, the default click event can open the right drawer.','en-us');
INSERT INTO widget_desc VALUES(397,275,'右抽屉按钮图标','一个右抽屉 Icon 图标, 根据平台展示对应的图标，可以通过 ActionIconTheme 定制主题。','zh-cn');
INSERT INTO widget_desc VALUES(398,275,'Right Drawer Button Icon','A right drawer Icon that displays the corresponding icon based on the platform. It can be customized with the ActionIconTheme.','en-us');
INSERT INTO widget_desc VALUES(399,197,'错误组件','用于显示一个错误信息的组件，红底黄字，在开发过程中经常看到，一般不使用。','zh-cn');
INSERT INTO widget_desc VALUES(400,197,'Error Component','A component used to display an error message, with a red background and yellow text, often seen during development, generally not used.','en-us');
INSERT INTO widget_desc VALUES(401,414,'ExcludeFocus','控制此小部件的后代是否可聚焦的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(402,414,'ExcludeFocus',' A widget that controls whether or not the descendants of this widget are focusable.','en-us');
INSERT INTO widget_desc VALUES(403,415,'ExcludeFocusTraversal','控制此小部件的后代是否可遍历的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(404,415,'ExcludeFocusTraversal',' A widget that controls whether or not the descendants of this widget are traversable.','en-us');
INSERT INTO widget_desc VALUES(405,416,'ExcludeSemantics','丢弃其所有后代语义的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(406,416,'ExcludeSemantics',' A widget that drops all the semantics of its descendants.','en-us');
INSERT INTO widget_desc VALUES(407,106,'延展组件','父类是Flexible，相当于一个fit类型为tight的Flexible组件。可嵌套孩子利用剩余空间对占位空间进行延展。','zh-cn');
INSERT INTO widget_desc VALUES(408,106,'Extended Component','The parent class is Flexible, equivalent to a Flexible component with a fit type of tight. It can nest children to utilize the remaining space to extend the placeholder space.','en-us');
INSERT INTO widget_desc VALUES(409,51,'展开图标','一个展开按钮，点击时会自己执行旋转180的动画。可指定颜色、大小、边距，接收点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(410,51,'Expand Icon','An expand button that performs a 180-degree rotation animation when clicked. Can specify color, size, margin, and receive click events.','en-us');
INSERT INTO widget_desc VALUES(411,417,'Expansible','展开和折叠的 [StatefulWidget]。','zh-cn');
INSERT INTO widget_desc VALUES(412,417,'Expansible',' A [StatefulWidget] that expands and collapses.','en-us');
INSERT INTO widget_desc VALUES(413,178,'展开列表','可展开的列表组件，可根据逻辑来实现单展开或多展开。可指定展开动画时长，接收展开回调','zh-cn');
INSERT INTO widget_desc VALUES(414,178,'Expandable List','A list component that can be expanded, which can implement single or multiple expansions based on logic. You can specify the duration of the expansion animation and receive expansion callbacks.','en-us');
INSERT INTO widget_desc VALUES(415,52,'展开瓦片','一个通用的展开栏,可在指定的部位安放组件,点击时会折叠显隐下方组件。接收折叠时事件。','zh-cn');
INSERT INTO widget_desc VALUES(416,52,'Expand Tile','A general-purpose expansion panel that can place components in specified locations. Clicking it will collapse or expand the components below. Receives events upon collapsing.','en-us');
INSERT INTO widget_desc VALUES(417,418,'ExpansionTileTheme','覆盖其 [ExpansionTile] 后代的默认 [ExpansionTileTheme]。','zh-cn');
INSERT INTO widget_desc VALUES(418,418,'ExpansionTileTheme',' Overrides the default [ExpansionTileTheme] of its [ExpansionTile] descendants.','en-us');
INSERT INTO widget_desc VALUES(419,8,'淡入图片','透明渐变地加载一张图片。可指定占位图片、进退的动画曲线、时间、宽高、fit类型、对齐方式、重复方式等。','zh-cn');
INSERT INTO widget_desc VALUES(420,8,'Fade-in Image','Load an image with a transparent gradient. You can specify a placeholder image, animation curves for fade in and out, duration, width, height, fit type, alignment, repeat mode, etc.','en-us');
INSERT INTO widget_desc VALUES(421,89,'透明变换','可容纳一个子组件，并使其进行透明度渐变动画，需要提供动画器opacity。','zh-cn');
INSERT INTO widget_desc VALUES(422,89,'Fade Transition','Can contain a child component and make it perform a fade animation, requires an animator opacity.','en-us');
INSERT INTO widget_desc VALUES(423,359,'填充按钮','一个符合 Material Design 的填充按钮，通过 FilledButtonTheme 设置按钮样式。','zh-cn');
INSERT INTO widget_desc VALUES(424,359,'Filled Button','A filled button that conforms to Material Design, with styles set via FilledButtonTheme.','en-us');
INSERT INTO widget_desc VALUES(425,419,'FilledButtonTheme','覆盖其 [FilledButton] 后代的默认 [ButtonStyle]。','zh-cn');
INSERT INTO widget_desc VALUES(426,419,'FilledButtonTheme',' Overrides the default [ButtonStyle] of its [FilledButton] descendants.','en-us');
INSERT INTO widget_desc VALUES(427,15,'过滤小条','和Chip组件类似的样式，具有选中与否的属性和选中事件。当选中时左侧组件上层会被✔️遮罩。','zh-cn');
INSERT INTO widget_desc VALUES(428,15,'Filter Chip','Similar in style to the Chip component, with properties for selection and selection events. When selected, the upper layer of the left component will be masked by a ✔️.','en-us');
INSERT INTO widget_desc VALUES(429,87,'适应盒','可容纳一个子组件，使用fit属性决定子组件区域相当于父组件的适应模式，拥有对齐属性alignment。','zh-cn');
INSERT INTO widget_desc VALUES(430,87,'Fitted Box','Can accommodate a child component, using the fit property to determine the adaptation mode of the child component area relative to the parent component, and has the alignment property.','en-us');
INSERT INTO widget_desc VALUES(431,94,'弹性布局','Row和Column的父类,Flutter中最强大的布局方式。可容纳多个组件，可与Spacer、Expended、Flexible组件联用进行灵活布局','zh-cn');
INSERT INTO widget_desc VALUES(432,94,'Flex Layout','The parent class of Row and Column, the most powerful layout method in Flutter. It can accommodate multiple components and can be used in conjunction with Spacer, Expended, and Flexible components for flexible layout.','en-us');
INSERT INTO widget_desc VALUES(433,109,'灵活组件','只能用于只能用于Row、Column和Flex布局中，可嵌套孩子利用剩余空间对占位空间进行延展,也可指定适应类型。','zh-cn');
INSERT INTO widget_desc VALUES(434,109,'Flexible Component','Can only be used in Row, Column, and Flex layouts. It can nest children to utilize the remaining space to extend the placeholder space, and the adaptation type can also be specified.','en-us');
INSERT INTO widget_desc VALUES(435,196,'伸展空间栏','通常用于SliverAppBar中的可伸展区域，可指定标题、标题间距、背景、折叠模式等。','zh-cn');
INSERT INTO widget_desc VALUES(436,196,'Stretch Space Bar','Typically used in the stretchable area of SliverAppBar, it can specify the title, title spacing, background, collapse mode, etc.','en-us');
INSERT INTO widget_desc VALUES(437,420,'FlexibleSpaceBarSettings','为 [FlexibleSpaceBar] 提供大小和不透明度信息。','zh-cn');
INSERT INTO widget_desc VALUES(438,420,'FlexibleSpaceBarSettings',' Provides sizing and opacity information to a [FlexibleSpaceBar].','en-us');
INSERT INTO widget_desc VALUES(439,28,'浮动按钮','浮动按钮，一般用于Scaffold中，可摆放在特定位置。可盛放一个子组件,接收点击、可定义颜色、形状等。','zh-cn');
INSERT INTO widget_desc VALUES(440,28,'Floating Button','Floating button, generally used in Scaffold, can be placed in a specific position. It can contain a child widget, receive clicks, and define colors, shapes, etc.','en-us');
INSERT INTO widget_desc VALUES(441,99,'流动布局','可容纳多个组件, 需要自己制定排布的代理，可以高强度自定义组件的排布，实现普通布局无法达到的效果。布局王者，当之无愧。','zh-cn');
INSERT INTO widget_desc VALUES(442,99,'Flow Layout','Can accommodate multiple components, requires custom arrangement agents, allows high customization of component arrangement, achieving effects that ordinary layouts cannot. The king of layouts, well-deserved.','en-us');
INSERT INTO widget_desc VALUES(443,4,'Flutter图标','用于展示Flutter图标组件。可定义颜色、尺寸、展示模式等信息，是一个非常简单的组件。','zh-cn');
INSERT INTO widget_desc VALUES(444,4,'Flutter Icon','Used to display the Flutter icon component. You can define color, size, display mode, and other information. It is a very simple component.','en-us');
INSERT INTO widget_desc VALUES(445,282,'焦点组件','一个管理 [FocusNode] 的组件，用于允许键盘焦点被赋予该小部件及其子树节点。','zh-cn');
INSERT INTO widget_desc VALUES(446,282,'Focus Component','A component that manages [FocusNode], used to allow keyboard focus to be assigned to this widget and its subtree nodes.','en-us');
INSERT INTO widget_desc VALUES(447,424,'FocusableActionDetector','结合 [Actions]、[Shortcuts]、[MouseRegion] 和 [Focus] 小部件功能的小部件，创建定义操作和键绑定的检测器，并提供处理焦点和悬停高亮的回调。','zh-cn');
INSERT INTO widget_desc VALUES(448,424,'FocusableActionDetector',' A widget that combines the functionality of [Actions], [Shortcuts], [MouseRegion] and a [Focus] widget to create a detector that defines actions and key bindings, and provides callbacks for handling focus and hover highlights.','en-us');
INSERT INTO widget_desc VALUES(449,421,'FocusScope','[FocusScope] 类似于 [Focus]，但也作为其后代的范围，将焦点遍历限制为范围内的控件。','zh-cn');
INSERT INTO widget_desc VALUES(450,421,'FocusScope',' A [FocusScope] is similar to a [Focus], but also serves as a scope for its descendants, restricting focus traversal to the scoped controls.','en-us');
INSERT INTO widget_desc VALUES(451,422,'FocusTraversalGroup','描述其后代的继承焦点策略以进行焦点遍历的小部件，将它们分组到单独的遍历组中。','zh-cn');
INSERT INTO widget_desc VALUES(452,422,'FocusTraversalGroup',' A widget that describes the inherited focus policy for focus traversal for its descendants, grouping them into a separate traversal group.','en-us');
INSERT INTO widget_desc VALUES(453,423,'FocusTraversalOrder','描述其子子树应遍历顺序的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(454,423,'FocusTraversalOrder',' An inherited widget that describes the order in which its child subtree should be traversed.','en-us');
INSERT INTO widget_desc VALUES(455,198,'表单组件','表单组件，可以接收其下的FormField组件的变化回调，通过onWillPop拦截页面返回，通过FormState可对表单字段进行保存或校验。','zh-cn');
INSERT INTO widget_desc VALUES(456,198,'Form Component','Form component, which can receive change callbacks from FormField components below it, intercept page returns through onWillPop, and save or validate form fields through FormState.','en-us');
INSERT INTO widget_desc VALUES(457,222,'表单字段','一个表单字段，需要在 Form 组件中使用，内含泛型 T 的字段作为状态量，对根据字段的更新和验证会触发相应回调。','zh-cn');
INSERT INTO widget_desc VALUES(458,222,'Form Field','A form field that needs to be used within the Form component, containing a field of generic type T as the state. Updates and validations of the field will trigger corresponding callbacks.','en-us');
INSERT INTO widget_desc VALUES(459,82,'分率盒','可容纳一个子组件，指定宽高分率,限定子组件区域为父容器宽高*各分率，及对齐方式alignment。','zh-cn');
INSERT INTO widget_desc VALUES(460,82,'FractionallySizedBox','Can contain a child component, specify width and height fractions, limit the child component area to the parent container''s width and height * each fraction, and alignment.','en-us');
INSERT INTO widget_desc VALUES(461,263,'分度偏移','通过offset属性将子组件进行偏移,偏移量为OffSet横纵*子组件大小。','zh-cn');
INSERT INTO widget_desc VALUES(462,263,'Fractional Translation','Offset the child component through the offset property, the offset is the horizontal and vertical OffSet * the size of the child component.','en-us');
INSERT INTO widget_desc VALUES(463,172,'异步构造器','可指定一个Future对象，能够监听异步执行的状态，并在构造器中根据状态构建不同的界面。注意该Future对象不能和FutureBuilder同时创建，否则可能过渡刷新。','zh-cn');
INSERT INTO widget_desc VALUES(464,172,'Asynchronous Constructor','You can specify a Future object, which can monitor the status of asynchronous execution and build different interfaces in the constructor based on the status. Note that the Future object cannot be created simultaneously with the FutureBuilder, otherwise it may cause excessive refreshing.','en-us');
INSERT INTO widget_desc VALUES(465,146,'手势监听器','组件手势事件的检测器,可接受点击、长按、双击，按下、松开、移动等事件，并可以获取触点信息，居家旅行必备组件。','zh-cn');
INSERT INTO widget_desc VALUES(466,146,'Gesture Detector','A detector for component gesture events, capable of accepting events such as tap, long press, double tap, press, release, move, etc., and can obtain touch information. An essential component for home and travel.','en-us');
INSERT INTO widget_desc VALUES(467,250,'滑动越域指示器','孩子为可滑动列表，当滑动到顶部和底部时的指示效果，可指定颜色，没什么太大卵用。是Android和fuchsia系统默认滑动效果。','zh-cn');
INSERT INTO widget_desc VALUES(468,250,'Scroll Boundary Indicator','A child is a scrollable list, with an indicator effect when scrolling to the top and bottom. The color can be specified, but it is not very useful. It is the default scrolling effect for Android and Fuchsia systems.','en-us');
INSERT INTO widget_desc VALUES(469,37,'网格线组件','可容纳一个组件，在其上绘制网格。可指定颜色、线宽、间距等属性。','zh-cn');
INSERT INTO widget_desc VALUES(470,37,'Grid Line Component','Can contain a component and draw a grid on it. Properties such as color, line width, spacing, etc., can be specified.','en-us');
INSERT INTO widget_desc VALUES(471,21,'网格瓦片','Flutter提供的一个通用列表条目结构，可指定头、尾、子组件，常用于网格列表。','zh-cn');
INSERT INTO widget_desc VALUES(472,21,'Grid Tile','A general list item structure provided by Flutter, which can specify header, footer, and child components, commonly used in grid lists.','en-us');
INSERT INTO widget_desc VALUES(473,20,'网格瓦片头','Flutter提供的一个通用头结构，为左中右结构。相应位置可插入组件，可以很方便地应对特定的条目，相比ListTile而言，属性较少。','zh-cn');
INSERT INTO widget_desc VALUES(474,20,'Grid Tile Header','A common header structure provided by Flutter, with a left-center-right layout. Components can be inserted into the corresponding positions, making it easy to handle specific items. Compared to ListTile, it has fewer properties.','en-us');
INSERT INTO widget_desc VALUES(475,163,'网格组件','容纳多个组件，并以网格的方式。可以通过count、extent、custom、builder等构造。有内边距、是否反向、滑动控制器等属性。','zh-cn');
INSERT INTO widget_desc VALUES(476,163,'Grid Component','Accommodates multiple components in a grid manner. Can be constructed via count, extent, custom, builder, etc. Has properties such as padding, whether to reverse, scroll controller, etc.','en-us');
INSERT INTO widget_desc VALUES(477,171,'共享动画','可指定标签名，两个界面跳转时具有相同标签的组件会进行共享动画。一个界面中不能存在两个同名的Hero标签','zh-cn');
INSERT INTO widget_desc VALUES(478,171,'Shared Animation','You can specify a tag name, and components with the same tag will perform a shared animation when transitioning between two interfaces. There cannot be two Hero tags with the same name in one interface.','en-us');
INSERT INTO widget_desc VALUES(479,425,'HeroControllerScope','托管英雄控制器的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(480,425,'HeroControllerScope',' An inherited widget to host a hero controller.','en-us');
INSERT INTO widget_desc VALUES(481,426,'HeroMode','启用或禁用小部件子树中的 [Hero]。','zh-cn');
INSERT INTO widget_desc VALUES(482,426,'HeroMode',' Enables or disables [Hero]es in the widget subtree.','en-us');
INSERT INTO widget_desc VALUES(483,213,'html 元素视图','在 Flutter Web 的 Widget 层次结构中嵌入一个 HTML 元素。','zh-cn');
INSERT INTO widget_desc VALUES(484,213,'html element view','Embeds an HTML element within the Widget hierarchy of Flutter Web.','en-us');
INSERT INTO widget_desc VALUES(485,6,'图标组件','用于图标显示的组件。可指定图标资源、大小、颜色。非常简单，但是非常用','zh-cn');
INSERT INTO widget_desc VALUES(486,6,'Icon Component','Component for displaying icons. Can specify icon resources, size, and color. Very simple, but very useful','en-us');
INSERT INTO widget_desc VALUES(487,30,'图标按钮','可点击的图标按钮，可指定图标信息、内边距、大小、颜色等，接收点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(488,30,'Icon Button','A clickable icon button that can specify icon information, padding, size, color, etc., and receives click events.','en-us');
INSERT INTO widget_desc VALUES(489,427,'IconButtonTheme','覆盖其 [IconButton] 后代的默认 [ButtonStyle]。','zh-cn');
INSERT INTO widget_desc VALUES(490,427,'IconButtonTheme',' Overrides the default [ButtonStyle] of its [IconButton] descendants.','en-us');
INSERT INTO widget_desc VALUES(491,325,'图标样式','可容纳一个孩子，为后代的图标指定默认样式。常用于多个相同图标的样式统一，避免一一设置。','zh-cn');
INSERT INTO widget_desc VALUES(492,325,'Icon Style','Can accommodate one child, specifying the default style for the descendant icons. Commonly used to unify the styles of multiple identical icons, avoiding setting them one by one.','en-us');
INSERT INTO widget_desc VALUES(493,428,'IgnoreBaseline','导致父级为了基线对齐目的而忽略 [child] 的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(494,428,'IgnoreBaseline',' A widget that causes the parent to ignore the [child] for the purposes of baseline alignment.','en-us');
INSERT INTO widget_desc VALUES(495,292,'忽视点击','容纳一个子组件，可以通过指定ignoring属性，来决定孩子是否忽略手势事件，其本身不接受事件。','zh-cn');
INSERT INTO widget_desc VALUES(496,292,'Ignore Click','Contains a child component, and it can decide whether the child ignores gesture events by specifying the ignoring property. It does not accept events itself.','en-us');
INSERT INTO widget_desc VALUES(497,38,'图片组件','用于显示一张图片，可以从文件、内存、网络、资源里加载。可以指定适应方式、样式、颜色混合模式、重复模式等','zh-cn');
INSERT INTO widget_desc VALUES(498,38,'Image Component','Used to display an image, which can be loaded from a file, memory, network, or resources. You can specify the adaptation method, style, color blending mode, repeat mode, etc.','en-us');
INSERT INTO widget_desc VALUES(499,357,'图像滤镜','通过 ImageFilter 图像滤镜，可以对任意组件进行特效处理，包括但不限于高斯模糊、颜色滤镜、变换等。','zh-cn');
INSERT INTO widget_desc VALUES(500,357,'Image Filter','Through the ImageFilter image filter, any component can be processed with special effects, including but not limited to Gaussian blur, color filter, transformation, etc.','en-us');
INSERT INTO widget_desc VALUES(501,7,'容器','用于将一个图片变为纯色的组件。可指定大小、颜色。','zh-cn');
INSERT INTO widget_desc VALUES(502,7,'Container','A component used to turn an image into a solid color. You can specify the size and color.','en-us');
INSERT INTO widget_desc VALUES(503,429,'ImgElementPlatformView','显示 `src` 设置为 [src] 的 `<img>` 元素。','zh-cn');
INSERT INTO widget_desc VALUES(504,429,'ImgElementPlatformView',' Displays an `<img>` element with `src` set to [src].','en-us');
INSERT INTO widget_desc VALUES(505,430,'ImplicitlyAnimatedWidget','用于构建对其属性更改进行动画处理的小部件的抽象类。','zh-cn');
INSERT INTO widget_desc VALUES(506,430,'ImplicitlyAnimatedWidget',' An abstract class for building widgets that animate changes to their properties.','en-us');
INSERT INTO widget_desc VALUES(507,431,'IndexedSemantics','使用索引注释子语义的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(508,431,'IndexedSemantics',' A widget that annotates the child semantics with an index.','en-us');
INSERT INTO widget_desc VALUES(509,161,'索引堆叠','Stack组件的子类,可以堆叠多个组件，并通过index来指定展示的组件索引，其余的会被隐藏。','zh-cn');
INSERT INTO widget_desc VALUES(510,161,'Indexed Stack','A subclass of the Stack component that can stack multiple components and specify the index of the component to be displayed, while the rest are hidden.','en-us');
INSERT INTO widget_desc VALUES(511,432,'InheritedCupertinoTheme','为所有后代提供 [CupertinoTheme]。','zh-cn');
INSERT INTO widget_desc VALUES(512,432,'InheritedCupertinoTheme',' Provides a [CupertinoTheme] to all descendents.','en-us');
INSERT INTO widget_desc VALUES(513,336,'共享模型','它是 InheritedWidget 抽象子类，通过 context 向子树传递数据，并通过 Aspect 方面控制依赖通知的粒度。','zh-cn');
INSERT INTO widget_desc VALUES(514,336,'Shared Model','It is an abstract subclass of InheritedWidget, which passes data to the subtree through context and controls the granularity of dependency notifications through Aspect.','en-us');
INSERT INTO widget_desc VALUES(515,433,'InheritedNotifier','[Listenable] [notifier] 的继承小部件，当 [notifier] 被触发时更新其依赖项。','zh-cn');
INSERT INTO widget_desc VALUES(516,433,'InheritedNotifier',' An inherited widget for a [Listenable] [notifier], which updates its dependencies when the [notifier] is triggered.','en-us');
INSERT INTO widget_desc VALUES(517,345,'传承主题','它是抽象类，有非常多的 XXXTheme 相关子类，用于定义颜色、文字样式等属性，在子树中共享这些属性。','zh-cn');
INSERT INTO widget_desc VALUES(518,345,'Inherited Theme','It is an abstract class with many XXXTheme related subclasses, used to define properties such as colors and text styles, and share these properties in the subtree.','en-us');
INSERT INTO widget_desc VALUES(519,346,'传承组件','该类是抽象类，作用是可以在本上下文存储数据，在其后续节点的上下文中共享该数据。有很多实现类，包括各种主题组件、MediaQuery等。','zh-cn');
INSERT INTO widget_desc VALUES(520,346,'Inherited Widget','This class is an abstract class, which can store data in this context and share that data in the context of its subsequent nodes. There are many implementation classes, including various theme components, MediaQuery, etc.','en-us');
INSERT INTO widget_desc VALUES(521,152,'水波','使InkWell和InkResponse的水波纹有效,用于绘制图像或其他装饰的Material组件。','zh-cn');
INSERT INTO widget_desc VALUES(522,152,'Ripple','Enables the ripple effect for InkWell and InkResponse, a Material component used to draw images or other decorations.','en-us');
INSERT INTO widget_desc VALUES(523,149,'水波纹响应','水波纹的点击效果，接收点击、双击、长按、取消、高亮变化事件，可指定水波纹颜色、半径、高亮形状等属性。','zh-cn');
INSERT INTO widget_desc VALUES(524,149,'Ripple Response','Ripple click effect, receiving click, double-click, long press, cancel, highlight change events, and can specify ripple color, radius, highlight shape and other properties.','en-us');
INSERT INTO widget_desc VALUES(525,150,'水波纹','InkResponse的子类，基本属性同InkResponse。一个矩形区域的水波纹，可以知道圆角半径，边线形状等。','zh-cn');
INSERT INTO widget_desc VALUES(526,150,'Ripple','A subclass of InkResponse, with basic properties similar to InkResponse. A rectangular area with ripple effects, allowing customization of corner radius, border shape, etc.','en-us');
INSERT INTO widget_desc VALUES(527,14,'综合小条','和Chip组件类似的样式，集成了点击、删除、选择事件为一体。注意:点击事件和选择事件不能同时存在。','zh-cn');
INSERT INTO widget_desc VALUES(528,14,'Comprehensive Chip','Similar in style to the Chip component, it integrates click, delete, and select events into one. Note: Click event and select event cannot coexist.','en-us');
INSERT INTO widget_desc VALUES(529,434,'InputDatePickerFormField','配置为接受和验证用户输入日期的 [TextFormField]。','zh-cn');
INSERT INTO widget_desc VALUES(530,434,'InputDatePickerFormField',' A [TextFormField] configured to accept and validate a date entered by a user.','en-us');
INSERT INTO widget_desc VALUES(531,231,'输入装饰','在外层包裹输入的装饰,是TextField的底层核心组件之一，一般不单独使用。','zh-cn');
INSERT INTO widget_desc VALUES(532,231,'Input Decorator','A decorator that wraps around the input, one of the core components of TextField, generally not used alone.','en-us');
INSERT INTO widget_desc VALUES(533,435,'InspectorButton','用于创建 Material 或 Cupertino 样式检查器按钮的抽象基类。','zh-cn');
INSERT INTO widget_desc VALUES(534,435,'InspectorButton',' An abstract base class for creating Material or Cupertino-styled inspector buttons.','en-us');
INSERT INTO widget_desc VALUES(535,351,'交互视图','主要对移动、缩放等手势交互进行封装，简化使用，可指定移动边界、缩放比例、手势监听等。','zh-cn');
INSERT INTO widget_desc VALUES(536,351,'Interactive Viewer','Mainly encapsulates gesture interactions such as moving and zooming, simplifies usage, and allows specifying movement boundaries, zoom ratios, gesture monitoring, etc.','en-us');
INSERT INTO widget_desc VALUES(537,298,'固有高','根据子元素的固有高度调整其子元素大小的组件,可解决很多布局的疑难杂症,但相对昂贵。','zh-cn');
INSERT INTO widget_desc VALUES(538,298,'Intrinsic Height','A component that adjusts the size of its children based on their intrinsic height, which can solve many layout issues, but is relatively expensive.','en-us');
INSERT INTO widget_desc VALUES(539,297,'固有宽','根据子元素的固有宽度度调整其子元素大小的组件,可解决很多布局的疑难杂症,但相对昂贵。','zh-cn');
INSERT INTO widget_desc VALUES(540,297,'Intrinsic Width','A component that adjusts the size of its child elements based on their intrinsic width, which can solve many layout issues but is relatively expensive.','en-us');
INSERT INTO widget_desc VALUES(541,316,'保活','在懒加载的列表中，孩子的状态是否需要保活。是 AutomaticKeepAlive 的底层实现，一般不单独使用。','zh-cn');
INSERT INTO widget_desc VALUES(542,316,'Keep Alive','Whether the state of the child needs to be kept alive in a lazy-loaded list. It is the underlying implementation of AutomaticKeepAlive and is generally not used alone.','en-us');
INSERT INTO widget_desc VALUES(543,284,'键盘监听器','在获取焦点后, 通过 onKeyEvent 监听键盘的按键事件。 ','zh-cn');
INSERT INTO widget_desc VALUES(544,284,'Keyboard Listener','After gaining focus, listen to keyboard key events through onKeyEvent.','en-us');
INSERT INTO widget_desc VALUES(545,436,'KeyedSubtree','构建其子项的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(546,436,'KeyedSubtree',' A widget that builds its child.','en-us');
INSERT INTO widget_desc VALUES(547,287,'布局构造器','可以检测到父容器的区域大小，并根据父容器的尺寸信息可以完成自定义布局。是一个非常实用的布局组件。','zh-cn');
INSERT INTO widget_desc VALUES(548,287,'Layout Constructor','Can detect the size of the parent container and complete custom layouts based on the size information of the parent container. It is a very practical layout component.','en-us');
INSERT INTO widget_desc VALUES(549,315,'布局Id','只能用于CustomMultiChildLayout组件中，为其子组件标识身份。','zh-cn');
INSERT INTO widget_desc VALUES(550,315,'Layout Id','Can only be used in the CustomMultiChildLayout component to identify its child components.','en-us');
INSERT INTO widget_desc VALUES(551,437,'LeafRenderObjectWidget','配置没有子项的 [RenderObject] 子类的 [RenderObjectWidget] 的超类。','zh-cn');
INSERT INTO widget_desc VALUES(552,437,'LeafRenderObjectWidget',' A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses that have no children.','en-us');
INSERT INTO widget_desc VALUES(553,145,'证书页','应用的证书页,可指定应用图标、应用名、应用版本号等信息，其他由Flutter自动生成。','zh-cn');
INSERT INTO widget_desc VALUES(554,145,'License Page','The license page of the application, where you can specify information such as the application icon, application name, application version number, etc. Other details are automatically generated by Flutter.','en-us');
INSERT INTO widget_desc VALUES(555,79,'限制盒','可容纳一个子组件，通过指定最大宽高来限定子组件容身区域。','zh-cn');
INSERT INTO widget_desc VALUES(556,79,'Limited Box','Can contain one child component, limiting the area where the child component can reside by specifying the maximum width and height.','en-us');
INSERT INTO widget_desc VALUES(557,47,'水平进度','直线型的进度显示,可指定颜色、进度等属性。value为null时会不停旋转。','zh-cn');
INSERT INTO widget_desc VALUES(558,47,'Horizontal Progress','A linear progress display that can specify properties such as color and progress. It will keep spinning when the value is null.','en-us');
INSERT INTO widget_desc VALUES(559,342,'列表体','将若干子组件按照轴向进行排列，可设置的属性很少，一般很少使用，而选择使用ListView。','zh-cn');
INSERT INTO widget_desc VALUES(560,342,'List Body','Arranges several child components along the axis, with few properties that can be set. It is rarely used, and ListView is generally chosen instead.','en-us');
INSERT INTO widget_desc VALUES(561,438,'ListenableBuilder','当 [Listenable] 更改时用于构建小部件子树的通用小部件。','zh-cn');
INSERT INTO widget_desc VALUES(562,438,'ListenableBuilder',' A general-purpose widget for building a widget subtree when a [Listenable] changes.','en-us');
INSERT INTO widget_desc VALUES(563,147,'事件监听器','组件事件的监听器,可接受按下、松开、移动、取消等事件。较GestureDetector比较原始，可获取的信息也更多。','zh-cn');
INSERT INTO widget_desc VALUES(564,147,'Event Listener','A listener for component events, which can accept events such as press, release, move, cancel, etc. It is more primitive compared to GestureDetector and can obtain more information.','en-us');
INSERT INTO widget_desc VALUES(565,16,'列表瓦片','Flutter提供的一个通用列表条目结构，为左中右结构。相应位置可插入组件，可以很方便地应对特定的条目。','zh-cn');
INSERT INTO widget_desc VALUES(566,16,'List Tile','A general list item structure provided by Flutter, which has a left-center-right structure. Components can be inserted at the corresponding positions, making it easy to handle specific items.','en-us');
INSERT INTO widget_desc VALUES(567,334,'ListTile主题','主要用于为后代的ListTile组件统一设置默认属性,也可以通过该组件获取默认ListTile的属性。','zh-cn');
INSERT INTO widget_desc VALUES(568,334,'ListTile Theme','Mainly used to set default properties for descendant ListTile components uniformly, and also to obtain the default properties of ListTile through this component.','en-us');
INSERT INTO widget_desc VALUES(569,162,'列表组件','列表显示的领军人物，容纳多个子组件，可以通过builder、separated、custom等构造。有内边距、是否反向、滑动控制器等属性。','zh-cn');
INSERT INTO widget_desc VALUES(570,162,'List Component','The leader in list display, accommodating multiple sub-components, can be constructed through builder, separated, custom, etc. It has properties such as padding, whether to reverse, scroll controller, etc.','en-us');
INSERT INTO widget_desc VALUES(571,179,'滚轮列表','高大上的柱面滑动列表,精妙十足，可指定item高度、透视、挤压等属性，接收滑动时选中事件。','zh-cn');
INSERT INTO widget_desc VALUES(572,179,'Wheel List','A high-end cylindrical sliding list, exquisitely designed, allowing you to specify properties such as item height, perspective, and extrusion, and receive selection events during scrolling.','en-us');
INSERT INTO widget_desc VALUES(573,291,'列表滚轮视口','一个将孩子列表显示在柱状滚轮上的视口，是 ListWheelScrollView、CupertinoPicker 的底层依赖','zh-cn');
INSERT INTO widget_desc VALUES(574,291,'List Wheel Viewport','A viewport that displays a list of children on a cylindrical wheel, which is the underlying dependency of ListWheelScrollView and CupertinoPicker','en-us');
INSERT INTO widget_desc VALUES(575,290,'国际化','为子树节点提供国际化资源，底层依赖 InheritedWidget 实现。 MaterialApp 内部已集成该组件，其 locale 和 delegates 参数最终用于该组件。','zh-cn');
INSERT INTO widget_desc VALUES(576,290,'Internationalization','Provides internationalization resources for subtree nodes, implemented with the underlying dependency on InheritedWidget. The MaterialApp internally integrates this component, and its locale and delegates parameters are ultimately used for this component.','en-us');
INSERT INTO widget_desc VALUES(577,105,'拖拽目标','长按时让组件在界面上任意拖拽,可存放一个泛型T的数据。通常和DragTarget组合使用，来完成拖拽效果。','zh-cn');
INSERT INTO widget_desc VALUES(578,105,'Drag Target','Allows the component to be dragged anywhere on the interface when long-pressed, and can store data of a generic type T. It is usually used in combination with DragTarget to achieve the drag effect.','en-us');
INSERT INTO widget_desc VALUES(579,439,'LookupBoundary','查找边界控制通过边界提供的静态查找方法对边界后代可见的实体。','zh-cn');
INSERT INTO widget_desc VALUES(580,439,'LookupBoundary',' A lookup boundary controls what entities are visible to descendants of the boundary via the static lookup methods provided by the boundary.','en-us');
INSERT INTO widget_desc VALUES(581,440,'Magnifier','Material 样式的放大镜。','zh-cn');
INSERT INTO widget_desc VALUES(582,440,'Magnifier',' A Material-styled magnifying glass.','en-us');
INSERT INTO widget_desc VALUES(583,160,'材料组件','Material风格组件的领军人物，灵魂核心。可指定颜色、影深、类型、阴影颜色、形状等属性。','zh-cn');
INSERT INTO widget_desc VALUES(584,160,'Material Component','The leader and core of Material style components. You can specify properties such as color, elevation, type, shadow color, shape, etc.','en-us');
INSERT INTO widget_desc VALUES(585,65,'Material应用','Material应用的顶级组件，包含路由生成器、主题、语言、主页等属性。','zh-cn');
INSERT INTO widget_desc VALUES(586,65,'Material Application','The top-level component of a Material application, including properties such as route generator, theme, language, home page, etc.','en-us');
INSERT INTO widget_desc VALUES(587,211,'横幅组件','Material风格的横幅组件，支持左中右或左中下结构，可指定边距背景色等','zh-cn');
INSERT INTO widget_desc VALUES(588,211,'Banner Component','A Material-style banner component that supports left-center-right or left-center-bottom structures, and allows specifying margins, background colors, etc.','en-us');
INSERT INTO widget_desc VALUES(589,327,'横幅样式','主要用于为后代的MaterialBanner组件统一设置默认属性,也可以通过该组件获取默认MaterialBanner的属性。','zh-cn');
INSERT INTO widget_desc VALUES(590,327,'Banner Style','Mainly used to set default properties for descendant MaterialBanner components uniformly, and it can also be used to obtain the default properties of MaterialBanner.','en-us');
INSERT INTO widget_desc VALUES(591,23,'材料按钮','基于RawMaterialButton实现的通用Material按钮。可盛放一个子组件,能定义颜色、形状等表现,可接收点击和长按事件。','zh-cn');
INSERT INTO widget_desc VALUES(592,23,'Material Button','A general Material button implemented based on RawMaterialButton. It can contain a child component, define colors, shapes, etc., and can receive click and long press events.','en-us');
INSERT INTO widget_desc VALUES(593,441,'MatrixTransition','对变换小部件的 [Matrix4] 进行动画处理。','zh-cn');
INSERT INTO widget_desc VALUES(594,441,'MatrixTransition',' Animates the [Matrix4] of a transformed widget.','en-us');
INSERT INTO widget_desc VALUES(595,167,'媒体查询','可通过MediaQuery.of来获取屏幕尺寸、设备密度、文字缩放比例、边距等信息。','zh-cn');
INSERT INTO widget_desc VALUES(596,167,'Media Query','You can use MediaQuery.of to obtain information such as screen size, device density, text scaling ratio, margins, etc.','en-us');
INSERT INTO widget_desc VALUES(597,442,'MenuAcceleratorCallbackBinding','为后代 [MenuAcceleratorLabel] 提供按下加速器时调用的函数的 [InheritedWidget]。','zh-cn');
INSERT INTO widget_desc VALUES(598,442,'MenuAcceleratorCallbackBinding',' An [InheritedWidget] that provides a descendant [MenuAcceleratorLabel] with the function to invoke when the accelerator is pressed.','en-us');
INSERT INTO widget_desc VALUES(599,443,'MenuAcceleratorLabel','为菜单项（通常是 [MenuItemButton] 或 [SubmenuButton]）绘制标签文本并使用有关当前活动键盘加速器的信息渲染其子项的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(600,443,'MenuAcceleratorLabel',' A widget that draws the label text for a menu item (typically a [MenuItemButton] or [SubmenuButton]) and renders its child with information about the currently active keyboard accelerator.','en-us');
INSERT INTO widget_desc VALUES(601,444,'MenuAnchor','用于标记一组子菜单的"锚点"的小部件，定义用于定位菜单的矩形，可以使用显式位置或对齐方式完成。','zh-cn');
INSERT INTO widget_desc VALUES(602,444,'MenuAnchor',' A widget used to mark the "anchor" for a set of submenus, defining the rectangle used to position the menu, which can be done either with an explicit location, or with an alignment.','en-us');
INSERT INTO widget_desc VALUES(603,445,'MenuBar','管理级联子菜单的菜单栏。','zh-cn');
INSERT INTO widget_desc VALUES(604,445,'MenuBar',' A menu bar that manages cascading child menus.','en-us');
INSERT INTO widget_desc VALUES(605,446,'MenuBarTheme','为此小部件后代中的 [MenuBar] 小部件定义配置的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(606,446,'MenuBarTheme',' An inherited widget that defines the configuration for the [MenuBar] widgets in this widget''s descendants.','en-us');
INSERT INTO widget_desc VALUES(607,447,'MenuButtonTheme','覆盖其 [MenuItemButton] 和 [SubmenuButton] 后代的默认 [ButtonStyle]。','zh-cn');
INSERT INTO widget_desc VALUES(608,447,'MenuButtonTheme',' Overrides the default [ButtonStyle] of its [MenuItemButton] and [SubmenuButton] descendants.','en-us');
INSERT INTO widget_desc VALUES(609,448,'MenuItemButton','用于 [MenuBar]、使用 [MenuAnchor] 创建的菜单或单独使用的按钮，可以通过点击或键盘导航激活。','zh-cn');
INSERT INTO widget_desc VALUES(610,448,'MenuItemButton',' A button for use in a [MenuBar], in a menu created with [MenuAnchor], or on its own, that can be activated by click or keyboard navigation.','en-us');
INSERT INTO widget_desc VALUES(611,449,'MenuTheme','为此小部件后代中由 [SubmenuButton]、[MenuBar] 或 [MenuAnchor] 小部件创建的菜单定义配置的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(612,449,'MenuTheme',' An inherited widget that defines the configuration in this widget''s descendants for menus created by the [SubmenuButton], [MenuBar], or [MenuAnchor] widgets.','en-us');
INSERT INTO widget_desc VALUES(613,261,'可合并材料','用于展示 MergeableMaterialItem 的列表，包括 MaterialSlice(主体) 和 MaterialGap(分隔) 。','zh-cn');
INSERT INTO widget_desc VALUES(614,261,'Mergeable Material','Used to display a list of MergeableMaterialItem, including MaterialSlice (main body) and MaterialGap (separator).','en-us');
INSERT INTO widget_desc VALUES(615,450,'MergeSemantics','合并其后代语义的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(616,450,'MergeSemantics',' A widget that merges the semantics of its descendants.','en-us');
INSERT INTO widget_desc VALUES(617,451,'MetaData','在渲染树中保存不透明元数据。','zh-cn');
INSERT INTO widget_desc VALUES(618,451,'MetaData',' Holds opaque meta data in the render tree.','en-us');
INSERT INTO widget_desc VALUES(619,212,'屏障模','相当于一块幕布层，防止用户与其背后的 Widget 交互，可以通过 dismissible 决定点击时，是否触发返回栈。源码中用于 Dialog 相关组件。','zh-cn');
INSERT INTO widget_desc VALUES(620,212,'Modal Barrier','Equivalent to a curtain layer, preventing users from interacting with the Widget behind it. It can be determined by dismissible whether to trigger the back stack when clicked. Used in the source code for Dialog related components.','en-us');
INSERT INTO widget_desc VALUES(621,293,'鼠标区域','用于鼠标事件监听的组件,通常用于桌面和Web平台，可监听鼠标的移入、移除、移动事件。','zh-cn');
INSERT INTO widget_desc VALUES(622,293,'Mouse Region','A component for mouse event listening, typically used on desktop and web platforms, can listen to mouse enter, exit, and move events.','en-us');
INSERT INTO widget_desc VALUES(623,452,'MultiChildRenderObjectWidget','配置具有单个子项列表的 [RenderObject] 子类的 [RenderObjectWidget] 的超类。（此超类仅提供该子项列表的存储，实际上不提供更新逻辑。）','zh-cn');
INSERT INTO widget_desc VALUES(624,452,'MultiChildRenderObjectWidget',' A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses that have a single list of children. (This superclass only provides the storage for that child list, it doesn''t actually provide the updating logic.)','en-us');
INSERT INTO widget_desc VALUES(625,453,'NavigationBar','Material 3 导航栏组件。','zh-cn');
INSERT INTO widget_desc VALUES(626,453,'NavigationBar',' Material 3 Navigation Bar component.','en-us');
INSERT INTO widget_desc VALUES(627,454,'NavigationBarTheme','为此小部件子树中的 [NavigationBar] 和 [NavigationDestination] 定义视觉属性的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(628,454,'NavigationBarTheme',' An inherited widget that defines visual properties for [NavigationBar]s and [NavigationDestination]s in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(629,455,'NavigationDestination','Material 3 [NavigationBar] 目标。','zh-cn');
INSERT INTO widget_desc VALUES(630,455,'NavigationDestination',' A Material 3 [NavigationBar] destination.','en-us');
INSERT INTO widget_desc VALUES(631,456,'NavigationDrawer','Material Design 导航抽屉组件。','zh-cn');
INSERT INTO widget_desc VALUES(632,456,'NavigationDrawer',' Material Design Navigation Drawer component.','en-us');
INSERT INTO widget_desc VALUES(633,457,'NavigationDrawerDestination','Material Design [NavigationDrawer] 目标。','zh-cn');
INSERT INTO widget_desc VALUES(634,457,'NavigationDrawerDestination',' A Material Design [NavigationDrawer] destination.','en-us');
INSERT INTO widget_desc VALUES(635,458,'NavigationDrawerTheme','为此小部件子树中的 [NavigationDrawer] 和 [NavigationDestination] 定义视觉属性的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(636,458,'NavigationDrawerTheme',' An inherited widget that defines visual properties for [NavigationDrawer]s and [NavigationDestination]s in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(637,459,'NavigationIndicator','Material 3 [NavigationBar] 和 [NavigationRail] 组件的选择指示器。','zh-cn');
INSERT INTO widget_desc VALUES(638,459,'NavigationIndicator',' Selection Indicator for the Material 3 [NavigationBar] and [NavigationRail] components.','en-us');
INSERT INTO widget_desc VALUES(639,358,'侧栏导航','侧导航栏，一般用于桌面导航菜单。支持展开和收缩区域，可指定首尾位置组件。','zh-cn');
INSERT INTO widget_desc VALUES(640,358,'Side Navigation Bar','Side navigation bar, generally used for desktop navigation menus. Supports expanding and collapsing areas, and can specify components at the beginning and end positions.','en-us');
INSERT INTO widget_desc VALUES(641,460,'NavigationRailTheme','为此小部件子树中的 [NavigationRail] 和 [NavigationRailDestination] 定义视觉属性的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(642,460,'NavigationRailTheme',' An inherited widget that defines visual properties for [NavigationRail]s and [NavigationRailDestination]s in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(643,214,'导航工具条','左中右模式的通用结构组件,可指定中间组件距左侧边距及是否居中。源码在AppBar等导航条结构中有使用它。','zh-cn');
INSERT INTO widget_desc VALUES(644,214,'Navigation Toolbar','A general structural component with left-center-right mode, which can specify the left margin of the middle component and whether it is centered. The source code is used in the structure of navigation bars such as AppBar.','en-us');
INSERT INTO widget_desc VALUES(645,232,'导航器','Navigator用堆栈规则管理一组子组件,可以将子组件切入弹出及监听出入栈事件。MaterialApp路由管理的本源就是使用了Navigator。','zh-cn');
INSERT INTO widget_desc VALUES(646,232,'Navigator','The Navigator manages a group of child components using stack rules, allowing child components to be pushed and popped, and listening to stack events. The origin of MaterialApp''s route management is the use of Navigator.','en-us');
INSERT INTO widget_desc VALUES(647,461,'NavigatorPopHandler','启用系统返回手势的处理。','zh-cn');
INSERT INTO widget_desc VALUES(648,461,'NavigatorPopHandler',' Enables the handling of system back gestures.','en-us');
INSERT INTO widget_desc VALUES(649,251,'嵌套滑动视图','用于多个视图滑动嵌套处理,可以指定头部、滑动控制器、滑动方向等,其中body必须是可滑动类型的组件。','zh-cn');
INSERT INTO widget_desc VALUES(650,251,'Nested Scroll View','Used for handling nested scrolling of multiple views, can specify the header, scroll controller, scroll direction, etc., where the body must be a scrollable type of component.','en-us');
INSERT INTO widget_desc VALUES(651,344,'嵌套滑动视口','在 NestedScrollView 中使用的视口，该视口持有 SliverOverlapAbsorberHandle，会在视口需要重新计算布局时通知它。例如，当滚动它时。','zh-cn');
INSERT INTO widget_desc VALUES(652,344,'Nested Scroll Viewport','A viewport used in NestedScrollView, which holds a SliverOverlapAbsorberHandle and notifies it when the viewport needs to recalculate its layout. For example, when scrolling it.','en-us');
INSERT INTO widget_desc VALUES(653,220,'通知监听器','可指定Notification子泛型T,监听该类型的变化。Flutter内置很多滑动的Notification,当然你也可以自定义Notification进行监听。','zh-cn');
INSERT INTO widget_desc VALUES(654,220,'Notification Listener','You can specify the sub-generic type T of Notification to listen for changes of that type. Flutter has many built-in sliding Notifications, and of course, you can also customize Notifications for listening.','en-us');
INSERT INTO widget_desc VALUES(655,462,'ObstructingPreferredSizeWidget','具有首选大小并报告是否完全阻挡其后面小部件的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(656,462,'ObstructingPreferredSizeWidget',' Widget that has a preferred size and reports whether it fully obstructs widgets behind it.','en-us');
INSERT INTO widget_desc VALUES(657,71,'消失组件','可容纳一个子组件，可更改其的消失与否。offstage属性为true表示隐藏。','zh-cn');
INSERT INTO widget_desc VALUES(658,71,'Disappearing Component','Can contain a child component, and can change its visibility. The offstage property set to true means hidden.','en-us');
INSERT INTO widget_desc VALUES(659,73,'透明化','可容纳一个子组件，将其透明度变为opacity值, opacity在0~1之间。','zh-cn');
INSERT INTO widget_desc VALUES(660,73,'Transparency','Can contain a child component, changing its transparency to the opacity value, where opacity is between 0 and 1.','en-us');
INSERT INTO widget_desc VALUES(661,203,'方向构造器','能够回调父组件是横向还是纵向,可以据此来构建不同的子组件。','zh-cn');
INSERT INTO widget_desc VALUES(662,203,'Orientation Builder','Can callback whether the parent component is horizontal or vertical, and can build different child components based on this.','en-us');
INSERT INTO widget_desc VALUES(663,355,'边框按钮','Material风格的边线按钮，表现和 OutlineButton 类似。可通过样式更改边框、颜色、阴影等属性。','zh-cn');
INSERT INTO widget_desc VALUES(664,355,'Outlined Button','A Material-style outlined button, similar in behavior to OutlineButton. Properties such as border, color, and shadow can be changed through styling.','en-us');
INSERT INTO widget_desc VALUES(665,463,'OutlinedButtonTheme','覆盖其 [OutlinedButton] 后代的默认 [ButtonStyle]。','zh-cn');
INSERT INTO widget_desc VALUES(666,463,'OutlinedButtonTheme',' Overrides the default [ButtonStyle] of its [OutlinedButton] descendants.','en-us');
INSERT INTO widget_desc VALUES(667,464,'OverflowBar','将其 [children] 布局在一行中的小部件，除非它们溢出可用的水平空间，在这种情况下，它会将它们布局在一列中。','zh-cn');
INSERT INTO widget_desc VALUES(668,464,'OverflowBar',' A widget that lays out its [children] in a row unless they "overflow" the available horizontal space, in which case it lays them out in a column instead.','en-us');
INSERT INTO widget_desc VALUES(669,83,'溢出盒','可容纳一个子组件，且子组件允许溢出父组件区域，可以指定宽高的最大最小区域进行限定，拥有对齐属性alignment。','zh-cn');
INSERT INTO widget_desc VALUES(670,83,'Overflow Box','Can contain a child component, and the child component is allowed to overflow the parent component area. The maximum and minimum width and height can be specified for constraints, and it has the alignment property.','en-us');
INSERT INTO widget_desc VALUES(671,182,'悬浮组件','可以将组件在全应用中进行悬浮显示，能够添加或移除组件，它们有独立管理的栈。','zh-cn');
INSERT INTO widget_desc VALUES(672,182,'Floating Component','Can display components in a floating manner across the entire application, allowing components to be added or removed, with an independently managed stack.','en-us');
INSERT INTO widget_desc VALUES(673,465,'OverlayPortal','在 [Overlay] 上渲染其覆盖子项的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(674,465,'OverlayPortal',' A widget that renders its overlay child on an [Overlay].','en-us');
INSERT INTO widget_desc VALUES(675,74,'边距组件','可容纳一个子组件，添加自身内边距来限制孩子组件的占位,核心属性为padding。','zh-cn');
INSERT INTO widget_desc VALUES(676,74,'Margin Component','Can accommodate a child component, adding its own padding to limit the child component''s placement. The core property is padding.','en-us');
INSERT INTO widget_desc VALUES(677,210,'页面存储器','可以将页面状态进行存储,在切页时可以保持状态。源码中在ScrollView、PageView、ExpansionTile等皆有应用。','zh-cn');
INSERT INTO widget_desc VALUES(678,210,'Page Storage','Can store the state of a page, maintaining the state when switching pages. It is used in ScrollView, PageView, ExpansionTile, etc. in the source code.','en-us');
INSERT INTO widget_desc VALUES(679,165,'滑页','容纳多个组件页面，可对它们进行滑动切换，可指定滑动的方向、是否反向、滑动控制器等属性。','zh-cn');
INSERT INTO widget_desc VALUES(680,165,'Swipe Page','It can accommodate multiple component pages, and you can swipe to switch between them. You can specify properties such as the direction of the swipe, whether it is reversed, and the swipe controller.','en-us');
INSERT INTO widget_desc VALUES(681,235,'可分页表格','一个功能丰富的可分页表格组件，可指定分页数、排列、页码前后切换。','zh-cn');
INSERT INTO widget_desc VALUES(682,235,'Paginated Table','A feature-rich paginated table component that allows specifying the number of pages, sorting, and switching between pages.','en-us');
INSERT INTO widget_desc VALUES(683,347,'父数据组件','抽象类，用于将 ParentData 信息挂钩到 RenderObjectWidget 子组件上。其子类有 Positioned、Flexible、Expanded等，这些组件只能用于特定的组件之下。','zh-cn');
INSERT INTO widget_desc VALUES(684,347,'Parent Data Widget','An abstract class used to hook ParentData information to RenderObjectWidget child components. Its subclasses include Positioned, Flexible, Expanded, etc. These components can only be used under specific components.','en-us');
INSERT INTO widget_desc VALUES(685,312,'性能浮层','可以非常方便地开启性能监测的两个柱图,方便查看刷新界面时帧率的变化情况。','zh-cn');
INSERT INTO widget_desc VALUES(686,312,'Performance Overlay','It is very convenient to enable two bar charts for performance monitoring, making it easy to see the changes in frame rate when refreshing the interface.','en-us');
INSERT INTO widget_desc VALUES(687,296,'物理模块','可以让子组件按照圆形、方行进行剪裁,并且可以指定背景色、圆角、影深、阴影颜色、剪切行为。','zh-cn');
INSERT INTO widget_desc VALUES(688,296,'Physical Module','Allows child components to be clipped according to circles and squares, and can specify background color, rounded corners, shadow depth, shadow color, and clipping behavior.','en-us');
INSERT INTO widget_desc VALUES(689,279,'物理形状','可以让子组件按照路径进行剪裁,并且可以指定背景色、影深、阴影颜色、剪切行为。','zh-cn');
INSERT INTO widget_desc VALUES(690,279,'Physical Shape','Allows child components to be clipped according to the path, and can specify background color, shadow depth, shadow color, and clipping behavior.','en-us');
INSERT INTO widget_desc VALUES(691,309,'固定头部滑片','一个可以停留在视口上部的滑片, 可轻松完成吸顶效果。','zh-cn');
INSERT INTO widget_desc VALUES(692,309,'Pinned Header Sliver','A sliver that can stay at the top of the viewport, easily achieving a sticky header effect.','en-us');
INSERT INTO widget_desc VALUES(693,36,'占位组件','一个矩形和叉叉的占位组件,可指定颜色、线宽、宽高等属性。','zh-cn');
INSERT INTO widget_desc VALUES(694,36,'Placeholder Component','A placeholder component with a rectangle and a cross, which can specify properties such as color, stroke width, width, and height.','en-us');
INSERT INTO widget_desc VALUES(695,466,'PlatformMenuBar','使用平台的原生 API 构建和渲染由 [PlatformMenu]/[PlatformMenuItem] 层次结构描述的菜单的菜单栏。','zh-cn');
INSERT INTO widget_desc VALUES(696,466,'PlatformMenuBar',' A menu bar that uses the platform''s native APIs to construct and render a menu described by a [PlatformMenu]/[PlatformMenuItem] hierarchy.','en-us');
INSERT INTO widget_desc VALUES(697,467,'PlatformSelectableRegionContextMenu','请参阅 `_platform_selectable_region_context_menu_io.dart` 获取完整文档。','zh-cn');
INSERT INTO widget_desc VALUES(698,467,'PlatformSelectableRegionContextMenu',' See `_platform_selectable_region_context_menu_io.dart` for full documentation.','en-us');
INSERT INTO widget_desc VALUES(699,468,'PlatformViewLink','将平台视图与 Flutter 框架链接。','zh-cn');
INSERT INTO widget_desc VALUES(700,468,'PlatformViewLink',' Links a platform view with the Flutter framework.','en-us');
INSERT INTO widget_desc VALUES(701,469,'PlatformViewSurface','将平台视图与 Flutter 的合成器、触摸和语义子系统集成。','zh-cn');
INSERT INTO widget_desc VALUES(702,469,'PlatformViewSurface',' Integrates a platform view with Flutter''s compositor, touch, and semantics subsystems.','en-us');
INSERT INTO widget_desc VALUES(703,470,'PopScope','管理返回导航手势。','zh-cn');
INSERT INTO widget_desc VALUES(704,470,'PopScope',' Manages back navigation gestures.','en-us');
INSERT INTO widget_desc VALUES(705,56,'菜单按钮','弹出菜单栏,可指定偏移、颜色、影深、形状等属性。接收item选中的事件和取消选择事件。','zh-cn');
INSERT INTO widget_desc VALUES(706,56,'Menu Button','A pop-up menu bar that can specify attributes such as offset, color, elevation, and shape. Receives item selection and deselection events.','en-us');
INSERT INTO widget_desc VALUES(707,174,'弹出菜单分割线','PopupMenuButton的分割线,一般不单独使用，可指定高度。','zh-cn');
INSERT INTO widget_desc VALUES(708,174,'Popup Menu Divider','The divider of PopupMenuButton, generally not used alone, the height can be specified.','en-us');
INSERT INTO widget_desc VALUES(709,471,'PopupMenuEntry','Material Design 弹出菜单中条目的基类。','zh-cn');
INSERT INTO widget_desc VALUES(710,471,'PopupMenuEntry',' A base class for entries in a Material Design popup menu.','en-us');
INSERT INTO widget_desc VALUES(711,472,'PopupMenuItem','Material Design 弹出菜单中的项目。','zh-cn');
INSERT INTO widget_desc VALUES(712,472,'PopupMenuItem',' An item in a Material Design popup menu.','en-us');
INSERT INTO widget_desc VALUES(713,330,'弹出菜单样式','主要用于为后代的PopupMenuButton组件统一设置默认属性,也可以通过该组件获取默认PopupMenu的属性。','zh-cn');
INSERT INTO widget_desc VALUES(714,330,'Popup Menu Theme','Mainly used to set default properties uniformly for descendant PopupMenuButton components, and also to obtain the default properties of PopupMenu through this component.','en-us');
INSERT INTO widget_desc VALUES(715,108,'定位组件','只能用于Stack中，可以指定左上右下的距离对某个组件进行位置精确安放。','zh-cn');
INSERT INTO widget_desc VALUES(716,108,'Positioning Component','Can only be used in Stack, allowing precise placement of a component by specifying distances from the top, left, right, and bottom.','en-us');
INSERT INTO widget_desc VALUES(717,159,'方向定位','和Positioned组件功能一样，属性名不同。只能用于Stack中，可以指定左上右下的距离对某个组件进行位置精确安放。','zh-cn');
INSERT INTO widget_desc VALUES(718,159,'Directional Positioning','Same functionality as the Positioned component, but with different property names. It can only be used in a Stack, allowing precise placement of a component by specifying distances from the top, left, right, and bottom.','en-us');
INSERT INTO widget_desc VALUES(719,93,'位置变换','只能用于Stack中,可容纳一个子组件，让其在两个矩形间进行位置动画，需要提供动画器rect。','zh-cn');
INSERT INTO widget_desc VALUES(720,93,'Position Transition','Can only be used in a Stack, can contain one child component, allowing it to animate between two rectangles, requires an animator rect.','en-us');
INSERT INTO widget_desc VALUES(721,204,'优先尺寸','实现了PreferredSizeWidget接口，可容纳一个子组件，设置优先尺寸，不会对其子组件施加任何约束。','zh-cn');
INSERT INTO widget_desc VALUES(722,204,'Preferred Size','Implements the PreferredSizeWidget interface, can contain a child component, sets the preferred size, and does not impose any constraints on its child component.','en-us');
INSERT INTO widget_desc VALUES(723,473,'PreferredSizeWidget','可以返回此小部件在其他情况下不受约束时首选大小的小部件接口。','zh-cn');
INSERT INTO widget_desc VALUES(724,473,'PreferredSizeWidget',' An interface for widgets that can return the size this widget would prefer if it were otherwise unconstrained.','en-us');
INSERT INTO widget_desc VALUES(725,335,'初始滑动控制器','它是 InheritedWidget 子类，通过 context 向子树中的可滑动视图提供默认的 ScrollController 对象。','zh-cn');
INSERT INTO widget_desc VALUES(726,335,'Primary Scroll Controller','It is a subclass of InheritedWidget, providing a default ScrollController object to scrollable views in the subtree through context.','en-us');
INSERT INTO widget_desc VALUES(727,474,'ProgressIndicator','Material Design 进度指示器的基类。','zh-cn');
INSERT INTO widget_desc VALUES(728,474,'ProgressIndicator',' A base class for Material Design progress indicators.','en-us');
INSERT INTO widget_desc VALUES(729,475,'ProgressIndicatorTheme','为此小部件子树中的 [ProgressIndicator] 定义配置的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(730,475,'ProgressIndicatorTheme',' An inherited widget that defines the configuration for [ProgressIndicator]s in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(731,476,'ProxyWidget','具有提供给它的子小部件的小部件，而不是构建新小部件。','zh-cn');
INSERT INTO widget_desc VALUES(732,476,'ProxyWidget',' A widget that has a child widget provided to it, instead of building a new widget.','en-us');
INSERT INTO widget_desc VALUES(733,45,'选钮','由于选中和未选择状态的圆钮，多个Radio根据逻辑可以实现单选或多选的需求。可指定颜色，接收状态变化回调。','zh-cn');
INSERT INTO widget_desc VALUES(734,45,'Radio Button','Due to the selected and unselected states of the circular button, multiple Radios can implement single or multiple selection requirements based on logic. The color can be specified, and a callback for state changes is supported.','en-us');
INSERT INTO widget_desc VALUES(735,19,'选钮瓦片','Flutter提供的一个通用列表条目结构，为中右结构,尾部是一个Radio。相应位置可插入组件，可以很方便地应对特定的条目。','zh-cn');
INSERT INTO widget_desc VALUES(736,19,'Radio Tile','A general list item structure provided by Flutter, with a middle-right structure, and a Radio at the end. Components can be inserted at corresponding positions, making it easy to handle specific items.','en-us');
INSERT INTO widget_desc VALUES(737,477,'RadioMenuButton','将 [Radio] 小部件与 [MenuItemButton] 结合的菜单项。','zh-cn');
INSERT INTO widget_desc VALUES(738,477,'RadioMenuButton',' A menu item that combines a [Radio] widget with a [MenuItemButton].','en-us');
INSERT INTO widget_desc VALUES(739,478,'RadioTheme','将单选按钮主题应用于后代 [Radio] 小部件。','zh-cn');
INSERT INTO widget_desc VALUES(740,478,'RadioTheme',' Applies a radio theme to descendant [Radio] widgets.','en-us');
INSERT INTO widget_desc VALUES(741,44,'范围滑块','范围滑块组件，支持两点拖动，获取之间的范围。可指定颜色、分段数及显示的标签，接收进度变化回调。','zh-cn');
INSERT INTO widget_desc VALUES(742,44,'Range Slider','The Range Slider component supports two-point dragging to get the range between them. You can specify the color, number of segments, and displayed labels, and receive progress change callbacks.','en-us');
INSERT INTO widget_desc VALUES(743,479,'RawAutocomplete','{@template flutter.widgets.RawAutocomplete.RawAutocomplete} 通过输入一些文本并从选项列表中选择来帮助用户进行选择的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(744,479,'RawAutocomplete',' {@template flutter.widgets.RawAutocomplete.RawAutocomplete} A widget for helping the user make a selection by entering some text and choosing from among a list of options.','en-us');
INSERT INTO widget_desc VALUES(745,153,'原生小条','各自Chip组件的始祖，拥有各自Chip表现的能力，支持选中、点击、删除等事件。详见Chip、FilterChip、ActionChip、InputChip、ChoiceChip。','zh-cn');
INSERT INTO widget_desc VALUES(746,153,'RawChip','The ancestor of each Chip component, possessing the ability to exhibit each Chip''s behavior, supporting events such as selection, click, and deletion. For details, see Chip, FilterChip, ActionChip, InputChip, ChoiceChip.','en-us');
INSERT INTO widget_desc VALUES(747,248,'原手势检测器','可以用来检测给定手势工厂描述的手势，在开发自己的手势识别器时非常有用。对于常见的手势，使用 GestureRecognizer。','zh-cn');
INSERT INTO widget_desc VALUES(748,248,'Raw Gesture Detector','Can be used to detect gestures described by a given gesture factory, which is very useful when developing your own gesture recognizer. For common gestures, use GestureRecognizer.','en-us');
INSERT INTO widget_desc VALUES(749,313,'原图片','是实现Image组件的核心组件，可以显示ui的Image,基本属性同Image,一般很少单独使用。','zh-cn');
INSERT INTO widget_desc VALUES(750,313,'Original Image','It is the core component that implements the Image component, can display the ui.Image, and has the same basic properties as Image. It is rarely used alone.','en-us');
INSERT INTO widget_desc VALUES(751,254,'原键盘监听器','可以用来检测键盘按键和松键的事件，目前只能检测到物理键盘，可在桌面端使用。','zh-cn');
INSERT INTO widget_desc VALUES(752,254,'Raw Keyboard Listener','Can be used to detect keyboard key press and release events, currently only physical keyboards can be detected, and can be used on desktop.','en-us');
INSERT INTO widget_desc VALUES(753,360,'原放大镜','一个可以放大下方任意组件的放大镜，可以设置装饰形状、尺寸、偏移量等属性。','zh-cn');
INSERT INTO widget_desc VALUES(754,360,'Original Magnifier','A magnifier that can magnify any component below it. Properties such as decoration shape, size, offset, etc., can be set.','en-us');
INSERT INTO widget_desc VALUES(755,175,'原始按钮','原始的Material按钮,按钮界的幕后大佬，可接受点击、长按、高亮变化事件，可指定颜色、形状。影深、内边距等属性。','zh-cn');
INSERT INTO widget_desc VALUES(756,175,'Raw Button','The original Material button, the behind-the-scenes boss of the button world, can accept click, long press, and highlight change events, and can specify color, shape, shadow depth, padding, and other properties.','en-us');
INSERT INTO widget_desc VALUES(757,480,'RawMenuAnchor','包装子项并锚定浮动菜单的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(758,480,'RawMenuAnchor',' A widget that wraps a child and anchors a floating menu.','en-us');
INSERT INTO widget_desc VALUES(759,481,'RawMenuAnchorGroup','创建始终可见且不在 [OverlayPortal] 中显示的菜单锚点。','zh-cn');
INSERT INTO widget_desc VALUES(760,481,'RawMenuAnchorGroup',' Creates a menu anchor that is always visible and is not displayed in an [OverlayPortal].','en-us');
INSERT INTO widget_desc VALUES(761,482,'RawScrollbar','用于构建淡入淡出滚动条的可扩展基类。','zh-cn');
INSERT INTO widget_desc VALUES(762,482,'RawScrollbar',' An extendable base class for building scrollbars that fade in and out.','en-us');
INSERT INTO widget_desc VALUES(763,483,'RawView','为视图引导渲染树的 [View] 的较低级别工作小部件。','zh-cn');
INSERT INTO widget_desc VALUES(764,483,'RawView',' The lower level workhorse widget for [View] that bootstraps a render tree for a view.','en-us');
INSERT INTO widget_desc VALUES(765,484,'RawWebImage','在平台视图中显示和布局底层 HTML 元素的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(766,484,'RawWebImage',' A widget which displays and lays out an underlying HTML element in a platform view.','en-us');
INSERT INTO widget_desc VALUES(767,49,'刷新指示器','内部嵌套可滑动区域，下滑时会显示刷新图标，松手后可以执行指定的异步方法。可指定颜色、到顶端距离等属性。','zh-cn');
INSERT INTO widget_desc VALUES(768,49,'Refresh Indicator','Internally nested scrollable area, displaying a refresh icon when pulled down, and executing a specified asynchronous method upon release. Properties such as color and distance to the top can be specified.','en-us');
INSERT INTO widget_desc VALUES(769,485,'RefreshProgressIndicator','刷新小部件内容进度的指示器。','zh-cn');
INSERT INTO widget_desc VALUES(770,485,'RefreshProgressIndicator',' An indicator for the progress of refreshing the contents of a widget.','en-us');
INSERT INTO widget_desc VALUES(771,115,'矩形位置变换','AnimatedWidget的子类,使用Rect类型的动画器让子组件在两个Rect对象之间进行过渡动画。','zh-cn');
INSERT INTO widget_desc VALUES(772,115,'Rectangle Position Transition','A subclass of AnimatedWidget, using a Rect type animator to allow child components to transition between two Rect objects.','en-us');
INSERT INTO widget_desc VALUES(773,289,'根组件','RenderObject 和 Element 树的桥梁。','zh-cn');
INSERT INTO widget_desc VALUES(774,289,'Root Component','The bridge between RenderObject and Element tree.','en-us');
INSERT INTO widget_desc VALUES(775,486,'RenderObjectWidget','[RenderObjectWidget] 为 [RenderObjectElement] 提供配置，后者包装 [RenderObject]，提供应用程序的实际渲染。','zh-cn');
INSERT INTO widget_desc VALUES(776,486,'RenderObjectWidget',' [RenderObjectWidget]s provide the configuration for [RenderObjectElement]s, which wrap [RenderObject]s, which provide the actual rendering of the application.','en-us');
INSERT INTO widget_desc VALUES(777,487,'ReorderableDelayedDragStartListener','通过寻找长按事件来识别拖动操作开始的包装器小部件。一旦识别，它将在可重新排序列表中的包装项目上开始拖动操作。','zh-cn');
INSERT INTO widget_desc VALUES(778,487,'ReorderableDelayedDragStartListener',' A wrapper widget that will recognize the start of a drag operation by looking for a long press event. Once it is recognized, it will start a drag operation on the wrapped item in the reorderable list.','en-us');
INSERT INTO widget_desc VALUES(779,488,'ReorderableDragStartListener','通过 [PointerDownEvent] 识别包装小部件上拖动开始的包装器小部件，并立即启动将包装项目拖动到可重新排序列表中新位置的操作。','zh-cn');
INSERT INTO widget_desc VALUES(780,488,'ReorderableDragStartListener',' A wrapper widget that will recognize the start of a drag on the wrapped widget by a [PointerDownEvent], and immediately initiate dragging the wrapped item to a new location in a reorderable list.','en-us');
INSERT INTO widget_desc VALUES(781,489,'ReorderableList','允许用户交互式重新排序列表项的滚动容器。','zh-cn');
INSERT INTO widget_desc VALUES(782,489,'ReorderableList',' A scrolling container that allows the user to interactively reorder the list items.','en-us');
INSERT INTO widget_desc VALUES(783,177,'可重排序列表','可以进行长按排序的ListView，可指定滑动方向、是否反向、滑动控制器等属性。','zh-cn');
INSERT INTO widget_desc VALUES(784,177,'Reorderable List','A ListView that can be reordered by long-pressing, with properties such as scroll direction, reverse, and scroll controller.','en-us');
INSERT INTO widget_desc VALUES(785,264,'重绘边界','为子组件创建一个单独的显示列表,提升性能。源码中在TextField、DrawerController、Scrollbar、Sliver等组件中均有应用','zh-cn');
INSERT INTO widget_desc VALUES(786,264,'Repaint Boundary','Creates a separate display list for child components to improve performance. It is used in components such as TextField, DrawerController, Scrollbar, and Sliver in the source code.','en-us');
INSERT INTO widget_desc VALUES(787,490,'RestorationScope','为后代小部件用于声明 [RestorationBucket] 的恢复 ID 创建新范围。','zh-cn');
INSERT INTO widget_desc VALUES(788,490,'RestorationScope',' Creates a new scope for restoration IDs used by descendant widgets to claim [RestorationBucket]s.','en-us');
INSERT INTO widget_desc VALUES(789,101,'富文本','可以容纳多种文字样式或各种组件的富文本组件，应用较为广泛。','zh-cn');
INSERT INTO widget_desc VALUES(790,101,'Rich Text','A rich text component that can accommodate various text styles or various components, widely used.','en-us');
INSERT INTO widget_desc VALUES(791,491,'RootRestorationScope','将 [RestorationManager.rootBucket] 的子存储桶插入小部件树并通过 [RestorationScope.of] 使其对后代可用。','zh-cn');
INSERT INTO widget_desc VALUES(792,491,'RootRestorationScope',' Inserts a child bucket of [RestorationManager.rootBucket] into the widget tree and makes it available to descendants via [RestorationScope.of].','en-us');
INSERT INTO widget_desc VALUES(793,492,'RootWidget','小部件树根部的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(794,492,'RootWidget',' A widget for the root of the widget tree.','en-us');
INSERT INTO widget_desc VALUES(795,72,'旋转盒','可容纳一个子组件，将其沿顺时针旋转quarterTurns*90°。','zh-cn');
INSERT INTO widget_desc VALUES(796,72,'Rotated Box','Can contain a child widget, rotating it clockwise by quarterTurns*90°.','en-us');
INSERT INTO widget_desc VALUES(797,90,'旋转变换','可容纳一个子组件，并使其进行旋转动画，需要提供动画器turns，拥有alignment属性。','zh-cn');
INSERT INTO widget_desc VALUES(798,90,'Rotation Transition','Can accommodate a child component and make it perform a rotation animation. Requires an animator turns and has an alignment property.','en-us');
INSERT INTO widget_desc VALUES(799,493,'Router','应用程序页面打开和关闭的调度器。','zh-cn');
INSERT INTO widget_desc VALUES(800,493,'Router',' The dispatcher for opening and closing pages of an application.','en-us');
INSERT INTO widget_desc VALUES(801,95,'行布局','排布方向为横向的Flex布局，可容纳多个组件。其他属性全部一致，详见Flex。','zh-cn');
INSERT INTO widget_desc VALUES(802,95,'Row Layout','A Flex layout with a horizontal arrangement direction that can accommodate multiple components. All other properties are the same, see Flex for details.','en-us');
INSERT INTO widget_desc VALUES(803,207,'安全区','通过添加内边距，来适配一些手机本身特殊性(圆角、刘海屏等)而所造成的布局问题。','zh-cn');
INSERT INTO widget_desc VALUES(804,207,'Safe Area','Adapts layout issues caused by some phone-specific features (rounded corners, notches, etc.) by adding padding.','en-us');
INSERT INTO widget_desc VALUES(805,64,'脚手架','一个通用app结构，包括上、下、左、右、中、浮动按钮部位，对应位置可盛放组件。','zh-cn');
INSERT INTO widget_desc VALUES(806,64,'Scaffold','A general app structure, including top, bottom, left, right, middle, and floating button parts, where components can be placed in corresponding positions.','en-us');
INSERT INTO widget_desc VALUES(807,494,'ScaffoldMessenger','为后代 [Scaffold] 管理 [SnackBar] 和 [MaterialBanner]。','zh-cn');
INSERT INTO widget_desc VALUES(808,494,'ScaffoldMessenger',' Manages [SnackBar]s and [MaterialBanner]s for descendant [Scaffold]s.','en-us');
INSERT INTO widget_desc VALUES(809,91,'缩放变换','可容纳一个子组件，并使其进行缩放动画，需要提供动画器scale，拥有alignment属性。','zh-cn');
INSERT INTO widget_desc VALUES(810,91,'Scale Transition','Can contain a child component and make it perform a scaling animation. Requires providing an animator scale and has the alignment property.','en-us');
INSERT INTO widget_desc VALUES(811,253,'可滑动组件','实现了一个可滚动组件的交互模型,需要viewportBuilder进的viewport的构造。是ScrollView的核心实现组件之一，一般不直接使用。','zh-cn');
INSERT INTO widget_desc VALUES(812,253,'Scrollable Component','Implements an interactive model for a scrollable component, requiring the construction of a viewport via viewportBuilder. It is one of the core implementation components of ScrollView and is generally not used directly.','en-us');
INSERT INTO widget_desc VALUES(813,194,'滑动指示栏','需要包裹一个可滑动区域，当可滑动时，会显示滑动的bar用于指示。','zh-cn');
INSERT INTO widget_desc VALUES(814,194,'Scrollbar','It needs to wrap a scrollable area. When it is scrollable, a scroll bar will be displayed for indication.','en-us');
INSERT INTO widget_desc VALUES(815,496,'ScrollbarTheme','将滚动条主题应用于后代 [Scrollbar] 小部件。','zh-cn');
INSERT INTO widget_desc VALUES(816,496,'ScrollbarTheme',' Applies a scrollbar theme to descendant [Scrollbar] widgets.','en-us');
INSERT INTO widget_desc VALUES(817,180,'ios菜单按钮','需要包裹一个可滑动的组件，并通过behavior属性控制滑动的效果，可以去除滑动的蓝色阴影等。','zh-cn');
INSERT INTO widget_desc VALUES(818,180,'iOS Menu Button','Needs to wrap a scrollable component and control the scrolling effect through the behavior property, which can remove the blue shadow of the scrolling, etc.','en-us');
INSERT INTO widget_desc VALUES(819,495,'ScrollNotificationObserver','当后代滚动时通知其监听器。','zh-cn');
INSERT INTO widget_desc VALUES(820,495,'ScrollNotificationObserver',' Notifies its listeners when a descendant scrolls.','en-us');
INSERT INTO widget_desc VALUES(821,349,'视滑动图','该组件用于滑动的支持，该类是一个抽象类，所以无法直接使用，它有很多实现类，如 CustomScrollView、BoxScrollView、ListView、GridView。','zh-cn');
INSERT INTO widget_desc VALUES(822,349,'Scroll View','This component is used to support scrolling. This class is an abstract class, so it cannot be used directly. It has many implementation classes, such as CustomScrollView, BoxScrollView, ListView, and GridView.','en-us');
INSERT INTO widget_desc VALUES(823,497,'SearchAnchor','管理搜索视图路由，允许用户为搜索查询选择建议的完成项之一。','zh-cn');
INSERT INTO widget_desc VALUES(824,497,'SearchAnchor',' Manages a "search view" route that allows the user to select one of the suggested completions for a search query.','en-us');
INSERT INTO widget_desc VALUES(825,498,'SearchBar','Material Design 搜索栏。','zh-cn');
INSERT INTO widget_desc VALUES(826,498,'SearchBar',' A Material Design search bar.','en-us');
INSERT INTO widget_desc VALUES(827,499,'SearchBarTheme','将搜索栏主题应用于后代 [SearchBar] 小部件。','zh-cn');
INSERT INTO widget_desc VALUES(828,499,'SearchBarTheme',' Applies a search bar theme to descendant [SearchBar] widgets.','en-us');
INSERT INTO widget_desc VALUES(829,500,'SearchViewTheme','为此小部件后代中由 [SearchAnchor] 小部件创建的搜索视图定义配置的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(830,500,'SearchViewTheme',' An inherited widget that defines the configuration in this widget''s descendants for search view created by the [SearchAnchor] widget.','en-us');
INSERT INTO widget_desc VALUES(831,501,'SegmentedButton','允许用户从有限选项集中选择的 Material 按钮。','zh-cn');
INSERT INTO widget_desc VALUES(832,501,'SegmentedButton',' A Material button that allows the user to select from limited set of options.','en-us');
INSERT INTO widget_desc VALUES(833,502,'SegmentedButtonTheme','为此小部件子树中的 [SegmentedButton] 定义视觉属性的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(834,502,'SegmentedButtonTheme',' An inherited widget that defines the visual properties for [SegmentedButton]s in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(835,503,'SelectableRegion','引入用户选择区域的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(836,503,'SelectableRegion',' A widget that introduces an area for user selections.','en-us');
INSERT INTO widget_desc VALUES(837,504,'SelectableRegionSelectionStatusScope','当 [SelectableRegion] 或 [SelectionArea] 下的选择正在更改或完成时通知其监听器。','zh-cn');
INSERT INTO widget_desc VALUES(838,504,'SelectableRegionSelectionStatusScope',' Notifies its listeners when the selection under a [SelectableRegion] or [SelectionArea] is being changed or finalized.','en-us');
INSERT INTO widget_desc VALUES(839,53,'可选择文字','可选择的文字，可以选择、复制。可指定浮标的颜色、大小、文字样式、对齐方式等。','zh-cn');
INSERT INTO widget_desc VALUES(840,53,'Selectable Text','Selectable text that can be selected and copied. You can specify the color, size, text style, alignment, etc. of the cursor.','en-us');
INSERT INTO widget_desc VALUES(841,505,'SelectionArea','引入具有自适应选择控件的用户选择区域的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(842,505,'SelectionArea',' A widget that introduces an area for user selections with adaptive selection controls.','en-us');
INSERT INTO widget_desc VALUES(843,506,'SelectionContainer','为子树中的 [Selectable] 处理 [SelectionEvent] 的容器。','zh-cn');
INSERT INTO widget_desc VALUES(844,506,'SelectionContainer',' A container that handles [SelectionEvent]s for the [Selectable]s in the subtree.','en-us');
INSERT INTO widget_desc VALUES(845,507,'SelectionListener','允许用户访问 [SelectionDetails] 并监听在 [SelectionArea] 或 [SelectableRegion] 下包装的子子树的选择更改的 [SelectionContainer]。','zh-cn');
INSERT INTO widget_desc VALUES(846,507,'SelectionListener',' A [SelectionContainer] that allows the user to access the [SelectionDetails] and listen to selection changes for the child subtree it wraps under a [SelectionArea] or [SelectableRegion].','en-us');
INSERT INTO widget_desc VALUES(847,508,'SelectionRegistrarScope','为子树托管 [SelectionRegistrar] 的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(848,508,'SelectionRegistrarScope',' An inherited widget to host a [SelectionRegistrar] for the subtree.','en-us');
INSERT INTO widget_desc VALUES(849,509,'Semantics','用小部件含义描述注释小部件树的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(850,509,'Semantics',' A widget that annotates the widget tree with a description of the meaning of the widgets.','en-us');
INSERT INTO widget_desc VALUES(851,510,'SemanticsDebugger','可视化子项语义的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(852,510,'SemanticsDebugger',' A widget that visualizes the semantics for the child.','en-us');
INSERT INTO widget_desc VALUES(853,277,'着色器遮罩','可容纳一个孩子，并通过着色器来对孩子进行着色，可指定混色模式。通常用于组件渐变色处理。','zh-cn');
INSERT INTO widget_desc VALUES(854,277,'Shader Mask','Can accommodate a child and apply shading to the child through a shader, with the ability to specify blending modes. Commonly used for gradient processing of components.','en-us');
INSERT INTO widget_desc VALUES(855,511,'SharedAppData','允许与其 `child` 及所有子项的后代共享键/值数据。','zh-cn');
INSERT INTO widget_desc VALUES(856,511,'SharedAppData',' Enables sharing key/value data with its `child` and all of the child''s descendants.','en-us');
INSERT INTO widget_desc VALUES(857,512,'ShortcutRegistrar','持有 [ShortcutRegistry] 的小部件，允许后代添加、删除或替换快捷方式。','zh-cn');
INSERT INTO widget_desc VALUES(858,512,'ShortcutRegistrar',' A widget that holds a [ShortcutRegistry] which allows descendants to add, remove, or replace shortcuts.','en-us');
INSERT INTO widget_desc VALUES(859,513,'Shortcuts','为其后代创建特定操作的键绑定的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(860,513,'Shortcuts',' A widget that creates key bindings to specific actions for its descendants.','en-us');
INSERT INTO widget_desc VALUES(861,343,'收缩包围视图','和 ScrollView 的 shrinkWrap 属性之间关联。ShrinkWrappingViewport 在主轴上调整自身的大小以适应它的子节点，在无边界约束的情况下使用。','zh-cn');
INSERT INTO widget_desc VALUES(862,343,'Shrink Wrap Viewport','Related to the shrinkWrap property of ScrollView. ShrinkWrappingViewport adjusts its size on the main axis to fit its children, used when there are no boundary constraints.','en-us');
INSERT INTO widget_desc VALUES(863,128,'简单对话框','一个简单的对话框结构，可指定头、中处的组件。拥有拥有标题、内容的文字样式和边距，影深、形状等属性。常与SimpleDialogOption联用。','zh-cn');
INSERT INTO widget_desc VALUES(864,128,'Simple Dialog','A simple dialog structure that allows specifying components for the header and middle sections. It has properties such as text styles and margins for the title and content, as well as shadow depth and shape. Often used in conjunction with SimpleDialogOption.','en-us');
INSERT INTO widget_desc VALUES(865,133,'简单对话框选项','一个按钮，应用场景很少，通常用于SimpleDialog中，接收点击事件。','zh-cn');
INSERT INTO widget_desc VALUES(866,133,'Simple Dialog Option','A button with limited use cases, typically used in SimpleDialog to receive click events.','en-us');
INSERT INTO widget_desc VALUES(867,514,'SingleChildRenderObjectWidget','配置具有单个子插槽的 [RenderObject] 子类的 [RenderObjectWidget] 的超类。','zh-cn');
INSERT INTO widget_desc VALUES(868,514,'SingleChildRenderObjectWidget',' A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses that have a single child slot.','en-us');
INSERT INTO widget_desc VALUES(869,164,'单子滑动','使一个组件具有滑动的效果，可指定滑动的方向、是否反向、滑动控制器等属性。','zh-cn');
INSERT INTO widget_desc VALUES(870,164,'Single Child Scroll','Makes a component scrollable, allowing you to specify properties such as the scroll direction, whether to reverse the direction, the scroll controller, etc.','en-us');
INSERT INTO widget_desc VALUES(871,294,'尺寸变化通告','使用 SizeChangedLayoutNotifier 可以在子组件布局区域发生变化后，发出通知。使用NotificationListener可以进行监听。','zh-cn');
INSERT INTO widget_desc VALUES(872,294,'Size Change Notification','Using SizeChangedLayoutNotifier can send a notification after the layout area of the child component changes. NotificationListener can be used to monitor it.','en-us');
INSERT INTO widget_desc VALUES(873,76,'定尺寸盒','可容纳一个子组件，通过指定宽高限定子组件容身区域。','zh-cn');
INSERT INTO widget_desc VALUES(874,76,'SizedBox','Can contain a child component, limiting the area of the child component by specifying width and height.','en-us');
INSERT INTO widget_desc VALUES(875,84,'尺寸溢出盒','可容纳一个子组件，且子组件允许溢出父组件区域，可以通过size属性对子组件进行偏移，拥有对齐属性alignment。','zh-cn');
INSERT INTO widget_desc VALUES(876,84,'Sized Overflow Box','Can contain a child component, and the child component is allowed to overflow the parent component area. The child component can be offset through the size property, and has the alignment property.','en-us');
INSERT INTO widget_desc VALUES(877,92,'尺寸变换','可容纳一个子组件，并使其进行尺寸动画，需要提供动画器sizeFactor，可指定尺寸变化轴及轴向的axisAlignment。','zh-cn');
INSERT INTO widget_desc VALUES(878,92,'Size Transition','Can accommodate a child component and animate its size. Requires an animator sizeFactor, and can specify the axis of size change and the axis alignment.','en-us');
INSERT INTO widget_desc VALUES(879,42,'滑块','滑块组件，可以在指定的最大值和最小值之间拖动选择。可指定颜色、分段数及显示的标签，接收进度变化回调。','zh-cn');
INSERT INTO widget_desc VALUES(880,42,'Slider','Slider component, allows dragging to select between a specified maximum and minimum value. Can specify color, number of segments, and displayed labels, and receives progress change callbacks.','en-us');
INSERT INTO widget_desc VALUES(881,331,'滑块样式','可容纳一个孩子，为后代的Slider指定默认样式。常用于Slider的样式统一，避免一一设置，也可以对Slider进行样式定制。','zh-cn');
INSERT INTO widget_desc VALUES(882,331,'Slider Style','Can contain a child, specifies the default style for descendant Sliders. Commonly used for unifying the style of Sliders to avoid setting them one by one, and can also customize the style of Sliders.','en-us');
INSERT INTO widget_desc VALUES(883,112,'滑动变换','AnimatedWidget的子类,使用Offset类型的动画器让子组件在两个Offset对象之间进行过渡动画。','zh-cn');
INSERT INTO widget_desc VALUES(884,112,'Slide Transition','A subclass of AnimatedWidget, using an animator of type Offset to allow child components to transition between two Offset objects.','en-us');
INSERT INTO widget_desc VALUES(885,515,'SliverAnimatedGrid','在插入或删除项目时对其进行动画处理的 [SliverGrid]。','zh-cn');
INSERT INTO widget_desc VALUES(886,515,'SliverAnimatedGrid',' A [SliverGrid] that animates items when they are inserted or removed.','en-us');
INSERT INTO widget_desc VALUES(887,301,'Sliver动画列表','在插入或删除项目时使其有动画效果的sliver组件。','zh-cn');
INSERT INTO widget_desc VALUES(888,301,'Sliver Animated List','A sliver component that animates items when they are inserted or removed.','en-us');
INSERT INTO widget_desc VALUES(889,516,'SliverAnimatedOpacity','[SliverOpacity] 的动画版本，每当给定的不透明度发生变化时，会在给定的持续时间内自动过渡 sliver 子项的不透明度。','zh-cn');
INSERT INTO widget_desc VALUES(890,516,'SliverAnimatedOpacity',' Animated version of [SliverOpacity] which automatically transitions the sliver child''s opacity over a given duration whenever the given opacity changes.','en-us');
INSERT INTO widget_desc VALUES(891,184,'Sliver头部栏','Sliver家族的顶部栏通用结构，可以指定左中右组件、收缩空间、影深、固定模式、背景色等属性。','zh-cn');
INSERT INTO widget_desc VALUES(892,184,'Sliver Header Bar','A common structure for the top bar of the Sliver family, which can specify left, center, and right components, collapse space, shadow depth, fixed mode, background color, and other properties.','en-us');
INSERT INTO widget_desc VALUES(893,270,'交叉轴尺寸约束滑片','为一个 Sliver 组件在交叉轴方向上，指定尺寸大小来限制滑片尺寸。','zh-cn');
INSERT INTO widget_desc VALUES(894,270,'Cross Axis Size Constrained Sliver','Specifies the size in the cross-axis direction for a Sliver component to constrain the sliver size.','en-us');
INSERT INTO widget_desc VALUES(895,271,'交叉轴延展滑片','为一个 Sliver 组件在交叉轴方向上，指定 flex 占比来限制滑片尺寸。','zh-cn');
INSERT INTO widget_desc VALUES(896,271,'Cross Axis Expanded Sliver','Specifies the flex ratio in the cross-axis direction for a Sliver component to constrain the size of the sliver.','en-us');
INSERT INTO widget_desc VALUES(897,269,'交叉轴滑片组','可以容纳多个 Sliver 组件，让它们在滑动的交叉主轴方向上视为一组。','zh-cn');
INSERT INTO widget_desc VALUES(898,269,'Cross Axis Sliver Group','Can contain multiple Sliver components, treating them as a group in the cross main axis direction of scrolling.','en-us');
INSERT INTO widget_desc VALUES(899,517,'SliverEnsureSemantics','确保其 sliver 子项包含在语义树中的 sliver。','zh-cn');
INSERT INTO widget_desc VALUES(900,517,'SliverEnsureSemantics',' A sliver that ensures its sliver child is included in the semantics tree.','en-us');
INSERT INTO widget_desc VALUES(901,518,'SliverFadeTransition','对 sliver 小部件的不透明度进行动画处理。','zh-cn');
INSERT INTO widget_desc VALUES(902,518,'SliverFadeTransition',' Animates the opacity of a sliver widget.','en-us');
INSERT INTO widget_desc VALUES(903,306,'Sliver填补剩余','一个包含单个box子元素的sliver，它填充了视窗中的剩余空间。可指定两个bool值控制滑动效果，如下示例,自己体会。','zh-cn');
INSERT INTO widget_desc VALUES(904,306,'Sliver Fill Remaining','A sliver that contains a single box child element, which fills the remaining space in the viewport. Two boolean values can be specified to control the scrolling effect, as shown in the example below, experience it yourself.','en-us');
INSERT INTO widget_desc VALUES(905,187,'Sliver填充视图列表','Sliver家族的列表组件，通过delegate构造子组件，item的高度会填空视口，可以指定是否的分率。','zh-cn');
INSERT INTO widget_desc VALUES(906,187,'Sliver Fill Viewport','A list component of the Sliver family, which constructs child components through a delegate. The height of the item will fill the viewport, and you can specify the fraction.','en-us');
INSERT INTO widget_desc VALUES(907,186,'Sliver固定延展列表','Sliver家族的列表组件，通过delegate构造子组件，可以指定item的高度。通常用于CustomScrollView中。','zh-cn');
INSERT INTO widget_desc VALUES(908,186,'Sliver Fixed Extent List','A list component of the Sliver family, which constructs child components through a delegate and can specify the height of the item. It is commonly used in CustomScrollView.','en-us');
INSERT INTO widget_desc VALUES(909,519,'SliverFloatingHeader','当用户向前滚动时显示其 [child]，当用户向后滚动时隐藏它的 sliver。','zh-cn');
INSERT INTO widget_desc VALUES(910,519,'SliverFloatingHeader',' A sliver that shows its [child] when the user scrolls forward and hides it when the user scrolls backwards.','en-us');
INSERT INTO widget_desc VALUES(911,188,'Sliver网格','Sliver家族的网格列表组件，和GirdView类似，通过count和extent构造。通常用于CustomScrollView中。','zh-cn');
INSERT INTO widget_desc VALUES(912,188,'Sliver Grid','A grid list component of the Sliver family, similar to GridView, constructed with count and extent. Usually used in CustomScrollView.','en-us');
INSERT INTO widget_desc VALUES(913,305,'Sliver忽略事件','可以包裹一个sliver组件,通过ignoring来控制该sliver组件是否可以响应事件。','zh-cn');
INSERT INTO widget_desc VALUES(914,305,'Sliver Ignore Events','Can wrap a sliver component, and control whether the sliver component can respond to events through ignoring.','en-us');
INSERT INTO widget_desc VALUES(915,304,'Sliver布局构造器','Sliver家族一员，在滑动过程中可以通过回调出的 SliverConstraints 对象进行子组件的构造。','zh-cn');
INSERT INTO widget_desc VALUES(916,304,'Sliver Layout Builder','A member of the Sliver family, which allows the construction of child components through the SliverConstraints object during the scrolling process.','en-us');
INSERT INTO widget_desc VALUES(917,185,'Sliver列表','Sliver家族的列表组件，通过指定delegate构造子组件。通常用于CustomScrollView中。','zh-cn');
INSERT INTO widget_desc VALUES(918,185,'Sliver List','A list component of the Sliver family, which constructs child components by specifying a delegate. It is commonly used in CustomScrollView.','en-us');
INSERT INTO widget_desc VALUES(919,268,'主轴滑片组','可以容纳多个 Sliver 组件，让它们在滑动的主轴方向上视为一组。','zh-cn');
INSERT INTO widget_desc VALUES(920,268,'Main Axis Sliver Group','Can accommodate multiple Sliver components, treating them as a group in the sliding main axis direction.','en-us');
INSERT INTO widget_desc VALUES(921,520,'SliverMultiBoxAdaptorWidget','具有多个框子项的 sliver 的基类。','zh-cn');
INSERT INTO widget_desc VALUES(922,520,'SliverMultiBoxAdaptorWidget',' A base class for slivers that have multiple box children.','en-us');
INSERT INTO widget_desc VALUES(923,521,'SliverOffstage','将其 sliver 子项布局为好像它在树中，但不绘制任何内容，不使 sliver 子项可用于命中测试，并且不在父项中占用任何空间的 sliver。','zh-cn');
INSERT INTO widget_desc VALUES(924,521,'SliverOffstage',' A sliver that lays its sliver child out as if it was in the tree, but without painting anything, without making the sliver child available for hit testing, and without taking any room in the parent.','en-us');
INSERT INTO widget_desc VALUES(925,192,'Sliver透明度','可容纳一个Sliver家族的子组件，并通过opacity来指定子组件的透明度。','zh-cn');
INSERT INTO widget_desc VALUES(926,192,'Sliver Opacity','Can accommodate a child component of the Sliver family and specify the opacity of the child component through opacity.','en-us');
INSERT INTO widget_desc VALUES(927,307,'重叠吸收器','包裹另一个的sliver，并迫使其布局范围被视为重叠。需要和SliverOverlapInjector联用。','zh-cn');
INSERT INTO widget_desc VALUES(928,307,'Overlap Absorber','Wraps another sliver and forces its layout extent to be treated as overlapping. Needs to be used in conjunction with SliverOverlapInjector.','en-us');
INSERT INTO widget_desc VALUES(929,308,'重叠注射器','一个sliver,需要和SliverOverlapAbsorber联用,处理视图重叠问题。','zh-cn');
INSERT INTO widget_desc VALUES(930,308,'Overlap Injector','A sliver that needs to be used with SliverOverlapAbsorber to handle view overlap issues.','en-us');
INSERT INTO widget_desc VALUES(931,191,'Sliver内间距','可容纳一个Sliver家族的子组件，添加自身内边距来限制孩子组件的占位,核心属性为padding。','zh-cn');
INSERT INTO widget_desc VALUES(932,191,'Sliver Padding','Can accommodate a child component of the Sliver family, adding its own padding to limit the placement of the child component, with the core property being padding.','en-us');
INSERT INTO widget_desc VALUES(933,190,'吸顶滑片','通常用于 CustomScrollView 中，可以让一个组件在滑动中停留在顶部，不会滑动消失。','zh-cn');
INSERT INTO widget_desc VALUES(934,190,'Sticky Slider','Usually used in CustomScrollView, it allows a component to stay at the top during scrolling and not disappear.','en-us');
INSERT INTO widget_desc VALUES(935,314,'Sliver原型延伸列表','其中prototypeItem属性是Widget,它负责约束主轴方向上item尺寸，但不会显示出来。delegate接受一个SliverChildDelegate完成item的创建。','zh-cn');
INSERT INTO widget_desc VALUES(936,314,'Sliver Prototype Extent List','The prototypeItem property is a Widget, which is responsible for constraining the size of the item in the main axis direction, but it will not be displayed. The delegate accepts a SliverChildDelegate to complete the creation of the item.','en-us');
INSERT INTO widget_desc VALUES(937,522,'SliverReorderableList','允许用户交互式重新排序列表项的 sliver 列表。','zh-cn');
INSERT INTO widget_desc VALUES(938,522,'SliverReorderableList',' A sliver list that allows the user to interactively reorder the list items.','en-us');
INSERT INTO widget_desc VALUES(939,523,'SliverResizingHeader','固定到其 [CustomScrollView] 开始处并通过在其最小和最大范围原型的内在大小之间调整大小来响应滚动的 sliver。','zh-cn');
INSERT INTO widget_desc VALUES(940,523,'SliverResizingHeader',' A sliver that is pinned to the start of its [CustomScrollView] and reacts to scrolling by resizing between the intrinsic sizes of its min and max extent prototypes.','en-us');
INSERT INTO widget_desc VALUES(941,524,'SliverSafeArea','通过足够的内边距插入另一个 sliver 以避免操作系统入侵的 sliver。','zh-cn');
INSERT INTO widget_desc VALUES(942,524,'SliverSafeArea',' A sliver that insets another sliver by sufficient padding to avoid intrusions by the operating system.','en-us');
INSERT INTO widget_desc VALUES(943,189,'Sliver适配器','可以容纳一个普通的组件，并将其转化成Sliver家族组件的适配器。','zh-cn');
INSERT INTO widget_desc VALUES(944,189,'Sliver Adapter','An adapter that can accommodate a common component and convert it into a component of the Sliver family.','en-us');
INSERT INTO widget_desc VALUES(945,525,'SliverVariedExtentList','将其框子项放置在线性数组中并约束它们具有 [itemExtentBuilder] 返回的相应范围的 sliver。','zh-cn');
INSERT INTO widget_desc VALUES(946,525,'SliverVariedExtentList',' A sliver that places its box children in a linear array and constrains them to have the corresponding extent returned by [itemExtentBuilder].','en-us');
INSERT INTO widget_desc VALUES(947,526,'SliverVisibility','是否显示或隐藏 sliver 子项。','zh-cn');
INSERT INTO widget_desc VALUES(948,526,'SliverVisibility',' Whether to show or hide a sliver child.','en-us');
INSERT INTO widget_desc VALUES(949,348,'Sliver保活容器','它是抽象类，不能单独使用。只有其子类才可以容纳 KeepAlive 的孩子.','zh-cn');
INSERT INTO widget_desc VALUES(950,348,'Sliver Keep-Alive Container','It is an abstract class and cannot be used alone. Only its subclasses can accommodate KeepAlive children.','en-us');
INSERT INTO widget_desc VALUES(951,527,'SlottedMultiChildRenderObjectWidget','配置在不同插槽中组织其子项的 [RenderObject] 子类的 [RenderObjectWidget] 的超类。','zh-cn');
INSERT INTO widget_desc VALUES(952,527,'SlottedMultiChildRenderObjectWidget',' A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses that organize their children in different slots.','en-us');
INSERT INTO widget_desc VALUES(953,140,'信息提示条','作为组件来说是一个简单的结构组件，可指定形状、影深、背景色等。一般通过ScaffoldState的showSnackBar方法从底部弹出。','zh-cn');
INSERT INTO widget_desc VALUES(954,140,'SnackBar','As a component, it is a simple structural component that can specify shape, shadow depth, background color, etc. It usually pops up from the bottom through the showSnackBar method of ScaffoldState.','en-us');
INSERT INTO widget_desc VALUES(955,141,'信息提示条按钮','一般只用于SnackBar中，接受点击事件。点击一次后该按钮就会被禁用，可以指定颜色和禁用时颜色。','zh-cn');
INSERT INTO widget_desc VALUES(956,141,'Snack Bar Button','Generally used only in SnackBar, accepts click events. The button will be disabled after one click, and the color and disabled color can be specified.','en-us');
INSERT INTO widget_desc VALUES(957,528,'SnapshotWidget','可以用子项的快照版本替换其子项的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(958,528,'SnapshotWidget',' A widget that can replace its child with a snapshotted version of the child.','en-us');
INSERT INTO widget_desc VALUES(959,107,'空间组件','只能用于Row、Column和Flex布局中,可利用剩余空间进行占位，使用flex属性可以给多个Spacer按比例分配空间。','zh-cn');
INSERT INTO widget_desc VALUES(960,107,'Space Component','Can only be used in Row, Column, and Flex layouts. It can occupy the remaining space. The flex property can be used to allocate space proportionally among multiple Spacers.','en-us');
INSERT INTO widget_desc VALUES(961,529,'SpellCheckSuggestionsToolbar','Android 的默认拼写检查建议工具栏。','zh-cn');
INSERT INTO widget_desc VALUES(962,529,'SpellCheckSuggestionsToolbar',' The default spell check suggestions toolbar for Android.','en-us');
INSERT INTO widget_desc VALUES(963,97,'堆叠布局','可容纳多个组件,以堆叠的方式摆放子组件，后者居上。拥有alignment属性，可与Positioned组件联合使用，精确定位。','zh-cn');
INSERT INTO widget_desc VALUES(964,97,'Stack Layout','Can accommodate multiple components, arranging child components in a stacked manner, with the latter on top. Has the alignment property, which can be used in conjunction with the Positioned component for precise positioning.','en-us');
INSERT INTO widget_desc VALUES(965,242,'状态构造器','需要传入 builder 属性进行构造组件，在 builder 中可以使用 StateSetter 改变构造子组件的状态，即可以不用创建类而实现一个局部刷新的组件。','zh-cn');
INSERT INTO widget_desc VALUES(966,242,'State Constructor','The builder property needs to be passed to construct the component. In the builder, StateSetter can be used to change the state of the child component, which means a locally refreshed component can be implemented without creating a class.','en-us');
INSERT INTO widget_desc VALUES(967,530,'StatefulWidget','具有可变状态的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(968,530,'StatefulWidget',' A widget that has mutable state.','en-us');
INSERT INTO widget_desc VALUES(969,531,'StatelessWidget','不需要可变状态的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(970,531,'StatelessWidget',' A widget that does not require mutable state.','en-us');
INSERT INTO widget_desc VALUES(971,233,'状态转变组件','抽象类，可以根据提供的动画器状态变化触发刷新。在 Flutter 框架层没有实现的子类，也没有使用的场景，感觉用处不是很大。','zh-cn');
INSERT INTO widget_desc VALUES(972,233,'Status Transition Widget','Abstract class that can trigger refresh based on the state changes of the provided animator. There are no implemented subclasses in the Flutter framework layer, nor any usage scenarios, so it doesn''t seem very useful.','en-us');
INSERT INTO widget_desc VALUES(973,200,'步骤组件','步骤组件，可指定一步步的操作，可以自定义步骤的内容，确认和返回的按钮以及步骤排列的方向。','zh-cn');
INSERT INTO widget_desc VALUES(974,200,'Step Component','Step component, which can specify step-by-step operations, customize the content of the steps, the buttons for confirmation and return, and the direction of the step arrangement.','en-us');
INSERT INTO widget_desc VALUES(975,173,'流构造器','可指定一个stream对象，能够监听异步执行的状态，并在构造器中根据状态构建不同的界面。','zh-cn');
INSERT INTO widget_desc VALUES(976,173,'Stream Builder','Can specify a stream object, able to listen to the state of asynchronous execution, and build different interfaces in the constructor based on the state.','en-us');
INSERT INTO widget_desc VALUES(977,532,'StreamBuilderBase','基于与指定 [Stream] 交互构建自身的小部件的基类。','zh-cn');
INSERT INTO widget_desc VALUES(978,532,'StreamBuilderBase',' Base class for widgets that build themselves based on interaction with a specified [Stream].','en-us');
INSERT INTO widget_desc VALUES(979,533,'StretchingOverscrollIndicator','滚动视图已过度滚动的 Material Design 视觉指示。','zh-cn');
INSERT INTO widget_desc VALUES(980,533,'StretchingOverscrollIndicator',' A Material Design visual indication that a scroll view has overscrolled.','en-us');
INSERT INTO widget_desc VALUES(981,534,'SubmenuButton','显示级联菜单的菜单按钮。','zh-cn');
INSERT INTO widget_desc VALUES(982,534,'SubmenuButton',' A menu button that displays a cascading menu.','en-us');
INSERT INTO widget_desc VALUES(983,40,'切钮','切换选钮,常用于配置的切换，可指定小圆颜色、图片，滑槽颜色等，接收状态变化回调。','zh-cn');
INSERT INTO widget_desc VALUES(984,40,'Toggle Button','Toggle button, commonly used for configuration switching, can specify small circle color, image, track color, etc., and receives state change callbacks.','en-us');
INSERT INTO widget_desc VALUES(985,18,'切钮瓦片','Flutter提供的一个通用列表条目结构，为左中结构,尾部是一个Switch。相应位置可插入组件，可以很方便地应对特定的条目。','zh-cn');
INSERT INTO widget_desc VALUES(986,18,'Switch Tile','A common list item structure provided by Flutter, with a left-center structure and a Switch at the end. Components can be inserted at the corresponding positions, making it easy to handle specific items.','en-us');
INSERT INTO widget_desc VALUES(987,535,'SwitchTheme','将开关主题应用于后代 [Switch] 小部件。','zh-cn');
INSERT INTO widget_desc VALUES(988,535,'SwitchTheme',' Applies a switch theme to descendant [Switch] widgets.','en-us');
INSERT INTO widget_desc VALUES(989,536,'SystemContextMenu','在 Flutter 视图顶部显示系统上下文菜单。','zh-cn');
INSERT INTO widget_desc VALUES(990,536,'SystemContextMenu',' Displays the system context menu on top of the Flutter view.','en-us');
INSERT INTO widget_desc VALUES(991,148,'标签','一般用于TabBar中的item，上下结构，可指定图标和一个内容组件。','zh-cn');
INSERT INTO widget_desc VALUES(992,148,'Tab','Generally used as an item in the TabBar, with a top-bottom structure, allowing the specification of an icon and a content component.','en-us');
INSERT INTO widget_desc VALUES(993,58,'标签栏','可滑动和点击标签栏，通常用于AppBar的底部,可与TabBarView联用，实现滑页的效果。','zh-cn');
INSERT INTO widget_desc VALUES(994,58,'Tab Bar','A slidable and clickable tab bar, usually used at the bottom of the AppBar, can be used in conjunction with TabBarView to achieve a sliding page effect.','en-us');
INSERT INTO widget_desc VALUES(995,537,'TabBarTheme','为 [TabBar] 小部件定义主题。','zh-cn');
INSERT INTO widget_desc VALUES(996,537,'TabBarTheme',' Defines a theme for [TabBar] widgets.','en-us');
INSERT INTO widget_desc VALUES(997,59,'标签页','通常与TabBar联用，实现滑页的效果。一般不单独使用。','zh-cn');
INSERT INTO widget_desc VALUES(998,59,'Tab Page','Usually used in conjunction with TabBar to achieve the effect of sliding pages. It is generally not used alone.','en-us');
INSERT INTO widget_desc VALUES(999,110,'表格组件','用于展示表格的组件,可指定边线、列宽、文字方向等属性,核心对象类型是TableRow。','zh-cn');
INSERT INTO widget_desc VALUES(1000,110,'Table Component','A component for displaying tables, which can specify properties such as borders, column widths, text direction, etc. The core object type is TableRow.','en-us');
INSERT INTO widget_desc VALUES(1001,317,'表室','必须在 Table 组件的后代中使用，用于控制表孩子的竖直方向对齐方式，并没是什么太大的作用。','zh-cn');
INSERT INTO widget_desc VALUES(1002,317,'Table Cell','Must be used within the descendants of a Table component to control the vertical alignment of table children, and it doesn''t have much significant function.','en-us');
INSERT INTO widget_desc VALUES(1003,151,'表格水波纹','只能用于Table的水波纹，接收点击、双击、长按、高亮变化事件，水波纹会作用于表格的一行。','zh-cn');
INSERT INTO widget_desc VALUES(1004,151,'Table Ripple','Can only be used for Table''s ripple, receives click, double-click, long-press, and highlight change events, the ripple will be applied to a row of the table.','en-us');
INSERT INTO widget_desc VALUES(1005,205,'页签滑动选择器','通常作为指示器与TabBarView联用,共同使用一个TabController。可指定颜色、大小、选中色。','zh-cn');
INSERT INTO widget_desc VALUES(1006,205,'Tab Sliding Selector','Usually used as an indicator with TabBarView, sharing a common TabController. Can specify color, size, and selected color.','en-us');
INSERT INTO widget_desc VALUES(1007,206,'页签指示器','一个有边线的圆形组件，可指定大小、颜色、边线色。是TabPageSelector的部分之一，一般不单独使用。','zh-cn');
INSERT INTO widget_desc VALUES(1008,206,'Tab Indicator','A circular component with a border, which can specify size, color, and border color. It is part of the TabPageSelector and is generally not used alone.','en-us');
INSERT INTO widget_desc VALUES(1009,280,'点击范围','能够检测内部或外部点击回调的组件，通过 groupId 可以多个区域视为一体。','zh-cn');
INSERT INTO widget_desc VALUES(1010,280,'Tap Region','A component that can detect internal or external click callbacks, and multiple regions can be treated as one through the groupId.','en-us');
INSERT INTO widget_desc VALUES(1011,538,'TapRegionSurface','提供一组注册区域内部或外部点击通知的小部件，而不参与[手势消歧](https://flutter.dev/to/gesture-disambiguation)系统。','zh-cn');
INSERT INTO widget_desc VALUES(1012,538,'TapRegionSurface',' A widget that provides notification of a tap inside or outside of a set of registered regions, without participating in the [gesture disambiguation](https://flutter.dev/to/gesture-disambiguation) system.','en-us');
INSERT INTO widget_desc VALUES(1013,2,'文字组件','用于显示文字的组件。拥有的属性非常多，足够满足你的使用需求,核心样式由style属性控制。','zh-cn');
INSERT INTO widget_desc VALUES(1014,2,'Text Component','A component used to display text. It has a wide range of properties to meet your usage needs, with core styles controlled by the style attribute.','en-us');
INSERT INTO widget_desc VALUES(1015,353,'文字按钮','Material风格的文字按钮，默认只有文字，点击时有水波纹。可通过样式更改边框、颜色、阴影等属性。','zh-cn');
INSERT INTO widget_desc VALUES(1016,353,'Text Button','A Material-style text button, which only has text by default, and has a ripple effect when clicked. The border, color, shadow and other properties can be changed through styles.','en-us');
INSERT INTO widget_desc VALUES(1017,539,'TextButtonTheme','覆盖其 [TextButton] 后代的默认 [ButtonStyle]。','zh-cn');
INSERT INTO widget_desc VALUES(1018,539,'TextButtonTheme',' Overrides the default [ButtonStyle] of its [TextButton] descendants.','en-us');
INSERT INTO widget_desc VALUES(1019,54,'输入框','由于输入的组件，拥有复杂的属性。可指定控制器、文字样式、装饰线、行数限制、游标样式等。接收输入变化、完成输入等事件。','zh-cn');
INSERT INTO widget_desc VALUES(1020,54,'Input Box','A component for input, with complex properties. Can specify controller, text style, decoration, line limit, cursor style, etc. Receives input change, input completion, and other events.','en-us');
INSERT INTO widget_desc VALUES(1021,281,'输入框点击范围','groupId 为 EditableText 的 TapRegion，可以让其他组件的点击范围与输入框视为一体。','zh-cn');
INSERT INTO widget_desc VALUES(1022,281,'TextField Tap Region','The TapRegion with groupId as EditableText allows the clickable area of other components to be considered as one with the input field.','en-us');
INSERT INTO widget_desc VALUES(1023,199,'文字表单输入','和TextField属性基本一致，在其基础上增加字段的校验和提交的回调，FormState的save会触发onSaved回调。','zh-cn');
INSERT INTO widget_desc VALUES(1024,199,'Text Form Input','The properties are basically the same as TextField, with the addition of field validation and submission callbacks. The save of FormState will trigger the onSaved callback.','en-us');
INSERT INTO widget_desc VALUES(1025,540,'TextMagnifier','由原生 Android 放大镜规则决定位置的 [Magnifier]。','zh-cn');
INSERT INTO widget_desc VALUES(1026,540,'TextMagnifier',' A [Magnifier] positioned by rules dictated by the native Android magnifier.','en-us');
INSERT INTO widget_desc VALUES(1027,541,'TextSelectionGestureDetector','响应文本字段的非独占事件链的手势检测器。','zh-cn');
INSERT INTO widget_desc VALUES(1028,541,'TextSelectionGestureDetector',' A gesture detector to respond to non-exclusive event chains for a text field.','en-us');
INSERT INTO widget_desc VALUES(1029,542,'TextSelectionTheme','定义此小部件子树中文本选择外观的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(1030,542,'TextSelectionTheme',' An inherited widget that defines the appearance of text selection in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(1031,543,'TextSelectionToolbar','功能齐全的 Material 风格文本选择工具栏。','zh-cn');
INSERT INTO widget_desc VALUES(1032,543,'TextSelectionToolbar',' A fully-functional Material-style text selection toolbar.','en-us');
INSERT INTO widget_desc VALUES(1033,544,'TextSelectionToolbarTextButton','样式类似 Material 原生 Android 文本选择菜单按钮的按钮。','zh-cn');
INSERT INTO widget_desc VALUES(1034,544,'TextSelectionToolbarTextButton',' A button styled like a Material native Android text selection menu button.','en-us');
INSERT INTO widget_desc VALUES(1035,545,'Texture','映射后端纹理的矩形。','zh-cn');
INSERT INTO widget_desc VALUES(1036,545,'Texture',' A rectangle upon which a backend texture is mapped.','en-us');
INSERT INTO widget_desc VALUES(1037,168,'主题','可通过Theme.of获取ThemeData对象。也可以指定主题应用于Theme的后代组件。','zh-cn');
INSERT INTO widget_desc VALUES(1038,168,'Theme','You can obtain the ThemeData object through Theme.of. You can also specify a theme to be applied to the descendant components of Theme.','en-us');
INSERT INTO widget_desc VALUES(1039,246,'计时器模式','禁用/启用子树的计时器(Ticker)，动画控制器基于 Ticker 实现。','zh-cn');
INSERT INTO widget_desc VALUES(1040,246,'Timer Mode','Enable/disable the timer (Ticker) for the subtree, the animation controller is implemented based on Ticker.','en-us');
INSERT INTO widget_desc VALUES(1041,546,'TimePickerDialog','设计为出现在弹出对话框内的 Material Design 时间选择器。','zh-cn');
INSERT INTO widget_desc VALUES(1042,546,'TimePickerDialog',' A Material Design time picker designed to appear inside a popup dialog.','en-us');
INSERT INTO widget_desc VALUES(1043,547,'TimePickerTheme','为此小部件子树中使用 [showTimePicker] 显示的时间选择器定义配置的继承小部件。','zh-cn');
INSERT INTO widget_desc VALUES(1044,547,'TimePickerTheme',' An inherited widget that defines the configuration for time pickers displayed using [showTimePicker] in this widget''s subtree.','en-us');
INSERT INTO widget_desc VALUES(1045,208,'应用标题','该组件用于描述app在操作系统中的名称,可以在应用栏列表里看到效果。MaterialApp中的title字段效果的根源是该组件。','zh-cn');
INSERT INTO widget_desc VALUES(1046,208,'Application Title','This component is used to describe the name of the app in the operating system, and the effect can be seen in the app bar list. The root of the title field effect in MaterialApp is this component.','en-us');
INSERT INTO widget_desc VALUES(1047,33,'切换按钮组','接收组件列表，可指定边线、圆角、颜色等属性。根据具体逻辑，可以实现多个按钮单选或多选的需求。','zh-cn');
INSERT INTO widget_desc VALUES(1048,33,'Toggle Buttons Group','Receives a list of components, and can specify properties such as border, rounded corners, color, etc. According to specific logic, it can achieve the requirements of single or multiple selection of buttons.','en-us');
INSERT INTO widget_desc VALUES(1049,332,'滑块样式','主要用于为后代的ToggleButtons组件统一设置默认属性,也可以通过该组件获取默认ToggleButtons的属性。','zh-cn');
INSERT INTO widget_desc VALUES(1050,332,'Slider Style','Mainly used to set default properties for descendant ToggleButtons components uniformly. You can also get the default properties of ToggleButtons through this component.','en-us');
INSERT INTO widget_desc VALUES(1051,50,'提示工具','由于显示提示信息的组件，长按时显示信息。可指定边距、显示时长、文字样式、装饰灯属性。','zh-cn');
INSERT INTO widget_desc VALUES(1052,50,'Tooltip','A component that displays tooltip information, showing the information when long-pressed. You can specify margins, display duration, text style, and decoration properties.','en-us');
INSERT INTO widget_desc VALUES(1053,333,'提示主题','主要用于为后代的Tooltip组件统一设置默认属性,也可以通过该组件获取默认TooltipTheme的属性。','zh-cn');
INSERT INTO widget_desc VALUES(1054,333,'Tooltip Theme','Mainly used to set default properties for descendant Tooltip components uniformly. You can also retrieve the properties of the default TooltipTheme through this component.','en-us');
INSERT INTO widget_desc VALUES(1055,548,'TooltipVisibility','覆盖后代 [Tooltip] 小部件的可见性。','zh-cn');
INSERT INTO widget_desc VALUES(1056,548,'TooltipVisibility',' Overrides the visibility of descendant [Tooltip] widgets.','en-us');
INSERT INTO widget_desc VALUES(1057,78,'变换','可容纳一个子组件，可以通过一个4*4的变换矩阵对子组件进行变换。','zh-cn');
INSERT INTO widget_desc VALUES(1058,78,'Transform','Can accommodate a child component, and can transform the child component through a 4*4 transformation matrix.','en-us');
INSERT INTO widget_desc VALUES(1059,549,'TreeSliver','在垂直和水平滚动的 [Viewport] 中显示展开和折叠的 [TreeSliverNode] 的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(1060,549,'TreeSliver',' A widget that displays [TreeSliverNode]s that expand and collapse in a vertically and horizontally scrolling [Viewport].','en-us');
INSERT INTO widget_desc VALUES(1061,226,'渐变动画构造器','通过渐变器 Tween 对相关属性进行渐变动画，通过 builder 进行局部构建，减少刷新范围。不需要自定义动画器，可指定动画时长、曲线、结束回调。','zh-cn');
INSERT INTO widget_desc VALUES(1062,226,'Tween Animation Builder','Animates related properties through the Tween, and performs partial builds through the builder to reduce the refresh scope. No need for custom animators, you can specify animation duration, curve, and end callback.','en-us');
INSERT INTO widget_desc VALUES(1063,551,'TwoDimensionalScrollable','管理垂直和水平两个维度滚动并通知查看内容的 [TwoDimensionalViewport] 的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(1064,551,'TwoDimensionalScrollable',' A widget that manages scrolling in both the vertical and horizontal dimensions and informs the [TwoDimensionalViewport] through which the content is viewed.','en-us');
INSERT INTO widget_desc VALUES(1065,550,'TwoDimensionalScrollView','结合 [TwoDimensionalScrollable] 和 [TwoDimensionalViewport] 创建垂直和水平两个维度的交互式滚动内容窗格的小部件。','zh-cn');
INSERT INTO widget_desc VALUES(1066,550,'TwoDimensionalScrollView',' A widget that combines a [TwoDimensionalScrollable] and a [TwoDimensionalViewport] to create an interactive scrolling pane of content in both vertical and horizontal dimensions.','en-us');
INSERT INTO widget_desc VALUES(1067,552,'TwoDimensionalViewport','可以查看较大内容的一部分的小部件，通常与 [TwoDimensionalScrollable] 结合使用。','zh-cn');
INSERT INTO widget_desc VALUES(1068,552,'TwoDimensionalViewport',' A widget through which a portion of larger content can be viewed, typically in combination with a [TwoDimensionalScrollable].','en-us');
INSERT INTO widget_desc VALUES(1069,553,'UiKitView','在小部件层次结构中嵌入 iOS 视图。','zh-cn');
INSERT INTO widget_desc VALUES(1070,553,'UiKitView',' Embeds an iOS view in the Widget hierarchy.','en-us');
INSERT INTO widget_desc VALUES(1071,81,'无约束盒','可容纳一个子组件，并解除该组件的所有区域约束,展现自我尺寸。','zh-cn');
INSERT INTO widget_desc VALUES(1072,81,'Unconstrained Box','Can contain a child component and remove all area constraints of the component, displaying its own size.','en-us');
INSERT INTO widget_desc VALUES(1073,241,'撤销历史','接收 ValueNotifier 可监听值，为该值提供撤销/重做功能；被用于 TextField 组件源码中。','zh-cn');
INSERT INTO widget_desc VALUES(1074,241,'Undo History','Receives ValueNotifier to listen to the value, providing undo/redo functionality for that value; used in the source code of the TextField component.','en-us');
INSERT INTO widget_desc VALUES(1075,243,'唯一组件','抽象类，必须提供一个 GlobalKey 进行身份标识，该类型组件只会 inflated 一个实例，同一时刻也只会有一个状态，可以通过 currentState 属性获取状态。','zh-cn');
INSERT INTO widget_desc VALUES(1076,243,'Unique Component','Abstract class, must provide a GlobalKey for identification. This type of component will only inflate one instance and will only have one state at any given time. The state can be obtained through the currentState property.','en-us');
INSERT INTO widget_desc VALUES(1077,554,'UnmanagedRestorationScope','将提供的 [RestorationBucket] 插入小部件树并通过 [RestorationScope.of] 使其对后代可用。','zh-cn');
INSERT INTO widget_desc VALUES(1078,554,'UnmanagedRestorationScope',' Inserts a provided [RestorationBucket] into the widget tree and makes it available to descendants via [RestorationScope.of].','en-us');
INSERT INTO widget_desc VALUES(1079,22,'展示头','Flutter提供的一个通用展示结构，相应位置可插入组件，可以很方便地应对特定的条目,常用于Drawer中。','zh-cn');
INSERT INTO widget_desc VALUES(1080,22,'Display Header','A common display structure provided by Flutter, where components can be inserted in corresponding positions, making it easy to handle specific items, commonly used in Drawers.','en-us');
INSERT INTO widget_desc VALUES(1081,255,'监听值构造器','可以监听一个值，当其变化时通过builder回调能重建界面，避免使用setState刷新。','zh-cn');
INSERT INTO widget_desc VALUES(1082,255,'Value Listener Builder','Can listen to a value, and when it changes, the interface can be rebuilt through the builder callback, avoiding the use of setState for refreshing.','en-us');
INSERT INTO widget_desc VALUES(1083,35,'竖直分割线','竖直分割线，可指定颜色、宽度、粗细、上下边距信息，常用与列表的item分割线。','zh-cn');
INSERT INTO widget_desc VALUES(1084,35,'Vertical Divider','Vertical divider, which can specify color, width, thickness, top and bottom margin information, commonly used as the divider between list items.','en-us');
INSERT INTO widget_desc VALUES(1085,555,'View','引导渲染到提供的 [FlutterView] 中的渲染树。','zh-cn');
INSERT INTO widget_desc VALUES(1086,555,'View',' Bootstraps a render tree that is rendered into the provided [FlutterView].','en-us');
INSERT INTO widget_desc VALUES(1087,556,'ViewAnchor','用侧边 [View] 装饰 [child] 小部件。','zh-cn');
INSERT INTO widget_desc VALUES(1088,556,'ViewAnchor',' Decorates a [child] widget with a side [View].','en-us');
INSERT INTO widget_desc VALUES(1089,557,'ViewCollection','兄弟 [View] 的集合。','zh-cn');
INSERT INTO widget_desc VALUES(1090,557,'ViewCollection',' A collection of sibling [View]s.','en-us');
INSERT INTO widget_desc VALUES(1091,340,'视口组件','通常用于为滑动视图提供视口,仅构建显示和预加载的部位。可指定预加载的长度、滑动轴向等。是ScrollView的核心实现组件之一，一般不直接使用。','zh-cn');
INSERT INTO widget_desc VALUES(1092,340,'Viewport Component','Typically used to provide a viewport for a scrolling view, only building the displayed and preloaded parts. The preload length, scrolling axis, etc., can be specified. It is one of the core implementation components of ScrollView and is generally not used directly.','en-us');
INSERT INTO widget_desc VALUES(1093,10,'显隐组件','控制一个组件显示或隐藏,可设置隐藏后的占位组件。与其功能相似的由OffStage组件。','zh-cn');
INSERT INTO widget_desc VALUES(1094,10,'Visibility Component','Controls the display or hiding of a component, and can set a placeholder component when hidden. A similar function is provided by the OffStage component.','en-us');
INSERT INTO widget_desc VALUES(1095,234,'组件检查器','该组件可以让你很方便地查看子组件层级结构,是Flutter Inspector插件的功能之一。','zh-cn');
INSERT INTO widget_desc VALUES(1096,234,'Widget Inspector','This component allows you to easily view the hierarchy of child components and is one of the features of the Flutter Inspector plugin.','en-us');
INSERT INTO widget_desc VALUES(1097,236,'组件应用','集合一个应用程序需要的部件,如路由、语言、一些调试开关等。也是实现MaterialApp和CupertinoApp的核心组件。','zh-cn');
INSERT INTO widget_desc VALUES(1098,236,'Widget Application','Collects the components needed for an application, such as routing, language, some debugging switches, etc. It is also the core component for implementing MaterialApp and CupertinoApp.','en-us');
INSERT INTO widget_desc VALUES(1099,558,'WidgetToRenderBoxAdapter','在小部件树中放置特定 [RenderBox] 的适配器。','zh-cn');
INSERT INTO widget_desc VALUES(1100,558,'WidgetToRenderBoxAdapter',' An adapter for placing a specific [RenderBox] in the widget tree.','en-us');
INSERT INTO widget_desc VALUES(1101,170,'返回拦截','当一个界面中有WillPopScope组件时，在页面返回时会触发回调，决定是否返回。可用于二次确认退出的场景。','zh-cn');
INSERT INTO widget_desc VALUES(1102,170,'Return Intercept','When a WillPopScope component is present in an interface, a callback is triggered when the page returns, determining whether to return. It can be used for scenarios requiring secondary confirmation before exiting.','en-us');
INSERT INTO widget_desc VALUES(1103,98,'包裹布局','可容纳多个组件,按照指定方向依次排布，可以很方便处理孩子的间距,当越界时可以自动换行。拥有主轴和交叉轴的对齐方式，比较灵活。','zh-cn');
INSERT INTO widget_desc VALUES(1104,98,'Wrap Layout','Can accommodate multiple components, arranged in a specified direction, and can easily handle the spacing between children. It can automatically wrap when out of bounds. It has flexible alignment methods for the main axis and cross axis.','en-us');
INSERT INTO widget_desc VALUES(1105,136,'年份选择器','年份的选择组件，长相比较寒酸。可指定选择的日期范围、选中日期等，接收每份选中事件','zh-cn');
INSERT INTO widget_desc VALUES(1106,136,'Year Picker','A component for selecting years, with a rather modest appearance. It allows specifying the date range for selection, selected dates, etc., and receives each selection event.','en-us');
CREATE TABLE node(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        widgetId INTEGER NOT NULL,
        priority INTEGER DEFAULT 0,
        code TEXT NOT NULL
      );
INSERT INTO node VALUES(1,130,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomAboutDialog extends StatelessWidget {\r\n  const CustomAboutDialog({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Stack(\r\n      children: <Widget>[\r\n        _buildAboutDialog(),\r\n        Positioned(top: 50, right: 20, child: _buildRaisedButton(context)),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildRaisedButton(BuildContext context) => ElevatedButton(\r\n    style: TextButton.styleFrom(\r\n      backgroundColor: Colors.blue,\r\n      shape: const RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.all(Radius.circular(10)),\r\n      ),\r\n    ),\r\n        onPressed: () {\r\n          showDialog(context: context, builder: (ctx) => _buildAboutDialog());\r\n        },\r\n        child: const Text(\r\n          ''Just Show It'',\r\n          style: TextStyle(color: Colors.white),\r\n        ),\r\n      );\r\n\r\n  AboutDialog _buildAboutDialog() {\r\n    return AboutDialog(\r\n      applicationIcon: const FlutterLogo(),\r\n      applicationVersion: ''v0.0.1'',\r\n      applicationName: ''Flutter Unit'',\r\n      applicationLegalese: ''Copyright© 2018-2024 张风捷特烈'',\r\n      children: <Widget>[\r\n        Container(\r\n            margin: const EdgeInsets.only(top: 20),\r\n            width: 80,\r\n            height: 80,\r\n            child: Image.asset(''assets/images/icon_head.webp'')),\r\n        Container(\r\n            margin: const EdgeInsets.only(top: 10),\r\n            alignment: Alignment.center,\r\n            child: const Text(\r\n              ''The King Of Coder.'',\r\n              style: TextStyle(\r\n                color: Colors.white,\r\n                fontSize: 20,\r\n                shadows: [\r\n                  Shadow(\r\n                      color: Colors.blue, offset: Offset(.5, .5), blurRadius: 3)\r\n                ],\r\n              ),\r\n            ))\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(2,193,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass AboutListTileDemo extends StatelessWidget {\r\n  const AboutListTileDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const AboutListTile(\r\n      icon:  Icon(Icons.info),\r\n      applicationIcon:  FlutterLogo(),\r\n      applicationName: ''Flutter Unit'',\r\n      applicationVersion: ''v0.0.1'',\r\n      applicationLegalese: ''Copyright© 2018-2024 张风捷特烈'',\r\n      aboutBoxChildren: [\r\n         Padding(\r\n          padding: EdgeInsets.all(10.0),\r\n          child: Text(\r\n            ''      FlutterUnit是【张风捷特烈】的开源项目，''\r\n                ''收录Flutter的300+组件，并附加详细介绍以及操作交互，''\r\n                ''希望帮助广大编程爱好者入门Flutter。''\r\n                ''更多知识可以关注掘金账号、公众号【编程之王】。'',\r\n            style: TextStyle(color: Color(0xff999999), fontSize: 16),\r\n            textAlign: TextAlign.justify,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(3,295,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomAbsorbPointer extends StatefulWidget {\r\n  const CustomAbsorbPointer({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAbsorbPointerState createState() => _CustomAbsorbPointerState();\r\n}\r\n\r\nclass _CustomAbsorbPointerState extends State<CustomAbsorbPointer> {\r\n  bool _absorbing = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: <Widget>[\r\n        GestureDetector(\r\n          onTap: (){\r\n            print(''AbsorbPointer'');\r\n          },\r\n          child: AbsorbPointer(\r\n            absorbing: _absorbing,\r\n            child: _buildButton(),\r\n          ),\r\n        ),\r\n        _buildSwitch(),\r\n        Text(!_absorbing ? ''允许点击'' : ''事件已被吸收'')\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildButton() => ElevatedButton(\r\n      child: const Text(\r\n        ''To About'',\r\n        style: TextStyle(color: Colors.white),\r\n      ),\r\n      onPressed: () => Navigator.of(context).pushNamed(''AboutMePage''));\r\n\r\n  Widget _buildSwitch() => Switch(\r\n      value: _absorbing,\r\n      onChanged: (v) {\r\n        setState(() {\r\n          _absorbing = v;\r\n        });\r\n      });\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(4,13,0,replace(replace('\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nimport ''../../display_ability.dart'';\r\n\r\n\r\nclass CustomActionChip extends StatelessWidget {\r\n  const CustomActionChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ActionChip(\r\n      padding: const EdgeInsets.all(5),\r\n      labelPadding: const EdgeInsets.all(3),\r\n      label: const Text("This is a ActionChip."),\r\n      backgroundColor: Colors.grey.withAlpha(66),\r\n      avatar: Image.asset("assets/images/icon_head.webp"),\r\n      shadowColor: Colors.orangeAccent,\r\n      elevation: 3,\r\n      pressElevation: 5,\r\n      onPressed: ()=>  DisplayPlugin().showAbout(context),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(5,127,0,replace(replace('\r\n\r\n/// create by 张风捷特烈 on 2020-03-24\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomAlertDialog extends StatelessWidget {\r\n  const CustomAlertDialog({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildRaisedButton(context),\r\n        _buildAlertDialog(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildRaisedButton(BuildContext context) => ElevatedButton(\r\n    style: TextButton.styleFrom(\r\n      backgroundColor: Colors.blue,\r\n      shape: const RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.all(Radius.circular(10)),\r\n      ),\r\n    ),\r\n    onPressed: () {\r\n      showDialog(context: context, builder: (ctx) => _buildAlertDialog());\r\n    },\r\n    child: const Text(\r\n      ''Just Show It !'',\r\n      style: TextStyle(color: Colors.white),\r\n    ),\r\n  );\r\n\r\n  Widget _buildAlertDialog() {\r\n    return AlertDialog(\r\n      title: _buildTitle(),\r\n      titleTextStyle: const TextStyle(fontSize: 20, color: Colors.black),\r\n      titlePadding: const EdgeInsets.only(\r\n        top: 5,\r\n        left: 20,\r\n      ),\r\n      contentPadding: const EdgeInsets.symmetric(horizontal: 5),\r\n      backgroundColor: Colors.white,\r\n      content: _buildContent(),\r\n      actions: const [\r\n        Icon(Icons.android, color: Colors.blue,),\r\n        Icon(Icons.add, color: Colors.blue,),\r\n        Icon(Icons.g_translate, color: Colors.blue,),\r\n        Icon(Icons.games, color: Colors.blue,),\r\n      ],\r\n      elevation: 4,\r\n      shape: const RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.all(Radius.circular(10))),\r\n    );\r\n  }\r\n\r\n  Widget _buildTitle() {\r\n    return Row(\r\n      //标题\r\n      children: <Widget>[\r\n        Image.asset(\r\n          "assets/images/icon_head.webp",\r\n          width: 30,\r\n          height: 30,\r\n        ),\r\n        const SizedBox(width: 10,),\r\n        const Expanded(\r\n            child:  Text(\r\n              "关于",\r\n              style: TextStyle(fontSize: 18),\r\n            )),\r\n        const CloseButton()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildContent() {\r\n    return  Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: const [\r\n         Padding(\r\n          padding: EdgeInsets.all(10.0),\r\n          child: Text(\r\n            ''      FlutterUnit是【张风捷特烈】的开源项目，''\r\n                ''收录Flutter的200+组件，并附加详细介绍以及操作交互，''\r\n                ''希望帮助广大编程爱好者入门Flutter。''\r\n                ''更多知识可以关注掘金账号、公众号【编程之王】。'',\r\n            style: TextStyle(color: Color(0xff999999), fontSize: 16),\r\n            textAlign: TextAlign.justify,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(6,85,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAlign extends StatelessWidget {\r\n  const CustomAlign({Key? key}) : super(key: key);\r\n\r\n  final List<Alignment> alignments = const [\r\n    Alignment.topLeft,\r\n    Alignment.topCenter,\r\n    Alignment.topRight,\r\n    Alignment.centerLeft,\r\n    Alignment.center,\r\n    Alignment.centerRight,\r\n    Alignment.bottomLeft,\r\n    Alignment.bottomCenter,\r\n    Alignment.bottomRight,\r\n  ];\r\n\r\n  final List<String> alignmentsInfo = const [\r\n    "topLeft",\r\n    "topCenter",\r\n    "topRight",\r\n    "centerLeft",\r\n    "center",\r\n    "centerRight",\r\n    "bottomLeft",\r\n    "bottomCenter",\r\n    "bottomRight",\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        children: alignments\r\n            .toList()\r\n            .map((mode) => Column(children: <Widget>[\r\n                  Container(\r\n                      margin: const EdgeInsets.all(5),\r\n                      width: 100,\r\n                      height: 60,\r\n                      color: Colors.grey.withAlpha(88),\r\n                      child: Align(\r\n                          child: Container(\r\n                            width: 30,\r\n                            height: 30,\r\n                            color: Colors.cyanAccent,\r\n                          ),\r\n                          alignment: mode)),\r\n                  Text(alignmentsInfo[alignments.indexOf(mode)])\r\n                ]))\r\n            .toList());\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(7,85,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass Ball extends StatelessWidget {\r\n  const Ball({\r\n    Key? key,\r\n    this.radius = 15,\r\n    this.color = Colors.blue,\r\n  }) : super(key: key);\r\n  final double radius; //半径\r\n  final Color color; //颜色\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: radius * 2,\r\n      height: radius * 2,\r\n      decoration: BoxDecoration(\r\n        shape: BoxShape.circle,\r\n        color: color,\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass SinLayout extends StatefulWidget {\r\n  const SinLayout({\r\n    Key? key,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  _SinLayoutState createState() => _SinLayoutState();\r\n}\r\n\r\nclass _SinLayoutState extends State<SinLayout> {\r\n  double _x = 0.0; //Alignment坐标系上的x坐标\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var item = Container(\r\n      width: 300,\r\n      height: 120,\r\n      color: Colors.black.withAlpha(10),\r\n      child: Align(\r\n        child: const Ball(\r\n          color: Colors.orangeAccent,\r\n        ),\r\n        alignment: Alignment(_x, f(_x * pi)),\r\n      ),\r\n    );\r\n\r\n    var slider = Slider(\r\n        max: 180,\r\n        min: -180,\r\n        divisions: 360,\r\n        label: "${_x.toStringAsFixed(2)}π",\r\n        value: _x * 180,\r\n        onChanged: (v) => setState(() => _x = v / 180));\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: <Widget>[slider, item],\r\n    );\r\n  }\r\n\r\n  double f(x) {\r\n    //映射函数 -- 可随意指定\r\n    double y = sin(x);\r\n    return y;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(8,111,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAlignTransition extends StatefulWidget {\r\n  const CustomAlignTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAlignTransitionState createState() => _CustomAlignTransitionState();\r\n}\r\n\r\nclass _CustomAlignTransitionState extends State<CustomAlignTransition>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    _ctrl = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 1),\r\n    );\r\n    _ctrl.forward();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n        onTap: () => _ctrl.forward(from: 0),\r\n        child: Container(\r\n          width: MediaQuery.of(context).size.width,\r\n          color: Colors.grey.withAlpha(33),\r\n          height: 100,\r\n          child: AlignTransition(\r\n            alignment: AlignmentTween(\r\n              begin: Alignment.topLeft,\r\n              end: Alignment.bottomRight,\r\n            ).animate(_ctrl),\r\n            child: const Icon(\r\n              Icons.android,\r\n              color: Colors.green,\r\n              size: 60,\r\n            ),\r\n          ),\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(9,120,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedAlign extends StatefulWidget {\r\n  const CustomAnimatedAlign({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedAlignState createState() => _CustomAnimatedAlignState();\r\n}\r\n\r\nclass _CustomAnimatedAlignState extends State<CustomAnimatedAlign> {\r\n  final Alignment start = const Alignment(0, 0);\r\n  final Alignment end = Alignment.bottomRight;\r\n\r\n  late Alignment _alignment;\r\n\r\n  @override\r\n  void initState() {\r\n    _alignment = start;\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSwitch(),\r\n        Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 200,\r\n          height: 100,\r\n          child: AnimatedAlign(\r\n            duration: const Duration(seconds: 1),\r\n            curve: Curves.fastOutSlowIn,\r\n            alignment: _alignment,\r\n            onEnd: () => print(''End''),\r\n            child: Container(\r\n              height: 40,\r\n              width: 80,\r\n              alignment: Alignment.center,\r\n              color: Colors.blue,\r\n              child: const Text(\r\n                ''张风捷特烈'',\r\n                style: TextStyle(color: Colors.white),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() => Switch(\r\n          value: _alignment == end,\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _alignment = v ? end : start;\r\n            });\r\n          });\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(10,228,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass AnimatedBuilderDemo extends StatefulWidget {\r\n  const AnimatedBuilderDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _AnimatedBuilderDemoState createState() => _AnimatedBuilderDemoState();\r\n}\r\n\r\nclass _AnimatedBuilderDemoState extends State<AnimatedBuilderDemo>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController controller;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    controller = AnimationController(\r\n        vsync: this,\r\n        lowerBound: 0.3,\r\n        upperBound: 1.0,\r\n        duration: const Duration(milliseconds: 500))\r\n      ..forward();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: () {\r\n        controller.forward(from: 0);\r\n      },\r\n      child: AnimatedBuilder(\r\n          animation: controller,\r\n          builder: (ctx, child) {\r\n            return Transform.scale(\r\n              scale: controller.value,\r\n              child: Opacity(opacity: controller.value, child: child),\r\n            );\r\n          },\r\n          child: buildChild()),\r\n    );\r\n  }\r\n\r\n  Widget buildChild() => Container(\r\n    height: 100,\r\n        width: 100,\r\n        decoration: const BoxDecoration(\r\n          color: Colors.orange,\r\n          shape: BoxShape.circle,\r\n        ),\r\n        alignment: Alignment.center,\r\n        child: const Text(\r\n          ''Toly'',\r\n          style: TextStyle(fontSize: 40, color: Colors.white),\r\n        ),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(11,123,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedContainer extends StatefulWidget {\r\n  const CustomAnimatedContainer({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedContainerState createState() =>\r\n      _CustomAnimatedContainerState();\r\n}\r\n\r\nclass _CustomAnimatedContainerState extends State<CustomAnimatedContainer> {\r\n  final Decoration startDecoration = const BoxDecoration(\r\n      color: Colors.deepPurple,\r\n      borderRadius: BorderRadius.all(Radius.circular(30)),\r\n      boxShadow: [\r\n        BoxShadow(\r\n            offset: Offset(1, 1),\r\n            color: Colors.purple,\r\n            blurRadius: 5,\r\n            spreadRadius: 2)\r\n      ]);\r\n  final Decoration endDecoration = const BoxDecoration(\r\n      color: Colors.blue,\r\n      borderRadius: BorderRadius.all(Radius.circular(10)),\r\n      boxShadow: [\r\n        BoxShadow(\r\n            offset: Offset(1, 1),\r\n            color: Colors.blue,\r\n            blurRadius: 10,\r\n            spreadRadius: 0)\r\n      ]);\r\n\r\n  final Alignment startAlignment = Alignment.topLeft + const Alignment(0.2, 0.2);\r\n  final Alignment endAlignment = Alignment.center;\r\n\r\n  final double startHeight = 150.0;\r\n  final double endHeight = 100.0;\r\n\r\n  late Decoration _decoration;\r\n  late double _height;\r\n  late Alignment _alignment;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _decoration = startDecoration;\r\n    _height = startHeight;\r\n    _alignment = startAlignment;\r\n  }\r\n\r\n  bool get selected => _height == endHeight;\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      direction: Axis.vertical,\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: <Widget>[\r\n        Switch(\r\n          value: selected,\r\n          onChanged: onChanged,\r\n        ),\r\n        buildAnim()\r\n      ],\r\n    );\r\n  }\r\n  Widget _buildChild() => const Icon(\r\n    Icons.camera_outlined,\r\n    size: 30,\r\n    color: Colors.white,\r\n  );\r\n  Widget buildAnim() => AnimatedContainer(\r\n    duration: const Duration(seconds: 1),\r\n    curve: Curves.fastOutSlowIn,\r\n    decoration: _decoration,\r\n    alignment: _alignment,\r\n    onEnd: onEnd,\r\n    height: _height,\r\n    width: _height,\r\n    child: _buildChild(),\r\n  );\r\n  void onChanged(bool value) {\r\n    setState(() {\r\n      _height = value ? endHeight : startHeight;\r\n      _decoration = value ? endDecoration : startDecoration;\r\n      _alignment = value ? endAlignment : startAlignment;\r\n    });\r\n  }\r\n  void onEnd() {\r\n    print(''End'');\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(12,100,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-20\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedCrossFade extends StatefulWidget {\r\n  const CustomAnimatedCrossFade({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedCrossFadeState createState() =>\r\n      _CustomAnimatedCrossFadeState();\r\n}\r\n\r\nclass _CustomAnimatedCrossFadeState extends State<CustomAnimatedCrossFade> {\r\n  CrossFadeState _crossFadeState = CrossFadeState.showFirst;\r\n\r\n  bool get isFirst => _crossFadeState == CrossFadeState.showFirst;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: <Widget>[\r\n        AnimatedCrossFade(\r\n          firstChild: Container(\r\n            alignment: Alignment.center,\r\n            width: 200,\r\n            height: 150,\r\n            color: Colors.orange,\r\n            child: const FlutterLogo(textColor: Colors.blue, size: 100,),\r\n          ),\r\n          secondChild: Container(\r\n            width: 200,\r\n            height: 150,\r\n            alignment: Alignment.center,\r\n            color: Colors.blue,\r\n            child: const FlutterLogo(\r\n              textColor: Colors.white,\r\n//                colors: Colors.orange,\r\n              size: 100,\r\n              style: FlutterLogoStyle.stacked,),\r\n          ),\r\n          duration: const Duration(milliseconds: 600),\r\n          crossFadeState: _crossFadeState,\r\n        ),\r\n        _buildSwitch(),\r\n      ],\r\n\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() =>\r\n      Switch(value: isFirst, onChanged: (v) {\r\n        setState(() {\r\n          _crossFadeState =\r\n          v ? CrossFadeState.showFirst : CrossFadeState.showSecond;\r\n        });\r\n      });\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(13,100,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-20\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CurveAnimatedCrossFade extends StatefulWidget {\r\n  const CurveAnimatedCrossFade({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CurveAnimatedCrossFadeState createState() => _CurveAnimatedCrossFadeState();\r\n}\r\n\r\nclass _CurveAnimatedCrossFadeState extends State<CurveAnimatedCrossFade> {\r\n  var _crossFadeState = CrossFadeState.showFirst;\r\n\r\n  bool get isFirst=> _crossFadeState == CrossFadeState.showFirst;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: <Widget>[\r\n        AnimatedCrossFade(\r\n          firstCurve: Curves.easeInCirc,\r\n          secondCurve: Curves.easeInToLinear,\r\n          sizeCurve: Curves.bounceOut,\r\n          firstChild: Container(\r\n            alignment: Alignment.center,\r\n            width: 200,\r\n            height: 80,\r\n            color: Colors.orange  ,\r\n            child: const FlutterLogo(textColor: Colors.blue,size: 50,),\r\n          ),\r\n          secondChild: Container(\r\n            width: 200,\r\n            height: 150,\r\n            alignment: Alignment.center,\r\n            color: Colors.blue,\r\n            child: const FlutterLogo(\r\n              textColor: Colors.white,\r\n//                colors: Colors.orange,\r\n              size: 100,style: FlutterLogoStyle.stacked,),\r\n          ),\r\n          duration: const Duration(milliseconds: 1000),\r\n          crossFadeState: _crossFadeState,\r\n        ),\r\n        _buildSwitch(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() => Switch(value: isFirst, onChanged: (v){\r\n    setState(() {\r\n      _crossFadeState= v?CrossFadeState.showFirst:CrossFadeState.showSecond;\r\n    });\r\n  });\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(14,124,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedDefaultTextStyle extends StatefulWidget {\r\n  const CustomAnimatedDefaultTextStyle({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedDefaultTextStyleState createState() =>\r\n      _CustomAnimatedDefaultTextStyleState();\r\n}\r\n\r\nclass _CustomAnimatedDefaultTextStyleState\r\n    extends State<CustomAnimatedDefaultTextStyle> {\r\n  final TextStyle start = const TextStyle(\r\n      color: Colors.blue,\r\n      fontSize: 50,\r\n      shadows: [\r\n        Shadow(offset: Offset(1, 1), color: Colors.black, blurRadius: 3)\r\n      ]);\r\n  final TextStyle end = const TextStyle(\r\n      color: Colors.white,\r\n      fontSize: 20,\r\n      shadows: [\r\n        Shadow(offset: Offset(1, 1), color: Colors.purple, blurRadius: 3)\r\n      ]);\r\n\r\n  late TextStyle _style;\r\n\r\n  @override\r\n  void initState() {\r\n    _style = start;\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSwitch(),\r\n        Container(\r\n          alignment: Alignment.center,\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 300,\r\n          height: 100,\r\n          child: AnimatedDefaultTextStyle(\r\n            textAlign: TextAlign.start,\r\n            softWrap: true,\r\n            maxLines: 1,\r\n            overflow: TextOverflow.ellipsis,\r\n            duration: const Duration(seconds: 1),\r\n            curve: Curves.fastOutSlowIn,\r\n            style: _style,\r\n            onEnd: () => print(''End''),\r\n            child: const Text(\r\n              ''张风捷特烈'',\r\n              style: TextStyle(color: Colors.white),\r\n            ),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() => Switch(\r\n      value: _style == end,\r\n      onChanged: (v) {\r\n        setState(() {\r\n          _style = v ? end : start;\r\n        });\r\n      });\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(15,260,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nclass AnimatedFractionallySizedBoxDemo extends StatefulWidget {\r\n  const AnimatedFractionallySizedBoxDemo({super.key});\r\n\r\n  @override\r\n  State createState() => _AnimatedFractionallySizedBoxDemoState();\r\n}\r\n\r\nclass _AnimatedFractionallySizedBoxDemoState\r\n    extends State<AnimatedFractionallySizedBoxDemo> {\r\n  bool selected = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 240,\r\n      child: Center(\r\n        child: GestureDetector(\r\n          onTap: () {\r\n            setState(() {\r\n              selected = !selected;\r\n            });\r\n          },\r\n          child: Column(\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: [\r\n              _buildCell(),\r\n              const SizedBox(height: 4),\r\n              const Text(''点击面板'')\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildCell() {\r\n    return SizedBox(\r\n      width: 200,\r\n      height: 200,\r\n      child: ColoredBox(\r\n        color: Colors.red,\r\n        child: AnimatedFractionallySizedBox(\r\n          widthFactor: selected ? 0.25 : 0.75,\r\n          heightFactor: selected ? 0.75 : 0.25,\r\n          alignment: selected ? Alignment.topLeft : Alignment.bottomRight,\r\n          duration: const Duration(seconds: 1),\r\n          curve: Curves.fastOutSlowIn,\r\n          child: const ColoredBox(\r\n            color: Colors.blue,\r\n            child: FlutterLogo(size: 75),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(16,125,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedIcon extends StatefulWidget {\r\n  const CustomAnimatedIcon({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedIconState createState() => _CustomAnimatedIconState();\r\n}\r\n\r\nclass _CustomAnimatedIconState extends State<CustomAnimatedIcon>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    _ctrl = AnimationController(vsync: this, duration: const Duration(seconds: 1));\r\n    _ctrl.forward();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: () => _ctrl.forward(from: 0),\r\n      child: Wrap(\r\n        runSpacing: 30,\r\n        children: _buildChildren(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  final Map<Color, AnimatedIconData> data = {\r\n    Colors.orange: AnimatedIcons.menu_arrow,\r\n    Colors.blue: AnimatedIcons.ellipsis_search,\r\n    Colors.red: AnimatedIcons.close_menu,\r\n    Colors.green: AnimatedIcons.arrow_menu,\r\n    Colors.cyanAccent: AnimatedIcons.play_pause,\r\n    Colors.purple: AnimatedIcons.pause_play,\r\n  };\r\n\r\n  List<Widget> _buildChildren() =>\r\n      data.keys\r\n      .map((Color color) => AnimatedIcon(\r\n            size: 50,\r\n            color: color,\r\n            icon: data[color]!,\r\n            progress: _ctrl,\r\n          ))\r\n      .toList();\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(17,117,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedList extends StatefulWidget {\r\n  const CustomAnimatedList({super.key});\r\n\r\n  @override\r\n  State createState() => _CustomAnimatedListState();\r\n}\r\n\r\nclass _CustomAnimatedListState extends State<CustomAnimatedList> {\r\n  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>();\r\n  late ListModel<int> _list;\r\n  int? _selectedItem;\r\n  int _nextItem = 0;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _list = ListModel<int>(\r\n      listKey: _listKey,\r\n      initialItems: [0, 1, 2, 3],\r\n      removedItemBuilder: _buildRemovedItem,\r\n    );\r\n    _nextItem = 4;\r\n  }\r\n\r\n  Widget _buildItem(\r\n      BuildContext context, int index, Animation<double> animation) {\r\n    return _CardItem(\r\n      animation: animation,\r\n      item: _list[index],\r\n      selected: _selectedItem == _list[index],\r\n      onTap: () {\r\n        setState(() {\r\n          _selectedItem = _selectedItem == _list[index] ? null : _list[index];\r\n        });\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildRemovedItem(\r\n      int item, BuildContext context, Animation<double> animation) {\r\n    return _CardItem(\r\n      animation: animation,\r\n      item: item,\r\n      selected: false,\r\n    );\r\n  }\r\n\r\n  void _insert() {\r\n    final int index =\r\n        _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);\r\n    _list.insert(index, _nextItem++);\r\n  }\r\n\r\n  void _remove() {\r\n    if (_selectedItem != null) {\r\n      _list.removeAt(_list.indexOf(_selectedItem!));\r\n      setState(() {\r\n        _selectedItem = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n        color: Colors.grey.withAlpha(33),\r\n        width: MediaQuery.of(context).size.width/2,\r\n        child: Column(\r\n          children: <Widget>[\r\n            _buildBtn(),\r\n            SizedBox(\r\n              width: MediaQuery.of(context).size.width/2,\r\n              height: 300,\r\n              child: AnimatedList(\r\n                padding: const EdgeInsets.all(10.0),\r\n                key: _listKey,\r\n                initialItemCount: _list.length,\r\n                itemBuilder: _buildItem,\r\n              ),\r\n            )\r\n          ],\r\n        ));\r\n  }\r\n\r\n  Widget _buildBtn() => Row(\r\n        children: <Widget>[\r\n          IconButton(\r\n            icon: const Icon(\r\n              Icons.add_circle,\r\n              color: Colors.blue,\r\n            ),\r\n            onPressed: _insert,\r\n          ),\r\n          IconButton(\r\n            icon: const Icon(Icons.remove_circle, color: Colors.blue),\r\n            onPressed: _remove,\r\n          ),\r\n        ],\r\n      );\r\n}\r\n\r\nclass ListModel<E> {\r\n  ListModel({\r\n    required this.listKey,\r\n    required this.removedItemBuilder,\r\n    required Iterable<E> initialItems,\r\n  })  : assert(removedItemBuilder != null),\r\n        _items = List<E>.from(initialItems);\r\n  final GlobalKey<AnimatedListState> listKey;\r\n  final dynamic removedItemBuilder;\r\n  final List<E> _items;\r\n\r\n  AnimatedListState? get _animatedList => listKey.currentState;\r\n\r\n  void insert(int index, E item) {\r\n    _items.insert(index, item);\r\n    _animatedList?.insertItem(index);\r\n  }\r\n\r\n  E removeAt(int index) {\r\n    final E removedItem = _items.removeAt(index);\r\n    if (removedItem != null) {\r\n      _animatedList?.removeItem(\r\n        index,\r\n        (BuildContext context, Animation<double> animation) =>\r\n            removedItemBuilder(removedItem, context, animation),\r\n      );\r\n    }\r\n    return removedItem;\r\n  }\r\n\r\n  int get length => _items.length;\r\n\r\n  E operator [](int index) => _items[index];\r\n\r\n  int indexOf(E item) => _items.indexOf(item);\r\n}\r\n\r\nclass _CardItem extends StatelessWidget {\r\n  const _CardItem(\r\n      {super.key,\r\n      required this.animation,\r\n      this.onTap,\r\n      required this.item,\r\n      this.selected = false})\r\n      : assert(item >= 0);\r\n  final Animation<double> animation;\r\n  final VoidCallback? onTap;\r\n  final int item;\r\n  final bool selected;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizeTransition(\r\n      axis: Axis.vertical,\r\n      sizeFactor: animation,\r\n      child: Card(\r\n        child: Container(\r\n          color: Colors.primaries[item % Colors.primaries.length],\r\n          child: CheckboxListTile(\r\n              dense: true,\r\n              title: Text(\r\n                ''Item $item'',\r\n                style: const TextStyle(color: Colors.white, fontSize: 18),\r\n              ),\r\n              value: selected,\r\n              onChanged: (v) {\r\n                onTap?.call();\r\n              }),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(18,227,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass AnimatedModalBarrierDemo extends StatefulWidget {\r\n  const AnimatedModalBarrierDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _AnimatedModalBarrierDemoState createState() =>\r\n      _AnimatedModalBarrierDemoState();\r\n}\r\n\r\nclass _AnimatedModalBarrierDemoState extends State<AnimatedModalBarrierDemo>\r\n    with SingleTickerProviderStateMixin {\r\n late AnimationController _controller;\r\n late Animation<Color?> _color;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _controller = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 2),\r\n    )..forward();\r\n    _color = ColorTween(\r\n      begin: Colors.blue,\r\n      end: Colors.purple,\r\n    ).animate(_controller);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n   _controller.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: 200,\r\n      height: 100,\r\n      child: Stack(alignment: Alignment.center, children: [\r\n        AnimatedModalBarrier(\r\n          dismissible: true,\r\n          color: _color,\r\n        ),\r\n        const Text(\r\n          ''点击背景返回'',\r\n          style: TextStyle(color: Colors.white),\r\n        )\r\n      ]),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(19,118,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedOpacity extends StatefulWidget {\r\n  const CustomAnimatedOpacity({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedOpacityState createState() => _CustomAnimatedOpacityState();\r\n}\r\n\r\nclass _CustomAnimatedOpacityState extends State<CustomAnimatedOpacity> {\r\n  double _opacity = 1.0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Switch(\r\n            value: _opacity == 0,\r\n            onChanged: (v) {\r\n              setState(() {\r\n                _opacity = v ? 0 : 1.0;\r\n              });\r\n            }),\r\n        Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 200,\r\n          height: 100,\r\n          child: AnimatedOpacity(\r\n            duration: const Duration(seconds: 1),\r\n            curve: Curves.fastOutSlowIn,\r\n            opacity: _opacity,\r\n            onEnd: () => print(''End''),\r\n            child: const Icon(Icons.android, color: Colors.green, size: 60),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(20,119,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedPadding extends StatefulWidget {\r\n  const CustomAnimatedPadding({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedPaddingState createState() => _CustomAnimatedPaddingState();\r\n}\r\n\r\nclass _CustomAnimatedPaddingState extends State<CustomAnimatedPadding> {\r\n  final EdgeInsets startPadding = const EdgeInsets.all(10);\r\n  final EdgeInsets endPadding = const EdgeInsets.all(30);\r\n\r\n  late EdgeInsets _padding;\r\n\r\n  @override\r\n  void initState() {\r\n    _padding = startPadding;\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Switch(\r\n            value: _padding == endPadding,\r\n            onChanged: (v) {\r\n              setState(() {\r\n                _padding = v ? endPadding : startPadding;\r\n              });\r\n            }),\r\n        Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 200,\r\n          height: 100,\r\n          child: AnimatedPadding(\r\n            duration: const Duration(seconds: 1),\r\n            curve: Curves.fastOutSlowIn,\r\n            padding: _padding,\r\n            onEnd: () => print(''End''),\r\n            child: Container(\r\n              alignment: Alignment.center,\r\n              color: Colors.blue,\r\n              child: const Text(\r\n                ''张风捷特烈'',\r\n                style: TextStyle(color: Colors.white),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(21,225,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass AnimatedPhysicalModelDemo extends StatefulWidget {\r\n  const AnimatedPhysicalModelDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _AnimatedPhysicalModelDemoState createState() =>\r\n      _AnimatedPhysicalModelDemoState();\r\n}\r\n\r\nclass _AnimatedPhysicalModelDemoState extends State<AnimatedPhysicalModelDemo> {\r\n  bool flag = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: [\r\n        _buildSwitch(),\r\n        SizedBox(\r\n          width: 150,\r\n          height: 150,\r\n          child: AnimatedPhysicalModel(\r\n            duration: const Duration(seconds: 2),\r\n            curve: Curves.fastOutSlowIn,\r\n            shadowColor: flag?Colors.orange:Colors.purple,\r\n            elevation: flag?10:5,\r\n            child: Image.asset(\r\n              ''assets/images/caver.webp'',\r\n              fit: BoxFit.cover,\r\n            ),\r\n            borderRadius: BorderRadius.all(Radius.circular(flag? 10:75)),\r\n            clipBehavior: Clip.hardEdge,\r\n            shape: BoxShape.rectangle,\r\n            color: Colors.deepPurpleAccent,\r\n            onEnd: () => print(''----onEnd---''),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() => Switch(\r\n        value: flag,\r\n        onChanged: (v) {\r\n          setState(() {\r\n            flag = v;\r\n          });\r\n        });\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(22,121,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedPositioned extends StatefulWidget {\r\n  const CustomAnimatedPositioned({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedPositionedState createState() =>\r\n      _CustomAnimatedPositionedState();\r\n}\r\n\r\nclass _CustomAnimatedPositionedState extends State<CustomAnimatedPositioned> {\r\n  final double startTop = 0.0;\r\n  final double endTop = 30.0;\r\n\r\n  double _top = 0.0;\r\n\r\n  @override\r\n  void initState() {\r\n    _top = startTop;\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSwitch(),\r\n        Container(\r\n          color: Colors.grey.withAlpha(33),\r\n          width: 200,\r\n          height: 100,\r\n          child: Stack(\r\n            children: _buildChildren(),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  List<Widget> _buildChildren() => <Widget>[\r\n        AnimatedPositioned(\r\n          duration: const Duration(seconds: 1),\r\n          top: _top,\r\n          left: _top * 4,\r\n          child: const Icon(\r\n            Icons.android,\r\n            color: Colors.green,\r\n            size: 50,\r\n          ),\r\n        ),\r\n        AnimatedPositioned(\r\n          duration: const Duration(seconds: 1),\r\n          top: 50 - _top,\r\n          left: 150 - _top * 4,\r\n          child: const Icon(\r\n            Icons.android,\r\n            color: Colors.red,\r\n            size: 50,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  Widget _buildSwitch() => Switch(\r\n      value: _top == endTop,\r\n      onChanged: (v) {\r\n        setState(() {\r\n          _top = v ? endTop : startTop;\r\n        });\r\n      });\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(23,122,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAnimatedPositionedDirectional extends StatefulWidget {\r\n  const CustomAnimatedPositionedDirectional({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedPositionedDirectionalState createState() =>\r\n      _CustomAnimatedPositionedDirectionalState();\r\n}\r\n\r\nclass _CustomAnimatedPositionedDirectionalState\r\n    extends State<CustomAnimatedPositionedDirectional> {\r\n  final double startTop = 0.0;\r\n  final double endTop = 30.0;\r\n\r\n  double _top = 0.0;\r\n\r\n  @override\r\n  void initState() {\r\n    _top = startTop;\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSwitch(),\r\n        Container(\r\n          color: Colors.grey.withAlpha(33),\r\n          width: 200,\r\n          height: 100,\r\n          child: Stack(\r\n            children: _buildChildren(),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  List<Widget> _buildChildren() => <Widget>[\r\n        AnimatedPositionedDirectional(\r\n          duration: const Duration(seconds: 1),\r\n          top: _top,\r\n          start: _top * 4,\r\n          child: const Icon(\r\n            Icons.android,\r\n            color: Colors.green,\r\n            size: 50,\r\n          ),\r\n        ),\r\n        AnimatedPositionedDirectional(\r\n          duration: const Duration(seconds: 1),\r\n          top: 50 - _top,\r\n          start: 150 - _top * 4,\r\n          child: const Icon(\r\n            Icons.android,\r\n            color: Colors.red,\r\n            size: 50,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  Widget _buildSwitch() => Switch(\r\n      value: _top == endTop,\r\n      onChanged: (v) {\r\n        setState(() {\r\n          _top = v ? endTop : startTop;\r\n        });\r\n      });\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(24,259,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass AnimatedRotationDemo extends StatefulWidget {\r\n  const AnimatedRotationDemo({super.key});\r\n\r\n  @override\r\n  State<AnimatedRotationDemo> createState() => _AnimatedRotationDemoState();\r\n}\r\n\r\nclass _AnimatedRotationDemoState extends State<AnimatedRotationDemo> {\r\n  double _turns = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final TextTheme textTheme = Theme.of(context).textTheme;\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.all(16.0),\r\n      child: Column(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: <Widget>[\r\n          Row(\r\n            children: <Widget>[\r\n              Expanded(\r\n                child: GridPaper(\r\n                  color: Colors.blue.withOpacity(0.1),\r\n                  child: SizedBox(\r\n                    height: 200,\r\n                    child: Center(\r\n                      child: AnimatedRotation(\r\n                        turns: _turns,\r\n                        duration: const Duration(milliseconds: 500),\r\n                        curve: Curves.easeInOut,\r\n                        child: Container(\r\n                          color: Colors.red,\r\n                          height: 40,\r\n                          width: 40,\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n          Row(\r\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n            children: <Widget>[\r\n              Text(''scale:${_turns.toStringAsFixed(2)}'',\r\n                  style: textTheme.bodyMedium),\r\n              Expanded(\r\n                child: Slider(\r\n                  min: 0,\r\n                  max: 1,\r\n                  value: _turns,\r\n                  onChanged: (double value) {\r\n                    setState(() {\r\n                      _turns = value;\r\n                    });\r\n                  },\r\n                ),\r\n              ),\r\n              const SizedBox(width: 48.0),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(25,249,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n\r\nclass AnimatedScaleDemo extends StatefulWidget {\r\n  const AnimatedScaleDemo({super.key});\r\n\r\n  @override\r\n  State<AnimatedScaleDemo> createState() => _AnimatedScaleDemoState();\r\n}\r\n\r\nclass _AnimatedScaleDemoState extends State<AnimatedScaleDemo> {\r\n  double _scale = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final TextTheme textTheme = Theme.of(context).textTheme;\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.all(16.0),\r\n      child: Column(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: <Widget>[\r\n          Row(\r\n            children: <Widget>[\r\n              Expanded(\r\n                child: GridPaper(\r\n                  color: Colors.blue.withOpacity(0.1),\r\n                  child: SizedBox(\r\n                    height: 200,\r\n                    child: Center(\r\n                      child: AnimatedScale(\r\n                        scale: _scale,\r\n                        duration: const Duration(milliseconds: 500),\r\n                        curve: Curves.easeInOut,\r\n                        child: Container(color: Colors.red,height: 40,width: 40,),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n          Row(\r\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n            children: <Widget>[\r\n              Text(''scale:${_scale.toStringAsFixed(1)}'', style: textTheme.bodyMedium),\r\n              Expanded(\r\n                child: Slider(\r\n                  min: 0,\r\n                  max: 5.0,\r\n                  value: _scale,\r\n                  onChanged: (double value) {\r\n                    setState(() {\r\n                      _scale = value;\r\n                    });\r\n                  },\r\n                ),\r\n              ),\r\n              const SizedBox(width: 48.0),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(26,201,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomAnimatedSize extends StatefulWidget {\r\n  const CustomAnimatedSize({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedSizeState createState() => _CustomAnimatedSizeState();\r\n}\r\n\r\nclass _CustomAnimatedSizeState extends State<CustomAnimatedSize>\r\n    with SingleTickerProviderStateMixin {\r\n  final double start = 100;\r\n  final double end = 200;\r\n\r\n  late double _width;\r\n\r\n  @override\r\n  void initState() {\r\n    _width = start;\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSwitch(),\r\n        Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 200,\r\n          height: 100,\r\n          alignment: Alignment.center,\r\n          child: AnimatedSize(\r\n            duration: const Duration(seconds: 1),\r\n            curve: Curves.fastOutSlowIn,\r\n            alignment: const Alignment(0, 0),\r\n            child: Container(\r\n              height: 40,\r\n              width: _width,\r\n              alignment: Alignment.center,\r\n              color: Colors.blue,\r\n              child: const Text(\r\n                ''张风捷特烈'',\r\n                style: TextStyle(color: Colors.white),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() => Switch(\r\n      value: _width == end,\r\n      onChanged: (v) {\r\n        setState(() {\r\n          _width = v ? end : start;\r\n        });\r\n      });\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(27,247,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n\r\nclass AnimatedSlideDemo extends StatefulWidget {\r\n  const AnimatedSlideDemo({super.key});\r\n\r\n  @override\r\n  State<AnimatedSlideDemo> createState() => _AnimatedSlideDemoState();\r\n}\r\n\r\nclass _AnimatedSlideDemoState extends State<AnimatedSlideDemo> {\r\n  Offset offset = Offset.zero;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final TextTheme textTheme = Theme.of(context).textTheme;\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.all(16.0),\r\n      child: Column(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: <Widget>[\r\n          Row(\r\n            children: <Widget>[\r\n              Expanded(\r\n                child: GridPaper(\r\n                  color: Colors.blue.withOpacity(0.1),\r\n                  // alignment: Alignment.center,\r\n                  child: SizedBox(\r\n                    height: 200,\r\n                    child: Center(\r\n                      child: AnimatedSlide(\r\n                        offset: offset,\r\n                        duration: const Duration(milliseconds: 500),\r\n                        curve: Curves.easeInOut,\r\n                        child: Container(color: Colors.red,height: 40,width: 40,),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n              SizedBox(\r\n                height: 200,\r\n                child: Column(\r\n                  children: <Widget>[\r\n                    Text(''Y:${offset.dy.toStringAsFixed(1)}'', style: textTheme.bodyMedium),\r\n                    Expanded(\r\n                      child: RotatedBox(\r\n                        quarterTurns: 1,\r\n                        child: Slider(\r\n                          min: -2.0,\r\n                          max: 2.0,\r\n                          value: offset.dy,\r\n                          onChanged: (double value) {\r\n                            setState(() {\r\n                              offset = Offset(offset.dx, value);\r\n                            });\r\n                          },\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n          Row(\r\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n            children: <Widget>[\r\n              Text(''X:${offset.dx.toStringAsFixed(1)}'', style: textTheme.bodyMedium),\r\n              Expanded(\r\n                child: Slider(\r\n                  min: -4.0,\r\n                  max: 4.0,\r\n                  value: offset.dx,\r\n                  onChanged: (double value) {\r\n                    setState(() {\r\n                      offset = Offset(value, offset.dy);\r\n                    });\r\n                  },\r\n                ),\r\n              ),\r\n              const SizedBox(width: 48.0),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(28,116,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomAnimatedSwitcher extends StatefulWidget {\r\n  const CustomAnimatedSwitcher({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAnimatedSwitcherState createState() => _CustomAnimatedSwitcherState();\r\n}\r\n\r\nclass _CustomAnimatedSwitcherState extends State<CustomAnimatedSwitcher> {\r\n  int _count = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: <Widget>[\r\n        _buildMinusBtn(),\r\n        SizedBox(width:80,child: _buildAnimatedSwitcher(context)),\r\n        _buildAddBtn()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildAnimatedSwitcher(BuildContext context) =>\r\n      AnimatedSwitcher(\r\n          duration: const Duration(milliseconds: 400),\r\n          transitionBuilder: (Widget child, Animation<double> animation) =>\r\n              ScaleTransition(\r\n                  child: RotationTransition(turns: animation, child: child),\r\n                  scale: animation),\r\n          child: Text(\r\n            ''$_count'',\r\n            key: ValueKey<int>(_count),\r\n            style: Theme.of(context).textTheme.headlineSmall,\r\n          ),\r\n        );\r\n\r\n  Widget _buildMinusBtn() {\r\n   return MaterialButton(\r\n        padding: const EdgeInsets.all(0),\r\n        textColor: const Color(0xffFfffff),\r\n        elevation: 3,\r\n        color: Colors.red,\r\n        highlightColor: const Color(0xffF88B0A),\r\n        splashColor: Colors.red,\r\n        child: const Icon(\r\n          Icons.remove,\r\n          color: Colors.white,\r\n        ),\r\n       shape: const CircleBorder(\r\n         side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n       ),\r\n        onPressed: () => setState(() => _count -= 1));\r\n  }\r\n\r\n  Widget _buildAddBtn() => MaterialButton(\r\n        padding: const EdgeInsets.all(0),\r\n        textColor: const Color(0xffFfffff),\r\n        elevation: 3,\r\n        color: Colors.blue,\r\n        highlightColor: const Color(0xffF88B0A),\r\n        splashColor: Colors.red,\r\n        child: const Icon(\r\n          Icons.add,\r\n          color: Colors.white,\r\n        ),\r\n        shape: const CircleBorder(\r\n          side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n        ),\r\n        onPressed: () => setState(() => _count += 1));\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(29,224,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass AnimatedThemeDemo extends StatefulWidget {\r\n  const AnimatedThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _AnimatedThemeDemoState createState() => _AnimatedThemeDemoState();\r\n}\r\n\r\nclass _AnimatedThemeDemoState extends State<AnimatedThemeDemo> {\r\n  ThemeData startThem = ThemeData(\r\n      primaryColor: Colors.blue,\r\n      textTheme: const TextTheme(\r\n        headlineMedium: TextStyle(\r\n          color: Colors.white,\r\n          fontSize: 24,\r\n          fontWeight: FontWeight.bold,\r\n        ),\r\n      ));\r\n\r\n  ThemeData endThem = ThemeData(\r\n      primaryColor: Colors.red,\r\n      textTheme: const TextTheme(\r\n          headlineMedium: TextStyle(\r\n        color: Colors.black,\r\n        fontSize: 16,\r\n        fontWeight: FontWeight.normal,\r\n      )));\r\n\r\n  late ThemeData them;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    them = startThem;\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSwitch(),\r\n        AnimatedTheme(\r\n          data: them,\r\n          duration: const Duration(seconds: 2),\r\n          curve: Curves.fastOutSlowIn,\r\n          onEnd: () {\r\n            print(''----onEnd---'');\r\n          },\r\n          child: const ChildContent(),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() {\r\n    print(them == endThem);\r\n    return Switch(\r\n        value: them == endThem,\r\n        onChanged: (v) {\r\n          setState(() {\r\n            them = v ? endThem : startThem;\r\n          });\r\n        });\r\n  }\r\n}\r\n\r\nclass ChildContent extends StatelessWidget {\r\n  const ChildContent({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 250,\r\n      height: 60,\r\n      alignment: Alignment.center,\r\n      decoration: BoxDecoration(\r\n        borderRadius: const BorderRadius.all(Radius.circular(5)),\r\n        color: Theme.of(context).primaryColor,\r\n      ),\r\n      padding: const EdgeInsets.all(10),\r\n      child: Text(\r\n        ''Flutter Unit'',\r\n        style: Theme.of(context).textTheme.headlineMedium,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(30,288,0,replace(replace('import ''package:flutter/material.dart'';\r\012import ''package:flutter/services.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020/9/21\r\012/// contact me by email 1981462002@qq.com\r\012\r\012\r\012\r\012class AnnotatedRegionDemo extends StatelessWidget {\r\012  const AnnotatedRegionDemo({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return Container(\r\012      padding: const EdgeInsets.all(10),\r\012      child: ElevatedButton(\r\012        onPressed: (){\r\012          Navigator.push(context,\r\012            MaterialPageRoute(builder: (context) => const AnnotatedRegionTestPage()),\r\012          );\r\012        },\r\012        child: const Text("进入 AnnotatedRegion 测试页"),\r\012      ),\r\012    );\r\012  }\r\012}\r\012\r\012\r\012class AnnotatedRegionTestPage extends StatelessWidget{\r\012  const AnnotatedRegionTestPage({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    const SystemUiOverlayStyle overlayStyle =  SystemUiOverlayStyle(\r\012      systemNavigationBarColor: Colors.green,\r\012      // 导航栏颜色\r\012      systemNavigationBarDividerColor: Colors.red,\r\012      statusBarColor: Colors.blue,\r\012      systemNavigationBarIconBrightness: Brightness.light,\r\012      statusBarIconBrightness: Brightness.light,\r\012      statusBarBrightness: Brightness.light,\r\012    );\r\012\r\012    return AnnotatedRegion<SystemUiOverlayStyle>(\r\012        value: overlayStyle,\r\012        child: Scaffold(\r\012          body: Column(\r\012            children: [\r\012              Container(height: 56+30.0,color: Colors.blue,\r\012              alignment: const Alignment(0,0.55),\r\012              child: Row(\r\012                children: const [\r\012                  BackButton(color: Colors.white,),\r\012                  Text("AnnotatedRegion测试",style: TextStyle(color: Colors.white,fontSize: 18),)\r\012                ],\r\012              ),\r\012              ),\r\012              const SizedBox(height: 30,),\r\012              const Text(\r\012                "上面标题栏背景颜色为蓝色\n"\r\012                    "上面标题栏图标为亮调",\r\012\r\012                style: TextStyle(color: Colors.black,fontSize: 18),),\r\012              const Spacer(),\r\012              const Text(\r\012                    "下面导航栏背景颜色为绿色\n"\r\012                    "下面导航栏图标为亮调",\r\012\r\012                style: TextStyle(color: Colors.black,fontSize: 18),),\r\012              const SizedBox(height: 30,),\r\012            ],\r\012          ),\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(31,57,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nimport ''../PopupMenuButton/node1_base.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomAppBar extends StatelessWidget {\r\n  const CustomAppBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return AppBar(\r\n      title: const Text(''风雅六社''),\r\n      leading: const BackButton(),\r\n      backgroundColor: Colors.amber[500],\r\n      elevation: 2,\r\n      centerTitle: true,\r\n      shape: const RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.only(\r\n        topLeft: Radius.circular(20),\r\n        bottomRight: Radius.circular(20),\r\n        topRight: Radius.circular(5),\r\n        bottomLeft: Radius.circular(5),\r\n      )),\r\n      actions: <Widget>[\r\n        IconButton(\r\n            icon: const Icon(Icons.star),\r\n            tooltip: ''liked_widget_bloc'',\r\n            onPressed: () {\r\n              // do nothing\r\n            }),\r\n        const CustomPopupMenuButton()\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(32,57,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nimport ''../PopupMenuButton/node1_base.dart'';\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TabAppBar extends StatefulWidget {\r\n  const TabAppBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _TabAppBarState createState() => _TabAppBarState();\r\n}\r\n\r\nclass _TabAppBarState extends State<TabAppBar>\r\n    with SingleTickerProviderStateMixin {\r\n  final List<String> tabs = [''风画庭'', ''雨韵舍'', ''雷鸣殿'', ''电疾堂'', ''霜寒阁'', ''雪月楼''];\r\n  late TabController _tabController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _tabController = TabController(vsync: this, length: tabs.length);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _tabController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 220,\r\n      child: Scaffold(\r\n        appBar: _buildAppBar(),\r\n        body: _buildTableBarView(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  PreferredSizeWidget _buildAppBar() => AppBar(\r\n        title: const Text(''风雅六社''),\r\n        elevation: 1,\r\n        leading: const BackButton(),\r\n        centerTitle: true,\r\n        shape: const RoundedRectangleBorder(\r\n            borderRadius: BorderRadius.only(\r\n          topLeft: Radius.circular(20),\r\n          topRight: Radius.circular(20),\r\n        )),\r\n        actions: <Widget>[\r\n          IconButton(\r\n              icon: const Icon(Icons.star),\r\n              tooltip: ''liked_widget_bloc'',\r\n              onPressed: () {\r\n                // do nothing\r\n              }),\r\n          const CustomPopupMenuButton()\r\n        ],\r\n        bottom: TabBar(\r\n          isScrollable: true,\r\n          controller: _tabController,\r\n          indicatorColor: Colors.orangeAccent,\r\n          tabs: tabs.map((e) => Tab(text: e)).toList(),\r\n        ),\r\n      );\r\n\r\n  Widget _buildTableBarView() => TabBarView(\r\n      controller: _tabController,\r\n      children: tabs\r\n          .map((e) => ColoredBox(\r\n          color: Colors.purple,\r\n          child:Center(\r\n                  child:  Text(\r\n                      e,\r\n                style: const TextStyle(color: Colors.white, fontSize: 20),\r\n              ),\r\n                  )))\r\n          .toList());\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(33,77,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomAspectRatio extends StatefulWidget {\r\n  const CustomAspectRatio({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomAspectRatioState createState() => _CustomAspectRatioState();\r\n}\r\n\r\nclass _CustomAspectRatioState extends State<CustomAspectRatio> {\r\n  double _ratio = 0.75;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget child = Container(\r\n      alignment: Alignment.center,\r\n      color: Colors.cyanAccent,\r\n      width: 50,\r\n      height: 50,\r\n      child: const Text("Static"),\r\n    );\r\n\r\n    Widget box = AspectRatio(\r\n      aspectRatio: _ratio,\r\n      child: Container(\r\n          color: Colors.orange,\r\n          child: const Icon(\r\n            Icons.android,\r\n            color: Colors.white,\r\n          )),\r\n    );\r\n\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSlider(),\r\n        Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 300,\r\n          height: 100,\r\n          child: Row(\r\n            children: <Widget>[child, box, child],\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSlider() => Slider(\r\n        divisions: 20,\r\n        min: 0.1,\r\n        max: 2.0,\r\n        label: _ratio.toStringAsFixed(2),\r\n        value: _ratio,\r\n        onChanged: (v) => setState(() => _ratio = v),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(34,356,0,replace(replace('import ''dart:async'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2022-04-18\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass AutocompleteDemo extends StatelessWidget {\r\n  const AutocompleteDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Autocomplete<String>(\r\n      optionsBuilder: buildOptions,\r\n      onSelected: onSelected,\r\n    );\r\n  }\r\n\r\n  void onSelected(String selection) {\r\n      debugPrint(''当前选择了 $selection'');\r\n    }\r\n\r\n  Future<Iterable<String>> buildOptions(\r\n    TextEditingValue textEditingValue,\r\n  ) async {\r\n    if (textEditingValue.text == '''') {\r\n      return const Iterable<String>.empty();\r\n    }\r\n    return searchByArgs(textEditingValue.text);\r\n  }\r\n\r\n  Future<Iterable<String>> searchByArgs(String args) async{\r\n    // 模拟网络请求\r\n    await Future.delayed(const Duration(milliseconds: 200));\r\n    const List<String> data =  [\r\n      ''toly'', ''toly49'', ''toly42'', ''toly56'',\r\n      ''card'', ''ls'', ''alex'', ''fan sha'',\r\n    ];\r\n   return data.where((String name) => name.contains(args));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(35,356,0,replace(replace('import ''dart:async'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2022-04-18\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass AutocompleteType extends StatefulWidget {\r\n  const AutocompleteType({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<AutocompleteType> createState() => _AutocompleteTypeState();\r\n}\r\n\r\nclass _AutocompleteTypeState extends State<AutocompleteType> {\r\n  late TextEditingController _controller;\r\n  _User? user;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: Scaffold(\r\n        appBar: AppBar(\r\n          automaticallyImplyLeading: false,\r\n          title: buildAutocomplete(),\r\n        ),\r\n        body: Center(\r\n            child: Text(\r\n          user != null ? user!.name : ''未选择'',\r\n          style: const TextStyle(fontSize: 40),\r\n        )),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget buildAutocomplete() {\r\n    return Autocomplete<_User>(\r\n      optionsBuilder: buildOptions,\r\n      onSelected: onSelected,\r\n      optionsViewBuilder: _buildOptionsView,\r\n      fieldViewBuilder: _buildFieldView,\r\n      displayStringForOption: (user) => user.name,\r\n    );\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    // _controller.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  void onSelected(_User selection) {\r\n    debugPrint(''当前选择了 $selection'');\r\n    setState(() {\r\n      user = selection;\r\n    });\r\n  }\r\n\r\n  Future<Iterable<_User>> buildOptions(\r\n    TextEditingValue textEditingValue,\r\n  ) async {\r\n    if (textEditingValue.text == '''') {\r\n      return const Iterable<_User>.empty();\r\n    }\r\n    return searchByArgs(textEditingValue.text);\r\n  }\r\n\r\n  Future<Iterable<_User>> searchByArgs(String args) async {\r\n    // 模拟网络请求\r\n    await Future.delayed(const Duration(milliseconds: 200));\r\n    const List<_User> data = [\r\n      _User(''toly'', true, ''icon_5.webp''),\r\n      _User(''toly49'', false, ''icon_6.webp''),\r\n      _User(''toly42'', true, ''icon_7.webp''),\r\n      _User(''toly56'', false, ''icon_8.webp''),\r\n      _User(''card'', true, ''icon_5.webp''),\r\n      _User(''ls'', true, ''icon_6.webp''),\r\n      _User(''alex'', true, ''icon_7.webp''),\r\n      _User(''fan sha'', false, ''icon_8.webp''),\r\n    ];\r\n    return data.where((_User user) => user.name.contains(args));\r\n  }\r\n\r\n  Widget _buildFieldView(\r\n      BuildContext context,\r\n      TextEditingController textEditingController,\r\n      FocusNode focusNode,\r\n      VoidCallback onFieldSubmitted) {\r\n    _controller = textEditingController;\r\n    return SizedBox(\r\n      height: 34,\r\n      child: TextFormField(\r\n        controller: textEditingController,\r\n        decoration: const InputDecoration(\r\n            filled: true,\r\n            fillColor: Color(0xffF7F8FA),\r\n            prefixIcon: Icon(Icons.search),\r\n            contentPadding: EdgeInsets.only(top: 1),\r\n            border: UnderlineInputBorder(\r\n              borderSide: BorderSide.none,\r\n              borderRadius: BorderRadius.all(Radius.circular(19)),\r\n            ),\r\n            hintText: "输入用户名 (toly)",\r\n            hintStyle: TextStyle(fontSize: 13)),\r\n        focusNode: focusNode,\r\n        onFieldSubmitted: (String value) {\r\n          onFieldSubmitted();\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildOptionsView(BuildContext context,\r\n      AutocompleteOnSelected<_User> onSelected, Iterable<_User> options) {\r\n    return Align(\r\n      alignment: Alignment.topCenter,\r\n      child: Padding(\r\n        padding: const EdgeInsets.only(top: 20),\r\n        child: Material(\r\n          child: ConstrainedBox(\r\n            constraints: BoxConstraints(maxHeight: 150),\r\n            child: ListView.builder(\r\n              padding: EdgeInsets.zero,\r\n              itemBuilder: (_, index) {\r\n                final _User option = options.elementAt(index);\r\n                return _UserItem(\r\n                  onSelected: onSelected,\r\n                  user: option,\r\n                  args: _controller.text,\r\n                );\r\n              },\r\n              itemCount: options.length,\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _UserItem extends StatelessWidget {\r\n  final AutocompleteOnSelected<_User>? onSelected;\r\n  final String args;\r\n  final _User user;\r\n\r\n  const _UserItem({\r\n    Key? key,\r\n    this.onSelected,\r\n    required this.user,\r\n    required this.args,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return InkWell(\r\n      onTap: () => onSelected?.call(user),\r\n      child: Container(\r\n        padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 6),\r\n        child: Row(\r\n          crossAxisAlignment: CrossAxisAlignment.center,\r\n          children: [\r\n            CircleAvatar(\r\n              foregroundColor: Colors.transparent,\r\n              backgroundImage:\r\n                  AssetImage(''assets/images/head_icon/${user.image}''),\r\n            ),\r\n            const SizedBox(width: 20),\r\n            Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              mainAxisSize: MainAxisSize.min,\r\n              children: [\r\n                Text.rich(formSpan(user.name, args)),\r\n                Text(\r\n                  ''性别: ${user.man ? ''男'' : ''女''}'',\r\n                  style: const TextStyle(color: Colors.grey),\r\n                ),\r\n              ],\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  final TextStyle lightTextStyle = const TextStyle(\r\n    color: Colors.blue,\r\n    fontWeight: FontWeight.bold,\r\n  );\r\n\r\n  InlineSpan formSpan(String src, String pattern) {\r\n    List<TextSpan> span = [];\r\n    List<String> parts = src.split(pattern);\r\n    if (parts.length > 1) {\r\n      for (int i = 0; i < parts.length; i++) {\r\n        span.add(TextSpan(text: parts[i]));\r\n        if (i != parts.length - 1) {\r\n          span.add(TextSpan(text: pattern, style: lightTextStyle));\r\n        }\r\n      }\r\n    } else {\r\n      span.add(TextSpan(text: src));\r\n    }\r\n    return TextSpan(children: span);\r\n  }\r\n}\r\n\r\nclass _User {\r\n  final String name;\r\n  final bool man;\r\n  final String image;\r\n\r\n  const _User(this.name, this.man, this.image);\r\n\r\n  @override\r\n  String toString() {\r\n    return ''_User{name: $name, man: $man, image: $image}'';\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(36,239,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass AutomaticKeepAliveDemo extends StatelessWidget {\r\n  const AutomaticKeepAliveDemo({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n    Colors.red[50]!,\r\n    Colors.red[100]!,\r\n    Colors.red[200]!,\r\n    Colors.red[300]!,\r\n    Colors.red[400]!,\r\n    Colors.red[500]!,\r\n    Colors.red[600]!,\r\n    Colors.red[700]!,\r\n    Colors.red[800]!,\r\n    Colors.red[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: ListView.builder(\r\n        itemCount: data.length,\r\n        itemBuilder: (_, index) => _ColorBox(\r\n          color: data[index],\r\n          index: index,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _ColorBox extends StatefulWidget {\r\n  final Color color;\r\n  final int index;\r\n\r\n  const _ColorBox({super.key, required this.color, required this.index});\r\n\r\n  @override\r\n  _ColorBoxState createState() => _ColorBoxState();\r\n}\r\n\r\nclass _ColorBoxState extends State<_ColorBox> with AutomaticKeepAliveClientMixin {\r\n  bool _checked = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _checked = false;\r\n    print(''-----_ColorBoxState#initState---${widget.index}-------'');\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    print(''-----_ColorBoxState#dispose---${widget.index}-------'');\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    super.build(context);\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      height: 50,\r\n      color: widget.color,\r\n      child: Row(\r\n        children: [\r\n          const SizedBox(\r\n            width: 60,\r\n          ),\r\n          Checkbox(\r\n            value: _checked,\r\n            onChanged: (bool? v) {\r\n              setState(() {\r\n                _checked = v ?? false;\r\n              });\r\n            },\r\n          ),\r\n          Text(\r\n            "index ${widget.index}: ${colorString(widget.color)}",\r\n            style: const TextStyle(color: Colors.white, shadows: [\r\n              Shadow(\r\n                color: Colors.black,\r\n                offset: Offset(.5, .5),\r\n                blurRadius: 2,\r\n              )\r\n            ]),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  @override\r\n  bool get wantKeepAlive => true;\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(37,31,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomBackButton extends StatelessWidget {\r\n  const CustomBackButton({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        spacing: 10,\r\n        children: data\r\n            .map((e) => BackButton(\r\n                  color: e,\r\n                ))\r\n            .toList());\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(38,272,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/11/28\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass BackButtonIconDemo extends StatelessWidget {\r\n  const BackButtonIconDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const BackButtonIcon();\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(39,278,0,replace(replace('import ''dart:ui'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomBackdropFilter extends StatefulWidget {\r\n  const CustomBackdropFilter({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomBackdropFilterState createState() => _CustomBackdropFilterState();\r\n}\r\n\r\nclass _CustomBackdropFilterState extends State<CustomBackdropFilter> {\r\n  double _sigmaX = 1.2;\r\n  double _sigmaY = 1.2;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Stack(\r\n          children: <Widget>[\r\n            _buildImage(),\r\n            Positioned.fill(\r\n              child: ClipRect(\r\n                child: BackdropFilter(\r\n                  filter: ImageFilter.blur(sigmaX: _sigmaX, sigmaY: _sigmaY),\r\n                  child: Container(\r\n                    color: Colors.black.withAlpha(0),\r\n                  ),\r\n                ),\r\n              ),\r\n            )\r\n          ],\r\n        ),\r\n        _buildSliders()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildImage() {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: <Widget>[\r\n        SizedBox(\r\n          height: 150,\r\n          width: 150,\r\n          child: Image.asset(\r\n            ''assets/images/sabar.webp'',\r\n            fit: BoxFit.cover,\r\n          ),\r\n        ),\r\n        SizedBox(\r\n          height: 150,\r\n          width: 150,\r\n          child: Image.asset(\r\n            ''assets/images/wy_200x300.webp'',\r\n            fit: BoxFit.cover,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSliders() => Column(\r\n        children: <Widget>[\r\n          Slider(\r\n              min: 0,\r\n              max: 4,\r\n              value: _sigmaX,\r\n              divisions: 360,\r\n              label: ''x:'' + _sigmaX.toStringAsFixed(1),\r\n              onChanged: (v) {\r\n                setState(() {\r\n                  _sigmaX = v;\r\n                });\r\n              }),\r\n          Slider(\r\n              min: 0,\r\n              max: 4,\r\n              value: _sigmaY,\r\n              divisions: 360,\r\n              label: ''beta:'' + _sigmaY.toStringAsFixed(1),\r\n              onChanged: (v) {\r\n                setState(() {\r\n                  _sigmaY = v;\r\n                });\r\n              })\r\n        ],\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(40,258,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/01/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass BadgeDemo extends StatelessWidget {\r\n  const BadgeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const Wrap(\r\n      spacing: 20,\r\n      children: [\r\n        Badge(\r\n          backgroundColor: Colors.redAccent,\r\n          smallSize: 10,\r\n          child: Icon(Icons.update,size: 36,color: Colors.green,),\r\n        ),\r\n        Badge(\r\n          backgroundColor: Colors.redAccent,\r\n          smallSize: 10,\r\n          isLabelVisible: false,\r\n          child: Icon(Icons.update,size: 36,color: Colors.green,),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(41,258,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/01/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass BadgeLabelDemo extends StatelessWidget {\r\n  const BadgeLabelDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const Badge(\r\n      backgroundColor: Colors.red,\r\n      label: Text(''99''),\r\n      textStyle: TextStyle(fontSize: 8,color: Colors.red),\r\n      padding: EdgeInsets.symmetric(horizontal: 8,vertical: 2),\r\n      largeSize: 14,\r\n      child: Icon(Icons.message,size: 36,color: Colors.indigo,),\r\n    );\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(42,258,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/01/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass BadgeAlignOffsetDemo extends StatelessWidget {\r\n  const BadgeAlignOffsetDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final List<String> info = [''默认偏移和对齐'', ''偏移-4,-4'', ''偏移-2,-2;右下角''];\r\n    final List<Offset?> offsets = [\r\n      null,\r\n      const Offset(-4, -4),\r\n      const Offset(-2, -2)\r\n    ];\r\n    final List<Alignment?> alignments = [null, null, Alignment.bottomRight];\r\n\r\n    return Wrap(\r\n      spacing: 40,\r\n      children: info\r\n          .asMap()\r\n          .keys\r\n          .map((int i) => _buildShowItem(info[i], offsets[i], alignments[i]))\r\n          .toList(),\r\n    );\r\n  }\r\n\r\n  Widget _buildShowItem(String info, Offset? offset, Alignment? alignment) {\r\n    return Wrap(\r\n      spacing: 8,\r\n      direction: Axis.vertical,\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: [\r\n        Badge(\r\n          backgroundColor: Colors.red,\r\n          label: const Text(''99''),\r\n          textStyle: const TextStyle(fontSize: 8, color: Colors.red),\r\n          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),\r\n          largeSize: 14,\r\n          offset: offset,\r\n          alignment: alignment,\r\n          child: const Icon(Icons.message, size: 36, color: Colors.indigo),\r\n        ),\r\n        Text(\r\n          info,\r\n          style: const TextStyle(fontSize: 10, color: Colors.grey),\r\n        )\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(43,5,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomBanner extends StatelessWidget {\r\n  const CustomBanner({super.key});\r\n\r\n  Map<BannerLocation, Color> get data => {\r\n    BannerLocation.topStart: Colors.red,\r\n    BannerLocation.bottomStart: Colors.green,\r\n    BannerLocation.bottomEnd: Colors.orange,\r\n    BannerLocation.topEnd: Colors.blue,\r\n\r\n  };\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        spacing: 10,\r\n        runSpacing: 10,\r\n        children: data.keys\r\n            .map((BannerLocation location) => Container(\r\n          color: const Color(0xffD8F5FF),\r\n                  width: 150,\r\n                  height: 150 * 0.618,\r\n                  child: Banner(\r\n                    message: "Flutter 3.29.0 发布",\r\n                    location: location,\r\n                    textStyle: TextStyle(fontSize: 8,height: 1),\r\n                    color: data[location]!,\r\n                    child: const Padding(\r\n                        padding: EdgeInsets.all(20),\r\n                        child: FlutterLogo(\r\n                          textColor: Colors.blue,\r\n                          style: FlutterLogoStyle.horizontal,\r\n                        )),\r\n                  ),\r\n        )).toList());\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(44,75,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomBaseline extends StatefulWidget {\r\n  const CustomBaseline({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomBaselineState createState() => _CustomBaselineState();\r\n}\r\n\r\nclass _CustomBaselineState extends State<CustomBaseline> {\r\n  double _baseline=20;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget childBox = const Text(\r\n      ''你好,Flutter'',\r\n      style: TextStyle(fontSize: 20, fontFamily: "Menlo"),\r\n    );\r\n\r\n\r\n    Widget baseline = Baseline(\r\n        child: childBox,\r\n        baseline: _baseline,\r\n        baselineType: TextBaseline.alphabetic);\r\n\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSlider(),\r\n        Container(\r\n          width: 100/0.618,\r\n          height: 100,\r\n          color: Colors.grey.withAlpha(22),\r\n          child: baseline,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSlider() => Slider(\r\n        divisions: 20,\r\n        min: 0,\r\n        max: 60,\r\n        label: _baseline.toString(),\r\n        value: _baseline,\r\n        onChanged: (v) => setState(() => _baseline = v),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(45,61,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomBottomAppBar extends StatefulWidget {\r\n  const CustomBottomAppBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomBottomAppBarState createState() => _CustomBottomAppBarState();\r\n}\r\n\r\nclass _CustomBottomAppBarState extends State<CustomBottomAppBar> {\r\n  int _position = 0;\r\n  FloatingActionButtonLocation _location =\r\n      FloatingActionButtonLocation.centerDocked;\r\n  final Map<String,IconData> iconsMap = {\r\n    "图鉴": Icons.home,\r\n    "动态": Icons.toys,\r\n    "喜欢": Icons.favorite,\r\n    "手册": Icons.class_,\r\n  };\r\n  Color activeColor = Colors.blue.withAlpha(240);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: MediaQuery.of(context).size.width,\r\n      height: 180,\r\n      child: Scaffold(\r\n        backgroundColor: Colors.purple.withAlpha(22),\r\n        floatingActionButton: FloatingActionButton(\r\n          onPressed: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n          child: const Icon(Icons.add),\r\n        ),\r\n        bottomNavigationBar: _buildBottomAppBar(),\r\n        floatingActionButtonLocation: _location,\r\n        body: _buildContent(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildBottomAppBar() {\r\n    return BottomAppBar(\r\n      elevation: 1,\r\n      shape: const CircularNotchedRectangle(),\r\n      notchMargin: 5,\r\n      color: Colors.red,\r\n      child: Row(\r\n          mainAxisAlignment: MainAxisAlignment.spaceAround,\r\n          children: info.asMap().keys.map((i) => _buildChild(i)).toList()\r\n            ..insertAll(isCenter ? 2 : 4, [const SizedBox(width: 30)])),\r\n    );\r\n  }\r\n\r\n  Container _buildContent() {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      child: Wrap(\r\n        crossAxisAlignment: WrapCrossAlignment.center,\r\n        children: <Widget>[\r\n          Text(\r\n            ''当前页索引:$_position'',\r\n            style: const TextStyle(color: Colors.blue, fontSize: 18),\r\n          ),\r\n          Switch(\r\n              value: isCenter,\r\n              onChanged: (v) {\r\n                setState(() {\r\n                  _location = v\r\n                      ? FloatingActionButtonLocation.centerDocked\r\n                      : FloatingActionButtonLocation.endDocked;\r\n                });\r\n              }),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  List<String> get info => iconsMap.keys.toList();\r\n\r\n  bool get isCenter => _location == FloatingActionButtonLocation.centerDocked;\r\n\r\n  Widget _buildChild(int i) {\r\n    bool active = i == _position;\r\n    return Padding(\r\n      padding: const EdgeInsets.all(8.0),\r\n      child: GestureDetector(\r\n        onTap: () => setState(() => _position = i),\r\n        child: Wrap(\r\n          direction: Axis.vertical,\r\n          alignment: WrapAlignment.center,\r\n          children: <Widget>[\r\n            Icon(\r\n              iconsMap[info[i]],\r\n              color: active ? activeColor : Colors.white,\r\n              size: 30,\r\n            ),\r\n            Text(info[i],\r\n                style: TextStyle(\r\n                    color: active ? activeColor : Colors.white, fontSize: 14)),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(46,60,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomBottomNavigationBar extends StatefulWidget {\r\n  const CustomBottomNavigationBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomBottomNavigationBarState createState() =>\r\n      _CustomBottomNavigationBarState();\r\n}\r\n\r\nclass _CustomBottomNavigationBarState extends State<CustomBottomNavigationBar> {\r\n  int _position = 0;\r\n  BottomNavigationBarType _type = BottomNavigationBarType.shifting;\r\n  final Map<String,IconData> iconsMap = { //底栏图标\r\n    "图鉴": Icons.home, "动态": Icons.toys,\r\n    "喜欢": Icons.favorite, "手册": Icons.class_,\r\n    "我的": Icons.account_circle,\r\n  };\r\n  final List<Color> _colors = [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green,\r\n    Colors.purple,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.end,\r\n      children: <Widget>[\r\n        _buildOp(),\r\n        _buildBottomNavigationBar(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  bool get isShifting => _type == BottomNavigationBarType.shifting;\r\n\r\n  BottomNavigationBar _buildBottomNavigationBar() {\r\n    return BottomNavigationBar(\r\n      onTap: (position) => setState(() => _position = position),\r\n      currentIndex: _position,\r\n      elevation: 1,\r\n      type: _type,\r\n      fixedColor: isShifting ? Colors.white : _colors[_position],\r\n      backgroundColor: Colors.white,\r\n      iconSize: 25,\r\n      selectedLabelStyle: const TextStyle(fontWeight: FontWeight.bold),\r\n      showUnselectedLabels: false,\r\n      showSelectedLabels: true,\r\n      items: iconsMap.keys\r\n          .map((key) => BottomNavigationBarItem(\r\n              label:key,\r\n              icon: Icon(iconsMap[key]),\r\n              backgroundColor: _colors[_position]))\r\n          .toList(),\r\n    );\r\n  }\r\n\r\n  Widget _buildOp() {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n      children: <Widget>[\r\n        Text(\r\n          _type.toString(),\r\n          style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.blue),\r\n        ),\r\n        Switch(\r\n            value: _type == BottomNavigationBarType.shifting,\r\n            onChanged: (b) {\r\n              setState(() => _type = b\r\n                  ? BottomNavigationBarType.shifting\r\n                  : BottomNavigationBarType.fixed);\r\n            }),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(47,60,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass BottomNavigationBarWithPageView extends StatefulWidget {\r\n  const BottomNavigationBarWithPageView({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _BottomNavigationBarWithPageViewState createState() =>\r\n      _BottomNavigationBarWithPageViewState();\r\n}\r\n\r\nclass _BottomNavigationBarWithPageViewState\r\n    extends State<BottomNavigationBarWithPageView> {\r\n  int _position = 0;\r\n  final Map<String, IconData> iconsMap = {\r\n    //底栏图标\r\n    "图鉴": Icons.home, "动态": Icons.toys,\r\n    "喜欢": Icons.favorite, "手册": Icons.class_,\r\n    "我的": Icons.account_circle,\r\n  };\r\n  final List<Color> _colors = [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green,\r\n    Colors.purple,\r\n  ];\r\n  late PageController _controller; //页面控制器，初始0\r\n\r\n  @override\r\n  void initState() {\r\n    _controller = PageController(\r\n      initialPage: _position,\r\n    );\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _controller.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n          color: Colors.orange.withAlpha(88),\r\n          width: MediaQuery.of(context).size.width,\r\n          height: 150,\r\n          child: PageView(\r\n            controller: _controller,\r\n            children: iconsMap.keys\r\n                .map((e) => Center(\r\n                      child: Text(\r\n                        e,\r\n                        style: const TextStyle(\r\n                          color: Colors.white,\r\n                          fontSize: 20,\r\n                        ),\r\n                      ),\r\n                    ))\r\n                .toList(),\r\n          ),\r\n        ),\r\n        _buildBottomNavigationBar()\r\n      ],\r\n    );\r\n  }\r\n\r\n  BottomNavigationBar _buildBottomNavigationBar() {\r\n    return BottomNavigationBar(\r\n      onTap: (position) {\r\n        _controller.jumpToPage(position);\r\n        setState(() => _position = position);\r\n      },\r\n      currentIndex: _position,\r\n      elevation: 1,\r\n      type: BottomNavigationBarType.shifting,\r\n      fixedColor: Colors.white,\r\n      iconSize: 25,\r\n      selectedLabelStyle: const TextStyle(fontWeight: FontWeight.bold),\r\n      showUnselectedLabels: false,\r\n      showSelectedLabels: true,\r\n      items: iconsMap.keys\r\n          .map((key) => BottomNavigationBarItem(\r\n              label: key,\r\n              icon: Icon(iconsMap[key]),\r\n              backgroundColor: _colors[_position]))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(48,142,0,replace(replace('/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomBottomSheet extends StatefulWidget {\r\n  const CustomBottomSheet({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomBottomSheetState createState() => _CustomBottomSheetState();\r\n}\r\n\r\nclass _CustomBottomSheetState extends State<CustomBottomSheet> {\r\n  bool opened = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ElevatedButton(\r\n        onPressed: () {\r\n          opened = !opened;\r\n          opened\r\n              ? Scaffold.of(context).showBottomSheet((_) => _buildBottomSheet())\r\n              : Navigator.of(context).pop();\r\n        },\r\n        child: const Text(\r\n          ''点我显隐BottomSheet'',\r\n          style: TextStyle(color: Colors.white),\r\n        ));\r\n  }\r\n\r\n  Widget _buildBottomSheet() => BottomSheet(\r\n      enableDrag: true,\r\n      elevation: 4,\r\n      shape: const RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.only(\r\n        topRight: Radius.circular(60),\r\n        topLeft: Radius.circular(60),\r\n      )),\r\n      backgroundColor: Colors.transparent,\r\n      onClosing: () => print(''onClosing''),\r\n      builder: (_) => (Container(\r\n        height: 250,\r\n            decoration: const BoxDecoration(\r\n                image: DecorationImage(\r\n                    image: AssetImage(''assets/images/sabar_bar.webp''),\r\n                    fit: BoxFit.cover),\r\n                borderRadius: BorderRadius.only(\r\n                  topRight: Radius.circular(60),\r\n                  topLeft: Radius.circular(60),\r\n                )),\r\n          )));\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(49,350,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass BoxScrollViewDemo extends StatelessWidget {\r\n  const BoxScrollViewDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''BoxScrollView 是 ScrollView 的子类，实现了它的抽象方法，且暴露出另一个抽象方法 buildChildLayout，返回 Sliver 家族 Widget，''\r\n      ''其子类有 ListView 和 GridView，分别使用 Sliver 家族相关List、Gird列表组件实现的。'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: Column(\r\n        children: [\r\n          Container(\r\n            color: Colors.blue.withOpacity(0.1),\r\n            padding: const EdgeInsets.all(10),\r\n            margin: const EdgeInsets.all(10),\r\n            child: Text(info),\r\n          ),\r\n          Expanded(child: MyBoxScrollView()),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass MyBoxScrollView extends BoxScrollView {\r\n  MyBoxScrollView({Key? key}) : super(key: key);\r\n\r\n  final List<Color> data = [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  @override\r\n  Widget buildChildLayout(BuildContext context)=> SliverFixedExtentList(\r\n    itemExtent: 60,\r\n    delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n          alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 50,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n        childCount: data.length),\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(50,202,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/5/3\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass BuilderDemo extends StatelessWidget {\r\n  const BuilderDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: Scaffold(\r\n        appBar: AppBar(\r\n          title: const Text(''Builder''),\r\n        ),\r\n        floatingActionButton: Builder(\r\n          builder: (ctx) => FloatingActionButton(\r\n            onPressed: () {\r\n              ScaffoldMessenger.of(ctx).showSnackBar(const SnackBar(content: Text(''hello builder'')));\r\n            },\r\n            child: const Icon(Icons.add),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(51,29,0,replace(replace('/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:unit_widgets_display/display_ability.dart'';\r\n\r\nclass CustomButtonBar extends StatelessWidget {\r\n  const CustomButtonBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ButtonBar(\r\n      alignment: MainAxisAlignment.center,\r\n      children: <Widget>[\r\n        ElevatedButton(\r\n            child: const Text("ElevatedButton"),\r\n            onPressed: () => DisplayPlugin().showAbout(context)),\r\n        OutlinedButton(\r\n            child: const Text("Outlined"),\r\n            onPressed: () => DisplayPlugin().showAbout(context)),\r\n        TextButton(\r\n          onPressed: () => DisplayPlugin().showAbout(context),\r\n          child: const Text("TextButton"),\r\n        )\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(52,29,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nimport ''../../display_ability.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PaddingButtonBar extends StatelessWidget {\r\n  const PaddingButtonBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ButtonBar(\r\n      alignment: MainAxisAlignment.center,\r\n      buttonHeight: 40,\r\n      buttonPadding: const EdgeInsets.only(left: 15, right: 15),\r\n      children: <Widget>[\r\n        ElevatedButton(\r\n            child: const Text("ElevatedButton"),\r\n            onPressed: () => DisplayPlugin().showAbout(context)),\r\n        OutlinedButton(\r\n            child: const Text("Outlined"),\r\n            onPressed: () => DisplayPlugin().showAbout(context)),\r\n        TextButton(\r\n          onPressed: () => DisplayPlugin().showAbout(context),\r\n          child: const Text("TextButton"),\r\n        )\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(53,338,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ButtonBarThemeDemo extends StatelessWidget {\r\n  const ButtonBarThemeDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ButtonBarTheme(\r\n        data: ButtonBarTheme.of(context).copyWith(\r\n            alignment: MainAxisAlignment.center,\r\n            buttonPadding: const EdgeInsets.symmetric(horizontal: 6),\r\n            overflowDirection: VerticalDirection.up,\r\n            buttonMinWidth: 150,\r\n            buttonHeight: 30,\r\n            buttonTextTheme: ButtonTextTheme.primary),\r\n        child: const TempButtonBar());\r\n  }\r\n}\r\n\r\nclass TempButtonBar extends StatelessWidget {\r\n  const TempButtonBar({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ButtonBar(\r\n      alignment: MainAxisAlignment.center,\r\n      children: <Widget>[\r\n        ElevatedButton(\r\n            style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),\r\n            child: const Text("1.Elevated"), onPressed: () {}),\r\n        OutlinedButton(child: const Text("2.Outlined"), onPressed: () {}),\r\n        TextButton(\r\n          style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),\r\n          onPressed: () {},\r\n          child: const Text("3.Text"),\r\n        )\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(54,326,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-12\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\n\r\nclass ButtonThemeDemo extends StatelessWidget {\r\n  const ButtonThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ButtonTheme(\r\n      buttonColor: Colors.orange,\r\n      splashColor: Colors.blue,\r\n      minWidth: 40,\r\n      shape: const CircleBorder(\r\n        side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n      ),\r\n      child: Wrap(\r\n        spacing: 10,\r\n        children: <Widget>[\r\n          ElevatedButton(onPressed: (){},child: const Icon(Icons.add)),\r\n          TextButton(onPressed: (){},child: const Icon(Icons.add)),\r\n          OutlinedButton(onPressed: (){},child: const Icon(Icons.add)),\r\n          MaterialButton(onPressed: (){},child: const Icon(Icons.add)),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(55,283,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:flutter/services.dart'';\r\n\r\nclass CallbackShortcutsDemo1 extends StatefulWidget {\r\n  const CallbackShortcutsDemo1({super.key});\r\n\r\n  @override\r\n  State<CallbackShortcutsDemo1> createState() => _CallbackShortcutsDemo1State();\r\n}\r\n\r\nclass _CallbackShortcutsDemo1State extends State<CallbackShortcutsDemo1> {\r\n  FocusNode focusNode = FocusNode();\r\n\r\n  @override\r\n  void initState() {\r\n    focusNode.addListener(_onFocusChange);\r\n    _initActionBindings();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    focusNode.removeListener(_onFocusChange);\r\n    focusNode.dispose();\r\n\r\n    super.dispose();\r\n  }\r\n\r\n  void _onFocusChange() {\r\n    setState(() {});\r\n  }\r\n\r\n  int count = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Center(\r\n      child: TapRegion(\r\n        onTapInside: (_) => focusNode.requestFocus(),\r\n        onTapOutside: (_) => focusNode.unfocus(),\r\n        child: CallbackShortcuts(\r\n          bindings: _actionBindings,\r\n          child: Focus(autofocus: true, focusNode: focusNode, child: _display()),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Map<ShortcutActivator, VoidCallback> _actionBindings = {};\r\n\r\n  void _initActionBindings() {\r\n    _actionBindings = {\r\n      LogicalKeySet(LogicalKeyboardKey.control, LogicalKeyboardKey.arrowUp): increase,\r\n      LogicalKeySet(LogicalKeyboardKey.control, LogicalKeyboardKey.arrowDown): decrease,\r\n      const SingleActivator(LogicalKeyboardKey.keyR, control: true): reset,\r\n    };\r\n  }\r\n\r\n  void increase() {\r\n    setState(() => count = count + 1);\r\n  }\r\n\r\n  void decrease() {\r\n    setState(() => count = count - 1);\r\n  }\r\n\r\n  void reset() {\r\n    setState(() => count = 0);\r\n  }\r\n\r\n  Widget _display() {\r\n    Color color = focusNode.hasFocus ? Colors.blue : Colors.grey;\r\n    return Container(\r\n      decoration: BoxDecoration(border: Border.all(color: color)),\r\n      width: 460,\r\n      padding: const EdgeInsets.symmetric(horizontal: 12),\r\n      alignment: Alignment.center,\r\n      height: 60,\r\n      child: focusNode.hasFocus\r\n          ? _CounterDisplay(counter: count)\r\n          : Text(\r\n        focusNode.hasFocus ? ''键盘输入点东西吧'' : ''点击我获取焦点'',\r\n        style: TextStyle(color: color),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _CounterDisplay extends StatelessWidget {\r\n  final int counter;\r\n\r\n  const _CounterDisplay({\r\n    super.key,\r\n    required this.counter,\r\n  });\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    TextStyle style = TextStyle(fontSize: 12, color: Colors.grey);\r\n\r\n    return Wrap(\r\n      direction: Axis.vertical,\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: [\r\n        Text(\r\n          ''count: $counter'',\r\n          style: TextStyle(\r\n              fontSize: 24,\r\n              fontWeight: FontWeight.bold,\r\n              color: Theme.of(context).primaryColor),\r\n        ),\r\n        Wrap(\r\n          spacing: 6,\r\n          children: <Widget>[\r\n            Text(''【Ctrl+↑】:数字+1'', style: style),\r\n            Text(''【Ctrl+↓】:数字-1'', style: style),\r\n            Text(''【Ctrl+R】:归 0'', style: style),\r\n          ],\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(56,3,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCard extends StatelessWidget {\r\n  const CustomCard({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Card(\r\n      color: const Color(0xffB3FE65),\r\n      elevation: 4,\r\n      margin: const EdgeInsets.all(10),\r\n      child: Container(\r\n        alignment: Alignment.topLeft,\r\n        width: 200,\r\n        height: 0.618 * 200,\r\n        margin: const EdgeInsets.all(10),\r\n        child: const Text("Card", style: TextStyle(fontSize: 20)),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(57,3,0,replace(replace('\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nimport ''../../utils/pather.dart'';\r\n\r\nclass ShapeCard extends StatelessWidget {\r\n  const ShapeCard({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Card(\r\n      color: const Color(0xffB3FE65),\r\n      elevation: 6,\r\n      shape: StarShapeBorder(),\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        width: 100,\r\n        height: 100,\r\n        child: const Text("Card", style: TextStyle(fontSize: 20)),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass StarShapeBorder extends ShapeBorder {\r\n  @override\r\n  EdgeInsetsGeometry get dimensions => EdgeInsets.zero;\r\n\r\n  @override\r\n  Path getInnerPath(Rect rect, {TextDirection? textDirection}) {\r\n    return Path();\r\n  }\r\n\r\n  @override\r\n  Path getOuterPath(Rect rect, {TextDirection? textDirection}) =>\r\n      Pather.create.nStarPath(9, 50, 40, dx: 50, dy: 50);\r\n\r\n  @override\r\n  void paint(Canvas canvas, Rect rect, {TextDirection? textDirection}) {\r\n  }\r\n\r\n  @override\r\n  ShapeBorder scale(double t) {\r\n    return this;\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(58,237,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CarouselNode1 extends StatefulWidget {\r\n  const CarouselNode1({super.key});\r\n\r\n  @override\r\n  State<CarouselNode1> createState() => _CarouselNode1State();\r\n}\r\n\r\nclass _CarouselNode1State extends State<CarouselNode1> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ConstrainedBox(\r\n      constraints: const BoxConstraints(maxHeight: 160),\r\n      child: CarouselView(\r\n        itemExtent: 260,\r\n        shrinkExtent: 160,\r\n        children: List<Widget>.generate(20, (int index) {\r\n          return UncontainedLayoutCard(index: index, label: ''Item $index'');\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass UncontainedLayoutCard extends StatelessWidget {\r\n  const UncontainedLayoutCard({\r\n    super.key,\r\n    required this.index,\r\n    required this.label,\r\n  });\r\n\r\n  final int index;\r\n  final String label;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ColoredBox(\r\n      color: Colors.primaries[index % Colors.primaries.length].withOpacity(0.5),\r\n      child: Center(\r\n        child: Text(\r\n          label,\r\n          style: const TextStyle(color: Colors.white, fontSize: 20),\r\n          overflow: TextOverflow.clip,\r\n          softWrap: false,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(59,237,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CarouselNode2 extends StatefulWidget {\r\n  const CarouselNode2({super.key});\r\n\r\n  @override\r\n  State<CarouselNode2> createState() => _CarouselNode2State();\r\n}\r\n\r\nclass _WidgetMeta {\r\n  final String name;\r\n  final String desc;\r\n\r\n  _WidgetMeta(this.name, this.desc);\r\n}\r\n\r\nclass _CarouselNode2State extends State<CarouselNode2> {\r\n  final List<_WidgetMeta> widgets = [\r\n    _WidgetMeta(''Container 容器组件'', ''用于容纳单个子组件的容器组件。集成了若干个单子组件的功能，如内外边距、形变、装饰、约束等...''),\r\n    _WidgetMeta(''Text 文字组件'', ''用于显示文字的组件。拥有的属性非常多，足够满足你的使用需求,核心样式由style属性控制。''),\r\n    _WidgetMeta(''Card 卡片组件'', ''基于Material组件实现,用于将单个组件卡片化。并使其具有投影效果，可加外边距，也可以自定义卡片形状。''),\r\n    _WidgetMeta(''FlutterLogo Flutter图标'', ''用于展示Flutter图标组件。可定义颜色、尺寸、展示模式等信息，是一个非常简单的组件。''),\r\n    _WidgetMeta(''Banner 角标组件'', ''用于角标显示的组件。可容纳一个子组件,可选择方位添加角标及信息文字，可设置颜色。''),\r\n    _WidgetMeta(''Icon 图标组件'', ''用于图标显示的组件。可指定图标资源、大小、颜色。非常简单，但非常实用。''),\r\n    _WidgetMeta(''ImageIcon 图形图标'', ''用于将一个图片变为纯色的组件。可指定大小、颜色。''),\r\n    _WidgetMeta(''FadeInImage 淡入图片'', ''透明渐变地加载一张图片。可指定占位图片、进退的动画曲线、时间、宽高、fit类型、对齐方式、重复方式等。''),\r\n    _WidgetMeta(''CircleAvatar 圆形组件'', ''可将一张图片变成圆形，并且中间可以放置一个组件。可指定半径、前景色、背景色等。''),\r\n    _WidgetMeta(''Visibility 显隐组件'', ''控制一个组件显示或隐藏,可设置隐藏后的占位组件。与其功能相似的由OffStage组件。''),\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ConstrainedBox(\r\n      constraints: const BoxConstraints(maxHeight: 64),\r\n      child: CarouselView(\r\n        backgroundColor: const Color(0xfff7f8fa),\r\n        itemExtent: 240,\r\n        // elevation: 1,\r\n        shrinkExtent: 240,\r\n        itemSnapping: true,\r\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(6)),\r\n        children: widgets.map((e) => _WidgetDisplay(widget: e)).toList(),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _WidgetDisplay extends StatelessWidget {\r\n  const _WidgetDisplay({\r\n    super.key,\r\n    required this.widget,\r\n  });\r\n\r\n  final _WidgetMeta widget;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(horizontal: 8.0),\r\n      child: Column(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          Row(\r\n            children: [\r\n              Container(\r\n                width: 16,\r\n                height: 16,\r\n                margin: EdgeInsets.only(right: 6),\r\n                alignment: Alignment.center,\r\n                decoration:\r\n                    BoxDecoration(color: Colors.red, borderRadius: BorderRadius.circular(4)),\r\n                child: Text(\r\n                  ''热'',\r\n                  style: TextStyle(fontSize: 8, color: Colors.white, height: 1),\r\n                ),\r\n              ),\r\n              Text(\r\n                widget.name,\r\n                style:\r\n                    const TextStyle(color: Colors.black, fontSize: 14, fontWeight: FontWeight.bold),\r\n                overflow: TextOverflow.clip,\r\n                softWrap: false,\r\n              ),\r\n            ],\r\n          ),\r\n          Text(\r\n            widget.desc,\r\n            style: const TextStyle(color: Colors.grey, fontSize: 12),\r\n            overflow: TextOverflow.clip,\r\n            softWrap: false,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(60,86,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCenter extends StatelessWidget {\r\n  const CustomCenter({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n        margin: const EdgeInsets.all(5),\r\n        width: 200,\r\n        height: 100,\r\n        color: Colors.grey.withAlpha(88),\r\n        child: Center(\r\n            child: Container(\r\n          width: 80,\r\n          height: 60,\r\n          color: Colors.cyanAccent,\r\n        )));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(61,39,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomCheckbox extends StatefulWidget {\r\n  const CustomCheckbox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomCheckboxState createState() => _CustomCheckboxState();\r\n}\r\n\r\nclass _CustomCheckboxState extends State<CustomCheckbox> {\r\n  bool _checked = false;\r\n  final List<Color> colors = [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      children: colors\r\n          .map((e) => Checkbox(\r\n              value: _checked,\r\n              checkColor: Colors.white,\r\n              activeColor: e,\r\n              onChanged: (bool? value) =>\r\n                  setState(() => _checked = value??false)))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(62,39,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TristateCheckBok extends StatefulWidget {\r\n  const TristateCheckBok({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _TristateCheckBokState createState() => _TristateCheckBokState();\r\n}\r\n\r\nclass _TristateCheckBokState extends State<TristateCheckBok> {\r\n  bool _checked = false;\r\n  final colors = [Colors.red, Colors.yellow, Colors.blue, Colors.green];\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      children: colors\r\n          .map((e) =>\r\n          Checkbox(\r\n              value: _checked,\r\n              tristate: true,\r\n              checkColor: Colors.white,\r\n              activeColor: e,\r\n              onChanged: (bool? value) {\r\n                print(value);\r\n                setState(() => _checked = value??false);\r\n              }))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(63,17,0,replace(replace('\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomCheckBoxListTile extends StatefulWidget {\r\n  const CustomCheckBoxListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomCheckBoxListTileState createState() => _CustomCheckBoxListTileState();\r\n}\r\n\r\nclass _CustomCheckBoxListTileState extends State<CustomCheckBoxListTile> {\r\n  bool _selected = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: CheckboxListTile(\r\n        value: _selected,\r\n        checkColor: Colors.yellow,\r\n        activeColor: Colors.orangeAccent,\r\n        secondary: Image.asset("assets/images/icon_head.webp"),\r\n        title: const Text("张风捷特烈"),\r\n        subtitle: const Text("@万花过尽知无物"),\r\n        onChanged: (v) => setState(() => _selected = !_selected),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(64,17,0,replace(replace('\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass SelectCheckBoxListTile extends StatefulWidget {\r\n  const SelectCheckBoxListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SelectCheckBoxListTileState createState() => _SelectCheckBoxListTileState();\r\n}\r\n\r\nclass _SelectCheckBoxListTileState extends State<SelectCheckBoxListTile> {\r\n  bool _selected = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: CheckboxListTile(\r\n        value: _selected,\r\n        selected: _selected,\r\n        checkColor: Colors.yellow,\r\n        activeColor: Colors.orangeAccent,\r\n        secondary: Image.asset("assets/images/icon_head.webp"),\r\n        title: const Text("张风捷特烈"),\r\n        subtitle: const Text("@万花过尽知无物"),\r\n        onChanged: (v) => setState(() => _selected = !_selected),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(65,17,0,replace(replace('/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass DenseCheckBoxListTile extends StatefulWidget {\r\n  const DenseCheckBoxListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DenseCheckBoxListTileState createState() => _DenseCheckBoxListTileState();\r\n}\r\n\r\nclass _DenseCheckBoxListTileState extends State<DenseCheckBoxListTile> {\r\n  bool _selected = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: CheckboxListTile(\r\n        value: _selected,\r\n        dense: true,\r\n        checkColor: Colors.yellow,\r\n        activeColor: Colors.orangeAccent,\r\n        secondary: Image.asset("assets/images/icon_head.webp"),\r\n        title: const Text("张风捷特烈"),\r\n        subtitle: const Text("@万花过尽知无物"),\r\n        onChanged: (v) => setState(() => _selected = !_selected),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(66,215,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CheckedModeBannerDemo extends StatelessWidget {\r\n  const CheckedModeBannerDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return CheckedModeBanner(\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        width: 250,\r\n        height: 150,\r\n        color: Theme.of(context).primaryColor,\r\n        child: const Text(\r\n          "CheckedModeBanner",\r\n          style: TextStyle(color: Colors.white, fontSize: 20),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(67,11,0,replace(replace('\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\nclass CustomChip extends StatelessWidget {\r\n  const CustomChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: <Widget>[\r\n        Chip(\r\n          avatar: Image.asset("assets/images/icon_head.webp"),\r\n          label: const Text("张风捷特烈"),\r\n          padding: const EdgeInsets.all(5),\r\n          labelPadding: const EdgeInsets.all(5),\r\n        ),\r\n        const Chip(\r\n          avatar: CircleAvatar(\r\n              backgroundImage:\r\n              AssetImage("assets/images/wy_200x300.webp")),\r\n          label: Text("百里巫缨"),\r\n          padding: EdgeInsets.all(8),\r\n          labelPadding: EdgeInsets.all(6),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(68,11,0,replace(replace('\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\nclass ColorOfChip extends StatelessWidget {\r\n  const ColorOfChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: <Widget>[\r\n        Chip(\r\n          avatar: Image.asset("assets/images/icon_head.webp"),\r\n          label: const Text("张风捷特烈"),\r\n          padding: const EdgeInsets.all(5),\r\n          labelPadding: const EdgeInsets.all(5),\r\n          backgroundColor: Colors.grey.withAlpha(66),\r\n          shadowColor: Colors.orangeAccent,\r\n          elevation: 3,\r\n        ),\r\n        Chip(\r\n          avatar: Image.asset("assets/images/icon_head.webp"),\r\n          label: const Text("张风捷特烈"),\r\n          padding: const EdgeInsets.all(5),\r\n          labelPadding: const EdgeInsets.all(5),\r\n          backgroundColor: Colors.cyanAccent.withAlpha(11),\r\n          shadowColor: Colors.blue.withAlpha(88),\r\n          elevation: 4,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(69,11,0,replace(replace('\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:unit_widgets_display/display_ability.dart'';\r\n\r\nclass DeleteOfChip extends StatelessWidget {\r\n  const DeleteOfChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Chip(\r\n      avatar: Image.asset("assets/images/icon_head.webp"),\r\n      label: const Text("张风捷特烈"),\r\n      padding: const EdgeInsets.all(5),\r\n      labelPadding: const EdgeInsets.all(3),\r\n      backgroundColor: Colors.grey.withAlpha(66),\r\n      shadowColor: Colors.orangeAccent,\r\n//      deleteIcon: Icon(Icons.close,size: 18),\r\n      deleteIconColor: Colors.red,\r\n      onDeleted: () => DisplayPlugin().showAbout(context),\r\n      elevation: 3,\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(70,328,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/20\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ChipThemeDemo extends StatelessWidget {\r\n  const ChipThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ChipTheme(\r\n      data: ChipTheme.of(context).copyWith(\r\n        selectedColor: Colors.orange.withAlpha(55),\r\n        selectedShadowColor: Colors.blue,\r\n        shadowColor: Colors.orangeAccent,\r\n        pressElevation: 5,\r\n        elevation: 3,\r\n      ),\r\n      child: const CustomFilterChip(),\r\n    );\r\n  }\r\n}\r\n\r\nclass CustomFilterChip extends StatefulWidget {\r\n  const CustomFilterChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomFilterChipState createState() => _CustomFilterChipState();\r\n}\r\n\r\nclass _CustomFilterChipState extends State<CustomFilterChip> {\r\n  final Map<String, String> map = {\r\n    ''A'': ''Ant'',\r\n    ''B'': ''Bug'',\r\n    ''C'': ''Cat'',\r\n    ''D'': ''Dog'',\r\n  };\r\n  final List<String> _selected = <String>[];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisAlignment: MainAxisAlignment.center,\r\n      children: <Widget>[\r\n        Wrap(\r\n          children: map.keys.map((key) => _buildChild(key)).toList(),\r\n        ),\r\n        Container(\r\n            padding: const EdgeInsets.all(10),\r\n            child: Text(''您已选择: ${_selected.join('', '')}'')),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Padding _buildChild(String key) {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(4.0),\r\n      child: FilterChip(\r\n        avatar: CircleAvatar(child: Text(key)),\r\n        label: Text(map[key]!),\r\n        selected: _selected.contains(map[key]),\r\n        onSelected: (bool value) {\r\n          setState(() {\r\n            if (value) {\r\n              _selected.add(map[key]!);\r\n            } else {\r\n              _selected.removeWhere((name) => name == map[key]);\r\n            }\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(71,12,0,replace(replace('\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomChoiceChip extends StatefulWidget {\r\n  const CustomChoiceChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomChoiceChipState createState() => _CustomChoiceChipState();\r\n}\r\n\r\nclass _CustomChoiceChipState extends State<CustomChoiceChip> {\r\n  bool _select = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ChoiceChip(\r\n      selected: _select,\r\n      padding: const EdgeInsets.all(5),\r\n      labelPadding: const EdgeInsets.all(5),\r\n      label: Text(\r\n        _select ?\r\n        "You are selected it." :\r\n        "This is a ChoiceChip.",\r\n        style: const TextStyle(fontSize: 16),\r\n      ),\r\n      backgroundColor: Colors.grey.withAlpha(66),\r\n      avatar: Image.asset("assets/images/icon_head.webp"),\r\n      selectedColor: Colors.orangeAccent.withAlpha(44),\r\n      selectedShadowColor: Colors.blue,\r\n      shadowColor: Colors.orangeAccent,\r\n      elevation: 3,\r\n      onSelected: (value) => setState(() => _select = value),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(72,9,0,replace(replace('/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomCircleAvatar extends StatelessWidget {\r\n  const CustomCircleAvatar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const CircleAvatar(\r\n      radius: 50,\r\n      backgroundImage: AssetImage("assets/images/wy_200x300.webp"),\r\n      foregroundColor: Colors.white,\r\n      child: Icon(\r\n        Icons.check,\r\n        size: 50,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(73,46,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCircularProgressIndicator extends StatefulWidget {\r\n  const CustomCircularProgressIndicator({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomCircularProgressIndicatorState createState() =>\r\n      _CustomCircularProgressIndicatorState();\r\n}\r\n\r\nclass _CustomCircularProgressIndicatorState\r\n    extends State<CustomCircularProgressIndicator> {\r\n\r\n  List<double?> data = [0.2,0.4,0.6,0.8,null];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    return Wrap(\r\n      spacing: 10,\r\n      children:data.map((e)=>SizedBox(\r\n        width: 50,\r\n        height: 50,\r\n        child: CircularProgressIndicator(\r\n          value: e,\r\n          backgroundColor: Colors.grey.withAlpha(33),\r\n          valueColor: const AlwaysStoppedAnimation(Colors.orange),\r\n          strokeWidth: 5,\r\n        ),\r\n      )).toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(74,66,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomClipOval extends StatelessWidget {\r\n  const CustomClipOval({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: <Widget>[\r\n        ClipOval(\r\n          child: Image.asset(\r\n            "assets/images/wy_300x200.webp",\r\n            width: 150,\r\n            height: 100,\r\n          ),\r\n        ),\r\n        ClipOval(\r\n          child: Image.asset(\r\n            "assets/images/wy_300x200.webp",\r\n            width: 100,\r\n            height: 100,\r\n            fit: BoxFit.cover,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(75,69,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomClipPath extends StatelessWidget {\r\n  const CustomClipPath({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ClipPath(\r\n      clipper: ShapeBorderClipper(shape: _StarShapeBorder()),\r\n      child: Image.asset(\r\n        "assets/images/wy_300x200.webp",\r\n        width: 150,\r\n        height: 100,\r\n        fit: BoxFit.cover,\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _StarShapeBorder extends ShapeBorder {\r\n  final Path _path = Path();\r\n\r\n  @override\r\n  EdgeInsetsGeometry get dimensions => EdgeInsets.zero;\r\n\r\n  @override\r\n  Path getInnerPath(Rect rect, {TextDirection? textDirection}) {\r\n    return Path();\r\n  }\r\n\r\n  @override\r\n  Path getOuterPath(Rect rect, {TextDirection? textDirection}) =>\r\n      nStarPath(20, rect.height / 2, rect.height / 2 * 0.85,\r\n          dx: rect.width / 2, dy: rect.height / 2);\r\n\r\n  @override\r\n  void paint(Canvas canvas, Rect rect, {TextDirection? textDirection}) {}\r\n\r\n  Path nStarPath(int num, double R, double r, {dx = 0, dy = 0}) {\r\n    double perRad = 2 * pi / num;\r\n    double radA = perRad / 2 / 2;\r\n    double radB = 2 * pi / (num - 1) / 2 - radA / 2 + radA;\r\n    _path.moveTo(cos(radA) * R + dx, -sin(radA) * R + dy);\r\n    for (int i = 0; i < num; i++) {\r\n      _path.lineTo(\r\n          cos(radA + perRad * i) * R + dx, -sin(radA + perRad * i) * R + dy);\r\n      _path.lineTo(\r\n          cos(radB + perRad * i) * r + dx, -sin(radB + perRad * i) * r + dy);\r\n    }\r\n    _path.close();\r\n    return _path;\r\n  }\r\n\r\n  @override\r\n  ShapeBorder scale(double t) {\r\n    return this;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(76,67,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomClipRect extends StatelessWidget {\r\n  const CustomClipRect({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ClipRect(\r\n      child: SizedBox(\r\n        height: 100,\r\n        width: 100,\r\n        child: Image.asset(\r\n          "assets/images/wy_300x200.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(77,68,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomClipRRect extends StatelessWidget {\r\n  const CustomClipRRect({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ClipRRect(\r\n      borderRadius: const BorderRadius.all(Radius.elliptical(35, 30)),\r\n      child: Image.asset(\r\n        "assets/images/wy_300x200.webp",\r\n        width: 150,\r\n        height: 100,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(78,32,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomCloseButton extends StatelessWidget {\r\n  const CustomCloseButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const CloseButton();\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(79,274,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/11/28\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CloseButtonIconDemo extends StatelessWidget {\r\n  const CloseButtonIconDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const CloseButtonIcon();\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(80,267,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ColoredBoxDemo extends StatelessWidget {\r\n  const ColoredBoxDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ColoredBox(\r\n      color: Colors.red,\r\n      child: Container(\r\n        margin: const EdgeInsets.all(20),\r\n        padding: const EdgeInsets.all(20),\r\n        decoration: const BoxDecoration(\r\n          borderRadius: BorderRadius.all(Radius.circular(10)),\r\n          color: Colors.blue\r\n        ),\r\n          alignment: Alignment.center,\r\n          width: 250,\r\n          height: 100,\r\n          child: const Text(\r\n            "蓝色是加了 margin 和圆角的 Container，外层包裹红色的 ColoredBox，注意作用范围。",\r\n            style: TextStyle(color: Colors.white),\r\n          ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(81,88,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nimport ''../../display_ability.dart'';\r\n\r\n\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomColorFiltered extends StatefulWidget {\r\n  const CustomColorFiltered({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomColorFilteredState createState() => _CustomColorFilteredState();\r\n}\r\n\r\nclass _CustomColorFilteredState extends State<CustomColorFiltered> {\r\n  Color _color = Colors.blue.withAlpha(88);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    _color =  DisplayPlugin().randomColor;\r\n    return Column(\r\n      children: <Widget>[\r\n        Wrap(spacing: 10, runSpacing: 10, children: [\r\n          _buildRandomColor(),\r\n          ...BlendMode.values\r\n              .map((mode) => Column(\r\n                    children: <Widget>[\r\n                      _buildChild(mode),\r\n                      const SizedBox(height: 10),\r\n                      Text(\r\n                        mode.toString().split(''.'')[1],\r\n                        style: const TextStyle(fontSize: 10),\r\n                      )\r\n                    ],\r\n                  ))\r\n              .toList()\r\n        ]),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildChild(m) => SizedBox(\r\n        width: 58,\r\n        height: 58,\r\n        child: ColorFiltered(\r\n            child:\r\n                const Image(image: AssetImage("assets/images/icon_head.webp")),\r\n            colorFilter: ColorFilter.mode(_color, m)),\r\n      );\r\n\r\n  Widget _buildRandomColor() => GestureDetector(\r\n        onTap: () => setState(() {}),\r\n        child: Container(\r\n          alignment: Alignment.center,\r\n          width: 60,\r\n          height: 60,\r\n          decoration: BoxDecoration(color: _color, shape: BoxShape.circle),\r\n          child: const Text(''点我''),\r\n        ),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(82,96,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ColumnNode1 extends StatelessWidget {\r\n  const ColumnNode1({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildTitle(),\r\n        _buildContent(context),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTitle() {\r\n    return Container(\r\n        height: 70,\r\n        color: const Color(0x4484FFFF),\r\n        child: Row(\r\n          children: const [\r\n            Padding(\r\n              child: Icon(\r\n                Icons.add_location,\r\n                size: 30,\r\n                color: Colors.pink,\r\n              ),\r\n              padding: EdgeInsets.only(left: 25, right: 20),\r\n            ),\r\n            Expanded(\r\n              child: Text(\r\n                "附近",\r\n                style: TextStyle(fontSize: 18),\r\n              ),\r\n            ),\r\n            Padding(\r\n              child: Icon(Icons.keyboard_arrow_right, color: Colors.black38),\r\n              padding: EdgeInsets.only(right: 25),\r\n            ),\r\n          ],\r\n        ));\r\n  }\r\n\r\n  Widget _buildContent(ctx) => Container(\r\n        width: MediaQuery.of(ctx).size.width,\r\n        color: Colors.orangeAccent,\r\n        height: 100,\r\n        child: const Icon(\r\n          Icons.android,\r\n          size: 50,\r\n          color: Colors.white,\r\n        ),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(83,265,0,replace(replace('import ''dart:math'';\r\012\r\012import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020/3/31\r\012/// contact me by email 1981462002@qq.com\r\012///\r\012\r\012\r\012class CompositedTransformFollowerDemo extends StatelessWidget {\r\012\r\012  const CompositedTransformFollowerDemo({Key? key}) : super(key: key);\r\012\r\012  static const List<Color> colors =[Colors.red,Colors.yellow,Colors.blue,Colors.green];\r\012\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return Container(\r\012      transform: Matrix4.rotationZ(-15/180*pi),\r\012      height: 250,\r\012      padding: const EdgeInsets.all(50.0),\r\012      child:  ListView(\r\012          scrollDirection: Axis.horizontal,\r\012          children: <Widget>[\r\012            Column(\r\012              mainAxisAlignment: MainAxisAlignment.center,\r\012              children: [_LogoTips(), const Text(''点击图标\n显隐弹框'')],\r\012            ),\r\012            ...colors.map((color) => Container(width: 80, color: color))\r\012          ],\r\012        ),\r\012    );\r\012  }\r\012\r\012\r\012}\r\012\r\012class _LogoTips extends StatefulWidget {\r\012  @override\r\012  _LogoTipsState createState() => _LogoTipsState();\r\012}\r\012\r\012class _LogoTipsState extends State<_LogoTips> {\r\012  OverlayEntry? _overlayEntry;\r\012\r\012  final LayerLink _layerLink = LayerLink();\r\012\r\012  bool show = false;\r\012\r\012  OverlayEntry _createOverlayEntry() {\r\012    return OverlayEntry(\r\012        builder: (context) => Positioned(\r\012              width: 150,\r\012              child: CompositedTransformFollower(\r\012                link: _layerLink,\r\012                showWhenUnlinked: false,\r\012                offset: const Offset(0,-10),\r\012                targetAnchor: Alignment.topRight,\r\012                child: const Card(\r\012                  child: Padding(\r\012                    padding: EdgeInsets.all(8.0),\r\012                    child: Text(''我是一个 Overlay，目标组件为图标，当它变换时，我会伴随变换。''),\r\012                  ),\r\012                ),\r\012              ),\r\012            ));\r\012  }\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return GestureDetector(\r\012        onTap: _toggleOverlay,\r\012        child: CompositedTransformTarget(\r\012          link: _layerLink,\r\012          child:\r\012          const FlutterLogo(\r\012            size: 80,\r\012          ),\r\012        ));\r\012  }\r\012\r\012  void _toggleOverlay() {\r\012    if (!show) {\r\012      _showOverlay();\r\012    } else {\r\012      _hideOverlay();\r\012    }\r\012    show = !show;\r\012  }\r\012\r\012  void _showOverlay() {\r\012    _overlayEntry = _createOverlayEntry();\r\012    Overlay.of(context)?.insert(_overlayEntry!);\r\012  }\r\012\r\012  void _hideOverlay() {\r\012    _overlayEntry?.remove();\r\012  }\r\012\r\012  @override\r\012  void dispose() {\r\012    _hideOverlay();\r\012    super.dispose();\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(84,266,0,replace(replace('import ''dart:math'';\r\012\r\012import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020/3/31\r\012/// contact me by email 1981462002@qq.com\r\012///\r\012\r\012\r\012class CompositedTransformTargetDemo extends StatelessWidget {\r\012\r\012  const CompositedTransformTargetDemo({Key? key}) : super(key: key);\r\012\r\012  static const  List<Color> colors =[Colors.red,Colors.yellow,Colors.blue,Colors.green];\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return Container(\r\012      transform: Matrix4.rotationZ(-15/180*pi),\r\012      height: 250,\r\012      padding: const EdgeInsets.all(50.0),\r\012      child:  ListView(\r\012        scrollDirection: Axis.horizontal,\r\012        children: <Widget>[\r\012          Column(\r\012            mainAxisAlignment: MainAxisAlignment.center,\r\012            children: [_LogoTips(), const Text(''点击图标\n显隐弹框'')],\r\012          ),\r\012          ...colors.map((color) => Container(width: 80, color: color))\r\012        ],\r\012      ),\r\012    );\r\012  }\r\012\r\012}\r\012\r\012class _LogoTips extends StatefulWidget {\r\012  @override\r\012  _LogoTipsState createState() => _LogoTipsState();\r\012}\r\012\r\012class _LogoTipsState extends State<_LogoTips> {\r\012  OverlayEntry? _overlayEntry;\r\012\r\012  final LayerLink _layerLink = LayerLink();\r\012\r\012  bool show = false;\r\012\r\012  OverlayEntry _createOverlayEntry() {\r\012    return OverlayEntry(\r\012        builder: (context) => Positioned(\r\012              width: 150,\r\012              child: CompositedTransformFollower(\r\012                link: _layerLink,\r\012                showWhenUnlinked: false,\r\012                targetAnchor: Alignment.topRight,\r\012                child: const Card(\r\012                  child: Padding(\r\012                    padding: EdgeInsets.all(8.0),\r\012                    child: Text(''我是一个 Overlay，目标组件为图标，当它变换时，我会伴随变换。''),\r\012                  ),\r\012                ),\r\012              ),\r\012            ));\r\012  }\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return GestureDetector(\r\012        onTap: _toggleOverlay,\r\012        child: CompositedTransformTarget(\r\012          link: _layerLink,\r\012          child:\r\012          const FlutterLogo(\r\012            size: 80,\r\012          ),\r\012        ));\r\012  }\r\012\r\012  void _toggleOverlay() {\r\012    if (!show) {\r\012      _showOverlay();\r\012    } else {\r\012      _hideOverlay();\r\012    }\r\012    show = !show;\r\012  }\r\012\r\012  void _showOverlay() {\r\012    _overlayEntry = _createOverlayEntry();\r\012    Overlay.of(context)?.insert(_overlayEntry!);\r\012  }\r\012\r\012  void _hideOverlay() {\r\012    _overlayEntry?.remove();\r\012  }\r\012\r\012  @override\r\012  void dispose() {\r\012    _hideOverlay();\r\012    super.dispose();\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(85,80,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomConstrainedBox extends StatefulWidget {\r\n  const CustomConstrainedBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomConstrainedBoxState createState() => _CustomConstrainedBoxState();\r\n}\r\n\r\nclass _CustomConstrainedBoxState extends State<CustomConstrainedBox> {\r\n  String _text = '''';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget child = Container(\r\n      alignment: Alignment.center,\r\n      color: Colors.cyanAccent,\r\n      width: 40,\r\n      height: 40,\r\n      child: const Text("Static"),\r\n    );\r\n\r\n    Widget box = ConstrainedBox(\r\n      constraints: const BoxConstraints(\r\n        minHeight: 50,\r\n        minWidth: 20,\r\n        maxHeight: 80,\r\n        maxWidth: 150,\r\n      ),\r\n      child: Container(color: Colors.orange, child: Text(_text)),\r\n    );\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 300,\r\n          height: 100,\r\n          child: Row(\r\n            children: <Widget>[child, UnconstrainedBox(child: box), child],\r\n          ),\r\n        ),\r\n        _buildInput(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildInput() {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(18.0),\r\n      child: TextField(\r\n        decoration: const InputDecoration(\r\n          border: OutlineInputBorder(),\r\n          hintText: ''请输入'',\r\n        ),\r\n        onChanged: (v) {\r\n          setState(() {\r\n            _text = v;\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(86,1,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      alignment: Alignment.topLeft,\r\n      width: 200,\r\n      height: 200 * 0.618,\r\n      color: Colors.red.withAlpha(88),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(87,1,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ContainerWithChild extends StatelessWidget {\r\n  const ContainerWithChild({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      alignment: Alignment.topLeft,\r\n      padding: const EdgeInsets.all(20),\r\n      margin: const EdgeInsets.all(10),\r\n      width: 200,\r\n      height: 200 * 0.618,\r\n      color: Colors.grey.withAlpha(88),\r\n      child: const Icon(Icons.android),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(88,1,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ContainerAlignment extends StatelessWidget {\r\n  const ContainerAlignment({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      alignment: Alignment.bottomRight,\r\n      width: 200,\r\n      height: 200 * 0.618,\r\n      color: Colors.grey.withAlpha(88),\r\n      child: const Icon(\r\n        Icons.android,\r\n        color: Colors.green,\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(89,1,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ContainerDecoration extends StatelessWidget {\r\n  const ContainerDecoration({super.key});\r\n\r\n  List<int> get rainbow => [\r\n    0xffff0000,\r\n    0xffFF7F00,\r\n    0xffFFFF00,\r\n    0xff00FF00,\r\n    0xff00FFFF,\r\n    0xff0000FF,\r\n    0xff8B00FF\r\n  ];\r\n\r\n  List<double> get stops => [0.0, 1 / 6, 2 / 6, 3 / 6, 4 / 6, 5 / 6, 1.0];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      width: 200,\r\n      height: 200 * 0.618,\r\n      margin: const EdgeInsets.all(20),\r\n      padding: const EdgeInsets.all(20),\r\n      decoration: BoxDecoration(//添加渐变色\r\n          gradient: LinearGradient(\r\n              stops: stops,\r\n              colors: rainbow.map((e) => Color(e)).toList()),\r\n          borderRadius: const BorderRadius.only(\r\n              topLeft:  Radius.circular(50),\r\n              bottomRight:  Radius.circular(50)),\r\n          boxShadow: const [\r\n             BoxShadow(\r\n                color: Colors.grey,\r\n                offset:  Offset(1, 1),\r\n                blurRadius: 10,\r\n                spreadRadius: 1),\r\n          ]),\r\n      child: const Text(\r\n        "Container",\r\n        style: TextStyle(fontSize: 20),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(90,1,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ContainerTransform extends StatelessWidget {\r\n  const ContainerTransform({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      color: Colors.cyanAccent,\r\n      width: 150,\r\n      height: 150 * 0.618,\r\n      transform: Matrix4.skew(-pi / 10, 0),\r\n      child: const Text(\r\n        "Container",\r\n        style: TextStyle(fontSize: 20),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(91,1,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ContainerConstraints extends StatelessWidget {\r\n  const ContainerConstraints({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.blue,\r\n      width: 200,\r\n      height: 200 * 0.618,\r\n      constraints: const BoxConstraints(\r\n        minWidth: 100,\r\n        maxWidth: 150,\r\n        minHeight: 20,\r\n        maxHeight: 100,\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(92,131,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoActionSheet extends StatelessWidget {\r\n  const CustomCupertinoActionSheet({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: <Widget>[\r\n        _buildRaisedButton(context),\r\n        _buildCupertinoActionSheet(context),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildCupertinoActionSheet(BuildContext context) =>\r\n      Container(\r\n        alignment: Alignment.bottomCenter,\r\n        child: CupertinoActionSheet(\r\n          title: const Text("Please chose a language"),\r\n          message: const Text(''the language you use in this application.''),\r\n          cancelButton: CupertinoActionSheetAction(\r\n              onPressed: () => Navigator.pop(context), child: const Text("Cancel")),\r\n          actions: <Widget>[\r\n            CupertinoActionSheetAction(\r\n                onPressed: () => Navigator.pop(context),\r\n                child: const Text(''Dart'')),\r\n            CupertinoActionSheetAction(\r\n                onPressed: () => Navigator.pop(context),\r\n                child: const Text(''Java'')),\r\n            CupertinoActionSheetAction(\r\n                onPressed: () => Navigator.pop(context),\r\n                child: const Text(''Kotlin'')),\r\n          ],\r\n        ),\r\n      );\r\n\r\n  Widget _buildRaisedButton(BuildContext context) => ElevatedButton(\r\n        style: TextButton.styleFrom(\r\n          backgroundColor: Colors.blue,\r\n          shape: const RoundedRectangleBorder(\r\n            borderRadius: BorderRadius.all(Radius.circular(10)),\r\n          ),\r\n        ),\r\n        onPressed: () => showDialog(\r\n            context: context,\r\n            builder: (ctx) => _buildCupertinoActionSheet(context)),\r\n        child: const Text(\r\n          ''Just Show It !'',\r\n          style: TextStyle(color: Colors.white),\r\n        ),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(93,132,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\nimport ''../../display_ability.dart'';\r\n\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoActionSheetAction extends StatelessWidget {\r\n  const CustomCupertinoActionSheetAction({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n          margin: const EdgeInsets.all(5),\r\n          color: Colors.grey.withAlpha(33),\r\n          child: CupertinoActionSheetAction(\r\n              isDefaultAction: true,\r\n              onPressed: () =>  DisplayPlugin().showAbout(context),\r\n              child: const Text(''张风捷特烈'')),\r\n        ),\r\n        Container(\r\n          color: Colors.grey.withAlpha(33),\r\n          margin: const EdgeInsets.all(5),\r\n          child: CupertinoActionSheetAction(\r\n              isDefaultAction: false,\r\n              onPressed: () =>  DisplayPlugin().showAbout(context),\r\n              child: const Text(''百里·巫缨'')),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(94,48,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoActivityIndicator extends StatelessWidget {\r\n  const CustomCupertinoActivityIndicator({Key? key}) : super(key: key);\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: const [\r\n        CupertinoActivityIndicator(\r\n          animating: true,\r\n          radius: 25,\r\n        ),\r\n        CupertinoActivityIndicator(\r\n          animating: false,\r\n          radius: 25,\r\n        )\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(95,129,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomCupertinoAlertDialog extends StatelessWidget {\r\n  const CustomCupertinoAlertDialog({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildRaisedButton(context),\r\n        _buildCupertinoAlertDialog(context),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildRaisedButton(BuildContext context) =>\r\n      ElevatedButton(\r\n        style: TextButton.styleFrom(\r\n          backgroundColor: Colors.blue,\r\n          shape: const RoundedRectangleBorder(\r\n            borderRadius: BorderRadius.all(Radius.circular(10)),\r\n          ),\r\n        ),\r\n        onPressed: () {\r\n          showDialog(\r\n              context: context,\r\n              builder: (ctx) => _buildCupertinoAlertDialog(context));\r\n        },\r\n        child: const Text(\r\n          ''Just Show It !'',\r\n          style:  TextStyle(color: Colors.white),\r\n        ),\r\n      );\r\n\r\n  Widget _buildCupertinoAlertDialog(BuildContext context) {\r\n    return Material(\r\n      color: Colors.transparent,\r\n      child: CupertinoAlertDialog(\r\n          title: _buildTitle(context),\r\n          content: _buildContent(),\r\n          actions: <Widget>[\r\n            CupertinoButton(\r\n              child: const Text("Yes, Delete"),\r\n              onPressed: () => Navigator.pop(context),\r\n            ),\r\n            CupertinoButton(\r\n              child: const Text("Cancle"),\r\n              onPressed: () => Navigator.pop(context),\r\n            ),\r\n          ]),\r\n    );\r\n  }\r\n\r\n  Widget _buildTitle(context) {\r\n    return Row(\r\n        //标题\r\n        children: <Widget>[\r\n          const Icon(\r\n            CupertinoIcons.delete_solid,\r\n            color: Colors.red,\r\n          ),\r\n          const Expanded(\r\n              child: Text(\r\n            ''Delete File'',\r\n            style:  TextStyle(color: Colors.red, fontSize: 20),\r\n          )),\r\n          InkWell(\r\n            child: const Icon(CupertinoIcons.clear_thick),\r\n            onTap: () => Navigator.pop(context),\r\n          )\r\n        ]);\r\n  }\r\n\r\n  Widget _buildContent() {\r\n    return Padding(\r\n      padding: const EdgeInsets.only(top: 18.0),\r\n      child: Column(\r\n        children: const[\r\n           Text(\r\n            ''    Hi toly! If you push the conform buttom ,''\r\n            '' You will lose this file. Are you sure wand to do that?'',\r\n            style:  TextStyle(color: Color(0xff999999), fontSize: 16),\r\n            textAlign: TextAlign.justify,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(96,156,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-17\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoApp extends StatelessWidget {\r\n  const CustomCupertinoApp({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: MediaQuery.of(context).size.width,\r\n      height: MediaQuery.of(context).size.height - 200,\r\n      child: const CupertinoApp(\r\n        title: ''Flutter Demo'',\r\n        theme: CupertinoThemeData(\r\n          primaryColor: CupertinoColors.white,\r\n        ),\r\n        home: CupertinoPageScaffold(\r\n          navigationBar: CupertinoNavigationBar(\r\n            leading: Icon(\r\n              CupertinoIcons.reply,\r\n              color: CupertinoColors.black,\r\n            ),\r\n            trailing: Icon(\r\n              CupertinoIcons.share,\r\n              color: CupertinoColors.black,\r\n            ),\r\n            middle: Text(''Flutter Unit''),\r\n          ),\r\n          backgroundColor: CupertinoColors.systemBackground,\r\n          child: Center(\r\n            child: Text(''Hello, World!''),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(97,24,0,replace(replace('/// create by 张风捷特烈 on 2020-03-24\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomCupertinoButton extends StatelessWidget {\r\n  const CustomCupertinoButton({super.key});\r\n\r\n  Map<Color,double> get data => {\r\n    CupertinoColors.activeBlue:4.0,\r\n    Colors.blue:6.0,\r\n    CupertinoColors.activeOrange:8.0,\r\n  };\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children:data.keys.map((e)=> CupertinoButton(\r\n        padding: EdgeInsets.zero,\r\n        onPressed: () => Navigator.of(context).pushNamed(''AboutMePage''),\r\n        color: e,\r\n        pressedOpacity: 0.4,\r\n        borderRadius:  BorderRadius.all(Radius.circular(data[e]!)),\r\n        child: const Text("iOS"),\r\n      )).toList()\r\n    );\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(98,238,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CupertinoCheckboxDemo1 extends StatefulWidget {\r\n  const CupertinoCheckboxDemo1({super.key});\r\n\r\n  @override\r\n  State<CupertinoCheckboxDemo1> createState() => _CupertinoCheckboxDemo1State();\r\n}\r\n\r\nclass _CupertinoCheckboxDemo1State extends State<CupertinoCheckboxDemo1> {\r\n  bool? _active = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: [\r\n        CupertinoCheckbox(\r\n          value: _active,\r\n          onChanged: (bool? value) {\r\n            setState(() {\r\n              _active = value;\r\n            });\r\n          },\r\n        ),\r\n\r\n        CupertinoCheckbox(\r\n          value: _active,\r\n          checkColor: Colors.yellow,\r\n          activeColor: Colors.purple,\r\n          onChanged: (bool? value) {\r\n            setState(() {\r\n              _active = value;\r\n            });\r\n          },\r\n        ),\r\n        CupertinoCheckbox(\r\n          value: true,\r\n          inactiveColor: Colors.black.withOpacity(0.2),\r\n          onChanged: null,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(99,238,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CupertinoCheckboxDemo2 extends StatefulWidget {\r\n  const CupertinoCheckboxDemo2({super.key});\r\n\r\n  @override\r\n  State<CupertinoCheckboxDemo2> createState() => _CupertinoCheckboxDemo2State();\r\n}\r\n\r\nclass _CupertinoCheckboxDemo2State extends State<CupertinoCheckboxDemo2> {\r\n  bool? _active = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return\r\n    CupertinoCheckbox(\r\n      value: _active,\r\n      tristate: true,\r\n      onChanged: (bool? value) {\r\n        setState(() {\r\n          _active = value;\r\n        });\r\n      },\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(100,238,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CupertinoCheckboxDemo3 extends StatefulWidget {\r\n  const CupertinoCheckboxDemo3({super.key});\r\n\r\n  @override\r\n  State<CupertinoCheckboxDemo3> createState() => _CupertinoCheckboxDemo3State();\r\n}\r\n\r\nclass _CupertinoCheckboxDemo3State extends State<CupertinoCheckboxDemo3> {\r\n  bool? _active = false;\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: [\r\n        CupertinoCheckbox(\r\n          value: _active,\r\n          onChanged: (bool? value) {\r\n            setState(() {\r\n              _active = value;\r\n            });\r\n          },\r\n        ),\r\n        CupertinoCheckbox(\r\n          shape:  RoundedRectangleBorder(borderRadius: BorderRadius.circular(6)),\r\n          side: const BorderSide(color: Colors.black12),\r\n          value: _active,\r\n          onChanged: (bool? value) {\r\n            setState(() {\r\n              _active = value;\r\n            });\r\n          },\r\n        ),\r\n        CupertinoCheckbox(\r\n          shape: const StadiumBorder(),\r\n          side: const BorderSide(color: Colors.black12),\r\n          value: _active,\r\n          onChanged: (bool? value) {\r\n            setState(() {\r\n              _active = value;\r\n            });\r\n          },\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(101,143,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoContextMenu extends StatelessWidget {\r\n  const CustomCupertinoContextMenu({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: 100,\r\n      height: 100,\r\n      child: DecoratedBox(\r\n          decoration: const BoxDecoration(\r\n              image: DecorationImage(\r\n                  image: AssetImage(''assets/images/sabar_bar.webp''),\r\n                  fit: BoxFit.cover),\r\n              borderRadius: BorderRadius.all(Radius.circular(50))),\r\n          child: _buildCupertinoContextMenu(context)),\r\n    );\r\n  }\r\n\r\n  final List<String> info = const [''保存图片'', ''立刻呼叫'', ''添加到收藏夹''];\r\n\r\n  Widget _buildCupertinoContextMenu(context) => CupertinoContextMenu(\r\n      child: Container(\r\n        decoration: const BoxDecoration(\r\n            image: DecorationImage(\r\n                image: AssetImage(''assets/images/sabar_bar.webp''),\r\n                fit: BoxFit.cover),\r\n            borderRadius: BorderRadius.all(Radius.circular(50))),\r\n      ),\r\n      actions: info\r\n          .map((e) => CupertinoContextMenuAction(\r\n                child: Center(child: Text(e)),\r\n                onPressed: () => Navigator.pop(context),\r\n              ))\r\n          .toList());\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(102,144,0,replace(replace('/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/cupertino.dart'';\r\n\r\nclass CustomCupertinoContextMenuAction extends StatelessWidget {\r\n  const CustomCupertinoContextMenuAction({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n          width: 200,\r\n          margin: const EdgeInsets.all(5),\r\n          child: CupertinoContextMenuAction(\r\n              trailingIcon: CupertinoIcons.settings,\r\n              isDefaultAction: true,\r\n              onPressed: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n              child: const Text(''张风捷特烈'')),\r\n        ),\r\n        Container(\r\n          width: 200,\r\n          margin: const EdgeInsets.all(5),\r\n          child: CupertinoContextMenuAction(\r\n              trailingIcon: CupertinoIcons.home,\r\n              isDefaultAction: false,\r\n              onPressed: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n              child: const Text(''百里·巫缨'')),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(103,137,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoDatePicker extends StatefulWidget {\r\n  const CustomCupertinoDatePicker({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomCupertinoDatePickerState createState() =>\r\n      _CustomCupertinoDatePickerState();\r\n}\r\n\r\nclass _CustomCupertinoDatePickerState extends State<CustomCupertinoDatePicker> {\r\n  DateTime _date = DateTime.now();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Text(\r\n          ''当前日期:${_date.toIso8601String()}'',\r\n          style: const TextStyle(color: Colors.grey, fontSize: 16),\r\n        ),\r\n        _buildInfoTitle(''CupertinoDatePickerMode.dateAndTime''),\r\n        buildPicker(CupertinoDatePickerMode.dateAndTime),\r\n        _buildInfoTitle(''CupertinoDatePickerMode.date''),\r\n        buildPicker(CupertinoDatePickerMode.date),\r\n        _buildInfoTitle(''CupertinoDatePickerMode.time''),\r\n        buildPicker(CupertinoDatePickerMode.time),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Container buildPicker(CupertinoDatePickerMode mode) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      height: 150,\r\n      child: CupertinoDatePicker(\r\n        mode: mode,\r\n        initialDateTime: DateTime.now(),\r\n//        maximumDate: DateTime(2018,8,8),\r\n//        minimumDate: DateTime(2030,8,8),\r\n        minimumYear: 2018,\r\n        maximumYear: 2030,\r\n        use24hFormat: false,\r\n        minuteInterval: 1,\r\n        backgroundColor: CupertinoColors.white,\r\n        onDateTimeChanged: (date) {\r\n          print(date);\r\n          setState(() => _date = date);\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildInfoTitle(info){\r\n    return    Padding(\r\n      padding: const EdgeInsets.only(left: 20,top: 20,bottom: 5),\r\n      child: Text(\r\n        info,\r\n        style: const TextStyle(color: Colors.blue, fontSize: 16,fontWeight: FontWeight.bold),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(104,352,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CupertinoDialogActionDemo extends StatelessWidget {\r\n  const CupertinoDialogActionDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: [\r\n        CupertinoDialogAction(\r\n          isDestructiveAction: false,\r\n          onPressed: () => _toast(context),\r\n          child: const Text(''CupertinoDialogAction''),\r\n        ),\r\n        CupertinoDialogAction(\r\n          isDestructiveAction: true,\r\n          onPressed: () => _toast(context),\r\n          child: const Text(''CupertinoDialogAction''),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _toast(BuildContext context) {\r\n    SnackBar snackBar = SnackBar(\r\n      backgroundColor: Theme.of(context).primaryColor,\r\n      content: const Text(''CupertinoDialogAction''),\r\n    );\r\n\r\n    ScaffoldMessenger.of(context).showSnackBar(snackBar);\r\n\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(105,219,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/11\r\n/// contact me by email 1981462002@qq.com\r\n///\r\n\r\n\r\nclass CupertinoFullscreenDialogTransitionDemo extends StatelessWidget {\r\n  const CupertinoFullscreenDialogTransitionDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''和 CupertinoPageTransition 一样，该组件底层基于 SlideTransition 组件实现，''\r\n      ''主要用途是模仿 iOS 风格，用于唤出全屏对话框动画过渡效果。''\r\n      ''源码中唯一的使用处是 CupertinoPageRoute 处理路由跳转动画时，一般不会单独使用。''\r\n      ''当【route.fullscreenDialog】为 true 时，会使用 CupertinoFullscreenDialogTransition 组件，否则使用 CupertinoPageTransition 组件。''\r\n      ''其中个属性信息和 CupertinoPageTransition 组件一致，详见之。'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(106,62,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoNavigationBar extends StatelessWidget {\r\n  const CustomCupertinoNavigationBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return CupertinoNavigationBar(\r\n      leading: const Icon(\r\n        CupertinoIcons.back,\r\n        size: 25,\r\n        color: Colors.blue,\r\n      ),\r\n      middle: const Text("风雪雅舍"),\r\n      trailing: Image.asset(\r\n        "assets/images/icon_head.webp",\r\n        width: 25.0,\r\n        height: 25.0,\r\n      ),\r\n      backgroundColor: const Color(0xfff1f1f1),\r\n      padding: const EdgeInsetsDirectional.only(start: 10,end: 20),\r\n      border: Border.all(color: Colors.transparent),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(107,218,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CupertinoNavigationBarBackButtonDemo extends StatelessWidget {\r\n  const CupertinoNavigationBarBackButtonDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return CupertinoNavigationBarBackButton(\r\n      color: Colors.deepPurpleAccent,\r\n      onPressed: () => Navigator.of(context).pop(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(108,157,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoPageScaffold extends StatelessWidget {\r\n  const CustomCupertinoPageScaffold({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: MediaQuery.of(context).size.width,\r\n      height: MediaQuery.of(context).size.height - 300,\r\n      child: const CupertinoPageScaffold(\r\n        navigationBar: CupertinoNavigationBar(\r\n          leading: Icon(CupertinoIcons.reply),\r\n          trailing: Icon(CupertinoIcons.share),\r\n          middle: Text(''Flutter Unit''),\r\n        ),\r\n        backgroundColor: CupertinoColors.systemBackground,\r\n        child: Center(\r\n          child: Text(''Hello, World!''),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(109,216,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/11\r\n/// contact me by email 1981462002@qq.com\r\n///\r\n\r\nclass CupertinoPageTransitionDemo extends StatelessWidget {\r\n  const CupertinoPageTransitionDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''该组件底层基于 SlideTransition 组件实现，主要用途是模仿 iOS 风格，处理页面间跳转的过渡动画。''\r\n      ''源码中唯一的使用处是 CupertinoPageRoute 处理路由跳转动画时，一般不会单独使用。''\r\n      ''如 A 跳转到 B， primaryRouteAnimation 和 secondaryRouteAnimation 都是一个 0.0->1.0 的动画，''\r\n      ''前者用于处理 B 界面进入过渡动画；后者用于处理 A 界面被覆盖的过渡动画。'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(110,139,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoPicker extends StatelessWidget {\r\n  const CustomCupertinoPicker({Key? key}) : super(key: key);\r\n\r\n  final List<String> names = const[\r\n    ''Java'',\r\n    ''Kotlin'',\r\n    ''Dart'',\r\n    ''Swift'',\r\n    ''C++'',\r\n    ''Python'',\r\n    "JavaScript",\r\n    "PHP",\r\n    "Go",\r\n    "Object-c"\r\n  ];\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 150,\r\n      child: CupertinoPicker(\r\n          backgroundColor: CupertinoColors.systemGrey.withAlpha(33),\r\n          diameterRatio: 1,\r\n          offAxisFraction: 0.4,\r\n          squeeze: 1.5,\r\n          itemExtent: 40,\r\n          onSelectedItemChanged: (position) {\r\n            print(''当前条目  ${names[position]}'');\r\n          },\r\n          children: names.map((e) => Center(child: Text(e))).toList()),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(111,217,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CupertinoPopupSurfaceDemo extends StatelessWidget {\r\n  const CupertinoPopupSurfaceDemo({super.key});\r\n\r\n  List<int> get rainbow => [\r\n    0xffff0000,\r\n    0xffFF7F00,\r\n    0xffFFFF00,\r\n    0xff00FF00,\r\n    0xff00FFFF,\r\n    0xff0000FF,\r\n    0xff8B00FF\r\n  ];\r\n\r\n  List<double> get stops => [0.0, 1 / 6, 2 / 6, 3 / 6, 4 / 6, 5 / 6, 1.0];\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n          gradient: RadialGradient(\r\n              radius: 1.8,\r\n              stops: stops,\r\n              colors: rainbow.map((e) => Color(e)).toList())),\r\n      padding: const EdgeInsets.all(10),\r\n      child: Wrap(\r\n        spacing: 10,\r\n        children: [\r\n          buildCupertinoPopupSurface(false),\r\n          buildCupertinoPopupSurface(true),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget buildCupertinoPopupSurface(bool isSurfacePainted) {\r\n    return CupertinoPopupSurface(\r\n      isSurfacePainted: isSurfacePainted,\r\n      child: Container(\r\n        width: 150,\r\n        height: 100,\r\n        color: Colors.white.withOpacity(0.3),\r\n        alignment: Alignment.center,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(112,240,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CupertinoRadioDemo1 extends StatefulWidget {\r\n  const CupertinoRadioDemo1({super.key});\r\n\r\n  @override\r\n  State<CupertinoRadioDemo1> createState() => _CupertinoRadioDemo1State();\r\n}\r\n\r\nclass _CupertinoRadioDemo1State extends State<CupertinoRadioDemo1> {\r\n  List<int> data = [0, 1, 2, 3, 4, 5];\r\n  int _value = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 6,\r\n      children: data\r\n          .map((int value) => CupertinoRadio<int>(\r\n                value: value,\r\n                groupValue: _value,\r\n                onChanged: _onChange,\r\n              ))\r\n          .toList(),\r\n    );\r\n  }\r\n\r\n  void _onChange(int? value) {\r\n    setState(() => _value = value ?? 0);\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(113,240,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CupertinoRadioDemo2 extends StatefulWidget {\r\n  const CupertinoRadioDemo2({super.key});\r\n\r\n  @override\r\n  State<CupertinoRadioDemo2> createState() => _CupertinoRadioDemo2State();\r\n}\r\n\r\nclass _CupertinoRadioDemo2State extends State<CupertinoRadioDemo2> {\r\n  List<int> data = [0, 1, 2, 3, 4, 5];\r\n  int _value = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 6,\r\n      children: data\r\n          .map((int value) => CupertinoRadio<int>(\r\n          mouseCursor: SystemMouseCursors.click,\r\n          activeColor: Colors.purple,\r\n          fillColor: Colors.cyanAccent,\r\n          inactiveColor: Colors.cyanAccent.withOpacity(0.05),\r\n          focusColor: Colors.yellow.withOpacity(0.2),\r\n          value: value,\r\n          groupValue: _value,\r\n          onChanged: _onChange))\r\n          .toList(),\r\n    );\r\n  }\r\n\r\n  void _onChange(int? value) {\r\n    setState(() => _value = value ?? 0);\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(114,240,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\n\r\nclass CupertinoRadioDemo3 extends StatefulWidget {\r\n  const CupertinoRadioDemo3({super.key});\r\n\r\n  @override\r\n  State<CupertinoRadioDemo3> createState() => _CupertinoRadioDemo3State();\r\n}\r\n\r\nclass _CupertinoRadioDemo3State extends State<CupertinoRadioDemo3> {\r\n  List<int> data = [0, 1, 2, 3, 4, 5];\r\n  int? _value = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 6,\r\n      children: data\r\n          .map((int value) => CupertinoRadio<int>(\r\n          mouseCursor: SystemMouseCursors.click,\r\n          toggleable: true,\r\n          value: value,\r\n          groupValue: _value,\r\n          onChanged: _onChange))\r\n          .toList(),\r\n    );\r\n  }\r\n\r\n  void _onChange(int? value) {\r\n    setState(() => _value = value);\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(115,195,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoScrollbar extends StatelessWidget {\r\n  const CustomCupertinoScrollbar({super.key});\r\n\r\n  List<Color> get data =>  [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  TextStyle get textStyle => const TextStyle(color: Colors.white, shadows: [\r\n        Shadow(\r\n          color: Colors.black,\r\n          offset: Offset(.5, .5),\r\n          blurRadius: 2,\r\n        )\r\n      ]);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: CupertinoScrollbar(\r\n        child: ListView(\r\n          padding: const EdgeInsets.symmetric(horizontal: 5),\r\n          children: data\r\n              .map((color) => Container(\r\n                    alignment: Alignment.center,\r\n                    width: 100,\r\n                    height: 50,\r\n                    color: color,\r\n                    child: Text(\r\n                      colorString(color),\r\n                      style: textStyle,\r\n                    ),\r\n                  ))\r\n              .toList(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(116,262,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/6/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CupertinoSegmentedControlDemo extends StatefulWidget {\r\n  const CupertinoSegmentedControlDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CupertinoSegmentedControlDemoState createState() =>\r\n      _CupertinoSegmentedControlDemoState();\r\n}\r\n\r\nclass _CupertinoSegmentedControlDemoState\r\n    extends State<CupertinoSegmentedControlDemo> {\r\n  int _value = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return CupertinoSegmentedControl<int>(\r\n      groupValue: _value,\r\n      onValueChanged: _onValueChanged,\r\n      padding: const EdgeInsets.only(top: 20),\r\n      children: const {\r\n        1: Padding(\r\n          padding: EdgeInsets.only(left: 20, right: 20),\r\n          child: Text("混沌战士"),\r\n        ),\r\n        2: Text("青眼白龙"),\r\n        3: Text("黑魔术士"),\r\n      },\r\n    );\r\n  }\r\n\r\n  void _onValueChanged(int value) {\r\n    setState(() {\r\n      _value=value;\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(117,262,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/6/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CupertinoSegmentedControlColor extends StatefulWidget {\r\n  const CupertinoSegmentedControlColor({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CupertinoSegmentedControlColorState createState() =>\r\n      _CupertinoSegmentedControlColorState();\r\n}\r\n\r\nclass _CupertinoSegmentedControlColorState\r\n    extends State<CupertinoSegmentedControlColor> {\r\n  int _value = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return CupertinoSegmentedControl<int>(\r\n      unselectedColor: Colors.yellow,\r\n      selectedColor: Colors.green,\r\n      pressedColor: Colors.blue,\r\n      borderColor: Colors.red,\r\n      groupValue: _value,\r\n      onValueChanged: _onValueChanged,\r\n      padding: const EdgeInsets.only(top: 20),\r\n      children: const {\r\n        1: Padding(\r\n          padding: EdgeInsets.only(left: 20, right: 20),\r\n          child: Text("混沌战士"),\r\n        ),\r\n        2: Text("青眼白龙"),\r\n        3: Text("黑魔术士"),\r\n      },\r\n    );\r\n  }\r\n\r\n  void _onValueChanged(int value) {\r\n    setState(() {\r\n      _value=value;\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(118,43,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoSlider extends StatefulWidget {\r\n  const CustomCupertinoSlider({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomCupertinoSliderState createState() => _CustomCupertinoSliderState();\r\n}\r\n\r\nclass _CustomCupertinoSliderState extends State<CustomCupertinoSlider> {\r\n  double _value = 0.0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: <Widget>[\r\n        Text(''当前值:${_value.toStringAsFixed(1)}''),\r\n        CupertinoSlider(\r\n            value: _value,\r\n            divisions: 180,\r\n            min: 0.0,\r\n            max: 360.0,\r\n            activeColor: Colors.green,\r\n            thumbColor: Colors.white,\r\n            onChangeStart: (value) => print(''开始滑动:$value''),\r\n            onChangeEnd: (value) => print(''滑动结束:$value''),\r\n            onChanged: (value) {\r\n              setState(() {\r\n                _value = value;\r\n              });\r\n            }),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(119,256,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CupertinoSlidingSegmentedControlDemo extends StatefulWidget {\r\n  const CupertinoSlidingSegmentedControlDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CupertinoSlidingSegmentedControlDemoState createState() =>\r\n      _CupertinoSlidingSegmentedControlDemoState();\r\n}\r\n\r\nclass _CupertinoSlidingSegmentedControlDemoState\r\n    extends State<CupertinoSlidingSegmentedControlDemo> {\r\n  int _value = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return CupertinoSlidingSegmentedControl(\r\n      groupValue: _value,\r\n      onValueChanged: _onValueChanged,\r\n      thumbColor: Colors.amberAccent,\r\n      backgroundColor: Colors.green.withAlpha(99),\r\n      padding: const EdgeInsets.all(5),\r\n      children: const {\r\n        1: Padding(\r\n          padding: EdgeInsets.only(left: 20, right: 20),\r\n          child: Text("混沌战士"),\r\n        ),\r\n        2: Text("青眼白龙"),\r\n        3: Text("黑魔导"),\r\n      },\r\n    );\r\n  }\r\n\r\n  void _onValueChanged(int? value) {\r\n    if(value==null) return;\r\n    setState(() {\r\n      _value=value;\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(120,302,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CupertinoSliverNavigationBarDemo extends StatelessWidget {\r\n  const CupertinoSliverNavigationBarDemo({super.key});\r\n\r\n  List<Color> get data =>  [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[\r\n          CupertinoSliverNavigationBar(\r\n            trailing: const Icon(\r\n              CupertinoIcons.share,\r\n              size: 25,\r\n            ),\r\n            leading: _buildLeading(),\r\n            backgroundColor: Colors.white,\r\n            // middle: Text(''张风捷特烈''),\r\n            largeTitle: Row(\r\n              mainAxisSize: MainAxisSize.min,\r\n              children: const [\r\n                Icon(\r\n                  Icons.ac_unit,\r\n                  size: 20,\r\n                ),\r\n                Padding(\r\n                  padding: EdgeInsets.symmetric(horizontal: 8),\r\n                  child: Text(''张风捷特烈''),\r\n                ),\r\n                Icon(Icons.ac_unit, size: 20),\r\n              ],\r\n            ),\r\n          ),\r\n          _buildSliverList()\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverPrototypeExtentList(\r\n        prototypeItem: Container(\r\n          height: 40,\r\n        ),\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(121,303,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CupertinoSliverRefreshControlDemo extends StatefulWidget {\r\n  const CupertinoSliverRefreshControlDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CupertinoSliverRefreshControlDemoState createState() =>\r\n      _CupertinoSliverRefreshControlDemoState();\r\n}\r\n\r\nclass _CupertinoSliverRefreshControlDemoState\r\n    extends State<CupertinoSliverRefreshControlDemo> {\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n  final Random r = Random();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        physics: const BouncingScrollPhysics(\r\n            parent: AlwaysScrollableScrollPhysics()),\r\n        slivers: <Widget>[\r\n          _buildSliverAppBar(),\r\n          CupertinoSliverRefreshControl(\r\n            refreshIndicatorExtent: 60,\r\n            refreshTriggerPullDistance: 80,\r\n            onRefresh: _doRefresh,\r\n          ),\r\n          _buildSliverList()\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverFixedExtentList(\r\n        itemExtent: 50,\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 120.0,\r\n      leading: Container(\r\n          margin: const EdgeInsets.all(10),\r\n          child: Image.asset(''assets/images/icon_head.webp'')),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  Color randomColor() => Color.fromARGB(\r\n      r.nextInt(255), r.nextInt(255), r.nextInt(255), r.nextInt(255));\r\n\r\n  Future<void> _doRefresh() async {\r\n    await Future.delayed(const Duration(seconds: 2));\r\n    setState(() {\r\n      data.insertAll(0, [randomColor()]);\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(122,41,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoSwitch extends StatefulWidget {\r\n  const CustomCupertinoSwitch({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomCupertinoSwitchState createState() => _CustomCupertinoSwitchState();\r\n}\r\n\r\nclass _CustomCupertinoSwitchState extends State<CustomCupertinoSwitch> {\r\n  final List<Color> colors = [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green\r\n  ];\r\n\r\n  bool _checked = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      children: colors\r\n          .map((e) => CupertinoSwitch(\r\n              value: _checked,\r\n              activeColor: e,\r\n          onChanged: (v) {\r\n            setState(() => _checked = v);\r\n          })).toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(123,63,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoTabBar extends StatefulWidget {\r\n  const CustomCupertinoTabBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomCupertinoTabBarState createState() => _CustomCupertinoTabBarState();\r\n}\r\n\r\nclass _CustomCupertinoTabBarState extends State<CustomCupertinoTabBar> {\r\n  int _position = 0;\r\n  final Map<String,IconData> iconsMap = {\r\n    //底栏图标\r\n    "图鉴": Icons.home, "动态": Icons.toys,\r\n    "喜欢": Icons.favorite, "手册": Icons.class_,\r\n    "我的": Icons.account_circle,\r\n  };\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildContent(context),\r\n        _buildTabBar(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTabBar() {\r\n    return CupertinoTabBar(\r\n      currentIndex: _position,\r\n      onTap: (value) => setState(() => _position = value),\r\n      items: iconsMap.keys\r\n          .map((e) => BottomNavigationBarItem(\r\n                icon: Icon(\r\n                  iconsMap[e],\r\n                ),\r\n                label: e,\r\n              ))\r\n          .toList(),\r\n      activeColor: Colors.blue,\r\n      inactiveColor: const Color(0xff333333),\r\n      backgroundColor: const Color(0xfff1f1f1),\r\n      iconSize: 25.0,\r\n    );\r\n  }\r\n\r\n  Widget _buildContent(BuildContext context) {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      width: MediaQuery.of(context).size.width,\r\n      height: 150,\r\n      color: const Color(0xffE7F3FC),\r\n      child: Text(\r\n        iconsMap.keys.toList()[_position],\r\n        style: const TextStyle(color: Colors.blue, fontSize: 24),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(124,158,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoTabScaffold extends StatefulWidget {\r\n  const CustomCupertinoTabScaffold({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomCupertinoTabScaffoldState createState() =>\r\n      _CustomCupertinoTabScaffoldState();\r\n}\r\n\r\nclass _CustomCupertinoTabScaffoldState\r\n    extends State<CustomCupertinoTabScaffold> {\r\n  int _position = 0;\r\n  final Map<String,IconData> iconsMap = {\r\n    //底栏图标\r\n    "图鉴": Icons.home, "动态": Icons.toys,\r\n    "喜欢": Icons.favorite, "手册": Icons.class_,\r\n    "我的": Icons.account_circle,\r\n  };\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: MediaQuery.of(context).size.width,\r\n      height: MediaQuery.of(context).size.height - 300,\r\n      child: CupertinoTabScaffold(\r\n          backgroundColor: Colors.grey.withAlpha(11),\r\n          tabBar: _buildTabBar(),\r\n          tabBuilder: (_, index) => _buildContent(index)),\r\n    );\r\n  }\r\n\r\n  CupertinoTabBar _buildTabBar() => CupertinoTabBar(\r\n        currentIndex: _position,\r\n        onTap: (value) => setState(() => _position = value),\r\n        items: iconsMap.keys\r\n            .map((e) => BottomNavigationBarItem(\r\n                  icon: Icon(\r\n                    iconsMap[e],\r\n                  ),\r\n                  label: e,\r\n                ))\r\n            .toList(),\r\n        activeColor: Colors.blue,\r\n        inactiveColor: const Color(0xff333333),\r\n        backgroundColor: const Color(0xfff1f1f1),\r\n        iconSize: 25.0,\r\n      );\r\n\r\n  _buildContent(int index) => Container(\r\n      alignment: Alignment.center,\r\n      child: Text(iconsMap.keys.toList()[index]),\r\n    );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(125,229,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CupertinoTabViewDemo extends StatelessWidget {\r\n  const CupertinoTabViewDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      padding: const EdgeInsets.all(10),\r\n      child: ElevatedButton(\r\n        onPressed: () {\r\n          Navigator.push(\r\n            context,\r\n            MaterialPageRoute(\r\n                builder: (context) => const CupertinoTabViewPage()),\r\n          );\r\n        },\r\n        child: const Text("进入 CupertinoTabView 测试页"),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass CupertinoTabViewPage extends StatelessWidget {\r\n  const CupertinoTabViewPage({Key? key}) : super(key: key);\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CupertinoTabView(\r\n        routes: {\r\n          ''/'': (context) => _HomePage(),\r\n          ''/test_detail'': (context) => const DetailPage(),\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass DetailPage extends StatelessWidget {\r\n  const DetailPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return  CupertinoPageScaffold(\r\n      navigationBar: const CupertinoNavigationBar(\r\n        middle: Text(''我是详情页''),\r\n      ),\r\n      child: Center(\r\n        child: Container(\r\n          width: 200,\r\n          height: 200,\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _HomePage extends StatelessWidget {\r\n\r\n  final String info = "CupertinoTabView 可以像 MaterialApp 一样维护一个路由栈。"\r\n      "通过 routes 、onGenerateRoute 来构建路由，可以通过 navigatorObservers 监听路由。"\r\n      "在这个路由栈中可以进行指定名称跳转，如下通过 /test_detail 跳到详情页。";\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return  CupertinoPageScaffold(\r\n      navigationBar: const CupertinoNavigationBar(\r\n        middle: Text(''我是主页''),\r\n      ),\r\n      child: Center(child: Column(\r\n\r\n        children: [\r\n          const Spacer(),\r\n          Material(child: Padding(\r\n            padding: const EdgeInsets.only(left:18.0,right: 18,bottom: 20),\r\n            child: Text(info),\r\n          )),\r\n          CupertinoButton(\r\n            padding: const EdgeInsets.only(left: 10,right: 10),\r\n            color: Colors.blue,\r\n            onPressed: () {\r\n              Navigator.pushNamed(\r\n                context, "/test_detail"\r\n              );\r\n            },\r\n            child: const Text("进入详情页"),\r\n          ),\r\n          const Spacer(),\r\n        ],\r\n      )),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(126,245,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CupertinoTextFieldDemo extends StatefulWidget {\r\n  const CupertinoTextFieldDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CupertinoTextFieldDemoState createState() => _CupertinoTextFieldDemoState();\r\n}\r\n\r\nclass _CupertinoTextFieldDemoState extends State<CupertinoTextFieldDemo> {\r\n  String _value = '''';\r\n  Color _color =Colors.black;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Text(''输入了:$_value'',style: TextStyle(color: _color),),\r\n        CupertinoTextField(\r\n          placeholder: ''Input Name'',\r\n          showCursor: true,\r\n          minLines: 1,\r\n          maxLines: 4,\r\n          padding: const EdgeInsets.all(8),\r\n          onChanged: _onChanged,\r\n          onTap: _onTap,\r\n          onSubmitted: _onSubmitted,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _onChanged(String value) {\r\n    setState(() {\r\n      _value = value;\r\n    });\r\n  }\r\n\r\n  void _onTap() {\r\n    print(''----_onTap----'');\r\n    setState(() {\r\n      _color=Colors.blue;\r\n    });\r\n  }\r\n\r\n  void _onSubmitted(String value) {\r\n    print(''----_onSubmitted:$value}----'');\r\n    setState(() {\r\n      _color=Colors.black;\r\n    });\r\n  }\r\n\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(127,245,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CupertinoTextFieldStyle extends StatelessWidget {\r\n  const CupertinoTextFieldStyle({Key? key}) : super(key: key);\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const CupertinoTextField(\r\n      style: TextStyle(color: Colors.blue),\r\n      prefix: Icon(CupertinoIcons.add),\r\n      prefixMode: OverlayVisibilityMode.notEditing,\r\n      suffix: Icon(CupertinoIcons.clear),\r\n      suffixMode: OverlayVisibilityMode.editing,\r\n      cursorColor: Colors.purple,\r\n      cursorWidth: 4,\r\n      cursorRadius: Radius.circular(2),\r\n      readOnly: false,\r\n      placeholder: ''输入用户名'',\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(128,299,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CupertinoTextSelectionToolbarDemo extends StatelessWidget {\r\n  const CupertinoTextSelectionToolbarDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n        alignment: Alignment.center,\r\n        padding: const EdgeInsets.all(10),\r\n        width: 300,\r\n        child: const Text(\r\n          "注：此组件私有构造器，外部无法使用，并没有使用价值。",\r\n          style: TextStyle(color: Colors.red, fontSize: 18),\r\n        ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(129,169,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TextCupertinoTheme extends StatelessWidget {\r\n  const TextCupertinoTheme({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    CupertinoTextThemeData queryData = CupertinoTheme.of(context).textTheme;\r\n    Map<String, TextStyle> styles = {\r\n      "tabLabelTextStyle: ": queryData.tabLabelTextStyle,\r\n      "actionTextStyle: ": queryData.actionTextStyle,\r\n      "navActionTextStyle: ": queryData.navActionTextStyle,\r\n      "textStyle: ": queryData.textStyle,\r\n      "navTitleTextStyle: ": queryData.navTitleTextStyle,\r\n      "pickerTextStyle: ": queryData.pickerTextStyle,\r\n      "dateTimePickerTextStyle: ": queryData.dateTimePickerTextStyle,\r\n      "navLargeTitleTextStyle: ": queryData.navLargeTitleTextStyle,\r\n    };\r\n    TextStyle style =\r\n        const TextStyle(fontSize: 16, fontWeight: FontWeight.bold);\r\n    return Column(\r\n      children:\r\n          styles.keys.map((e) => buildItem(e, style, styles[e]!)).toList(),\r\n    );\r\n  }\r\n\r\n  Widget buildItem(String label, TextStyle labelStyle, TextStyle style) =>\r\n      Column(\r\n        children: <Widget>[\r\n          Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n              children: <Widget>[\r\n                Text(label, style: labelStyle),\r\n                Text("@toly", style: style)\r\n              ],\r\n            ),\r\n          ),\r\n          const Divider(height: 1)\r\n        ],\r\n      );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(130,169,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomCupertinoTheme extends StatelessWidget {\r\n  const CustomCupertinoTheme({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const CupertinoTheme(\r\n        data: CupertinoThemeData(\r\n            primaryColor: Colors.blue, primaryContrastingColor: Colors.green),\r\n        child: _ChildUseTheme());\r\n  }\r\n}\r\n\r\nclass _ChildUseTheme extends StatelessWidget {\r\n  const _ChildUseTheme({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        crossAxisAlignment: WrapCrossAlignment.center,\r\n        children: <Widget>[\r\n          Container(\r\n            width: 50,\r\n            height: 50,\r\n            color: CupertinoTheme.of(context).primaryContrastingColor,\r\n          ),\r\n          SizedBox(width: 150, child: Slider(value: 0.8, onChanged: (v) => {})),\r\n          SizedBox(\r\n              width: 150,\r\n              child: Divider(\r\n                color: CupertinoTheme.of(context).primaryContrastingColor,\r\n                thickness: 1,\r\n              ))\r\n        ]);\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(131,138,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomCupertinoTimerPicker extends StatefulWidget {\r\n  const CustomCupertinoTimerPicker({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomCupertinoTimerPickerState createState() =>\r\n      _CustomCupertinoTimerPickerState();\r\n}\r\n\r\nclass _CustomCupertinoTimerPickerState\r\n    extends State<CustomCupertinoTimerPicker> {\r\n  Duration _date = const Duration(seconds: 30);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Text(\r\n          ''当前时间:${_date.toString()}'',\r\n          style: const TextStyle(color: Colors.grey, fontSize: 16),\r\n        ),\r\n        _buildInfoTitle(''CupertinoTimerPickerMode.hms''),\r\n        buildPicker(CupertinoTimerPickerMode.hms),\r\n        _buildInfoTitle(''CupertinoTimerPickerMode.hm''),\r\n        buildPicker(CupertinoTimerPickerMode.hm),\r\n        _buildInfoTitle(''CupertinoTimerPickerMode.ms''),\r\n        buildPicker(CupertinoTimerPickerMode.ms),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildInfoTitle(info) {\r\n    return Padding(\r\n      padding: const EdgeInsets.only(left: 20, top: 20, bottom: 5),\r\n      child: Text(\r\n        info,\r\n        style: const TextStyle(\r\n            color: Colors.blue, fontSize: 16, fontWeight: FontWeight.bold),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget buildPicker(CupertinoTimerPickerMode mode) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      height: 150,\r\n      child: CupertinoTimerPicker(\r\n        mode: mode,\r\n        initialTimerDuration: const Duration(seconds: 30),\r\n        onTimerDurationChanged: (date) {\r\n          print(date);\r\n          setState(() => _date = date);\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(132,337,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CupertinoUserInterfaceLevelDemo extends StatelessWidget {\r\n  const CupertinoUserInterfaceLevelDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const CupertinoUserInterfaceLevel(\r\n      data: CupertinoUserInterfaceLevelData.elevated,\r\n      child: LevelShower()\r\n    );\r\n  }\r\n\r\n}\r\n\r\nclass LevelShower extends StatelessWidget {\r\n  const LevelShower({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    CupertinoUserInterfaceLevelData data = CupertinoUserInterfaceLevel.of(context);\r\n    return Container(\r\n      height: 150,\r\n      alignment: Alignment.center,\r\n      color: Theme.of(context).primaryColor.withOpacity(0.1),\r\n      child: Text(data.toString()),\r\n    );\r\n  }\r\n}\r\n\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(133,341,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/6/6\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\n\r\nclass CustomMultiChildLayoutNode1 extends StatelessWidget {\r\n  const CustomMultiChildLayoutNode1({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 300,\r\n      height: 150,\r\n      color: Colors.grey.withAlpha(33),\r\n      child: CustomMultiChildLayout(\r\n        delegate: CornerCustomMultiChildLayout(\r\n          padding:const EdgeInsets.only(left: 10,top: 5,right: 10,bottom: 5),\r\n        ),\r\n        children: [\r\n           LayoutId(id: CornerType.topLeft, child: const Box50(Colors.red)),\r\n           LayoutId(id: CornerType.topRight, child: const Box50(Colors.yellow)),\r\n           LayoutId(id: CornerType.bottomLeft, child: const Box50(Colors.blue)),\r\n           LayoutId(id: CornerType.bottomRight, child: const Box50(Colors.green)),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n// 50 颜色盒\r\nclass Box50 extends StatelessWidget {\r\n  final Color color;\r\n  const Box50(this.color, {Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 50,\r\n      height: 50,\r\n      color: color,\r\n    );\r\n  }\r\n}\r\n\r\n\r\nenum CornerType{\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight\r\n}\r\n\r\n\r\nclass CornerCustomMultiChildLayout extends MultiChildLayoutDelegate{\r\n  final EdgeInsets padding;\r\n  \r\n  CornerCustomMultiChildLayout({this.padding = EdgeInsets.zero});\r\n\r\n  @override\r\n  void performLayout(Size size) {\r\n    if (hasChild(CornerType.topLeft)) {\r\n      layoutChild(CornerType.topLeft, BoxConstraints.loose(size));\r\n      positionChild(CornerType.topLeft, Offset.zero.translate(padding.left, padding.top));\r\n    }\r\n    if (hasChild(CornerType.topRight)) {\r\n      var childSize = layoutChild(CornerType.topRight, BoxConstraints.loose(size));\r\n      positionChild(CornerType.topRight, Offset(size.width-childSize.width,0).translate(-padding.right, padding.top));\r\n    }\r\n    if (hasChild(CornerType.bottomLeft)) {\r\n      var childSize = layoutChild(CornerType.bottomLeft, BoxConstraints.loose(size));\r\n      positionChild(CornerType.bottomLeft, Offset(0,size.height-childSize.height).translate(padding.left, -padding.bottom));\r\n    }\r\n    if (hasChild(CornerType.bottomRight)) {\r\n      var childSize = layoutChild(CornerType.bottomRight, BoxConstraints.loose(size));\r\n      positionChild(CornerType.bottomRight, Offset(size.width-childSize.width,size.height-childSize.height).translate(-padding.right, -padding.bottom));\r\n    }\r\n  }\r\n\r\n  @override\r\n  bool shouldRelayout(CornerCustomMultiChildLayout oldDelegate) => oldDelegate.padding!=padding;\r\n  \r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(134,166,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ClockPage extends StatelessWidget {\r\n  const ClockPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: MediaQuery.of(context).size.width,\r\n      height: 100,\r\n      child:RepaintBoundary(\r\n        child: CustomPaint(//使用CustomPaint盛放画布\r\n            painter: ClockPainter(),\r\n        ),\r\n      ),\r\n    )\r\n    ;\r\n  }\r\n}\r\n\r\nclass ClockPainter extends CustomPainter {\r\n  late Paint _paint;\r\n  final double _radius = 3.0; //小球半径\r\n  final Path _path = Path(); //画笔对象\r\n  ClockPainter () {\r\n    _paint = Paint()..color= const Color(0xff45d0fd)..isAntiAlias=true;\r\n    _path.addOval(Rect.fromCircle(radius: _radius, center: const Offset(0, 0))); //小球路径\r\n  }\r\n\r\n  @override\r\n  void paint(Canvas canvas, Size size) {\r\n    print(size);\r\n    canvas.clipRect(Offset.zero & size);\r\n    canvas.translate(size.width/2-65*2, 0);\r\n    renderDigit(1, canvas);//渲染数字\r\n    canvas.translate(65, 0);//平移画布\r\n    renderDigit(9, canvas);\r\n    canvas.translate(65, 0); renderDigit(9, canvas);\r\n    canvas.translate(65, 0); renderDigit(4, canvas);\r\n  }\r\n  //渲染数字  num  ：要显示的数字   canvas ：画布\r\n  void renderDigit(int num, Canvas canvas) {\r\n    if (num > 10) {  return; }\r\n    for (int i = 0; i < digit[num].length; i++) {\r\n      for (int j = 0; j < digit[num][j].length; j++) {\r\n        if (digit[num][i][j] == 1) {\r\n          canvas.save();\r\n          double rX = j * 2 * (_radius + 1) + (_radius + 1); //第(i，j)个点圆心横坐标\r\n          double rY = i * 2 * (_radius + 1) + (_radius + 1); //第(i，j)个点圆心纵坐标\r\n          canvas.translate(rX, rY);\r\n          canvas.drawPath(_path, _paint);\r\n          canvas.restore();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @override\r\n  bool shouldRepaint(CustomPainter oldDelegate)=> false;\r\n}\r\n\r\nconst digit = [\r\n  [\r\n    [0, 0, 1, 1, 1, 0, 0],\r\n    [0, 1, 1, 0, 1, 1, 0],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [0, 1, 1, 0, 1, 1, 0],\r\n    [0, 0, 1, 1, 1, 0, 0]\r\n  ], //0\r\n\r\n  [\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 1, 1, 1, 1, 0, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 1]\r\n  ], //1\r\n  [\r\n    [0, 1, 1, 1, 1, 1, 0],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 1, 1, 0, 0, 0],\r\n    [0, 1, 1, 0, 0, 0, 0],\r\n    [1, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 1, 1, 1, 1, 1]\r\n  ], //2\r\n  [\r\n    [1, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 1, 1, 1, 0, 0],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [0, 1, 1, 1, 1, 1, 0]\r\n  ], //3\r\n\r\n  [\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 1, 1, 1, 0],\r\n    [0, 0, 1, 1, 1, 1, 0],\r\n    [0, 1, 1, 0, 1, 1, 0],\r\n    [1, 1, 0, 0, 1, 1, 0],\r\n    [1, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 1, 1, 1, 1]\r\n  ], //4\r\n  [\r\n    [1, 1, 1, 1, 1, 1, 1],\r\n    [1, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 0],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [0, 1, 1, 1, 1, 1, 0]\r\n  ], //5\r\n  [\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 1, 1, 0, 0, 0],\r\n    [0, 1, 1, 0, 0, 0, 0],\r\n    [1, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 0, 1, 1, 1, 0],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [0, 1, 1, 1, 1, 1, 0]\r\n  ], //6\r\n  [\r\n    [1, 1, 1, 1, 1, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 0, 1, 1, 0, 0, 0],\r\n    [0, 0, 1, 1, 0, 0, 0],\r\n    [0, 0, 1, 1, 0, 0, 0],\r\n    [0, 0, 1, 1, 0, 0, 0]\r\n  ], //7\r\n  [\r\n    [0, 1, 1, 1, 1, 1, 0],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [0, 1, 1, 1, 1, 1, 0],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [0, 1, 1, 1, 1, 1, 0]\r\n  ], //8\r\n  [\r\n    [0, 1, 1, 1, 1, 1, 0],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [1, 1, 0, 0, 0, 1, 1],\r\n    [0, 1, 1, 1, 0, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 1],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 0, 0, 1, 1, 0, 0],\r\n    [0, 1, 1, 0, 0, 0, 0]\r\n  ], //9\r\n  [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 1, 1, 0],\r\n    [0, 1, 1, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 1, 1, 0],\r\n    [0, 1, 1, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0]\r\n  ] //:\r\n];\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(135,166,0,replace(replace('import ''dart:ui'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-28\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PlayBezier3Page extends StatefulWidget {\r\n  const PlayBezier3Page({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _PlayBezier3PageState createState() => _PlayBezier3PageState();\r\n}\r\n\r\nclass _PlayBezier3PageState extends State<PlayBezier3Page> {\r\n  List<Offset> _pos = <Offset>[];\r\n  int selectPos=0;\r\n\r\n  @override\r\n  void initState() {\r\n    _initPoints();\r\n    super.initState();\r\n  }\r\n\r\n  void _initPoints() {\r\n    _pos = [];\r\n    _pos.add(const Offset(0, 0));\r\n    _pos.add(const Offset(60, -60));\r\n    _pos.add(const Offset(-90, -90));\r\n    _pos.add(const Offset(-120, -40));\r\n  }\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      width: MediaQuery.of(context).size.width,\r\n      child: RepaintBoundary(\r\n        child: CustomPaint(\r\n          painter: BezierPainter(pos: _pos, selectPos: selectPos),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass BezierPainter extends CustomPainter {\r\n late Paint _gridPaint;\r\n late Path _gridPath;\r\n\r\n late Paint _mainPaint;\r\n late Path _mainPath;\r\n  int? selectPos;\r\n late Paint _helpPaint;\r\n\r\n  List<Offset> pos;\r\n\r\n  BezierPainter({this.pos=const [], this.selectPos}) {\r\n    _gridPaint = Paint()..style = PaintingStyle.stroke;\r\n    _gridPath = Path();\r\n\r\n    _mainPaint = Paint()\r\n      ..color = Colors.orange\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeWidth = 2;\r\n    _mainPath = Path();\r\n\r\n    _helpPaint = Paint()\r\n      ..color = Colors.purple\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeWidth = 2\r\n      ..strokeCap = StrokeCap.round;\r\n  }\r\n\r\n  @override\r\n  void paint(Canvas canvas, Size size) {\r\n    canvas.clipRect(Offset.zero & size);\r\n    canvas.translate(size.width / 2, size.height / 2);\r\n    _drawGrid(canvas, size); //绘制格线\r\n    _drawAxis(canvas, size); //绘制轴线\r\n\r\n    _mainPath.moveTo(pos[0].dx, pos[0].dy);\r\n    _mainPath.cubicTo(\r\n        pos[1].dx, pos[1].dy, pos[2].dx, pos[2].dy, pos[3].dx, pos[3].dy);\r\n    canvas.drawPath(_mainPath, _mainPaint);\r\n    _drawHelp(canvas);\r\n    _drawSelectPos(canvas);\r\n  }\r\n\r\n  @override\r\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\r\n\r\n  void _drawGrid(Canvas canvas, Size size) {\r\n    _gridPaint\r\n      ..color = Colors.grey\r\n      ..strokeWidth = 0.5;\r\n    _gridPath = _buildGridPath(_gridPath, size);\r\n    canvas.drawPath(_buildGridPath(_gridPath, size), _gridPaint);\r\n\r\n    canvas.save();\r\n    canvas.scale(1, -1); //沿x轴镜像\r\n    canvas.drawPath(_gridPath, _gridPaint);\r\n    canvas.restore();\r\n\r\n    canvas.save();\r\n    canvas.scale(-1, 1); //沿y轴镜像\r\n    canvas.drawPath(_gridPath, _gridPaint);\r\n    canvas.restore();\r\n\r\n    canvas.save();\r\n    canvas.scale(-1, -1); //沿原点镜像\r\n    canvas.drawPath(_gridPath, _gridPaint);\r\n    canvas.restore();\r\n  }\r\n\r\n  void _drawAxis(Canvas canvas, Size size) {\r\n    canvas.drawPoints(\r\n        PointMode.lines,\r\n        [\r\n          Offset(-size.width / 2, 0),\r\n          Offset(size.width / 2, 0),\r\n          Offset(0, -size.height / 2),\r\n          Offset(0, size.height / 2),\r\n          Offset(0, size.height / 2),\r\n          Offset(0 - 7.0, size.height / 2 - 10),\r\n          Offset(0, size.height / 2),\r\n          Offset(0 + 7.0, size.height / 2 - 10),\r\n          Offset(size.width / 2, 0),\r\n          Offset(size.width / 2 - 10, 7),\r\n          Offset(size.width / 2, 0),\r\n          Offset(size.width / 2 - 10, -7),\r\n        ],\r\n        _gridPaint\r\n          ..color = Colors.blue\r\n          ..strokeWidth = 1.5);\r\n  }\r\n\r\n  Path _buildGridPath(Path path, Size size, {step = 20.0}) {\r\n    for (int i = 0; i < size.height / 2 / step; i++) {\r\n      path.moveTo(0, step * i);\r\n      path.relativeLineTo(size.width / 2, 0);\r\n    }\r\n    for (int i = 0; i < size.width / 2 / step; i++) {\r\n      path.moveTo(step * i, 0);\r\n      path.relativeLineTo(\r\n        0,\r\n        size.height / 2,\r\n      );\r\n    }\r\n    return path;\r\n  }\r\n\r\n  void _drawHelp(Canvas canvas) {\r\n    canvas.drawPoints(PointMode.lines, pos, _helpPaint..strokeWidth = 1);\r\n    canvas.drawPoints(PointMode.points, pos, _helpPaint..strokeWidth = 8);\r\n  }\r\n\r\n  void _drawSelectPos(Canvas canvas) {\r\n    if (selectPos == null) return;\r\n    canvas.drawCircle(\r\n        pos[selectPos!],\r\n        10,\r\n        _helpPaint\r\n          ..color = Colors.green\r\n          ..strokeWidth = 2);\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(136,183,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomScrollViewDemo extends StatelessWidget {\r\n  const CustomScrollViewDemo({super.key});\r\n\r\n  List<Color> get data =>  [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        anchor: 0,\r\n        scrollDirection: Axis.vertical,\r\n        reverse: false,\r\n        slivers: <Widget>[_buildSliverAppBar(), _buildSliverFixedExtentList()],\r\n      ),\r\n    );\r\n  }\r\n\r\n  TextStyle get textStyle => const TextStyle(color: Colors.white, shadows: [\r\n        Shadow(\r\n          color: Colors.black,\r\n          offset: Offset(.5, .5),\r\n          blurRadius: 2,\r\n        )\r\n      ]);\r\n\r\n  Widget _buildSliverFixedExtentList() => SliverFixedExtentList(\r\n        itemExtent: 60,\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 50,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: textStyle,\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: Container(\r\n          margin: const EdgeInsets.all(10),\r\n          child: Image.asset(''assets/images/icon_head.webp'')),\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        title: const Text(\r\n          ''张风捷特烈'',\r\n          style: TextStyle(color: Colors.black, //标题\r\n              shadows: [\r\n                Shadow(\r\n                  color: Colors.blue,\r\n                  offset: Offset(1, 1),\r\n                  blurRadius: 2,\r\n                )\r\n              ]),\r\n        ),\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(137,285,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/6/3\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomSingleChildLayoutDemo extends StatelessWidget {\r\n  const CustomSingleChildLayoutDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    print(''-------CustomSingleChildLayoutDemo------'');\r\n    return Container(\r\n      width: 300,\r\n      height: 200,\r\n      color: Colors.grey.withAlpha(11),\r\n      child: CustomSingleChildLayout(\r\n        delegate: _TolySingleChildLayoutDelegate(),\r\n        child: Container(\r\n          color: Colors.orange,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _TolySingleChildLayoutDelegate extends SingleChildLayoutDelegate {\r\n  @override\r\n  bool shouldRelayout(SingleChildLayoutDelegate oldDelegate) {\r\n    return true;\r\n  }\r\n\r\n  @override\r\n  Size getSize(BoxConstraints constraints) {\r\n    print(''----getSize:----constraints:$constraints----'');\r\n    return super.getSize(constraints);\r\n  }\r\n\r\n  @override\r\n  Offset getPositionForChild(Size size, Size childSize) {\r\n    print(''----getPositionForChild: size:$size----childSize:$childSize----'');\r\n    return Offset(size.width / 2, 0);\r\n  }\r\n\r\n  @override\r\n  BoxConstraints getConstraintsForChild(BoxConstraints constraints) {\r\n    print(''----getConstraintsForChild:----constraints:$constraints----'');\r\n    return BoxConstraints(\r\n      maxWidth: constraints.maxWidth / 2,\r\n      maxHeight: constraints.maxHeight / 2,\r\n      minHeight: constraints.maxHeight / 4,\r\n      minWidth: constraints.maxWidth / 4,\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(138,285,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/6/3\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass OffSetWidgetDemo extends StatelessWidget {\r\n  const OffSetWidgetDemo({Key? key}) : super(key: key);\r\n\r\n  final List<Map<String, dynamic>> data = const [\r\n    {\r\n      ''offset'': Offset(20, 20),\r\n      ''direction'': Direction.topLeft,\r\n    },\r\n    {\r\n      ''offset'': Offset(20, -15),\r\n      ''direction'': Direction.topRight,\r\n    },\r\n    {\r\n      ''offset'': Offset(-15, 20),\r\n      ''direction'': Direction.bottomLeft,\r\n    },\r\n    {\r\n      ''offset'': Offset(-15, 20),\r\n      ''direction'': Direction.bottomLeft,\r\n    },\r\n    {\r\n      ''offset'': Offset(15, 20),\r\n      ''direction'': Direction.bottomLeft,\r\n    },\r\n    {\r\n      ''offset'': Offset(-15, -15),\r\n      ''direction'': Direction.topRight,\r\n    },\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        spacing: 20,\r\n        runSpacing: 20,\r\n        children: data\r\n            .map((e) => Container(\r\n                width: 150,\r\n                height: 100,\r\n                alignment: Alignment.topRight,\r\n                color: Colors.grey.withAlpha(11),\r\n                child: OffSetWidget(\r\n                  offset: e[''offset''],\r\n                  direction: e[''direction''],\r\n                  child: const Icon(\r\n                    Icons.android,\r\n                    size: 30,\r\n                    color: Colors.green,\r\n                  ),\r\n                )))\r\n            .toList());\r\n  }\r\n}\r\n\r\nclass OffSetWidget extends StatelessWidget {\r\n  final Offset offset;\r\n  final Widget child;\r\n  final Direction direction;\r\n\r\n  const OffSetWidget(\r\n      {Key? key, this.offset = Offset.zero,\r\n      required this.child,\r\n      this.direction = Direction.topLeft}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return CustomSingleChildLayout(\r\n      delegate: _OffSetDelegate(offset: offset, direction: direction),\r\n      child: child,\r\n    );\r\n  }\r\n}\r\n\r\nenum Direction { topLeft, topRight, bottomLeft, bottomRight }\r\n\r\nclass _OffSetDelegate extends SingleChildLayoutDelegate {\r\n  final Offset offset;\r\n  final Direction direction;\r\n\r\n  _OffSetDelegate({\r\n    this.offset = Offset.zero,\r\n    this.direction = Direction.topLeft,\r\n  });\r\n\r\n  @override\r\n  bool shouldRelayout(_OffSetDelegate oldDelegate) =>\r\n      offset != oldDelegate.offset;\r\n\r\n  @override\r\n  Offset getPositionForChild(Size size, Size childSize) {\r\n    double w = size.width;\r\n    double h = size.height;\r\n    double wc = childSize.width;\r\n    double hc = childSize.height;\r\n\r\n    switch (direction) {\r\n      case Direction.topLeft:\r\n        return offset;\r\n      case Direction.topRight:\r\n        return offset.translate(w - wc - offset.dx * 2, 0);\r\n      case Direction.bottomLeft:\r\n        return offset.translate(0, h - hc - offset.dy * 2);\r\n      case Direction.bottomRight:\r\n        return offset.translate(w - wc - offset.dx * 2, h - hc - offset.dy * 2);\r\n    }\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(139,102,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass _Bean {\r\n  final int id;\r\n  final String name;\r\n  final String type;\r\n\r\n  _Bean(this.id, this.name, this.type);\r\n}\r\n\r\nclass CustomDataTable extends StatelessWidget {\r\n  const CustomDataTable({super.key});\r\n\r\n   List<_Bean> get data => [\r\n    _Bean(101, ''DataTable'', ''StatelessWidget''),\r\n    _Bean(44, ''RangeSlider'', ''StatefulWidget''),\r\n    _Bean(2, ''Text'', ''StatelessWidget''),\r\n    _Bean(1, ''Image'', ''StatefulWidget''),\r\n  ];\r\n   List<String> get columns => [''id'', ''名称'', ''类型''];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return DataTable(\r\n        columns: columns\r\n            .map((String title) => DataColumn(label: Text(title)))\r\n            .toList(),\r\n        rows: data\r\n            .map((_Bean bean) => DataRow(cells: [\r\n                  DataCell(Text(''${bean.id}'')),\r\n                  DataCell(Text(bean.name)),\r\n                  DataCell(Text(bean.type)),\r\n                ]))\r\n            .toList());\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(140,102,0,replace(replace('\r\n\r\n/// create by 张风捷特烈 on 2020/4/25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass _BeanOp {\r\n  final int id;\r\n  final String name;\r\n  final String type;\r\n  bool select;\r\n\r\n  _BeanOp(this.id, this.name, this.type, this.select);\r\n\r\n  @override\r\n  String toString() {\r\n    return ''_BeanOp{id: $id, name: $name, type: $type, select: $select}'';\r\n  }\r\n}\r\n\r\nclass SortDataTable extends StatefulWidget {\r\n  const SortDataTable({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SortDataTableState createState() => _SortDataTableState();\r\n}\r\n\r\nclass _SortDataTableState extends State<SortDataTable> {\r\n  List<_BeanOp> data = [\r\n    _BeanOp(101, ''DataTable'', ''StatelessWidget'', false),\r\n    _BeanOp(44, ''RangeSlider'', ''StatefulWidget'', false),\r\n    _BeanOp(2, ''Text'', ''StatelessWidget'', false),\r\n    _BeanOp(1, ''Image'', ''StatefulWidget'', false),\r\n  ];\r\n\r\n  bool _sortAscending = false;\r\n  List<_BeanOp> selectData = <_BeanOp>[];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return DataTable(\r\n        columnSpacing: 20,\r\n        sortColumnIndex: 1,\r\n        sortAscending: _sortAscending,\r\n        columns: [\r\n          DataColumn(\r\n            label: Checkbox(\r\n              value: selectData.length == data.length,\r\n              onChanged: _onSelectAll,\r\n            ),\r\n          ),\r\n          DataColumn(label: const Text(''id''), numeric: false, onSort: _onSortId),\r\n          const DataColumn(label: Text(''名称'')),\r\n          const DataColumn(label: Text(''类型'')),\r\n        ],\r\n        rows: data\r\n            .map((e) => DataRow(selected: false, cells: [\r\n          DataCell(Checkbox(\r\n            value: e.select,\r\n            onChanged: (v) => _onSelectOne(v, e),\r\n          )),\r\n          DataCell(Text(''${e.id}'')),\r\n          DataCell(Text(e.name),\r\n              showEditIcon: true, onTap: () {}),\r\n          DataCell(Text(e.type)),\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  _onSortId(int index, bool ascending) {\r\n    setState(() {\r\n      _sortAscending = ascending;\r\n      data.sort(\r\n              (a, b) => ascending ? a.id.compareTo(b.id) : b.id.compareTo(a.id));\r\n    });\r\n  }\r\n\r\n  void _onSelectOne(bool? selected, _BeanOp e) {\r\n    if(selected==null) return;\r\n    setState(() {\r\n      if (selected) {\r\n        selectData.add(e);\r\n      } else {\r\n        selectData.remove(e);\r\n      }\r\n      e.select = selected;\r\n    });\r\n  }\r\n\r\n  void _onSelectAll(bool? select) {\r\n    if(select==null) return;\r\n    setState(() {\r\n      if (select) {\r\n        for (_BeanOp e in data) {\r\n          e.select = true;\r\n        }\r\n        selectData = data.map((e) => e).toList();\r\n      } else {\r\n        for (_BeanOp e in data) {\r\n          e.select = false;\r\n        }\r\n        selectData = [];\r\n      }\r\n    });\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(141,339,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:intl/intl.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DateRangePickerDialogDemo extends StatefulWidget {\r\n  const DateRangePickerDialogDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DateRangePickerDialogDemoState createState() =>\r\n      _DateRangePickerDialogDemoState();\r\n}\r\n\r\nclass _DateRangePickerDialogDemoState\r\n    extends State<DateRangePickerDialogDemo> {\r\n  String _dateRange = '''';\r\n\r\n  // 需要 intl 包\r\n  final DateFormat format = DateFormat(''yyyy-MM-dd'');\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    String info = _dateRange.isEmpty ? ''选择日期范围'' : _dateRange;\r\n\r\n    return Center(\r\n      child: Wrap(\r\n        alignment: WrapAlignment.center,\r\n        direction: Axis.vertical,\r\n        crossAxisAlignment: WrapCrossAlignment.center,\r\n        children: [\r\n          ElevatedButton(\r\n            onPressed: _show,\r\n            child: const Text(''选择''),\r\n          ),\r\n          Text(\r\n            info,\r\n            style: const TextStyle(color: Colors.grey),\r\n          )\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _show() async {\r\n    DateTime firstDate = DateTime(2021, 1, 1);\r\n    DateTime lastDate = DateTime.now();\r\n    DateTime start = lastDate.add(const Duration(days: -8));\r\n    DateTime end = lastDate.add(const Duration(days: -2));\r\n    DateTimeRange? range = await showDateRangePicker(\r\n      context: context,\r\n      firstDate: firstDate,\r\n      lastDate: lastDate,\r\n      initialDateRange: DateTimeRange(\r\n        start: start,\r\n        end: end,\r\n      ),\r\n      saveText: "确定",\r\n    );\r\n    if (range != null) {\r\n      setState(() {\r\n        _dateRange =\r\n        "${format.format(range.start)} ~ ${format.format(range.end)}";\r\n      });\r\n    }\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(142,339,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:intl/intl.dart'';\r\nimport ''toly_date_picker.dart'' as toly;\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DiyDateRangePickerDialogDemo extends StatefulWidget {\r\n  const DiyDateRangePickerDialogDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DiyDateRangePickerDialogDemoState createState() =>\r\n      _DiyDateRangePickerDialogDemoState();\r\n}\r\n\r\nclass _DiyDateRangePickerDialogDemoState\r\n    extends State<DiyDateRangePickerDialogDemo> {\r\n  String _dateRange = '''';\r\n\r\n  // 需要 intl 包\r\n  final DateFormat format = DateFormat(''yyyy-MM-dd'');\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    String info = _dateRange.isEmpty ? ''选择日期范围'' : _dateRange;\r\n\r\n    return Center(\r\n      child: Wrap(\r\n        alignment: WrapAlignment.center,\r\n        direction: Axis.vertical,\r\n        crossAxisAlignment: WrapCrossAlignment.center,\r\n        children: [\r\n          ElevatedButton(\r\n            onPressed: _show,\r\n            child: const Text(''选择''),\r\n          ),\r\n          Text(\r\n            info,\r\n            style: const TextStyle(color: Colors.grey),\r\n          )\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _show() async {\r\n    DateTime firstDate = DateTime(2021, 1, 1);\r\n    DateTime lastDate = DateTime.now();\r\n    DateTime start = lastDate.add(const Duration(days: -8));\r\n    DateTime end = lastDate.add(const Duration(days: -2));\r\n    DateTimeRange? range = await toly.showDateRangePicker(\r\n      context: context,\r\n      firstDate: firstDate,\r\n      lastDate: lastDate,\r\n      initialDateRange: DateTimeRange(\r\n        start: start,\r\n        end: end,\r\n      ),\r\n      saveText: "确定",\r\n    );\r\n    if (range != null) {\r\n      setState(() {\r\n        _dateRange =\r\n        "${format.format(range.start)} ~ ${format.format(range.end)}";\r\n      });\r\n    }\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(143,70,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass BoxDecorationDemo extends StatelessWidget {\r\n  const BoxDecorationDemo({Key? key}) : super(key: key);\r\n\r\n  final List<int> rainbow = const [\r\n    0xffff0000,\r\n    0xffFF7F00,\r\n    0xffFFFF00,\r\n    0xff00FF00,\r\n    0xff00FFFF,\r\n    0xff0000FF,\r\n    0xff8B00FF\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return DecoratedBox(\r\n      position: DecorationPosition.background,\r\n      decoration: BoxDecoration(\r\n          gradient: LinearGradient(\r\n              stops: const [0.0, 1 / 6, 2 / 6, 3 / 6, 4 / 6, 5 / 6, 1.0],\r\n              colors: rainbow.map((e) => Color(e)).toList()),\r\n          borderRadius: const BorderRadius.only(\r\n            topLeft: Radius.circular(20),\r\n            bottomRight: Radius.circular(20),\r\n          ),\r\n          boxShadow: const [\r\n            BoxShadow(\r\n                color: Colors.orangeAccent,\r\n                offset: Offset(1, 1),\r\n                blurRadius: 10,\r\n                spreadRadius: 1),\r\n          ]),\r\n      child: Icon(\r\n        Icons.android,\r\n        size: 80,\r\n        color: Colors.black.withAlpha(123),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(144,70,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ShapeImageDemo extends StatelessWidget {\r\n  const ShapeImageDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const DecoratedBox(\r\n      decoration: BoxDecoration(\r\n          shape: BoxShape.circle,\r\n          image: DecorationImage(\r\n              fit: BoxFit.cover,\r\n              image: AssetImage(\r\n                ''assets/images/wy_200x300.webp'',\r\n              ))),\r\n      child: SizedBox(\r\n        height: 80,\r\n        width: 80,\r\n        child: Icon(\r\n          Icons.ac_unit,\r\n          color: Colors.white,\r\n          size: 40,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(145,70,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass BorderDemo extends StatelessWidget {\r\n  const BorderDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return DecoratedBox(\r\n      position: DecorationPosition.foreground,\r\n      decoration: const BoxDecoration(\r\n        border: Border(\r\n            bottom: BorderSide(color: Colors.orange, width: 2),\r\n            top: BorderSide(color: Colors.orange, width: 2)),\r\n      ),\r\n      child: SizedBox(\r\n        height: 80,\r\n        width: 100,\r\n        child: Image.asset(\r\n          ''assets/images/wy_200x300.webp'',\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(146,70,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ShapeDecorationDemo extends StatelessWidget {\r\n  const ShapeDecorationDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const DecoratedBox(\r\n      decoration: ShapeDecoration(\r\n          shadows: [\r\n            BoxShadow(\r\n                color: Colors.orangeAccent,\r\n                offset: Offset(0, 0),\r\n                blurRadius: 2,\r\n                spreadRadius: 1),\r\n          ],\r\n          image: DecorationImage(\r\n              fit: BoxFit.cover,\r\n              image: AssetImage(\r\n                ''assets/images/wy_200x300.webp'',\r\n              )),\r\n          shape: CircleBorder(\r\n            side: BorderSide(width: 1.0, color: Colors.orangeAccent),\r\n          )),\r\n      child: SizedBox(\r\n        height: 100,\r\n        width: 100,\r\n        child: Icon(\r\n          Icons.ac_unit,\r\n          color: Colors.white,\r\n          size: 40,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(147,70,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass UnderlineTabIndicatorDemo extends StatelessWidget {\r\n  const UnderlineTabIndicatorDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const DecoratedBox(\r\n      decoration: UnderlineTabIndicator(\r\n          insets: EdgeInsets.symmetric(horizontal: 5, vertical: -5),\r\n          borderSide: BorderSide(color: Colors.orange, width: 2)),\r\n      child: Icon(\r\n        Icons.ac_unit,\r\n        color: Colors.blue,\r\n        size: 40,\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(148,70,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass FlutterLogoDecorationDemo extends StatelessWidget {\r\n  const FlutterLogoDecorationDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const DecoratedBox(\r\n      decoration: FlutterLogoDecoration(\r\n//          darkColor: Colors.orange,\r\n//          lightColor: Colors.deepPurpleAccent,\r\n          margin: EdgeInsets.all(8),\r\n          style: FlutterLogoStyle.stacked),\r\n      child: SizedBox(\r\n        width: 100,\r\n        height: 100,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(149,113,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomDecoratedBoxTransition extends StatefulWidget {\r\n  const CustomDecoratedBoxTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomDecoratedBoxTransitionState createState() =>\r\n      _CustomDecoratedBoxTransitionState();\r\n}\r\n\r\nclass _CustomDecoratedBoxTransitionState\r\n    extends State<CustomDecoratedBoxTransition>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    _ctrl = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 1),\r\n    );\r\n    _ctrl.forward();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n        onTap: () => _ctrl.forward(from:  0),\r\n        child: SizedBox(\r\n          width: 200,\r\n          height: 100,\r\n          child: DecoratedBoxTransition(\r\n            position: DecorationPosition.background,\r\n            decoration: DecorationTween(\r\n                begin: const BoxDecoration(\r\n                    color: Colors.greenAccent,\r\n                    borderRadius: BorderRadius.all(Radius.circular(50)),\r\n                    boxShadow: [\r\n                      BoxShadow(\r\n                          offset: Offset(1, 1),\r\n                          color: Colors.purple,\r\n                          blurRadius: 3,\r\n                          spreadRadius: 1)\r\n                    ]),\r\n                end: const BoxDecoration(\r\n                    color: Colors.orange,\r\n                    borderRadius: BorderRadius.all(Radius.circular(10)),\r\n                    boxShadow: [\r\n                      BoxShadow(\r\n                          offset: Offset(1, 1),\r\n                          color: Colors.blue,\r\n                          blurRadius: 1,\r\n                          spreadRadius: 0)\r\n                    ])).animate(_ctrl),\r\n            child: const Icon(Icons.android, color: Colors.white, size: 60),\r\n          ),\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(150,209,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/8/18\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DecorationSliverDemo extends StatelessWidget {\r\n  const DecorationSliverDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[\r\n          SliverPadding(\r\n            padding: const EdgeInsets.all(8),\r\n            sliver: DecoratedSliver(\r\n              decoration: BoxDecoration(\r\n                borderRadius: BorderRadius.circular(20),\r\n                boxShadow: const [\r\n                  BoxShadow(\r\n                      color: Color(0xFF111133),\r\n                      blurRadius: 2,\r\n                      offset: Offset(-2, -1))\r\n                ],\r\n                gradient: LinearGradient(\r\n                  colors: const <Color>[\r\n                    Color(0xFFEEEEEE),\r\n                    Color(0xFF111133),\r\n                  ],\r\n                  stops: const <double>[0.1, 1.0],\r\n                ),\r\n              ),\r\n              sliver: SliverList(\r\n                delegate: SliverChildBuilderDelegate(\r\n                        (_, index) => Padding(\r\n                      padding: const EdgeInsets.all(8.0),\r\n                      child: Center(\r\n                          child: Text(\r\n                            ''张风捷特烈-$index'',\r\n                            style: TextStyle(fontSize: 24, color: Colors.white),\r\n                          )),\r\n                    ),\r\n                    childCount: 128),\r\n              ),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(151,320,0,replace(replace('import ''package:flutter/material.dart'';\r\nimport ''package:flutter/services.dart'';\r\nimport ''dart:ui'' as ui;\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DefaultAssetBundleDemo extends StatefulWidget {\r\n  const DefaultAssetBundleDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DefaultAssetBundleDemoState createState() => _DefaultAssetBundleDemoState();\r\n}\r\n\r\nclass _DefaultAssetBundleDemoState extends State<DefaultAssetBundleDemo> {\r\n ui.Image? _image;\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _load();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    return Container(\r\n      width: 150,\r\n      height: 150,\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: _image==null?Container():RawImage(image: _image,fit: BoxFit.cover,),\r\n    );\r\n  }\r\n\r\n  void _load() async{\r\n    AssetBundle info = DefaultAssetBundle.of(context);\r\n    ByteData data = await info.load(''assets/images/sabar.webp'');\r\n    _image = await decodeImageFromList(data.buffer.asUint8List());\r\n    setState(() {\r\n\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(152,230,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass DefaultTabControllerDemo extends StatelessWidget {\r\n  final List<Tab> tabs = const [\r\n    Tab(text: ''青眼白龙''),\r\n    Tab(text: ''黑魔术师''),\r\n    Tab(text: ''混沌战士''),\r\n  ];\r\n\r\n  const DefaultTabControllerDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: DefaultTabController(\r\n        length: tabs.length,\r\n        child: Scaffold(\r\n          appBar: AppBar(\r\n            title: const Text("DefaultTabController"),\r\n            bottom: TabBar(\r\n              tabs: tabs,\r\n            ),\r\n          ),\r\n          body: TabBarView(\r\n            children: tabs.map((Tab tab) {\r\n              return Center(\r\n                child: Text(\r\n                  ''${tab.text}'',\r\n                  style: const TextStyle(fontSize: 20),\r\n                ),\r\n              );\r\n            }).toList(),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(153,324,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-12\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DefaultTextStyleDemo extends StatelessWidget {\r\n  const DefaultTextStyleDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return DefaultTextStyle(\r\n      style: const TextStyle(\r\n          fontSize: 18,\r\n          color: Colors.blue,\r\n          decoration: TextDecoration.underline),\r\n      child: Wrap(\r\n        spacing: 5,\r\n        children: const[\r\n          Text("Hello,",),\r\n          FlutterLogo(),\r\n          Text("Flutter",style: TextStyle(color: Colors.red),),\r\n          Text("Unit."),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(154,114,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomDefaultTextStyleTransition extends StatefulWidget {\r\n  const CustomDefaultTextStyleTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomDefaultTextStyleTransitionState createState() =>\r\n      _CustomDefaultTextStyleTransitionState();\r\n}\r\n\r\nclass _CustomDefaultTextStyleTransitionState\r\n    extends State<CustomDefaultTextStyleTransition>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    _ctrl = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 1),\r\n    );\r\n    _ctrl.forward();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n        onTap: () {\r\n          setState(() {\r\n            _ctrl.reset();\r\n            _ctrl.forward();\r\n          });\r\n        },\r\n        child: Container(\r\n          alignment: Alignment.center,\r\n          width: 300,\r\n          height: 100,\r\n          child: DefaultTextStyleTransition(\r\n            textAlign: TextAlign.start,\r\n            softWrap: true,\r\n            maxLines: 1,\r\n            overflow: TextOverflow.ellipsis,\r\n            style: TextStyleTween(\r\n                begin: const TextStyle(\r\n                    color: Colors.blue,\r\n                    fontSize: 50,\r\n                    shadows: [\r\n                      Shadow(\r\n                          offset: Offset(1, 1),\r\n                          color: Colors.black,\r\n                          blurRadius: 3)\r\n                    ]),\r\n                end: const TextStyle(\r\n                    color: Colors.white,\r\n                    fontSize: 20,\r\n                    shadows: [\r\n                      Shadow(\r\n                          offset: Offset(1, 1),\r\n                          color: Colors.purple,\r\n                          blurRadius: 3)\r\n                    ])).animate(_ctrl),\r\n            child: const Text(''张风捷特烈''),\r\n          ),\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(155,126,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-24\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomDialog extends StatelessWidget {\r\n  const CustomDialog({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildRaisedButton(context),\r\n        _buildDialog(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildDialog() => const Dialog(\r\n      backgroundColor: Colors.white,\r\n      elevation: 5,\r\n      shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.all(Radius.circular(10))),\r\n      child: SizedBox(\r\n        width: 50,\r\n        child: DeleteDialog(),\r\n      ),\r\n    );\r\n\r\n  Widget _buildRaisedButton(BuildContext context) => ElevatedButton(\r\n    style: TextButton.styleFrom(\r\n      backgroundColor: Colors.blue,\r\n      shape: const RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.all(Radius.circular(10)),\r\n      ),\r\n    ),\r\n    onPressed: () {\r\n      showDialog(context: context, builder: (ctx) => _buildDialog());\r\n    },\r\n    child: const Text(\r\n      ''Just Show It !'',\r\n      style: TextStyle(color: Colors.white),\r\n    ),\r\n  );\r\n\r\n}\r\n\r\nclass DeleteDialog extends StatelessWidget {\r\n  const DeleteDialog({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: <Widget>[\r\n        _buildBar(context),\r\n        _buildTitle(),\r\n        _buildContent(),\r\n        _buildFooter(context),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTitle() {\r\n    return const Text(\r\n      ''Delete Doucument'',\r\n      style: TextStyle(color: Color(0xff5CC5E9), fontSize: 24),\r\n    );\r\n  }\r\n\r\n  Widget _buildContent() {\r\n    return const Padding(\r\n      padding: EdgeInsets.all(15.0),\r\n      child: Text(\r\n        ''    Hi toly! If you push the conform buttom ,''\r\n        '' You will lose this file. Are you sure wand to do that?'',\r\n        style: TextStyle(color: Color(0xffCFCFCF), fontSize: 16),\r\n        textAlign: TextAlign.justify,\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildFooter(context) {\r\n    return Padding(\r\n      padding: const EdgeInsets.only(bottom: 15.0, top: 10,left: 10,right: 10),\r\n      child: Row(\r\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n        children: <Widget>[\r\n          Container(\r\n            alignment: Alignment.center,\r\n            height: 40,\r\n            width: 100,\r\n            decoration: const BoxDecoration(\r\n                borderRadius: BorderRadius.all(Radius.circular(30)),\r\n                color: Color(0xff73D1EE)),\r\n            child: const Text(''Yes'',\r\n                style: TextStyle(color: Colors.white, fontSize: 16)),\r\n          ),\r\n          InkWell(\r\n            onTap: ()=>Navigator.of(context).pop(),\r\n            child: Container(\r\n              alignment: Alignment.center,\r\n              height: 40,\r\n              width: 100,\r\n              decoration: const BoxDecoration(\r\n                  borderRadius: BorderRadius.all(Radius.circular(30)),\r\n                  color: Colors.orangeAccent),\r\n              child: const Text(''Cancle'',\r\n                  style: TextStyle(color: Colors.white, fontSize: 16)),\r\n            ),\r\n          )\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildBar(context) => Container(\r\n        height: 30,\r\n        alignment: Alignment.centerRight,\r\n        margin: const EdgeInsets.only(right: 10, top: 5),\r\n        child: InkWell(\r\n          onTap: ()=>Navigator.of(context).pop(),\r\n          child: const Icon(\r\n            Icons.close,\r\n            color: Color(0xff82CAE3),\r\n          ),\r\n        ),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(156,319,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DirectionalityDemo extends StatefulWidget {\r\n  const DirectionalityDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DirectionalityDemoState createState() => _DirectionalityDemoState();\r\n}\r\n\r\nclass _DirectionalityDemoState extends State<DirectionalityDemo> {\r\n  TextDirection _textDirection = TextDirection.rtl;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Directionality(\r\n      textDirection: _textDirection,\r\n      child: Container(\r\n        padding: const EdgeInsets.all(8),\r\n        width: 250,\r\n        color: Colors.grey.withAlpha(33),\r\n        child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            const Text(\r\n                ''A widget that determines the ambient directionality of text and text direction sensitive render objects.''),\r\n            _buildSwitch(),\r\n            const Text(\r\n                ''The text direction from the closest instance of this class that encloses the given context.''),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() => Row(\r\n            children: [\r\n              Switch(\r\n                value: _textDirection == TextDirection.rtl,\r\n                onChanged: (v) {\r\n                  setState(() {\r\n                    _textDirection =\r\n                        v ? TextDirection.rtl : TextDirection.ltr;\r\n                  });\r\n                },\r\n              ),\r\n              Text(\r\n                _textDirection.toString(),\r\n                style: const TextStyle(color: Colors.blue, fontSize: 18),\r\n              )\r\n            ],\r\n          );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(157,176,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomDismissible extends StatefulWidget {\r\n  const CustomDismissible({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomDismissibleState createState() => _CustomDismissibleState();\r\n}\r\n\r\nclass _CustomDismissibleState extends State<CustomDismissible> {\r\n  final List<Color> data = [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: ListView(\r\n        padding: const EdgeInsets.symmetric(horizontal: 5),\r\n        children: data.map((color) => _buildItem(color)).toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildItem(Color color) {\r\n    return Dismissible(\r\n      background: Container(\r\n        color: Colors.green,\r\n        alignment: const Alignment(-0.9, 0),\r\n        child: const Icon(\r\n          Icons.check,\r\n          color: Colors.white,\r\n        ),\r\n      ),\r\n      secondaryBackground: Container(\r\n        alignment: const Alignment(0.9, 0),\r\n        child: const Icon(\r\n          Icons.close,\r\n          color: Colors.white,\r\n        ),\r\n        color: Colors.red,\r\n      ),\r\n      key: ValueKey(color),\r\n      onDismissed: (d) {\r\n        data.remove(color);\r\n      },\r\n      confirmDismiss: (e) async {\r\n        if (e == DismissDirection.endToStart) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      },\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        height: 50,\r\n        color: color,\r\n        child: Text(\r\n          colorString(color),\r\n          style: const TextStyle(color: Colors.white, shadows: [\r\n            Shadow(\r\n              color: Colors.black,\r\n              offset: Offset(.5, .5),\r\n              blurRadius: 2,\r\n            )\r\n          ]),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(158,176,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DirectionDismissible extends StatefulWidget {\r\n  const DirectionDismissible({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomDirectionDismissibleState createState() =>\r\n      _CustomDirectionDismissibleState();\r\n}\r\n\r\nclass _CustomDirectionDismissibleState extends State<DirectionDismissible> {\r\n  final List<Color> data = [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: ListView(\r\n        scrollDirection: Axis.horizontal,\r\n        padding: const EdgeInsets.symmetric(horizontal: 5),\r\n        children: data.map((color) => _buildItem(color)).toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildItem(Color color) {\r\n    return Dismissible(\r\n      direction: DismissDirection.vertical,\r\n      background: Container(\r\n        color: Colors.green,\r\n        alignment: const Alignment(\r\n          0,\r\n          -0.9,\r\n        ),\r\n        child: const Icon(\r\n          Icons.check,\r\n          color: Colors.white,\r\n        ),\r\n      ),\r\n      crossAxisEndOffset: 0.5,\r\n      secondaryBackground: Container(\r\n        alignment: const Alignment(\r\n          0,\r\n          0.9,\r\n        ),\r\n        child: const Icon(\r\n          Icons.close,\r\n          color: Colors.white,\r\n        ),\r\n        color: Colors.red,\r\n      ),\r\n      key: ValueKey(color),\r\n      onDismissed: (d) {\r\n        data.remove(color);\r\n      },\r\n      confirmDismiss: (e) async {\r\n        print(e);\r\n        if (e == DismissDirection.up) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      },\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        width: 80,\r\n        color: color,\r\n        child: Text(\r\n          colorString(color),\r\n          style: const TextStyle(color: Colors.white, shadows: [\r\n            Shadow(\r\n              color: Colors.black,\r\n              offset: Offset(.5, .5),\r\n              blurRadius: 2,\r\n            )\r\n          ]),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(159,34,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-24\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomDivider extends StatelessWidget {\r\n  const CustomDivider({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    List<Color> dataColor = [\r\n      Colors.red, Colors.yellow,\r\n      Colors.blue, Colors.green];\r\n    List<double> dataThickness = [1.0, 2.0, 4.0, 6.0];\r\n    Map<Color,double> data = Map.fromIterables(dataColor, dataThickness);\r\n    return Column(\r\n      children: dataColor\r\n          .map((e) => Divider(\r\n        color: e,\r\n        thickness: data[e],\r\n      )).toList(),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(160,34,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-24\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\n\r\nclass HeightDivider extends StatelessWidget {\r\n  const HeightDivider({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    List<double> dataThickness = [10.0, 20.0, 30.0, 40.0];\r\n    List<Color> dataColor = [\r\n      Colors.red, Colors.yellow,\r\n      Colors.blue, Colors.green];\r\n    Map<Color,double> data = Map.fromIterables(dataColor, dataThickness);\r\n\r\n    return Column(\r\n      children: dataColor\r\n          .map((Color color) => Divider(\r\n        color: color,\r\n        indent:data[color],\r\n        endIndent: data[color]!*2,\r\n        height: data[color],\r\n        thickness: data[color]!/10,\r\n      ))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(161,329,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-12\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\n\r\nclass DividerThemeDemo extends StatelessWidget {\r\n  const DividerThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return DividerTheme(\r\n      data: const DividerThemeData(\r\n        color: Colors.orange,\r\n        thickness: 2,\r\n        space: 10,\r\n        indent: 10,\r\n        endIndent: 10,\r\n      ),\r\n      child: Wrap(\r\n        spacing: 10,\r\n        children: [\r\n          const Divider(),\r\n          const Divider(),\r\n          const Divider(),\r\n          const Divider(),\r\n          const Divider(),\r\n          SizedBox(\r\n            height: 100,\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n              children: const [\r\n                VerticalDivider(),\r\n                VerticalDivider(),\r\n                VerticalDivider(),\r\n                VerticalDivider(),\r\n                VerticalDivider(),\r\n              ],\r\n            ),\r\n          )\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(162,103,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomDraggable extends StatelessWidget {\r\n  const CustomDraggable({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    List<Axis?> axis = [null, Axis.vertical, Axis.horizontal];\r\n    return Wrap(\r\n        spacing: 30,\r\n        children: axis\r\n            .map((e) => Draggable(\r\n                  axis: e,\r\n                  child: Container(\r\n                    width: 30,\r\n                    height: 30,\r\n                    alignment: Alignment.center,\r\n                    decoration: const BoxDecoration(\r\n                      color: Colors.blue,\r\n                      shape: BoxShape.circle,\r\n                    ),\r\n                  ),\r\n              feedback: Container(\r\n                width: 30,\r\n                    height: 30,\r\n                    decoration: const BoxDecoration(\r\n                      color: Colors.red,\r\n                      shape: BoxShape.circle,\r\n                    ),\r\n                  ),\r\n            ))\r\n            .toList());\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(163,103,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass DraggablePage extends StatefulWidget {\r\n  const DraggablePage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DraggablePageState createState() => _DraggablePageState();\r\n}\r\n\r\nclass _DraggablePageState extends State<DraggablePage> {\r\n  Color _color = Colors.grey;\r\n  String _info = ''DragTarget'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Wrap(\r\n          children: _buildColors(),\r\n          spacing: 10,\r\n        ),\r\n        const SizedBox(\r\n          height: 20,\r\n        ),\r\n        _buildDragTarget()\r\n      ],\r\n    );\r\n  }\r\n\r\n  List<Color> colors = [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green,\r\n    Colors.orange,\r\n    Colors.purple,\r\n    Colors.cyanAccent\r\n  ];\r\n\r\n  List<Widget> _buildColors() => colors\r\n      .map(\r\n        (e) => Draggable<Color>(\r\n            onDragStarted: () => setState(() => _info = ''开始拖拽''),\r\n            onDragEnd: (d) => setState(() => _info = ''结束拖拽''),\r\n            onDragCompleted: () => _info = ''拖拽完成'',\r\n            onDraggableCanceled: (v, o) => _info = ''拖拽取消'',\r\n            child: Container(\r\n              width: 30,\r\n              height: 30,\r\n              alignment: Alignment.center,\r\n              child: Text(\r\n              colors.indexOf(e).toString(),\r\n              style: const TextStyle(\r\n                  color: Colors.white, fontWeight: FontWeight.bold,),\r\n            ),\r\n            decoration: BoxDecoration(color: e, shape: BoxShape.circle),\r\n          ),\r\n          data: e,\r\n          feedback: Container(\r\n            width: 25,\r\n            height: 25,\r\n            decoration: BoxDecoration(color: e, shape: BoxShape.circle),\r\n          )),\r\n    )\r\n        .toList();\r\n\r\n  Widget _buildDragTarget() {\r\n    return DragTarget<Color>(\r\n        onLeave: (data) => print("onLeave: data = $data "),\r\n        onAccept: (data) {\r\n          print("onAccept: data = $data ");\r\n          setState(() {\r\n            _color = data;\r\n          });\r\n        },\r\n        onWillAccept: (data) {\r\n          print("onWillAccept: data = $data ");\r\n          return data != null;\r\n        },\r\n        builder: (context, candidateData, rejectedData) => Container(\r\n            width: 150.0,\r\n            height: 50.0,\r\n            color: _color,\r\n            child: Center(\r\n              child: Text(\r\n                _info,\r\n                style: const TextStyle(color: Colors.white),\r\n              ),\r\n            )));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(164,103,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/28\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass DeleteDraggable extends StatefulWidget {\r\n  const DeleteDraggable({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DeleteDraggableState createState() => _DeleteDraggableState();\r\n}\r\n\r\nclass _DeleteDraggableState extends State<DeleteDraggable> {\r\n  List<Color> colors = [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green,\r\n    Colors.orange,\r\n    Colors.purple,\r\n    Colors.cyanAccent\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Wrap(children: _buildColors(), spacing: 10),\r\n        const SizedBox(height: 20),\r\n        _buildDragTarget()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildDragTarget() {\r\n    return DragTarget<int>(\r\n        onAccept: (data) {\r\n          setState(() {\r\n            colors.removeAt(data);\r\n          });\r\n        },\r\n        onWillAccept: (data) => data != null,\r\n        builder: (context, candidateData, rejectedData) => Container(\r\n            width: 50.0,\r\n            height: 50.0,\r\n            decoration:\r\n                const BoxDecoration(color: Colors.red, shape: BoxShape.circle),\r\n            child: const Center(\r\n              child: Icon(Icons.delete_sweep, color: Colors.white),\r\n            )));\r\n  }\r\n\r\n  List<Widget> _buildColors() => colors\r\n      .map(\r\n        (e) => Draggable<int>(\r\n        child: Container(\r\n          width: 30,\r\n              height: 30,\r\n              alignment: Alignment.center,\r\n              child: Text(\r\n                colors.indexOf(e).toString(),\r\n                style: const TextStyle(\r\n                    color: Colors.white, fontWeight: FontWeight.bold),\r\n              ),\r\n              decoration: BoxDecoration(color: e, shape: BoxShape.circle),\r\n            ),\r\n        data: colors.indexOf(e),\r\n        feedback: Container(\r\n          width: 25,\r\n          height: 25,\r\n          decoration: BoxDecoration(\r\n              color: e.withAlpha(100), shape: BoxShape.circle),\r\n        )),\r\n  )\r\n      .toList();\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(165,221,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass DraggableScrollableActuatorDemo extends StatelessWidget {\r\n  const DraggableScrollableActuatorDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      padding: const EdgeInsets.all(10),\r\n      child: ElevatedButton(\r\n        onPressed: () {\r\n          Navigator.push(\r\n            context,\r\n            MaterialPageRoute(\r\n                builder: (context) => DraggableScrollableActuatorPage()),\r\n          );\r\n        },\r\n        child: const Text("进入 DraggableScrollableActuator 测试页"),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass DraggableScrollableActuatorPage extends StatelessWidget {\r\n  DraggableScrollableActuatorPage({Key? key}) : super(key: key);\r\n\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n    Colors.red[50]!,\r\n    Colors.red[100]!,\r\n    Colors.red[200]!,\r\n    Colors.red[300]!,\r\n    Colors.red[400]!,\r\n    Colors.red[500]!,\r\n    Colors.red[600]!,\r\n    Colors.red[700]!,\r\n    Colors.red[800]!,\r\n    Colors.red[900]!,\r\n  ];\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text("DraggableScrollableActuator"),\r\n      ),\r\n      body: DraggableScrollableActuator(\r\n        child: Builder(\r\n          builder: (ctx) => Column(\r\n            children: [\r\n              ElevatedButton(\r\n                onPressed: () {\r\n                  DraggableScrollableActuator.reset(ctx);\r\n                },\r\n                child: const Text("重置位置"),\r\n              ),\r\n              Expanded(\r\n                child: buildSheet(),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget buildSheet() => DraggableScrollableSheet(\r\n        initialChildSize: 0.3,\r\n        minChildSize: 0.2,\r\n        maxChildSize: 1,\r\n        expand: true,\r\n        builder: (BuildContext context, ScrollController scrollController) =>\r\n            ListView.builder(\r\n          controller: scrollController,\r\n          itemCount: data.length,\r\n          itemBuilder: buildColorItem,\r\n        ),\r\n      );\r\n\r\n  Widget buildColorItem(BuildContext context, int index) {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      height: 60,\r\n      color: data[index],\r\n      child: Text(\r\n        colorString(data[index]),\r\n        style: const TextStyle(color: Colors.white, shadows: [\r\n          Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\n        ]),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(166,252,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass DraggableScrollableSheetDemo extends StatelessWidget {\r\n  const DraggableScrollableSheetDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(10),\r\n      child: ElevatedButton(\r\n        onPressed: () {\r\n          Navigator.push(\r\n            context,\r\n            MaterialPageRoute(\r\n                builder: (context) => DraggableScrollableSheetPage()),\r\n          );\r\n        },\r\n        child: const Text("进入 DraggableScrollableSheet 测试页"),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass DraggableScrollableSheetPage extends StatelessWidget {\r\n  DraggableScrollableSheetPage({Key? key}) : super(key: key);\r\n\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n    Colors.red[50]!,\r\n    Colors.red[100]!,\r\n    Colors.red[200]!,\r\n    Colors.red[300]!,\r\n    Colors.red[400]!,\r\n    Colors.red[500]!,\r\n    Colors.red[600]!,\r\n    Colors.red[700]!,\r\n    Colors.red[800]!,\r\n    Colors.red[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text("DraggableScrollableSheet"),\r\n      ),\r\n      body: SizedBox.expand(\r\n          child: DraggableScrollableSheet(\r\n            initialChildSize: 0.3,\r\n            minChildSize: 0.2,\r\n            maxChildSize: 0.5,\r\n            expand: true,\r\n            builder: (BuildContext context, ScrollController scrollController)=>\r\n                ListView.builder(\r\n                  controller: scrollController,\r\n                  itemCount: data.length,\r\n                  itemBuilder: buildColorItem,\r\n                ),\r\n          )),\r\n    );\r\n  }\r\n\r\n  Widget buildColorItem(BuildContext context, int index) {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      height: 60,\r\n      color: data[index],\r\n      child: Text(\r\n        colorString(data[index]),\r\n        style: const TextStyle(color: Colors.white, shadows: [\r\n          Shadow(\r\n            color: Colors.black,\r\n            offset: Offset(.5, .5),\r\n            blurRadius: 2,\r\n          )\r\n        ]),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(167,104,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomDragTarget extends StatefulWidget {\r\n  const CustomDragTarget({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomDragTargetState createState() => _CustomDragTargetState();\r\n}\r\n\r\nclass _CustomDragTargetState extends State<CustomDragTarget> {\r\n  Color _color = Colors.grey;\r\n  String _info = ''DragTarget'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Wrap(children: _buildColors(), spacing: 10),\r\n        const SizedBox(height: 20),\r\n        _buildDragTarget()\r\n      ],\r\n    );\r\n  }\r\n\r\n  final List<Color> colors = const [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green,\r\n    Colors.orange,\r\n    Colors.purple,\r\n    Colors.cyanAccent\r\n  ];\r\n\r\n  List<Widget> _buildColors() => colors\r\n      .map(\r\n        (e) => Draggable<Color>(\r\n            child: Container(\r\n              width: 30,\r\n              height: 30,\r\n              alignment: Alignment.center,\r\n              child: Text(\r\n                colors.indexOf(e).toString(),\r\n                style: const TextStyle(\r\n                    color: Colors.white, fontWeight: FontWeight.bold),\r\n              ),\r\n            decoration: BoxDecoration(color: e, shape: BoxShape.circle),\r\n          ),\r\n          data: e,\r\n          feedback: Container(\r\n            width: 25,\r\n            height: 25,\r\n            decoration: BoxDecoration(color: e, shape: BoxShape.circle),\r\n          )),\r\n    ).toList();\r\n\r\n  Widget _buildDragTarget() {\r\n    return DragTarget<Color>(\r\n        onLeave: (data) => setState(() => _info=''onLeave''),\r\n        onAccept: (data) => setState(() {\r\n            _info=''onAccept'';\r\n            _color = data;\r\n          }),\r\n        onWillAccept: (data) {\r\n          setState(() {\r\n            _info=''onWillAccept'';\r\n          });\r\n          print("onWillAccept: data = $data ");\r\n          return data != null;\r\n        },\r\n        builder: (context, candidateData, rejectedData) => Container(\r\n            width: 150.0,\r\n            height: 50.0,\r\n            color: _color,\r\n            child: Center(\r\n              child: Text(\r\n                _info,\r\n                style: const TextStyle(color: Colors.white),\r\n              ),\r\n            )));\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(168,154,0,replace(replace('\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomDrawer extends StatelessWidget {\r\n  const CustomDrawer({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 400,\r\n      child: Scaffold(\r\n        appBar: AppBar(\r\n          title: const Text(''Flutter Unit''),\r\n        ),\r\n        drawer: Drawer(\r\n          elevation: 3,\r\n          child: _buildChild(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildChild() => ListView(\r\n    padding: EdgeInsets.zero,\r\n    children: const <Widget>[\r\n      DrawerHeader(\r\n        decoration: BoxDecoration(\r\n          image: DecorationImage(\r\n              image: AssetImage(''assets/images/caver.webp''),\r\n              fit: BoxFit.cover),\r\n        ),\r\n        child: Text(\r\n          ''张风捷特烈'',\r\n          style: TextStyle(fontSize: 24, color: Colors.white, shadows: [\r\n            Shadow(color: Colors.black, offset: Offset(1, 1), blurRadius: 3)\r\n          ]),\r\n        ),\r\n      ),\r\n      ListTile(\r\n        leading: Icon(\r\n          Icons.star,\r\n          color: Colors.blue,\r\n        ),\r\n        title: Text(''我的收藏''),\r\n      ),\r\n      ListTile(\r\n        leading: Icon(\r\n          Icons.palette,\r\n          color: Colors.orangeAccent,\r\n        ),\r\n        title: Text(''我的绘画''),\r\n      ),\r\n      ListTile(\r\n        leading: Icon(\r\n          Icons.insert_drive_file,\r\n          color: Colors.green,\r\n        ),\r\n        title: Text(''我的文件''),\r\n      ),\r\n    ],\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(169,276,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/11/28\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass DrawerButtonDemo extends StatelessWidget {\r\n  const DrawerButtonDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return  DrawerButton(\r\n      style: TextButton.styleFrom(\r\n        backgroundColor: Colors.blue,\r\n        iconColor: Colors.white,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(170,273,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/11/28\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DrawerButtonIconDemo extends StatelessWidget {\r\n  const DrawerButtonIconDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const DrawerButtonIcon();\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(171,257,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass DrawerControllerDemo extends StatefulWidget {\r\n  const DrawerControllerDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DrawerControllerDemoState createState() => _DrawerControllerDemoState();\r\n}\r\n\r\nclass _DrawerControllerDemoState extends State<DrawerControllerDemo> {\r\n  final GlobalKey<DrawerControllerState> _drawerKey =\r\n      GlobalKey<DrawerControllerState>();\r\n\r\n  bool _open = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: [\r\n        ElevatedButton(\r\n          onPressed: toggleDrawer,\r\n          child: const Text("显隐 Drawer"),\r\n        ),\r\n        SizedBox(\r\n          height: 200,\r\n          child: DrawerController(\r\n            scrimColor: Colors.blue.withAlpha(88),\r\n            enableOpenDragGesture: true,\r\n            key: _drawerKey,\r\n            alignment: DrawerAlignment.start,\r\n            drawerCallback: (value) {\r\n              _open = value;\r\n            },\r\n            child: Drawer(\r\n              child: Container(\r\n                alignment: Alignment.center,\r\n                color: Colors.red,\r\n                child: const Text(\r\n                  "I am Drawer!",\r\n                  style: TextStyle(color: Colors.white, fontSize: 18),\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void toggleDrawer() {\r\n    if (_open) {\r\n      _drawerKey.currentState?.close();\r\n    } else {\r\n      print(''---open--$_open-------'');\r\n      _drawerKey.currentState?.open();\r\n    }\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(172,155,0,replace(replace('\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\nclass CustomDrawerHeader extends StatelessWidget {\r\n  const CustomDrawerHeader({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 400,\r\n      child: Scaffold(\r\n        appBar: AppBar(\r\n          title: const Text(''Flutter Unit''),\r\n        ),\r\n        drawer: Drawer(\r\n          elevation: 3,\r\n          child: _buildChild(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildChild() => ListView(\r\n    padding: EdgeInsets.zero,\r\n    children: <Widget>[\r\n      _buildHeader(),\r\n      const ListTile(\r\n        leading: Icon(\r\n          Icons.star,\r\n          color: Colors.blue,\r\n        ),\r\n        title: Text(''我的收藏''),\r\n      ),\r\n      const ListTile(\r\n        leading: Icon(\r\n          Icons.palette,\r\n          color: Colors.orangeAccent,\r\n        ),\r\n        title: Text(''我的绘画''),\r\n      ),\r\n      const ListTile(\r\n        leading: Icon(\r\n          Icons.insert_drive_file,\r\n          color: Colors.green,\r\n        ),\r\n        title: Text(''我的文件''),\r\n      ),\r\n    ],\r\n  );\r\n\r\n  Widget _buildHeader() => const DrawerHeader(\r\n      margin: EdgeInsets.all(10),\r\n      padding: EdgeInsets.only(left: 20,top: 15),\r\n      decoration: BoxDecoration(\r\n        borderRadius: BorderRadius.only(\r\n            topLeft:Radius.circular(40),\r\n            topRight:Radius.circular(40)\r\n        ),\r\n        image: DecorationImage(\r\n            image: AssetImage(''assets/images/caver.webp''),\r\n            fit: BoxFit.cover),\r\n      ),\r\n      child: Text(\r\n        ''张风捷特烈'',\r\n        style: TextStyle(fontSize: 24, color: Colors.white, shadows: [\r\n          Shadow(color: Colors.black, offset: Offset(1, 1), blurRadius: 3)\r\n        ]),\r\n      ),\r\n    );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(173,55,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-16\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomDropDownButton extends StatefulWidget {\r\n  const CustomDropDownButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomDropDownButtonState createState() => _CustomDropDownButtonState();\r\n}\r\n\r\nclass _CustomDropDownButtonState extends State<CustomDropDownButton> {\r\n  Color _color = Colors.red;\r\n  final List<Color> _colors = const [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green\r\n  ];\r\n  final List<String> _info = const ["红色", "黄色", "蓝色", "绿色"];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: <Widget>[\r\n        Container(\r\n          margin: const EdgeInsets.symmetric(horizontal: 20),\r\n          width: 50,\r\n          height: 50,\r\n          color: _color,\r\n        ),\r\n        DropdownButton<Color>(\r\n            value: _color,\r\n            elevation: 1,\r\n            icon: Icon(\r\n              Icons.expand_more,\r\n              size: 20,\r\n              color: _color,\r\n            ),\r\n            items: _buildItems(),\r\n            onChanged: (v) => setState(() => _color = v??Colors.blue)),\r\n      ],\r\n    );\r\n  }\r\n\r\n  List<DropdownMenuItem<Color>> _buildItems() => _colors\r\n      .map((e) => DropdownMenuItem<Color>(\r\n          value: e,\r\n          child: Text(\r\n            _info[_colors.indexOf(e)],\r\n            style: TextStyle(color: e),\r\n          )))\r\n      .toList();\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(174,55,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-16\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass StyleDropDownButton extends StatefulWidget {\r\n  const StyleDropDownButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _StyleDropDownButtonState createState() => _StyleDropDownButtonState();\r\n}\r\n\r\nclass _StyleDropDownButtonState extends State<StyleDropDownButton> {\r\n  Color _color = Colors.red;\r\n\r\n  final List<Color> _colors = const [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green\r\n  ];\r\n  final List<String> _info = const ["红色", "黄色", "蓝色", "绿色"];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: <Widget>[\r\n        Container(\r\n          margin: const EdgeInsets.symmetric(horizontal: 20),\r\n          width: 50,\r\n          height: 50,\r\n          color: _color,\r\n        ),\r\n        DropdownButton<Color>(\r\n            hint: const Text(''请选择''),\r\n            isDense: true,\r\n            iconSize:20,\r\n            iconEnabledColor:_color,\r\n            value: _color,\r\n            items: _buildItems(),\r\n            onChanged: (v) => setState(() => _color = v??Colors.blue)),\r\n      ],\r\n    );\r\n  }\r\n\r\n  List<DropdownMenuItem<Color>> _buildItems() => _colors\r\n      .map((e) => DropdownMenuItem<Color>(\r\n          value: e,\r\n          child: Text(\r\n            _info[_colors.indexOf(e)],\r\n            style: TextStyle(color: e),\r\n          )))\r\n      .toList();\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(175,223,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass DropdownButtonFormFieldDemo extends StatefulWidget {\r\n  const DropdownButtonFormFieldDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DropdownButtonFormFieldDemoState createState() =>\r\n      _DropdownButtonFormFieldDemoState();\r\n}\r\n\r\nclass _DropdownButtonFormFieldDemoState extends State<DropdownButtonFormFieldDemo> {\r\n  Color _color = Colors.blue;\r\n  final List<Color> _colors = const [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green\r\n  ];\r\n  final List<String> _info = const ["红色", "黄色", "蓝色", "绿色"];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: <Widget>[\r\n        Container(\r\n          margin: const EdgeInsets.symmetric(horizontal: 20),\r\n          width: 50,\r\n          height: 50,\r\n          color: _color,\r\n        ),\r\n\r\n        SizedBox(\r\n          width: 80,\r\n          child: DropdownButtonFormField<Color>(\r\n              value: _color,\r\n              elevation: 1,\r\n              hint: const Text(''选择颜色'',style: TextStyle(fontSize: 12),),\r\n              icon: Icon(\r\n                Icons.expand_more,\r\n                size: 20,\r\n                color: _color,\r\n              ),\r\n            items: _buildItems(),\r\n              onChanged: (v) => setState(() => _color = v ?? Colors.blue)),\r\n        )\r\n\r\n      ],\r\n    );\r\n  }\r\n\r\n  List<DropdownMenuItem<Color>> _buildItems() => _colors\r\n      .map((e) => DropdownMenuItem<Color>(\r\n      value: e,\r\n      child: Text(\r\n        _info[_colors.indexOf(e)],\r\n        style: TextStyle(color: e),\r\n      )))\r\n      .toList();\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(176,181,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomDropDownButtonHideUnderline extends StatefulWidget {\r\n  const CustomDropDownButtonHideUnderline({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomDropDownButtonHideUnderlineState createState() =>\r\n      _CustomDropDownButtonHideUnderlineState();\r\n}\r\n\r\nclass _CustomDropDownButtonHideUnderlineState\r\n    extends State<CustomDropDownButtonHideUnderline> {\r\n  Color _color = Colors.red;\r\n  final List<Color> _colors = const[\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green\r\n  ];\r\n  final List<String> _info = const["红色", "黄色", "蓝色", "绿色"];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: [\r\n        Container(\r\n          margin: const EdgeInsets.symmetric(horizontal: 20),\r\n          width: 50,\r\n          height: 50,\r\n          color: _color,\r\n        ),\r\n        DropdownButtonHideUnderline(\r\n          child: DropdownButton<Color>(\r\n              value: _color,\r\n              elevation: 1,\r\n              icon: Icon(\r\n                Icons.expand_more,\r\n                size: 20,\r\n                color: _color,\r\n              ),\r\n              items: _buildItems(),\r\n              onChanged: (Color? color) =>\r\n                  setState(() => _color = color ?? _color)),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  List<DropdownMenuItem<Color>> _buildItems() => _colors\r\n      .map((e) => DropdownMenuItem<Color>(\r\n          value: e,\r\n          child: Text(\r\n            _info[_colors.indexOf(e)],\r\n            style: TextStyle(color: e),\r\n          )))\r\n      .toList();\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(177,370,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DropdownMenuNode1 extends StatefulWidget {\r\n  const DropdownMenuNode1({super.key});\r\n\r\n  @override\r\n  State<DropdownMenuNode1> createState() => _DropdownMenuNode1State();\r\n}\r\n\r\nclass _DropdownMenuNode1State extends State<DropdownMenuNode1> {\r\n  final List<String> data = [''语文'', ''数学'', ''英语'', ''物理'', ''化学'', ''生物'', ''地理''];\r\n  late String _dropdownValue = data.first;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: [\r\n        DropdownMenu<String>(\r\n          menuHeight: 200,\r\n          initialSelection: data.first,\r\n          onSelected: _onSelect,\r\n          dropdownMenuEntries: _buildMenuList(data),\r\n        ),\r\n        const SizedBox(height: 8,),\r\n        Text(''你选择的学科是: $_dropdownValue'')\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _onSelect(String? value) {\r\n    setState(() {\r\n      _dropdownValue = value!;\r\n    });\r\n  }\r\n\r\n  List<DropdownMenuEntry<String>> _buildMenuList(List<String> data) {\r\n    return data.map((String value) {\r\n      return DropdownMenuEntry<String>(value: value, label: value);\r\n    }).toList();\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(178,370,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nenum ColorLabel {\r\n  blue(''Blue'', Colors.blue),\r\n  pink(''Pink'', Colors.pink),\r\n  green(''Green'', Colors.green),\r\n  yellow(''Orange'', Colors.orange),\r\n  grey(''Grey'', Colors.grey);\r\n\r\n  const ColorLabel(this.label, this.color);\r\n\r\n  final String label;\r\n  final Color color;\r\n}\r\n\r\n\r\nenum IconLabel {\r\n  smile(''Smile'', Icons.sentiment_satisfied_outlined),\r\n  cloud(''Cloud'', Icons.cloud_outlined),\r\n  brush(''Brush'', Icons.brush_outlined),\r\n  heart(''Heart'', Icons.favorite);\r\n\r\n  const IconLabel(this.label, this.icon);\r\n\r\n  final String label;\r\n  final IconData icon;\r\n}\r\n\r\nclass DropdownMenuNode2 extends StatefulWidget {\r\n  const DropdownMenuNode2({super.key});\r\n\r\n  @override\r\n  State<DropdownMenuNode2> createState() => _DropdownMenuNode2State();\r\n}\r\n\r\nclass _DropdownMenuNode2State extends State<DropdownMenuNode2> {\r\n  final TextEditingController colorController = TextEditingController();\r\n  final TextEditingController iconController = TextEditingController();\r\n  ColorLabel? selectedColor;\r\n  IconLabel? selectedIcon;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: <Widget>[\r\n        Padding(\r\n          padding: const EdgeInsets.symmetric(vertical: 20,horizontal: 20),\r\n          child: Column(\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: <Widget>[\r\n              _buildColorMenu(),\r\n              const SizedBox(height: 16),\r\n              _buildLabelMenu(),\r\n            ],\r\n          ),\r\n        ),\r\n        const SizedBox(height: 8),\r\n        _buildInfo()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildColorMenu(){\r\n    return DropdownMenu<ColorLabel>(\r\n      initialSelection: ColorLabel.green,\r\n      controller: colorController,\r\n      requestFocusOnTap: true,\r\n      label: const Text(''Color''),\r\n      width: 160,\r\n      menuHeight: 150,\r\n      menuStyle: const MenuStyle(\r\n        backgroundColor: MaterialStatePropertyAll<Color>(Colors.white),\r\n        surfaceTintColor: MaterialStatePropertyAll<Color>(Colors.white),\r\n        padding: MaterialStatePropertyAll<EdgeInsetsGeometry>(EdgeInsets.symmetric(vertical: 20,horizontal: 8)),\r\n      ),\r\n      onSelected: (ColorLabel? color) {\r\n        setState(() {\r\n          selectedColor = color;\r\n        });\r\n      },\r\n      dropdownMenuEntries: ColorLabel.values.map((ColorLabel color) {\r\n            return DropdownMenuEntry<ColorLabel>(\r\n              value: color,\r\n              label: color.label,\r\n              enabled: color.label != ''Grey'',\r\n              style: MenuItemButton.styleFrom(\r\n                foregroundColor: color.color,\r\n              ),\r\n            );\r\n          }\r\n      ).toList(),\r\n    );\r\n  }\r\n\r\n  Widget _buildInfo() {\r\n    if (selectedColor != null && selectedIcon != null) {\r\n      return Row(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: <Widget>[\r\n          Text(''You selected a ${selectedColor?.label} ${selectedIcon?.label}''),\r\n          Padding(\r\n            padding: const EdgeInsets.symmetric(horizontal: 5),\r\n            child: Icon(\r\n              selectedIcon?.icon,\r\n              color: selectedColor?.color,\r\n            ),\r\n          )\r\n        ],\r\n      );\r\n    }\r\n    return const Text(''Please select a color and an icon.'');\r\n  }\r\n\r\n  Widget _buildLabelMenu() {\r\n    return DropdownMenu<IconLabel>(\r\n      controller: iconController,\r\n      enableFilter: false,\r\n      requestFocusOnTap: false,\r\n      width: 160,\r\n      leadingIcon: const Icon(Icons.search),\r\n      label: const Text(''Icon''),\r\n      inputDecorationTheme: const InputDecorationTheme(\r\n        filled: true,\r\n        contentPadding: EdgeInsets.symmetric(vertical: 5.0),\r\n      ),\r\n      onSelected: (IconLabel? icon) {\r\n        setState(() {\r\n          selectedIcon = icon;\r\n        });\r\n      },\r\n      dropdownMenuEntries: IconLabel.values.map((IconLabel icon) {\r\n          return DropdownMenuEntry<IconLabel>(\r\n            value: icon,\r\n            label: icon.label,\r\n            leadingIcon: Icon(icon.icon),\r\n          );\r\n        },\r\n      ).toList(),\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(179,370,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass User {\r\n  final String name;\r\n  final bool man;\r\n  final String image;\r\n\r\n  const User(this.name, this.man, this.image);\r\n\r\n  @override\r\n  String toString() {\r\n    return ''User{name: $name, man: $man, image: $image}'';\r\n  }\r\n}\r\n\r\nclass DropdownMenuNode3 extends StatefulWidget {\r\n  const DropdownMenuNode3({ super.key });\r\n\r\n  @override\r\n  State<DropdownMenuNode3> createState() => _DropdownMenuNode3State();\r\n}\r\n\r\nclass _DropdownMenuNode3State extends State<DropdownMenuNode3> {\r\n  late final TextEditingController controller;\r\n\r\n   List<User> data = const [\r\n    User(''toly'', true, ''icon_5.webp''),\r\n    User(''toly49'', false, ''icon_6.webp''),\r\n    User(''toly42'', true, ''icon_7.webp''),\r\n    User(''toly56'', false, ''icon_8.webp''),\r\n    User(''card'', true, ''icon_5.webp''),\r\n    User(''ls'', true, ''icon_6.webp''),\r\n    User(''alex'', true, ''icon_7.webp''),\r\n    User(''fan sha'', false, ''icon_8.webp''),\r\n  ];\r\n\r\n  User? _selectUser;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    controller = TextEditingController();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    controller.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return DropdownMenu<User>(\r\n      width: 300,\r\n      menuHeight: 250,\r\n      controller: controller,\r\n      leadingIcon:  _selectUser!=null?SizedBox(\r\n        width: 26,\r\n        height: 26,\r\n        child: Center(\r\n          child: CircleAvatar(\r\n            radius: 14,\r\n            foregroundColor: Colors.transparent,\r\n            backgroundImage:\r\n            AssetImage(''assets/images/head_icon/${_selectUser!.image}''),\r\n          ),\r\n        ),\r\n      ):null,\r\n      label: const Text(''选择用户''),\r\n      onSelected: (User? user) {\r\n        print(''Selected $user'');\r\n        setState(() {\r\n          _selectUser = user;\r\n\r\n        });\r\n      },\r\n      dropdownMenuEntries: data.map<DropdownMenuEntry<User>>((User user) {\r\n        return DropdownMenuEntry<User>(\r\n          value: user,\r\n          label: user.name,\r\n          // Try commenting the labelWidget out or changing\r\n          // the labelWidget''s Text parameters.\r\n          labelWidget: _UserItem(user: user),\r\n        );\r\n      }).toList(),\r\n    );\r\n  }\r\n}\r\nclass _UserItem extends StatelessWidget {\r\n  final User user;\r\n\r\n  const _UserItem({\r\n    Key? key,\r\n    required this.user,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 6),\r\n      child: Row(\r\n        crossAxisAlignment: CrossAxisAlignment.center,\r\n        children: [\r\n          CircleAvatar(\r\n            foregroundColor: Colors.transparent,\r\n            backgroundImage:\r\n            AssetImage(''assets/images/head_icon/${user.image}''),\r\n          ),\r\n          const SizedBox(width: 20),\r\n          Column(\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: [\r\n              Text(user.name),\r\n              Text(\r\n                ''性别:''+ (user.man ? ''男'' : ''女''),\r\n                style: const TextStyle(color: Colors.grey),\r\n              ),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(180,244,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass EditableTextDemo extends StatefulWidget {\r\n  const EditableTextDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _EditableTextDemoState createState() => _EditableTextDemoState();\r\n}\r\n\r\nclass _EditableTextDemoState extends State<EditableTextDemo> {\r\n  final TextEditingController _ctrl =\r\n      TextEditingController(text: ''Hello Flutter Unit!'');\r\n  final FocusNode _node = FocusNode();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(8.0),\r\n      child: EditableText(\r\n        controller: _ctrl,\r\n        focusNode: _node,\r\n        style: const TextStyle(fontSize: 16, color: Colors.blue),\r\n        cursorColor: Colors.blue,\r\n        backgroundCursorColor: Colors.orange,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(181,354,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ElevatedButtonDemo extends StatelessWidget {\r\n  const ElevatedButtonDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n        alignment: Alignment.center,\r\n        height: 60,\r\n        child: Wrap(\r\n          spacing: 20,\r\n          children: [\r\n            ElevatedButton(\r\n              child: const Text(''ElevatedButton''),\r\n              onPressed: _onPressed,\r\n              onLongPress: _onLongPress,\r\n            ),\r\n            const ElevatedButton(\r\n              child: Text(''禁用按钮''),\r\n              onPressed: null,\r\n              onLongPress: null,\r\n            ),\r\n          ],\r\n        ));\r\n  }\r\n\r\n  void _onPressed() {}\r\n\r\n  void _onLongPress() {}\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(182,354,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ElevatedButtonStyleDemo extends StatelessWidget {\r\n  const ElevatedButtonStyleDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      child: Wrap(\r\n        spacing: 10,\r\n        children: [\r\n          ElevatedButton(\r\n            style: TextButton.styleFrom(\r\n                backgroundColor: Colors.orange,\r\n                foregroundColor: Colors.white,\r\n                elevation: 2,\r\n                shadowColor: Colors.orangeAccent),\r\n            child: const Text(''ElevatedButton样式''),\r\n            onPressed: _onPressed,\r\n            onLongPress: _onLongPress,\r\n          ),\r\n          ElevatedButton(\r\n            style: TextButton.styleFrom(\r\n                backgroundColor: Colors.white,\r\n                foregroundColor: Colors.black,\r\n                side: const BorderSide(color: Colors.blue,width: 1),\r\n                shape: const RoundedRectangleBorder(\r\n                  borderRadius: BorderRadius.all(Radius.circular(10))\r\n                ),\r\n                // elevation: 2,\r\n                shadowColor: Colors.orangeAccent),\r\n            child: const Text(''ElevatedButton边线''),\r\n            autofocus: false,\r\n            onPressed: _onPressed,\r\n            onLongPress: _onLongPress,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onPressed() {}\r\n\r\n  void _onLongPress() {}\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(183,361,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/11/28\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass EndDrawerButtonDemo extends StatelessWidget {\r\n  const EndDrawerButtonDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return  EndDrawerButton(\r\n      style: TextButton.styleFrom(\r\n        backgroundColor: Colors.blue,\r\n        iconColor: Colors.white,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(184,275,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/11/28\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass EndDrawerButtonIconDemo extends StatelessWidget {\r\n  const EndDrawerButtonIconDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const EndDrawerButtonIcon();\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(185,197,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020-03-31\r\012/// contact me by email 1981462002@qq.com\r\012\r\012class ErrorWidgetDemo extends StatelessWidget {\r\012  const ErrorWidgetDemo({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return SizedBox(\r\012      height: 200,\r\012      child: ErrorWidget(\r\012          ''I am Error ErrorWidget\n''\r\012              ''But now, there has no error.''\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(186,106,0,replace(replace(' import ''package:flutter/material.dart'';\r\nimport ''package:unit_widgets_display/display_ability.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomExpended extends StatefulWidget {\r\n  const CustomExpended({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomExpendedState createState() => _CustomExpendedState();\r\n}\r\n\r\nclass _CustomExpendedState extends State<CustomExpended> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        buildRow([0, 0, 0]),\r\n        const SizedBox(height: 10,),\r\n        buildRow([0, 0, 1]),\r\n        const SizedBox(height: 10,),\r\n        buildRow([1, 1, 1]),\r\n        const SizedBox(height: 10,),\r\n        buildRow([2, 3, 3]),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget buildRow(List<int> num) {\r\n    return Row(\r\n        children: num.map((e) => Expanded(\r\n              flex: e,\r\n              child: Container(\r\n                alignment: Alignment.center,\r\n                width: 50,\r\n                height: 50,\r\n                color: DisplayPlugin().randomColor,\r\n                child: Text(\r\n                  ''flex=$e'',\r\n                  style: const TextStyle(color: Colors.white),\r\n                ),\r\n              ),\r\n            )).toList());\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(187,51,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-16\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomExpandIcon extends StatefulWidget {\r\n  const CustomExpandIcon({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomExpandIconState createState() => _CustomExpandIconState();\r\n}\r\n\r\nclass _CustomExpandIconState extends State<CustomExpandIcon> {\r\n  bool _closed = true;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ExpandIcon(\r\n      isExpanded: _closed,\r\n      padding: const EdgeInsets.all(5),\r\n      size: 30,\r\n      color: Colors.blue,\r\n      expandedColor: Colors.orangeAccent,\r\n      onPressed: (value) => setState(() => _closed = !_closed),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(188,178,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomExpansionPanelList extends StatefulWidget {\r\n  const CustomExpansionPanelList({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomExpansionPanelListState createState() =>\r\n      _CustomExpansionPanelListState();\r\n}\r\n\r\nclass _CustomExpansionPanelListState extends State<CustomExpansionPanelList> {\r\n  final List<Color> data = [\r\n    Colors.red[50]!,\r\n    Colors.red[100]!,\r\n    Colors.red[200]!,\r\n    Colors.red[300]!,\r\n    Colors.red[400]!,\r\n    Colors.red[500]!,\r\n    Colors.red[600]!,\r\n    Colors.red[700]!,\r\n    Colors.red[800]!,\r\n    Colors.red[900]!,\r\n  ];\r\n  int _position = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: 300,\r\n      child: ExpansionPanelList(\r\n        children: data.map((color) => _buildItem(color)).toList(),\r\n        animationDuration: const Duration(milliseconds: 200),\r\n        expansionCallback: (index, open) {\r\n          setState(() => _position = open ? -1 : index);\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  ExpansionPanel _buildItem(Color color) {\r\n    return ExpansionPanel(\r\n        isExpanded: data.indexOf(color) == _position,\r\n        canTapOnHeader: true,\r\n        headerBuilder: (ctx, index) => Center(\r\n              child: Wrap(\r\n                crossAxisAlignment: WrapCrossAlignment.center,\r\n                children: <Widget>[\r\n                  Container(\r\n                    height: 30,\r\n                    width: 30,\r\n                    decoration:\r\n                        BoxDecoration(color: color, shape: BoxShape.circle),\r\n                  ),\r\n                  Container(\r\n                    width: 120,\r\n                    alignment: Alignment.center,\r\n                    height: 50,\r\n                    child: Text(\r\n                      colorString(color),\r\n                      style: const TextStyle(color: Colors.black),\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n        body: Container(\r\n          alignment: Alignment.center,\r\n          height: 50,\r\n          color: color,\r\n          child: Text(\r\n            colorString(color),\r\n            style: const TextStyle(color: Colors.white, shadows: [\r\n              Shadow(\r\n                color: Colors.black,\r\n                offset: Offset(.5, .5),\r\n                blurRadius: 2,\r\n              )\r\n            ]),\r\n          ),\r\n        ));\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(189,52,0,replace(replace('import ''package:flutter/material.dart'';\r\nimport ''../../StatelessWidget/RadioListTile/node1_base.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomExpansionTile extends StatefulWidget {\r\n  const CustomExpansionTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomExpansionTileState createState() => _CustomExpansionTileState();\r\n}\r\n\r\nclass _CustomExpansionTileState extends State<CustomExpansionTile> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ExpansionTile(\r\n      leading: const Icon(Icons.star),\r\n      title: const Text("选择语言"),\r\n      backgroundColor: Colors.grey.withAlpha(6),\r\n      onExpansionChanged: (value) {\r\n        print(''$value'');\r\n      },\r\n      initiallyExpanded: false,\r\n      children: const[CustomRadioListTile()],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(190,8,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomFadeInImage extends StatelessWidget {\r\n  const CustomFadeInImage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    String placeholder = "assets/images/icon_head.webp";\r\n    String img =\r\n        "https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/"\r\n        "15739960c2da4de3a263eeabcb60057f~tplv-k3u1fbpfcp-zoom-crop-mark"\r\n        ":1304:1304:1304:734.awebp";\r\n    return FadeInImage.assetNetwork(\r\n        placeholder: placeholder,\r\n        image: img,\r\n      width: 100,\r\n      height: 100,\r\n      fit: BoxFit.cover,\r\n      repeat:ImageRepeat.noRepeat,\r\n      alignment: Alignment.center,\r\n      fadeInDuration:const Duration(seconds: 5),\r\n      fadeInCurve: Curves.easeInCubic,\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(191,89,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomFadeTransition extends StatefulWidget {\r\n  const CustomFadeTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomFadeTransitionState createState() => _CustomFadeTransitionState();\r\n}\r\n\r\nclass _CustomFadeTransitionState extends State<CustomFadeTransition>\r\n    with SingleTickerProviderStateMixin {\r\n late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    _ctrl = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 2),\r\n    );\r\n    _ctrl.forward();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: () => _ctrl.forward(from: 0),\r\n      child: Container(\r\n        color: Colors.grey.withAlpha(22),\r\n        width: 100,\r\n        height: 100,\r\n        child: FadeTransition(\r\n          opacity: CurvedAnimation(parent: _ctrl, curve: Curves.linear),\r\n          child: const Icon(Icons.android, color: Colors.green, size: 60),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(192,359,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nclass FilledButtonDemo1 extends StatelessWidget {\r\n  const FilledButtonDemo1({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(spacing: 10, children: <Widget>[\r\n      FilledButton(\r\n        onPressed: () {},\r\n        child: const Text(''FilledButton''),\r\n      ),\r\n      const FilledButton(\r\n        onPressed: null,\r\n        child: Text(''Disabled''),\r\n      ),\r\n    ]);\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(193,359,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nclass FilledButtonDemo2 extends StatelessWidget {\r\n  const FilledButtonDemo2({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        spacing: 10,\r\n        children: <Widget>[\r\n      FilledButton.tonal(\r\n        onPressed: () {},\r\n        child: const Text(''FilledButton''),\r\n      ),\r\n      const FilledButton.tonal(\r\n        onPressed: null,\r\n        child: Text(''Disabled''),\r\n      ),\r\n    ]);\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(194,15,0,replace(replace('/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomFilterChip extends StatefulWidget {\r\n  const CustomFilterChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomFilterChipState createState() => _CustomFilterChipState();\r\n}\r\n\r\nclass _CustomFilterChipState extends State<CustomFilterChip> {\r\n  final Map<String, String> map = {\r\n    ''A'': ''Ant'',\r\n    ''B'': ''Bug'',\r\n    ''C'': ''Cat'',\r\n    ''D'': ''Dog'',\r\n  };\r\n  final List<String> _selected = [];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Color themeColor = Theme.of(context).primaryColor;\r\n    return Column(\r\n      mainAxisAlignment: MainAxisAlignment.center,\r\n      children: <Widget>[\r\n        Wrap(\r\n          children: map.keys.map((key) => _buildChild(themeColor,key)).toList(),\r\n        ),\r\n        Container(\r\n            padding: const EdgeInsets.all(10),\r\n            child: Text(''您已选择: ${_selected.join('', '')}'')),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Padding _buildChild( Color themeColor,String key) {\r\n    bool select =  _selected.contains(map[key]);\r\n    return Padding(\r\n        padding: const EdgeInsets.all(4.0),\r\n        child: FilterChip(\r\n          selectedColor: themeColor,\r\n          selectedShadowColor: Colors.blue,\r\n          side: BorderSide.none,\r\n          shadowColor: themeColor,\r\n          pressElevation: 5,\r\n          elevation: 2,\r\n          avatarBoxConstraints: BoxConstraints(\r\n            maxWidth: 22,maxHeight: 22\r\n          ),\r\n            checkmarkColor: select?Colors.white:null,\r\n          avatar: CircleAvatar(\r\n            backgroundColor:  select?Colors.blueAccent:null,\r\n              child: Text(key,style: TextStyle(fontSize: 12,color: select?Colors.transparent:null),)),\r\n          label: Text(map[key]!,style: TextStyle(color: select?Colors.white:null),),\r\n          selected: select,\r\n          onSelected: (bool value) => _onSelected(value, key),\r\n        ),\r\n      );\r\n  }\r\n\r\n  void _onSelected(bool value, String key) {\r\n    setState(() {\r\n      if (value) {\r\n        _selected.add(map[key]!);\r\n      } else {\r\n        _selected.removeWhere((name) => name == map[key]);\r\n      }\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(195,87,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomFittedBox extends StatefulWidget {\r\n  const CustomFittedBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomFittedBoxState createState() => _CustomFittedBoxState();\r\n}\r\n\r\nclass _CustomFittedBoxState extends State<CustomFittedBox> {\r\n  double _childW = 20;\r\n  double _childH = 30;\r\n\r\n  final List<int> rainbow = const [\r\n    0xffff0000,\r\n    0xffFF7F00,\r\n    0xffFFFF00,\r\n    0xff00FF00,\r\n    0xff00FFFF,\r\n    0xff0000FF,\r\n    0xff8B00FF\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Wrap(\r\n            spacing: 10,\r\n            runSpacing: 10,\r\n            children: BoxFit.values\r\n                .map((mode) => Column(\r\n                      children: [\r\n                        _buildChild(mode),\r\n                        const SizedBox(height: 10),\r\n                        Text(mode.toString().split(''.'')[1])\r\n                      ],\r\n                    ))\r\n                .toList()),\r\n        _buildSlider()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildChild(BoxFit m) {\r\n    return Container(\r\n      color: Colors.grey.withAlpha(44),\r\n      width: 80,\r\n      height: 60,\r\n      child: FittedBox(\r\n        fit: m,\r\n        child: Container(\r\n          width: _childW,\r\n          height: _childH,\r\n          decoration: BoxDecoration(\r\n            //添加渐变色\r\n            gradient: LinearGradient(\r\n                stops: const[0.0, 1 / 6, 2 / 6, 3 / 6, 4 / 6, 5 / 6, 1.0],\r\n                colors: rainbow.map((e) => Color(e)).toList()),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSlider() => Column(\r\n        children: <Widget>[\r\n          Slider(\r\n              min: 10,\r\n              max: 150,\r\n              divisions: 100,\r\n              label: ''子宽度:'' + _childW.toStringAsFixed(1),\r\n              value: _childW,\r\n              onChanged: (v) => setState(() => _childW = v)),\r\n          Slider(\r\n              min: 10,\r\n              max: 150,\r\n              divisions: 100,\r\n              label: ''子高度:'' + _childH.toStringAsFixed(1),\r\n              value: _childH,\r\n              onChanged: (v) => setState(() => _childH = v)),\r\n        ],\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(196,94,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FlexNode1 extends StatelessWidget {\r\n  const FlexNode1({super.key});\r\n\r\n  static TextStyle textStyle =\r\n      const TextStyle(color: Colors.white, fontWeight: FontWeight.bold);\r\n\r\n   Widget get blueBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.blue,\r\n    height: 20,\r\n    width: 30,\r\n    child: Text(''1'', style: textStyle),\r\n  );\r\n\r\n   Widget get redBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.red,\r\n    height: 30,\r\n    width: 40,\r\n    child: Text(''2'', style: textStyle),\r\n  );\r\n\r\n   Widget get greenBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.green,\r\n    height: 20,\r\n    width: 20,\r\n    child: Text(''3'', style: textStyle),\r\n  );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        children: Axis.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n              width: 160,\r\n              height: 80,\r\n              color: Colors.grey.withAlpha(33),\r\n              child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  Widget _buildItem(mode) => Flex(\r\n    direction: mode,\r\n    children: <Widget>[\r\n      blueBox, redBox, greenBox\r\n    ],\r\n  );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(197,94,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FlexNode2 extends StatelessWidget {\r\n  const FlexNode2({super.key});\r\n\r\n  static TextStyle textStyle =\r\n      const TextStyle(color: Colors.white, fontWeight: FontWeight.bold);\r\n\r\n  Widget get blueBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.blue,\r\n    height: 20,\r\n    width: 30,\r\n    child: Text(''1'', style: textStyle),\r\n  );\r\n\r\n  Widget get redBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.red,\r\n    height: 30,\r\n    width: 40,\r\n    child: Text(''2'', style: textStyle),\r\n  );\r\n\r\n  Widget get greenBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.green,\r\n    height: 20,\r\n    width: 20,\r\n    child: Text(''3'', style: textStyle),\r\n  );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        runSpacing: 5,\r\n        children: MainAxisAlignment.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n              width: 160,\r\n              height: 80,\r\n              color: Colors.grey.withAlpha(33),\r\n              child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  Widget _buildItem(mode) => Flex(\r\n    direction: Axis.horizontal,\r\n    mainAxisAlignment: mode,\r\n    children: <Widget>[\r\n      blueBox, redBox, greenBox\r\n    ],\r\n  );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(198,94,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FlexNode3 extends StatelessWidget {\r\n  const FlexNode3({super.key});\r\n\r\n  static TextStyle textStyle =\r\n  const TextStyle(color: Colors.white, fontWeight: FontWeight.bold);\r\n\r\n  Widget get blueBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.blue,\r\n    height: 20,\r\n    width: 30,\r\n    child: Text(''1'', style: textStyle),\r\n  );\r\n\r\n  Widget get redBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.red,\r\n    height: 30,\r\n    width: 40,\r\n    child: Text(''2'', style: textStyle),\r\n  );\r\n\r\n  Widget get greenBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.green,\r\n    height: 20,\r\n    width: 20,\r\n    child: Text(''3'', style: textStyle),\r\n  );\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        runSpacing: 5,\r\n        children: CrossAxisAlignment.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n              width: 160,\r\n              height: 80,\r\n              color: Colors.grey.withAlpha(33),\r\n              child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  Widget _buildItem(mode) => Flex(\r\n    direction: Axis.horizontal,\r\n    crossAxisAlignment: mode,\r\n    textBaseline: TextBaseline.alphabetic,\r\n    children: <Widget>[\r\n      blueBox, redBox, greenBox\r\n    ],\r\n  );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(199,94,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FlexNode4 extends StatelessWidget {\r\n  const FlexNode4({super.key});\r\n\r\n  static TextStyle textStyle =\r\n      const TextStyle(color: Colors.white, fontWeight: FontWeight.bold);\r\n\r\n  Widget get blueBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.blue,\r\n    height: 20,\r\n    width: 30,\r\n    child: Text(''1'', style: textStyle),\r\n  );\r\n\r\n  Widget get redBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.red,\r\n    height: 30,\r\n    width: 40,\r\n    child: Text(''2'', style: textStyle),\r\n  );\r\n\r\n  Widget get greenBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.green,\r\n    height: 20,\r\n    width: 20,\r\n    child: Text(''3'', style: textStyle),\r\n  );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        runSpacing: 5,\r\n        children: VerticalDirection.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n              width: 160,\r\n              height: 80,\r\n              color: Colors.grey.withAlpha(33),\r\n              child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  Widget _buildItem(mode) => Flex(\r\n        direction: Axis.vertical,\r\n        verticalDirection: mode,\r\n        children: <Widget>[blueBox, redBox, greenBox],\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(200,94,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FlexNode5 extends StatelessWidget {\r\n  const FlexNode5({super.key});\r\n\r\n  static TextStyle textStyle =\r\n      const TextStyle(color: Colors.white, fontWeight: FontWeight.bold);\r\n\r\n  Widget get blueBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.blue,\r\n    height: 20,\r\n    width: 30,\r\n    child: Text(''1'', style: textStyle),\r\n  );\r\n\r\n  Widget get redBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.red,\r\n    height: 30,\r\n    width: 40,\r\n    child: Text(''2'', style: textStyle),\r\n  );\r\n\r\n  Widget get greenBox => Container(\r\n    alignment: Alignment.center,\r\n    color: Colors.green,\r\n    height: 20,\r\n    width: 20,\r\n    child: Text(''3'', style: textStyle),\r\n  );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        runSpacing: 5,\r\n        children: TextDirection.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n                      width: 160,\r\n                      height: 80,\r\n                      color: Colors.grey.withAlpha(33),\r\n                      child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  Widget _buildItem(mode) => Flex(\r\n        direction: Axis.horizontal,\r\n        textDirection: mode,\r\n        children: <Widget>[blueBox, redBox, greenBox],\r\n      );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(201,109,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020-03-22\r\012/// contact me by email 1981462002@qq.com\r\012\r\012class CustomFlexible extends StatefulWidget {\r\012  const CustomFlexible({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  _CustomFlexibleState createState() => _CustomFlexibleState();\r\012}\r\012\r\012class _CustomFlexibleState extends State<CustomFlexible> {\r\012  double _width = 300.0;\r\012  bool _loose = false;\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return Column(children: <Widget>[\r\012      Container(\r\012          color: Colors.grey.withAlpha(33),\r\012          width: _width,\r\012          padding: const EdgeInsets.all(8.0),\r\012          child: Row(\r\012            children: <Widget>[\r\012              Flexible(\r\012                flex: 2,\r\012                child: Container(\r\012                  alignment: Alignment.center,\r\012                  height: 50,\r\012                  color: Colors.red,\r\012                  child: const Text(\r\012                    ''flex=2'',\r\012                    style: TextStyle(color: Colors.white),\r\012                  ),\r\012                ),\r\012              ),\r\012              Flexible(\r\012                flex: 3,\r\012                child: Container(\r\012                  alignment: Alignment.center,\r\012                  height: 50,\r\012                  color: Colors.blue,\r\012                  child: const Text(\r\012                    ''flex=3'',\r\012                    style: TextStyle(color: Colors.white),\r\012                  ),\r\012                ),\r\012              ),\r\012              Flexible(\r\012                flex: 4,\r\012                fit: _loose?FlexFit.loose:FlexFit.tight,\r\012                child: Container(\r\012                  constraints: const BoxConstraints(maxWidth: 60),\r\012                  alignment: Alignment.center,\r\012                  height: 50,\r\012                  color: Colors.green,\r\012                  child: Text(\r\012                    ''flex=4 \nfit:${_loose?''loose'':''tight''}'',\r\012                    style: const TextStyle(color: Colors.white),\r\012                  ),\r\012                ),\r\012              )\r\012            ],\r\012          )),\r\012      _buildOp()\r\012    ]);\r\012  }\r\012\r\012  Widget _buildOp() => Row(\r\012      children: [\r\012        Switch(\r\012            value: _loose,\r\012            onChanged: (v) => setState(() => _loose = v)),\r\012        Expanded(\r\012          child: Slider(\r\012            divisions: 10,\r\012              min: 100,\r\012              max: 350,\r\012              value: _width,\r\012              onChanged: (v) => setState(() => _width = v)),\r\012        ),\r\012      ],\r\012    );\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(202,196,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass FlexibleSpaceBarDemo extends StatelessWidget {\r\n  const FlexibleSpaceBarDemo({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.blue[50]!,\r\n    Colors.blue[100]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[_buildSliverAppBar(), _buildSliverFixedExtentList()],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      actions: _buildActions(),\r\n      pinned: true,\r\n      backgroundColor: Colors.blue,\r\n      flexibleSpace: FlexibleSpaceBar(//伸展处布局\r\n        centerTitle: false,\r\n        title: const Text(\r\n          ''张风捷特烈'',\r\n          style: TextStyle(shadows: [\r\n            Shadow(color: Colors.blue, offset: Offset(1, 1), blurRadius: 2)\r\n          ]),\r\n        ),\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15),\r\n        //标题边距\r\n        collapseMode: CollapseMode.parallax,\r\n        //视差效果\r\n        stretchModes: const [StretchMode.blurBackground, StretchMode.zoomBackground],\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n    IconButton(\r\n      onPressed: () {},\r\n      icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n    )\r\n  ];\r\n\r\n  Widget _buildSliverFixedExtentList() => SliverFixedExtentList(\r\n    itemExtent: 60,\r\n    delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n          alignment: Alignment.center,\r\n          width: 100,\r\n          height: 50,\r\n          color: data[index],\r\n          child: Text(\r\n            colorString(data[index]),\r\n            style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n          ),\r\n        ),\r\n        childCount: data.length),\r\n  );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(203,28,0,replace(replace('/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomFAB extends StatelessWidget {\r\n  const CustomFAB({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Map<Color,IconData> data = {\r\n      Colors.red: Icons.add,\r\n      Colors.blue: Icons.bluetooth,\r\n      Colors.green: Icons.android,\r\n    };\r\n    return Wrap(\r\n        spacing: 20,\r\n        children: data.keys\r\n            .map((e) => FloatingActionButton(\r\n          heroTag: e.toString()+"a",\r\n          onPressed: () {},\r\n          backgroundColor: e,\r\n          foregroundColor: Colors.white,\r\n          child: Icon(data[e]),\r\n          tooltip: "android",\r\n          elevation: 5, //z-阴影盖度\r\n        )).toList());\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(204,28,0,replace(replace('/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass MiniFAB extends StatelessWidget {\r\n  const MiniFAB({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Map<Color,IconData> data = {\r\n      Colors.red: Icons.add,\r\n      Colors.blue: Icons.bluetooth,\r\n      Colors.green: Icons.android,\r\n    };\r\n    return Wrap(\r\n        spacing: 20,\r\n        children: data.keys\r\n            .map((e) => FloatingActionButton(\r\n          heroTag:  e.toString()+"b",\r\n          onPressed: () {},\r\n          backgroundColor: e,\r\n          mini: true,\r\n          foregroundColor: Colors.white,\r\n          child: Icon(data[e]),\r\n          tooltip: "android",\r\n          elevation: 5, //z-阴影盖度\r\n        )).toList());\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(205,28,0,replace(replace('/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nimport ''../../utils/pather.dart'';\r\n\r\nclass ShapeFAB extends StatelessWidget {\r\n  const ShapeFAB({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Map<Color, IconData> data = {\r\n      Colors.red: Icons.add,\r\n      Colors.blue: Icons.bluetooth,\r\n      Colors.green: Icons.android,\r\n    };\r\n    return Wrap(\r\n        spacing: 20,\r\n        children: data.keys\r\n            .map((e) => FloatingActionButton(\r\n                  heroTag: e.toString() + "c",\r\n                  onPressed: () {},\r\n                  backgroundColor: e,\r\n                  shape: StarBorder(),\r\n                  foregroundColor: Colors.white,\r\n                  child: Icon(data[e]),\r\n                  tooltip: "android",\r\n                  elevation: 5,\r\n                ))\r\n            .toList());\r\n  }\r\n}\r\n\r\n/// 边线形状类\r\nclass StarBorder extends ShapeBorder {\r\n  @override\r\n  EdgeInsetsGeometry get dimensions => EdgeInsets.zero;\r\n\r\n  @override\r\n  Path getInnerPath(Rect rect, {TextDirection? textDirection}) => Path();\r\n\r\n  @override\r\n  Path getOuterPath(Rect rect, {TextDirection? textDirection}) {\r\n    return Pather.create.nStarPath(20, 25, 25 * cos((360 / 9 / 2) * pi / 180),\r\n        dx: rect.height / 2, dy: rect.width / 2);\r\n  }\r\n\r\n  @override\r\n  void paint(Canvas canvas, Rect rect, {TextDirection? textDirection}) {}\r\n\r\n  @override\r\n  ShapeBorder scale(double t) => this;\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(206,99,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FlowNode1 extends StatelessWidget {\r\n  const FlowNode1({super.key});\r\n\r\n  List<String> get data => List.generate(\r\n      16,\r\n      (index) => index.isEven\r\n          ? "assets/images/icon_head.webp"\r\n          : "assets/images/wy_300x200.webp");\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 300,\r\n      height: 300,\r\n      alignment: Alignment.center,\r\n      child: Flow(\r\n        delegate: _CircleFlowDelegate(),\r\n        children: data\r\n            .map((e) => CircleAvatar(backgroundImage: AssetImage(e)))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _CircleFlowDelegate extends FlowDelegate {\r\n\r\n  @override //绘制孩子的方法\r\n  void paintChildren(FlowPaintingContext context) {\r\n    final double radius = context.size.shortestSide / 2;\r\n    final int count = context.childCount;\r\n    final double perRad = 2 * pi / count;\r\n    for (int i = 0; i < count; i++) {\r\n      final Size size = context.getChildSize(i) ?? Size.zero;\r\n      final double offsetX =\r\n          (radius - size.width / 2) * cos(i * perRad) + radius;\r\n      final double offsetY =\r\n          (radius - size.height / 2) * sin(i * perRad) + radius;\r\n      context.paintChild(i,\r\n          transform: Matrix4.translationValues(\r\n              offsetX - size.width / 2, offsetY - size.height / 2, 0.0));\r\n    }\r\n  }\r\n\r\n  @override\r\n  bool shouldRepaint(FlowDelegate oldDelegate) => false;\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(207,99,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FlowNode02 extends StatefulWidget {\r\n  const FlowNode02({\r\n    super.key,\r\n  });\r\n\r\n  @override\r\n  State createState() => _FlowNode02State();\r\n}\r\n\r\nclass _FlowNode02State extends State<FlowNode02>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _controller;\r\n  double _rad = 0.0;\r\n  bool _closed = true;\r\n\r\n  List<String> get data => List.generate(\r\n      16,\r\n      (index) => index.isEven\r\n          ? "assets/images/icon_head.webp"\r\n          : "assets/images/wy_300x200.webp");\r\n\r\n  @override\r\n  void initState() {\r\n    _controller = AnimationController(\r\n      duration: const Duration(milliseconds: 1000),\r\n      vsync: this,\r\n    )\r\n      ..addListener(() => setState(\r\n          () => _rad = (_closed ? (_controller.value) : 1 - _controller.value)))\r\n      ..addStatusListener((status) {\r\n        if (status == AnimationStatus.completed) {\r\n          _closed = !_closed;\r\n        }\r\n      });\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _controller.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Flow(\r\n      delegate: _BurstFlowDelegate(_rad),\r\n      children: [\r\n        ...data.map((e) => CircleAvatar(backgroundImage: AssetImage(e))),\r\n        InkWell(\r\n            onTap: () {\r\n              _controller.reset();\r\n              _controller.forward();\r\n            },\r\n            child: const CircleAvatar(\r\n              backgroundImage: AssetImage(''assets/images/icon_head.webp''),\r\n            ))\r\n      ],\r\n    );\r\n  }\r\n}\r\n\r\nclass _BurstFlowDelegate extends FlowDelegate {\r\n  final double rad;\r\n\r\n  _BurstFlowDelegate(this.rad);\r\n\r\n  @override //绘制孩子的方法\r\n  void paintChildren(FlowPaintingContext context) {\r\n    double radius = context.size.shortestSide / 2;\r\n    final int count = context.childCount - 1;\r\n    final double perRad = 2 * pi / count;\r\n    for (int i = 0; i < count; i++) {\r\n      Size size = context.getChildSize(i) ?? Size.zero;\r\n      final double offsetX =\r\n          rad * (radius - size.width / 2) * cos(i * perRad) + radius;\r\n      final double offsetY =\r\n          rad * (radius - size.height / 2) * sin(i * perRad) + radius;\r\n      context.paintChild(i,\r\n          transform: Matrix4.translationValues(\r\n              offsetX - size.width / 2, offsetY - size.height / 2, 0.0));\r\n    }\r\n\r\n    Size size = context.getChildSize(context.childCount - 1) ?? Size.zero;\r\n\r\n    context.paintChild(context.childCount - 1,\r\n        transform: Matrix4.translationValues(\r\n            radius - size.width / 2, radius - size.height / 2, 0.0));\r\n  }\r\n\r\n  @override\r\n  bool shouldRepaint(_BurstFlowDelegate oldDelegate) => oldDelegate.rad != rad;\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(208,4,0,replace(replace('\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass CustomFlutterLogo extends StatelessWidget {\r\n  const CustomFlutterLogo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    Map<Color,double> data = {\r\n      Colors.blue:50.0,\r\n      Colors.red:60.0,\r\n      Colors.green:70.0,\r\n      Colors.yellow:80.0,\r\n    };\r\n    return Wrap(\r\n      children: data.keys\r\n          .map((e) => FlutterLogo(\r\n        size: data[e],\r\n        textColor: e,\r\n      )).toList(),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(209,4,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FlutterLogoWithText extends StatelessWidget {\r\n  const FlutterLogoWithText({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final Map<FlutterLogoStyle, Color> data = {\r\n      FlutterLogoStyle.horizontal: Colors.blue,\r\n      FlutterLogoStyle.markOnly: Colors.red,\r\n      FlutterLogoStyle.stacked: Colors.green,\r\n    };\r\n\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: data.keys\r\n          .map((FlutterLogoStyle style) => FlutterLogo(\r\n                size: 80,\r\n                style: style,\r\n                textColor: data[style]!,\r\n              ))\r\n          .toList(),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(210,282,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:flutter/services.dart'';\r\n\r\nclass FocusDemo1 extends StatefulWidget {\r\n  const FocusDemo1({super.key});\r\n\r\n  @override\r\n  State<FocusDemo1> createState() => _FocusDemo1State();\r\n}\r\n\r\nclass _FocusDemo1State extends State<FocusDemo1> {\r\n  final FocusNode _focusNode = FocusNode();\r\n\r\n  @override\r\n  void dispose() {\r\n    super.dispose();\r\n    _focusNode.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Focus(\r\n      focusNode: _focusNode,\r\n      onFocusChange: _onFocusChange,\r\n      child: GestureDetector(\r\n        onTap: _toggleFocus,\r\n        child: _FocusBox(active: _focusNode.hasFocus),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onFocusChange(bool value) {\r\n    setState(() {});\r\n  }\r\n\r\n  void _toggleFocus() {\r\n    if (_focusNode.hasFocus) {\r\n      _focusNode.unfocus();\r\n    } else {\r\n      _focusNode.requestFocus();\r\n    }\r\n  }\r\n}\r\n\r\nclass _FocusBox extends StatelessWidget {\r\n  final bool active;\r\n\r\n  const _FocusBox({super.key, required this.active});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Color color = active ? Colors.blue : Colors.white;\r\n    Color borderColor = active ? Colors.lightBlue : Colors.grey;\r\n    Color? textColor = active ? Colors.white : null;\r\n    String text = active ? "点击失去焦点" : ''点击获取焦点'';\r\n    return Container(\r\n      width: 120,\r\n      height: 60,\r\n      decoration: BoxDecoration(\r\n        borderRadius: BorderRadius.circular(8),\r\n        border: Border.all(color: borderColor),\r\n        color: color,\r\n      ),\r\n      alignment: Alignment.center,\r\n      child: Text(text, style: TextStyle(color: textColor)),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(211,282,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// Flutter code sample for [Focus].\r\n\r\nvoid main() => runApp(const FocusExampleApp());\r\n\r\nclass FocusExampleApp extends StatelessWidget {\r\n  const FocusExampleApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const MaterialApp(\r\n      home: FocusDemo2(),\r\n    );\r\n  }\r\n}\r\n\r\nclass _FocusTiled extends StatelessWidget {\r\n  const _FocusTiled(\r\n    this.data, {\r\n    super.key,\r\n    required this.autofocus,\r\n  });\r\n\r\n  final String data;\r\n  final bool autofocus;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Focus(\r\n      autofocus: autofocus,\r\n      child: Builder(builder: _buildTiled),\r\n    );\r\n  }\r\n\r\n  Widget _buildTiled(BuildContext context) {\r\n    FocusNode node = Focus.of(context);\r\n    bool focus = node.hasFocus;\r\n    Color color = focus ? Colors.blue : Colors.white;\r\n    Color? textColor = focus ? Colors.white : null;\r\n    return GestureDetector(\r\n      onTap: node.requestFocus,\r\n      child: Container(\r\n        padding: const EdgeInsets.all(8.0),\r\n        alignment: Alignment.center,\r\n        color: color,\r\n        child: Text(data, style: TextStyle(color: textColor)),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass FocusDemo2 extends StatelessWidget {\r\n  const FocusDemo2({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      padding: const EdgeInsets.symmetric(horizontal: 24),\r\n      height: 56,\r\n      child: ListView.builder(\r\n        scrollDirection: Axis.horizontal,\r\n        itemBuilder: (_, int index) => _FocusTiled(\r\n          ''Item $index'',\r\n          autofocus: index == 0,\r\n        ),\r\n        itemCount: 50,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(212,282,0,replace(replace('import ''package:flutter/material.dart'';\r\nimport ''package:flutter/services.dart'';\r\n\r\nclass FocusDemo3 extends StatefulWidget {\r\n  const FocusDemo3({super.key});\r\n\r\n  @override\r\n  State<FocusDemo3> createState() => _FocusDemo3State();\r\n}\r\n\r\nclass _FocusDemo3State extends State<FocusDemo3> {\r\n  FocusNode focusNode = FocusNode();\r\n  List<KeyEvent> events = [];\r\n  ScrollController _ctrl = ScrollController();\r\n\r\n  @override\r\n  void initState() {\r\n    focusNode.addListener(_onFocusChange);\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    focusNode.removeListener(_onFocusChange);\r\n    focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Center(\r\n      child: TapRegion(\r\n        onTapInside: (_) => focusNode.requestFocus(),\r\n        onTapOutside: (_) => focusNode.unfocus(),\r\n        child: Focus(\r\n          autofocus: true,\r\n          focusNode: focusNode,\r\n          onKeyEvent: _onKeyEvent,\r\n          child: _buildDisplay(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  KeyEventResult _onKeyEvent(FocusNode node,KeyEvent value) {\r\n    events.add(value);\r\n    setState(() {});\r\n    _scrollToEnd();\r\n    print(''${value.runtimeType}:${value.logicalKey.keyLabel}'');\r\n    return KeyEventResult.ignored;\r\n  }\r\n\r\n  void _onFocusChange() {\r\n    if (!focusNode.hasFocus) {\r\n      events.clear();\r\n    }\r\n    setState(() {});\r\n  }\r\n\r\n  void _scrollToEnd() async {\r\n    if (_ctrl.hasClients) {\r\n      await Future.delayed(Duration(milliseconds: 200));\r\n      _ctrl.animateTo(_ctrl.position.maxScrollExtent,\r\n          duration: Duration(milliseconds: 100), curve: Curves.ease);\r\n    }\r\n  }\r\n\r\n  Widget _buildDisplay() {\r\n    Color color = focusNode.hasFocus ? Colors.blue : Colors.grey;\r\n\r\n    return Container(\r\n      decoration: BoxDecoration(border: Border.all(color: color)),\r\n      width: 460,\r\n      padding: EdgeInsets.symmetric(horizontal: 12),\r\n      alignment: Alignment.center,\r\n      height: 60,\r\n      child: events.isNotEmpty\r\n          ? SizedBox(\r\n              width: 460,\r\n              height: 60,\r\n              child: ListView.builder(\r\n                  controller: _ctrl,\r\n                  itemCount: events.length,\r\n                  scrollDirection: Axis.horizontal,\r\n                  itemBuilder: (_, index) => _KeyBoardBox(\r\n                        event: events[index],\r\n                      )),\r\n            )\r\n          : Text(\r\n              focusNode.hasFocus ? ''键盘输入点东西吧'' : ''点击我获取焦点'',\r\n              style: TextStyle(color: color),\r\n            ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _KeyBoardBox extends StatelessWidget {\r\n  final KeyEvent event;\r\n\r\n  const _KeyBoardBox({super.key, required this.event});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Color? color;\r\n    if (event is KeyDownEvent) {\r\n      color = Colors.blue;\r\n    }\r\n    if (event is KeyRepeatEvent) {\r\n      color = Colors.green;\r\n    }\r\n    if (event is KeyUpEvent) {\r\n      color = Colors.grey;\r\n    }\r\n    return Center(\r\n      child: Container(\r\n        margin: EdgeInsets.only(right: 4),\r\n        width: 32,\r\n        height: 32,\r\n        decoration: BoxDecoration(color: color),\r\n        alignment: Alignment.center,\r\n        child: Text(\r\n          event.logicalKey.keyLabel,\r\n          textAlign: TextAlign.center,\r\n          style: TextStyle(color: Colors.white, fontSize: 8, height: 1),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(213,198,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomForm extends StatefulWidget {\r\n  const CustomForm({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomFormState createState() => _CustomFormState();\r\n}\r\n\r\nclass _CustomFormState extends State<CustomForm> {\r\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Form(\r\n      onWillPop: () => _willPop(context),\r\n      key: _formKey,\r\n      onChanged: () {\r\n        print(''Form---onChanged'');\r\n      },\r\n      child:\r\n          Stack(\r\n            alignment: Alignment.centerRight,\r\n            children: <Widget>[\r\n              SizedBox(\r\n                width: 350,\r\n                child: UnconstrainedBox(\r\n                  child: SizedBox(\r\n                    width: 200,\r\n                    height: 70,\r\n                    child: TextFormField(\r\n                      style: const TextStyle(textBaseline: TextBaseline.alphabetic),\r\n                      decoration: const InputDecoration(\r\n                        border: OutlineInputBorder(),\r\n                        labelText: ''username'',\r\n                      ),\r\n                      validator: _validateUsername,\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n              Positioned(\r\n                  top: 0, right: 0, child: _buildSubmitButton(context)),\r\n            ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  String? _validateUsername(value) {\r\n    if (value.isEmpty) {\r\n      return ''用户名不能为空'';\r\n    }\r\n    return null;\r\n  }\r\n\r\n  Widget _buildSubmitButton(BuildContext context) {\r\n    return ElevatedButton(\r\n      style: TextButton.styleFrom(\r\n        backgroundColor: Colors.blue,\r\n        shape: const CircleBorder(\r\n          side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n        ),\r\n      ),\r\n      onPressed: _onSubmit,\r\n      child: const Icon(\r\n        Icons.check,\r\n        color: Colors.white,\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onSubmit(){\r\n    if(_formKey.currentState==null) return;\r\n     if (_formKey.currentState!.validate()) {\r\n      FocusScope.of(context).requestFocus(FocusNode());\r\n      Navigator.of(context).pop();\r\n    }\r\n  }\r\n\r\n  Future<bool> _willPop(context) async {\r\n    return await showDialog(\r\n          context: context,\r\n          builder: (context) => AlertDialog(\r\n            shape: const RoundedRectangleBorder(\r\n                borderRadius: BorderRadius.all(Radius.circular(10))),\r\n            title: const Text(''提示''),\r\n            content: const Text(''你确定要离开此页吗?''),\r\n            actions: <Widget>[\r\n              ElevatedButton(\r\n                onPressed: () => Navigator.of(context).pop(true),\r\n                child: const Text(''确定''),\r\n              ),\r\n              ElevatedButton(\r\n                onPressed: () => Navigator.of(context).pop(false),\r\n                child: const Text(''取消''),\r\n              ),\r\n            ],\r\n          ),\r\n        ) ??\r\n        false;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(214,222,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FormFieldDemo extends StatelessWidget {\r\n  const FormFieldDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''FormField 代表表单中的一个字段，对于字符串类型的字段，框架中封装了 TextFormField 以便使用；下拉选择的字段，用 DropdownButtonFormField。''\r\n      ''目前框架中 FormField 的子类也只有这两个。既然是表单字段，必然是要和 Form 组件一起使用。通过对 Form 添加 GlobalKey ，来获取 FormState 对象。''\r\n      ''当 FormState 调用 save 方法时，所有的 FormField 都会触发 onSave 方法，当 FormState 调用 validate 方法时，所有的 FormField 都会触发 validate 方法。'';\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    \r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(215,82,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomFractionallySizedBox extends StatefulWidget {\r\n  const CustomFractionallySizedBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomFractionallySizedBoxState createState() =>\r\n      _CustomFractionallySizedBoxState();\r\n}\r\n\r\nclass _CustomFractionallySizedBoxState\r\n    extends State<CustomFractionallySizedBox> {\r\n  double _hf = 0.5;\r\n  double _wf = 0.4;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget box = FractionallySizedBox(\r\n      widthFactor: _wf,\r\n      heightFactor: _hf,\r\n      alignment: Alignment.center,\r\n      child: Container(color: Colors.orange),\r\n    );\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n            color: Colors.grey.withAlpha(22),\r\n            width: 200,\r\n            height: 100,\r\n            child: box),\r\n        _buildSlider()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSlider() => Column(\r\n    children: <Widget>[\r\n      Slider(\r\n          divisions: 20,\r\n          min: 0.0,\r\n          max: 2,\r\n          label: ''宽分率:'' + _wf.toStringAsFixed(1),\r\n          value: _wf,\r\n          onChanged: (v) => setState(() => _wf = v)),\r\n      Slider(\r\n          divisions: 20,\r\n          min: 0.0,\r\n          max: 2,\r\n          label: ''高分率:'' + _hf.toStringAsFixed(1),\r\n          value: _hf,\r\n          onChanged: (v) => setState(() => _hf = v)),\r\n    ],\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(216,263,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass FractionalTranslationDemo extends StatefulWidget {\r\n  const FractionalTranslationDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _FractionalTranslationDemoState createState() =>\r\n      _FractionalTranslationDemoState();\r\n}\r\n\r\nclass _FractionalTranslationDemoState extends State<FractionalTranslationDemo> {\r\n  double dx = 0.0;\r\n  double dy = 0.0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    print(dx);\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: <Widget>[\r\n        Container(\r\n          width: 200,\r\n          height: 100,\r\n          alignment: Alignment.topLeft,\r\n          color: Colors.grey.withAlpha(33),\r\n          child: FractionalTranslation(\r\n            translation: Offset(dx, dy),\r\n            child: const Icon(\r\n              Icons.android,\r\n              color: Colors.green,\r\n            ),\r\n          ),\r\n        ),\r\n        _buildSliderX(),\r\n        _buildSliderY()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSliderX() => Slider(\r\n        min: -2.0,\r\n        max: 10.0,\r\n        value: dx,\r\n    divisions: 100,\r\n        label: ''dx:${dx.toStringAsFixed(1)}'',\r\n        onChanged: (v) => setState(() => dx = v),\r\n      );\r\n\r\n\r\n  Widget _buildSliderY() => Slider(\r\n    min: -2.0,\r\n    max: 6.0,\r\n    value: dy,\r\n    divisions: 100,\r\n    label: ''dy:${dy.toStringAsFixed(1)}'',\r\n    onChanged: (v) => setState(() => dy = v),\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(217,172,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomFutureBuilder extends StatefulWidget {\r\n  const CustomFutureBuilder({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomFutureBuilderState createState() => _CustomFutureBuilderState();\r\n}\r\n\r\nclass _CustomFutureBuilderState extends State<CustomFutureBuilder> {\r\n late Future<String> _future;\r\n\r\n  @override\r\n  void initState() {\r\n    _future = loadData();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return FutureBuilder(\r\n        initialData: ''Load'',\r\n        future: _future,\r\n        builder: (ctx, snap) {\r\n          if (snap.connectionState == ConnectionState.done) {\r\n            return Text(''${snap.data}'');\r\n          }\r\n          if (snap.connectionState == ConnectionState.waiting) {\r\n            return const CircularProgressIndicator();\r\n          }\r\n          if (snap.hasError) {\r\n            return const Text(''Error'');\r\n          }\r\n          return Container();\r\n        });\r\n  }\r\n\r\n  Future<String> loadData() async {\r\n    await Future.delayed(const Duration(seconds: 2));\r\n    return ''LoadeSuccess'';\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(218,146,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomGestureDetector extends StatefulWidget {\r\n  const CustomGestureDetector({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomGestureDetectorState createState() => _CustomGestureDetectorState();\r\n}\r\n\r\nclass _CustomGestureDetectorState extends State<CustomGestureDetector> {\r\n  String _info = '''';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: () => setState(() => _info = ''onTap''),\r\n      onDoubleTap: () => setState(() => _info = ''onDoubleTap''),\r\n      onLongPress: () => setState(() => _info = ''onLongPress''),\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        width: 300,\r\n        height: 300 * 0.4,\r\n        color: Colors.grey.withAlpha(33),\r\n        child: Text(\r\n          _info,\r\n          style: const TextStyle(fontSize: 18, color: Colors.blue),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(219,146,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020/4/27\r\012/// contact me by email 1981462002@qq.com\r\012\r\012class TapGestureDetector extends StatefulWidget {\r\012  const TapGestureDetector({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  _TapGestureDetectorState createState() => _TapGestureDetectorState();\r\012}\r\012\r\012class _TapGestureDetectorState extends State<TapGestureDetector> {\r\012  String _info = '''';\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return GestureDetector(\r\012      onTapDown: (detail) => setState(() => _info =\r\012      ''onTapDown:\n相对落点:${detail.localPosition}\n绝对落点:${detail.globalPosition}''),\r\012      onTapUp: (detail) => setState(() => _info =\r\012      ''onTapUp:\n相对落点:${detail.localPosition}\n绝对落点:${detail.globalPosition}''),\r\012      onTapCancel: () => setState(() => _info = ''onTapCancel''),\r\012      child: Container(\r\012        alignment: Alignment.center,\r\012        width: 300,\r\012        height: 300 * 0.618,\r\012        color: Colors.grey.withAlpha(33),\r\012        child: Text(\r\012          _info,\r\012          style: const TextStyle(fontSize: 18, color: Colors.blue),\r\012        ),\r\012      ),\r\012    );\r\012  }\r\012}','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(220,146,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020-03-25\r\012/// contact me by email 1981462002@qq.com\r\012\r\012class PanGestureDetector extends StatefulWidget {\r\012  const PanGestureDetector({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  _PanGestureDetectorState createState() => _PanGestureDetectorState();\r\012}\r\012\r\012class _PanGestureDetectorState extends State<PanGestureDetector> {\r\012  String _info = '''';\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return GestureDetector(\r\012      onPanDown: (detail) => setState(() => _info =\r\012      ''onPanDown:\n相对落点:${detail.localPosition}\n绝对落点:${detail.globalPosition}''),\r\012      onPanEnd: (detail) => setState(() => _info =\r\012      ''onPanEnd:\n初速度:${detail.primaryVelocity}\n最终速度:${detail.velocity}''),\r\012      onPanUpdate: (detail) => setState(() => _info =\r\012      ''onPanUpdate:\n相对落点:${detail.localPosition}\n绝对落点:${detail.globalPosition}''),\r\012      onPanStart: (detail) => setState(() => _info =\r\012      ''onPanStart:\n相对落点:${detail.localPosition}\n绝对落点:${detail.globalPosition}''),\r\012      onPanCancel: () => setState(() => _info = ''onTapCancel''),\r\012      child: SingleChildScrollView(\r\012        child: Container(\r\012          alignment: Alignment.center,\r\012          width: 300,\r\012          height: 300 * 0.618,\r\012          color: Colors.grey.withAlpha(33),\r\012          child: Text(\r\012            _info,\r\012            style: const TextStyle(fontSize: 18, color: Colors.blue),\r\012          ),\r\012        ),\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(221,250,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass GlowingOverscrollIndicatorDemo extends StatelessWidget {\r\n  const GlowingOverscrollIndicatorDemo({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n    Colors.red[50]!,\r\n    Colors.red[100]!,\r\n    Colors.red[200]!,\r\n    Colors.red[300]!,\r\n    Colors.red[400]!,\r\n    Colors.red[500]!,\r\n    Colors.red[600]!,\r\n    Colors.red[700]!,\r\n    Colors.red[800]!,\r\n    Colors.red[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: GlowingOverscrollIndicator(\r\n        color: Colors.purple,\r\n        // showLeading: false,\r\n        // showTrailing: false,\r\n        axisDirection: AxisDirection.down,\r\n        child: ListView.builder(\r\n          itemBuilder: (_, index) => Container(\r\n            margin: const EdgeInsets.all(10),\r\n            height: 60,\r\n            color: data[index],\r\n          ),\r\n          itemCount: data.length,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(222,37,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomGridPaper extends StatelessWidget {\r\n  const CustomGridPaper({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n        width: 200,\r\n        height: 100,\r\n        child: GridPaper(\r\n            color: Colors.red,\r\n            interval: 50,\r\n            child: Image.asset(\r\n              "assets/images/wy_300x200.webp",\r\n              fit: BoxFit.cover,\r\n            )));\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(223,37,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DivisionsGridPaper extends StatelessWidget {\r\n  const DivisionsGridPaper({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n        width: 200,\r\n        height: 100,\r\n        child: GridPaper(\r\n            color: Colors.red,\r\n            interval: 50,\r\n            divisions: 4,\r\n            subdivisions: 4,\r\n            child: Image.asset(\r\n              "assets/images/wy_300x200.webp",\r\n              fit: BoxFit.cover,\r\n            )));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(224,21,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomGridTile extends StatelessWidget {\r\n  const CustomGridTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: 200,\r\n      height: 200,\r\n      child: GridTile(\r\n        header: GridTileBar(\r\n          backgroundColor: Colors.blue.withAlpha(120),\r\n          trailing: const Icon(Icons.star, color: Colors.red),\r\n          leading: const CircleAvatar(\r\n            backgroundImage: AssetImage("assets/images/wy_200x300.webp"),\r\n          ),\r\n          title: const Text("百里·巫缨"),\r\n          subtitle: const Text("倾国必倾城"),\r\n        ),\r\n        child: Opacity(\r\n          opacity: 0.5,\r\n          child: Image.asset("assets/images/sabar.webp", fit: BoxFit.cover),\r\n        ),\r\n        footer: const Padding(\r\n          padding: EdgeInsets.all(8.0),\r\n          child: Text(\r\n            "ID:z\$ySX32&29",\r\n            style: TextStyle(\r\n              shadows: [\r\n                Shadow(\r\n                    color: Colors.blue, offset: Offset(.1, .1), blurRadius: 2),\r\n              ],\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(225,20,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\n\r\nclass CustomGridTileBar extends StatelessWidget {\r\n  const CustomGridTileBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GridTileBar(\r\n      backgroundColor: Colors.blue.withAlpha(120),\r\n      trailing: const Icon(Icons.star, color: Colors.red),\r\n      leading: const CircleAvatar(\r\n        backgroundImage: AssetImage("assets/images/wy_200x300.webp"),\r\n      ),\r\n      title: const Text("百里·巫缨"),\r\n      subtitle: const Text("倾国必倾城"),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(226,163,0,replace(replace('\r\012import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020-03-27\r\012/// contact me by email 1981462002@qq.com\r\012/// 说明:\r\012//    {\r\012//      "widgetId": 163,\r\012//      "name": ''GridView.count构造'',\r\012//      "priority": 1,\r\012//      "subtitle":\r\012//          "【children】 : 子组件列表   【List<Widget>】\n"\r\012//          "【crossAxisCount】 : 主轴一行box数量  【int】\n"\r\012//          "【mainAxisSpacing】 : 主轴每行间距  【double】\n"\r\012//          "【crossAxisSpacing】 : 交叉轴每行间距  【double】\n"\r\012//          "【childAspectRatio】 : box主长/交叉轴长  【double】\n"\r\012//          "【crossAxisCount】 : 主轴一行数量  【int】",\r\012//    }\r\012class CustomGridView extends StatelessWidget {\r\012  const CustomGridView({super.key});\r\012\r\012  List<Color> get data => List.generate(128, (i) => Color(0xFFFF00FF - 2 * i));\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return SizedBox(\r\012      height: 200,\r\012      child: GridView.count(\r\012        crossAxisCount: 4,\r\012        mainAxisSpacing: 2,\r\012        crossAxisSpacing: 2,\r\012        childAspectRatio: 1 / 0.618,\r\012        children: data.map((color) => _buildItem(color)).toList(),\r\012      ),\r\012    );\r\012  }\r\012\r\012  Container _buildItem(Color color) => Container(\r\012    alignment: Alignment.center,\r\012    width: 100,\r\012    height: 30,\r\012    color: color,\r\012    child: Text(\r\012      colorString(color),\r\012          style: const TextStyle(\r\012            color: Colors.white,\r\012            shadows: [\r\012              Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\012            ],\r\012          ),\r\012        ),\r\012  );\r\012\r\012  String colorString(Color color) =>\r\012      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\012}','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(227,163,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020-03-27\r\012/// contact me by email 1981462002@qq.com\r\012/// 说明:\r\012\r\012//    {\r\012//      "widgetId": 163,\r\012//      "name": ''GridView滑动方向'',\r\012//      "priority": 2,\r\012//      "subtitle":\r\012//          "【scrollDirection】 : 滑动方向   【Axis】\n"\r\012//          "【reverse】 : 是否反向滑动   【bool】\n"\r\012//          "【shrinkWrap】 : 无边界时是否包裹  【bool】",\r\012//    }\r\012class HorizontalGridView extends StatelessWidget {\r\012  const HorizontalGridView({super.key});\r\012\r\012  List<Color> get data => List.generate(128, (i) => Color(0xFF00FFFF - 2 * i));\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return SizedBox(\r\012      height: 200,\r\012      child: GridView.count(\r\012        scrollDirection: Axis.horizontal,\r\012        reverse: true,\r\012        crossAxisCount: 4,\r\012        mainAxisSpacing: 2,\r\012        crossAxisSpacing: 2,\r\012        childAspectRatio: 0.618,\r\012        children: data.map((color) => _buildItem(color)).toList(),\r\012      ),\r\012    );\r\012  }\r\012\r\012  Container _buildItem(Color color) => Container(\r\012        alignment: Alignment.center,\r\012        width: 100,\r\012        height: 30,\r\012        color: color,\r\012        child: Text(\r\012          colorString(color),\r\012          style: const TextStyle(\r\012            color: Colors.white,\r\012            shadows: [\r\012              Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\012            ],\r\012          ),\r\012        ),\r\012      );\r\012\r\012  String colorString(Color color) =>\r\012      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(228,163,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020-03-27\r\012/// contact me by email 1981462002@qq.com\r\012/// 说明:\r\012\r\012//    {\r\012//      "widgetId": 163,\r\012//      "name": ''GridView滑动方向'',\r\012//      "priority": 2,\r\012//      "subtitle":\r\012//          "【scrollDirection】 : 滑动方向   【Axis】\n"\r\012//          "【reverse】 : 是否反向滑动   【bool】\n"\r\012//          "【shrinkWrap】 : 无边界时是否包裹  【bool】",\r\012//    }\r\012class ExtentGridView extends StatelessWidget {\r\012  const ExtentGridView({super.key});\r\012\r\012  List<Color> get data => List.generate(128, (i) => Color(0xFF00FFFF - 2 * i));\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return SizedBox(\r\012      height: 200,\r\012      child: GridView.extent(\r\012        scrollDirection: Axis.horizontal,\r\012        maxCrossAxisExtent: 80.0,\r\012        mainAxisSpacing: 2,\r\012        crossAxisSpacing: 2,\r\012        childAspectRatio: 0.618,\r\012        children: data.map((color) => _buildItem(color)).toList(),\r\012      ),\r\012    );\r\012  }\r\012\r\012  Container _buildItem(Color color) => Container(\r\012        alignment: Alignment.center,\r\012        width: 100,\r\012        height: 30,\r\012        color: color,\r\012        child: Text(\r\012          colorString(color),\r\012          style: const TextStyle(\r\012            color: Colors.white,\r\012            shadows: [\r\012              Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\012            ],\r\012          ),\r\012        ),\r\012      );\r\012\r\012  String colorString(Color color) =>\r\012      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(229,163,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020-03-27\r\012/// contact me by email 1981462002@qq.com\r\012/// 说明:\r\012\r\012//    {\r\012//      "widgetId": 163,\r\012//      "name": ''GridView.builder构造'',\r\012//      "priority": 4,\r\012//      "subtitle":\r\012//          "【itemCount】 : 条目数量   【int】\n"\r\012//          "【gridDelegate】 : 网格代理   【SliverGridDelegate】\n"\r\012//          "【itemBuilder】 : 条目构造器  【IndexedWidgetBuilder】",\r\012//    }\r\012class BuilderGridView extends StatelessWidget {\r\012  const BuilderGridView({super.key});\r\012\r\012  List<Color> get data => List.generate(128, (i) => Color(0xFF33FFF - 2 * i));\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return SizedBox(\r\012      height: 200,\r\012      child: GridView.builder(\r\012          itemCount: data.length,\r\012          scrollDirection: Axis.vertical,\r\012          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\r\012              //网格代理：定交叉轴数目\r\012              crossAxisCount: 4, //条目个数\r\012              mainAxisSpacing: 5, //主轴间距\r\012              crossAxisSpacing: 5, //交叉轴间距\r\012              childAspectRatio: 1 / 0.618),\r\012          itemBuilder: (_, int position) => _buildItem(data[position])),\r\012    );\r\012  }\r\012\r\012  Widget _buildItem(Color color) => Container(\r\012        alignment: Alignment.center,\r\012        width: 100,\r\012        height: 30,\r\012        color: color,\r\012        child: Text(\r\012          colorString(color),\r\012          style: const TextStyle(\r\012            color: Colors.white,\r\012            shadows: [\r\012              Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\012            ],\r\012          ),\r\012        ),\r\012      );\r\012\r\012  String colorString(Color color) =>\r\012      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\012}','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(230,171,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomHero extends StatelessWidget {\r\n  const CustomHero({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Hero hero = Hero(\r\n      //----定义一个Hero,并添加tag标签,此中组件共享\r\n      tag: ''user-head'',\r\n      child: ClipRRect(\r\n        borderRadius: const BorderRadius.all(Radius.circular(30)),\r\n        child: Image.asset(\r\n          "assets/images/icon_head.webp",\r\n          width: 60,\r\n          height: 60,\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n\r\n    Widget container = Container(\r\n      alignment: const Alignment(-0.8, -0.8),\r\n      child: hero,\r\n      width: 250,\r\n      height: 250 * 0.618,\r\n      decoration: BoxDecoration(\r\n          gradient: LinearGradient(colors: [\r\n        Colors.red.withAlpha(99),\r\n        Colors.yellow.withAlpha(189),\r\n        Colors.green.withAlpha(88),\r\n        Colors.blue.withAlpha(230)\r\n      ])),\r\n    );\r\n\r\n    return GestureDetector(\r\n      child: Card(elevation: 5, child: container),\r\n      onTap: () => Navigator.push(\r\n        context,\r\n        Bottom2TopRouter(child: const TargetPage(), duration: 1000),\r\n      ),\r\n    );\r\n  }\r\n\r\n}\r\n\r\nclass TargetPage extends StatelessWidget {\r\n  const TargetPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Hero hero = const Hero(\r\n      //----定义一个Hero,为其添加标签，两个标签相同，则可以共享\r\n      tag: ''user-head'',\r\n      child: Padding(\r\n        padding: EdgeInsets.all(6.0),\r\n        child: CircleAvatar(\r\n          backgroundColor: Colors.transparent,\r\n          backgroundImage: AssetImage(\r\n            "assets/images/icon_head.webp",\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n\r\n    Widget touch = InkWell(\r\n      onTap: () {\r\n        Navigator.of(context).pop();\r\n      },\r\n      child: hero,\r\n    );\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        actions: [touch],\r\n      ),\r\n      body: Container(\r\n        decoration: BoxDecoration(\r\n            gradient: LinearGradient(colors: [\r\n          Colors.red.withAlpha(99),\r\n          Colors.yellow.withAlpha(189),\r\n          Colors.green.withAlpha(88),\r\n          Colors.blue.withAlpha(230)\r\n        ])),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n//下--->上\r\nclass Bottom2TopRouter<T> extends PageRouteBuilder<T> {\r\n  final Widget child;\r\n  final int duration;\r\n  final Curve curve;\r\n\r\n  Bottom2TopRouter({\r\n    required this.child,\r\n    this.duration = 500,\r\n    this.curve = Curves.fastOutSlowIn,\r\n  }) : super(\r\n            transitionDuration: Duration(milliseconds: duration),\r\n            pageBuilder: (ctx, a1, a2) {\r\n              return child;\r\n            },\r\n            transitionsBuilder: (\r\n              ctx,\r\n              a1,\r\n              a2,\r\n              Widget child,\r\n            ) => SlideTransition(\r\n                  position: Tween<Offset>(\r\n                    begin: const Offset(0.0, 1.0),\r\n                    end: const Offset(0.0, 0.0),\r\n                  ).animate(CurvedAnimation(parent: a1, curve: curve)),\r\n                  child: child));\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(231,213,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/11\r\n/// contact me by email 1981462002@qq.com\r\n///\r\n\r\nclass HtmlElementViewDemo extends StatelessWidget {\r\n  const HtmlElementViewDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''该组件只能用于 Flutter Web 中，嵌入 Html 元素的较为昂贵。''\r\n      ''内部基于 PlatformViewLink 和 PlatformViewSurface 组件实现。'';\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(232,6,0,replace(replace('\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\n\r\nclass CustomIcon extends StatelessWidget {\r\n  const CustomIcon({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: const [\r\n        Icon(Icons.send, color: Colors.orange, size: 60),\r\n        Icon(Icons.android, color: Colors.green, size: 100),\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(233,6,0,replace(replace('import ''package:flutter/material.dart'';\r\nimport ''package:unit_widgets_display/display_ability.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass MyIcon extends StatelessWidget {\r\n  const MyIcon({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    List<IconData> myIcons = DisplayPlugin().myIcon;\r\n    return Wrap(\r\n      spacing: 20,\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: myIcons\r\n          .map(\r\n            (e) => Icon(\r\n              e,\r\n              color: Colors.green,\r\n              size: 60,\r\n            ),\r\n          )\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(234,30,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomIconButton extends StatelessWidget {\r\n  const CustomIconButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(8.0),\r\n      child: IconButton(\r\n        padding: const EdgeInsets.only(),\r\n        onPressed: () {},\r\n        icon: const Icon(Icons.android, size: 40, color: Colors.green),\r\n        tooltip: "android",\r\n        highlightColor: Colors.orangeAccent,\r\n        splashColor: Colors.blue,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(235,325,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-12\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass IconThemeDemo extends StatelessWidget {\r\n  const IconThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return IconTheme(\r\n      data: const IconThemeData(\r\n          color: Colors.purple,\r\n          opacity: 1.0,\r\n          size: 30\r\n      ),\r\n      child: Wrap(\r\n        spacing: 10,\r\n        children: const[\r\n          Icon(Icons.add),\r\n          Icon(Icons.ac_unit),\r\n          Icon(Icons.g_translate),\r\n          Icon(Icons.remove)\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(236,292,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomIgnorePointer extends StatefulWidget {\r\n  const CustomIgnorePointer({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomIgnorePointerState createState() => _CustomIgnorePointerState();\r\n}\r\n\r\nclass _CustomIgnorePointerState extends State<CustomIgnorePointer> {\r\n  bool _ignore = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: <Widget>[\r\n        GestureDetector(\r\n          onTap: (){\r\n            print(''IgnorePointer'');\r\n          },\r\n          child: IgnorePointer(\r\n            ignoring: _ignore,\r\n            child: _buildButton(),\r\n          ),\r\n        ),\r\n        _buildSwitch(),\r\n        Text(!_ignore ? ''允许点击'' : ''点击已锁定'')\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildButton() => ElevatedButton(\r\n      child: const Text(\r\n        ''To About'',\r\n        style: TextStyle(color: Colors.white),\r\n      ),\r\n      onPressed: () => Navigator.of(context).pushNamed(''AboutMePage''));\r\n\r\n  Widget _buildSwitch() => Switch(\r\n      value: _ignore,\r\n      onChanged: (v) {\r\n        setState(() {\r\n          _ignore = v;\r\n        });\r\n      });\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(237,38,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass LoadImage extends StatelessWidget {\r\n  const LoadImage({Key? key}) : super(key: key);\r\n\r\n  final String assetsImagePath = "assets/images/icon_head.webp";\r\n  final String netImageUrl = "https://p9-juejin.byteimg.com"\r\n      "/tos-cn-i-k3u1fbpfcp/36dee4e4dceb4c41a93df4a3603439fe~"\r\n      "tplv-k3u1fbpfcp-zoom-crop-mark:1304:1304:1304:734.awebp";\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      children: [\r\n        Image.asset(assetsImagePath, height: 80, width: 80),\r\n        _loadFromNet(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _loadFromNet() => Image.network(netImageUrl, height: 80);\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(238,38,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FitImage extends StatefulWidget {\r\n  const FitImage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _FitImageState createState() => _FitImageState();\r\n}\r\n\r\nclass _FitImageState extends State<FitImage> {\r\n  bool _smallImage = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    List<Widget> imageLi = BoxFit.values\r\n        .toList()\r\n        .map((mode) => Column(children:[\r\n      Container(\r\n          margin: const EdgeInsets.all(5),\r\n          width: 100,\r\n          height: 80,\r\n          color: Colors.grey.withAlpha(88),\r\n          child: Image(\r\n              image: AssetImage(!_smallImage\r\n                  ? "assets/images/wy_300x200.webp"\r\n                  : "assets/images/wy_30x20.webp"),\r\n              fit: mode)),\r\n      Text(mode.toString().split(".")[1])\r\n    ])).toList();\r\n\r\n    return Wrap(\r\n      children: [...imageLi, _buildSwitch()],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      width: 200,\r\n      height: 100,\r\n      child: Wrap(\r\n        crossAxisAlignment: WrapCrossAlignment.center,\r\n        children: <Widget>[\r\n          const Text("使用小图"),\r\n          Switch(\r\n              value: _smallImage,\r\n              onChanged: (b) => setState(() => _smallImage = b)),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(239,38,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nenum AlignmentType {\r\n  center(Alignment.center, ''center''),\r\n  centerLeft(Alignment.centerLeft, ''centerLeft''),\r\n  centerRight(Alignment.centerRight, ''centerRight''),\r\n  topCenter(Alignment.topCenter, ''topCenter''),\r\n  topLeft(Alignment.topLeft, ''topLeft''),\r\n  topRight(Alignment.topRight, ''topRight''),\r\n  bottomCenter(Alignment.bottomCenter, ''bottomCenter''),\r\n  bottomLeft(Alignment.bottomLeft, ''bottomLeft''),\r\n  bottomRight(Alignment.bottomRight, ''bottomRight''),\r\n  ;\r\n\r\n  const AlignmentType(this.alignment, this.title);\r\n\r\n  final Alignment alignment;\r\n  final String title;\r\n}\r\n\r\nclass AlignmentImage extends StatelessWidget {\r\n  const AlignmentImage({Key? key}) : super(key: key);\r\n\r\n  //测试数组\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    List<Widget> imgLi = AlignmentType.values\r\n        .map((v) => //生成子Widget列表\r\n            Column(children: [\r\n              Container(\r\n                  margin: const EdgeInsets.all(5),\r\n                  width: 90,\r\n                  height: 60,\r\n                  color: Colors.grey.withAlpha(88),\r\n                  child: Image(\r\n                    image: const AssetImage("assets/images/wy_30x20.webp"),\r\n                    alignment: v.alignment,\r\n                  )),\r\n              Text(v.title),\r\n            ]))\r\n        .toList();\r\n    var imageAlignment = Wrap(children: imgLi);\r\n    return imageAlignment;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(240,38,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass BlendModeImage extends StatelessWidget {\r\n  const BlendModeImage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: BlendMode.values\r\n          .toList()\r\n          .map((mode) => Column(children:[\r\n        Container(\r\n            margin: const EdgeInsets.all(5),\r\n            width: 60,\r\n            height: 60,\r\n            color: Colors.red,\r\n            child: Image(\r\n                image: const AssetImage("assets/images/icon_head.webp"),\r\n                color: Colors.blue.withAlpha(88),\r\n                colorBlendMode: mode)),\r\n        Text(mode.toString().split(".")[1])\r\n      ]))\r\n          .toList(),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(241,38,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass RepeatImage extends StatelessWidget {\r\n  const RepeatImage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: ImageRepeat.values\r\n          .toList()\r\n          .map((mode) => Column(children:[\r\n        Container(\r\n            margin: const EdgeInsets.all(5),\r\n            width: 150,\r\n            height: 60,\r\n            color: Colors.red,\r\n            child: Image(\r\n                image: const AssetImage("assets/images/wy_30x20.webp"),\r\n                repeat: mode)),\r\n        Text(mode.toString().split(".")[1])\r\n      ]))\r\n          .toList(),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(242,38,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CenterSliceImage extends StatelessWidget {\r\n  const CenterSliceImage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: 300,\r\n      height: 80,\r\n      child: Image.asset(\r\n        "assets/images/right_chat.png",\r\n        centerSlice: const Rect.fromLTRB(9, 27, 60, 27 + 1.0),\r\n        fit: BoxFit.fill,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(243,357,0,replace(replace('import ''dart:ui'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2022/04/23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ImageFilteredBlur extends StatefulWidget {\r\n  const ImageFilteredBlur({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<ImageFilteredBlur> createState() => _ImageFilteredBlurState();\r\n}\r\n\r\nclass _ImageFilteredBlurState extends State<ImageFilteredBlur> {\r\n  double _sigmaX = 1.2;\r\n  double _sigmaY = 1.2;\r\n  TileMode _tileMode = TileMode.decal;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: [\r\n        ImageFiltered(\r\n          imageFilter: ImageFilter.blur(\r\n            sigmaX: _sigmaX,\r\n            sigmaY: _sigmaY,\r\n            tileMode: _tileMode,\r\n          ),\r\n          child: const _TargetContent(),\r\n        ),\r\n        _buildTools(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTools() => Column(\r\n        children: [\r\n          Row(\r\n            children: [\r\n              Expanded(\r\n                child: Slider(\r\n                    min: 0,\r\n                    max: 4,\r\n                    value: _sigmaX,\r\n                    divisions: 360,\r\n                    label: ''x:'' + _sigmaX.toStringAsFixed(1),\r\n                    onChanged: (v) => setState(() => _sigmaX = v)),\r\n              ),\r\n              Expanded(\r\n                child: Slider(\r\n                    min: 0,\r\n                    max: 4,\r\n                    value: _sigmaY,\r\n                    divisions: 360,\r\n                    label: ''y:'' + _sigmaY.toStringAsFixed(1),\r\n                    onChanged: (v) => setState(() => _sigmaY = v)),\r\n              ),\r\n            ],\r\n          ),\r\n          buildTileModeCheck()\r\n        ],\r\n      );\r\n\r\n  Widget buildTileModeCheck() => Wrap(\r\n        spacing: 10,\r\n        children: TileMode.values.map((e) {\r\n          TextStyle style;\r\n          if (e == _tileMode) {\r\n            Color color = Theme.of(context).primaryColor;\r\n            style = TextStyle(fontWeight: FontWeight.bold, color: color);\r\n          } else {\r\n            style = const TextStyle(\r\n                fontWeight: FontWeight.bold, color: Colors.grey);\r\n          }\r\n          return GestureDetector(\r\n            onTap: () => setState(() => _tileMode = e),\r\n            child: Padding(\r\n              padding: const EdgeInsets.symmetric(horizontal: 8),\r\n              child: Text(\r\n                e.toString().split(''.'')[1],\r\n                style: style,\r\n              ),\r\n            ),\r\n          );\r\n        }).toList(),\r\n      );\r\n}\r\n\r\nclass _TargetContent extends StatelessWidget {\r\n  const _TargetContent({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: <Widget>[\r\n        SizedBox(\r\n          height: 150,\r\n          width: 150,\r\n          child: Image.asset(\r\n            ''assets/images/sabar.webp'',\r\n            fit: BoxFit.cover,\r\n          ),\r\n        ),\r\n        SizedBox(\r\n          height: 150,\r\n          width: 150,\r\n          child: Image.asset(\r\n            ''assets/images/wy_200x300.webp'',\r\n            fit: BoxFit.cover,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(244,357,0,replace(replace('import ''dart:ui'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2022/04/23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ImageFilteredColor extends StatefulWidget {\r\n  const ImageFilteredColor({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<ImageFilteredColor> createState() => _ImageFilteredColorState();\r\n}\r\n\r\nclass _ImageFilteredColorState extends State<ImageFilteredColor> {\r\n\r\n  String _currentFilter = ''srgbToLinear'';\r\n\r\n   ColorFilter greyscale = const ColorFilter.matrix(<double>[\r\n    0.2126, 0.7152, 0.0722, 0, 0,\r\n    0.2126, 0.7152, 0.0722, 0, 0,\r\n    0.2126, 0.7152, 0.0722, 0, 0,\r\n    0,      0,      0,      1, 0,\r\n   ]);\r\n   ColorFilter sepia = const ColorFilter.matrix(<double>[\r\n    0.393, 0.769, 0.189, 0, 0,\r\n    0.349, 0.686, 0.168, 0, 0,\r\n    0.272, 0.534, 0.131, 0, 0,\r\n    0,     0,     0,     1, 0,\r\n   ]);\r\n  ColorFilter invert = const ColorFilter.matrix(<double>[\r\n    -1,  0,  0, 0, 255,\r\n    0, -1,  0, 0, 255,\r\n    0,  0, -1, 0, 255,\r\n    0,  0,  0, 1,   0,\r\n  ]);\r\n  ColorFilter identity = const ColorFilter.matrix(<double>[\r\n    1, 0, 0, 0, 0,\r\n    0, 1, 0, 0, 0,\r\n    0, 0, 1, 0, 0,\r\n    0, 0, 0, 1, 0,\r\n  ]);\r\n\r\n\r\n  ColorFilter darken = const ColorFilter.matrix(<double>[\r\n    1,0,0,0,-126.0,\r\n    0,1,0,0,-126.0,\r\n    0,0,1,0,-126.0,\r\n    0,0,0,1,0\r\n  ]);\r\n\r\n   ColorFilter light = const ColorFilter.matrix(<double>[\r\n    1,0,0,0,90,\r\n    0,1,0,0,90,\r\n    0,0,1,0,90,\r\n    0,0,0,1,0\r\n   ]);\r\n\r\n  late Map<String,ColorFilter> filterMap={\r\n    ''原图'': identity,\r\n    ''light'': light,\r\n    ''darken'': darken,\r\n    ''greyscale'': greyscale,\r\n    ''sepia'': sepia,\r\n    ''invert'': invert,\r\n    ''srgbToLinear'':const ColorFilter.srgbToLinearGamma(),\r\n    ''linearToSrgb'':const ColorFilter.linearToSrgbGamma(),\r\n  };\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: [\r\n        ImageFiltered(\r\n          imageFilter: filterMap[_currentFilter]??identity,\r\n          child: const _TargetContent(),\r\n        ),\r\n        buildTileModeCheck()\r\n      ],\r\n    );\r\n  }\r\n\r\n\r\n  Widget buildTileModeCheck() => Padding(\r\n    padding: const EdgeInsets.only(top: 8.0),\r\n    child: Wrap(\r\n          children: filterMap.keys.map((e) {\r\n            TextStyle style;\r\n            if (e == _currentFilter) {\r\n              Color color = Theme.of(context).primaryColor;\r\n              style = TextStyle(fontWeight: FontWeight.bold, color: color);\r\n            } else {\r\n              style = const TextStyle(\r\n                  fontWeight: FontWeight.bold, color: Colors.grey);\r\n            }\r\n            return GestureDetector(\r\n              onTap: () => setState(() => _currentFilter = e),\r\n              child: Padding(\r\n                padding: const EdgeInsets.symmetric(horizontal: 8,vertical: 2),\r\n                child: Text(\r\n                  e,\r\n                  style: style,\r\n                ),\r\n              ),\r\n            );\r\n          }).toList(),\r\n        ),\r\n  );\r\n}\r\n\r\nclass _TargetContent extends StatelessWidget {\r\n  const _TargetContent({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: <Widget>[\r\n        SizedBox(\r\n          height: 150,\r\n          width: 150,\r\n          child: Image.asset(\r\n            ''assets/images/sabar.webp'',\r\n            fit: BoxFit.cover,\r\n          ),\r\n        ),\r\n        SizedBox(\r\n          height: 150,\r\n          width: 150,\r\n          child: Image.asset(\r\n            ''assets/images/wy_200x300.webp'',\r\n            fit: BoxFit.cover,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(245,357,0,replace(replace('import ''dart:math'';\r\nimport ''dart:ui'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2022/04/23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ImageFilteredMatrix extends StatefulWidget {\r\n  const ImageFilteredMatrix({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<ImageFilteredMatrix> createState() => _ImageFilteredMatrixState();\r\n}\r\n\r\nclass _ImageFilteredMatrixState extends State<ImageFilteredMatrix> {\r\n  double _sigmaX = 0;\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: [\r\n        ImageFiltered(\r\n          imageFilter: ImageFilter.matrix(\r\n            Matrix4.rotationZ(_sigmaX/180*pi).storage\r\n          ),\r\n          child: const _TargetContent(),\r\n        ),\r\n        _buildTools(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTools() => Column(\r\n        children: [\r\n          Row(\r\n            children: [\r\n              const Text(''    旋转角度:''),\r\n              Expanded(\r\n                child: Slider(\r\n                    min: 0,\r\n                    max: 90,\r\n                    value: _sigmaX,\r\n                    divisions: 360,\r\n                    label: ''x:'' + _sigmaX.toStringAsFixed(1),\r\n                    onChanged: (v) => setState(() => _sigmaX = v)),\r\n              ),\r\n            ],\r\n          ),\r\n          // buildTileModeCheck()\r\n        ],\r\n      );\r\n}\r\n\r\nclass _TargetContent extends StatelessWidget {\r\n  const _TargetContent({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 150,\r\n      width: 150,\r\n      child: Image.asset(\r\n        ''assets/images/sabar.webp'',\r\n        fit: BoxFit.cover,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(246,7,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomImageIcon extends StatelessWidget {\r\n  const CustomImageIcon({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Map<Color, double> data = {\r\n      Colors.blue: 50.0,\r\n      Colors.red: 60.0,\r\n      Colors.green: 70.0,\r\n      Colors.yellow: 80.0,\r\n    };\r\n    return Wrap(\r\n      spacing: 10,\r\n      children: data.keys\r\n          .map((e) => ImageIcon(\r\n        const AssetImage("assets/images/leaf.webp"),\r\n                color: e,\r\n                size: data[e],\r\n              ))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(247,161,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass IndexedStackNode01 extends StatefulWidget {\r\n  const IndexedStackNode01({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State createState() => _IndexedStackNode01State();\r\n}\r\n\r\nclass _IndexedStackNode01State extends State<IndexedStackNode01> {\r\n  int _index = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSwitch(),\r\n        Container(\r\n          width: 200,\r\n          height: 100,\r\n          color: Colors.grey.withAlpha(33),\r\n          child: IndexedStack(\r\n            index: _index,\r\n            children: <Widget>[\r\n              Container(\r\n                color: Colors.red,\r\n                width: 80,\r\n                height: 80\r\n              ),\r\n              Positioned(\r\n                bottom: 10,\r\n                right: 10,\r\n                child: Container(\r\n                  color: Colors.blue,\r\n                  width: 80,\r\n                  height: 80,\r\n                ),\r\n              )\r\n            ],\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitch() => Switch(\r\n        value: _index == 0,\r\n        onChanged: (v) => setState(() => _index = v ? 0 : 1),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(248,336,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass InheritedModelDemo extends StatefulWidget {\r\n  const InheritedModelDemo({super.key});\r\n\r\n  @override\r\n  State<InheritedModelDemo> createState() => _InheritedModelDemoState();\r\n}\r\n\r\nclass _InheritedModelDemoState extends State<InheritedModelDemo> {\r\n  int _counter = 0;\r\n  late Color _color = colors.first;\r\n\r\n  final List<Color> colors = const [\r\n    Colors.black,\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green,\r\n    Colors.orange,\r\n    Colors.indigo,\r\n    Colors.purple,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisAlignment: MainAxisAlignment.center,\r\n      children: <Widget>[\r\n        Row(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            _CircleIconButton(\r\n              color: Colors.green,\r\n              icon: Icons.remove,\r\n              onPressed: _decrease,\r\n            ),\r\n            CounterModel(\r\n              color: _color,\r\n              counter: _counter,\r\n              child: const _BoxDecorationWrap(),\r\n            ),\r\n            _CircleIconButton(\r\n              color: Colors.blue,\r\n              icon: Icons.add,\r\n              onPressed: _increase,\r\n            ),\r\n          ],\r\n        ),\r\n        const SizedBox(height: 20),\r\n        _ColorSelector(\r\n          colors: colors,\r\n          activeColor: _color,\r\n          onSelect: _onSelectColor,\r\n        )\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _increase() {\r\n    setState(() => _counter += 1);\r\n  }\r\n\r\n  void _decrease() {\r\n    setState(() => _counter -= 1);\r\n  }\r\n\r\n  void _onSelectColor(Color value) {\r\n    setState(() {\r\n      _color = value;\r\n    });\r\n  }\r\n}\r\nenum CounterAspect { color, value }\r\n\r\nclass CounterModel extends InheritedModel<CounterAspect> {\r\n  const CounterModel({\r\n    super.key,\r\n    this.color,\r\n    this.counter,\r\n    required super.child,\r\n  });\r\n\r\n  final Color? color;\r\n  final int? counter;\r\n\r\n  static CounterModel? of<T>(BuildContext context,CounterAspect aspect){\r\n    return InheritedModel.inheritFrom<CounterModel>(context, aspect: aspect);\r\n  }\r\n\r\n  @override\r\n  bool updateShouldNotify(CounterModel oldWidget) {\r\n    return color != oldWidget.color || counter != oldWidget.counter;\r\n  }\r\n\r\n  @override\r\n  bool updateShouldNotifyDependent(CounterModel oldWidget, Set<CounterAspect> dependencies) {\r\n    if (color != oldWidget.color && dependencies.contains(CounterAspect.color)) {\r\n      return true;\r\n    }\r\n    if (counter != oldWidget.counter && dependencies.contains(CounterAspect.value)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nclass _CircleIconButton extends StatelessWidget {\r\n  final Color color;\r\n  final IconData icon;\r\n  final VoidCallback onPressed;\r\n\r\n  const _CircleIconButton(\r\n      {super.key,\r\n      required this.color,\r\n      required this.icon,\r\n      required this.onPressed});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: onPressed,\r\n      child: Container(\r\n        margin: const EdgeInsets.symmetric(horizontal: 20),\r\n        decoration: const BoxDecoration(\r\n          color: Color(0xFFDFDFDF),\r\n          shape: BoxShape.circle,\r\n        ),\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(2.0),\r\n          child: Container(\r\n            padding: const EdgeInsets.all(8),\r\n            decoration: BoxDecoration(\r\n              color: color,\r\n              shape: BoxShape.circle,\r\n              // border: Border.all(width: 14.0, color: Color(0xFFDFDFDF))\r\n            ),\r\n            child: Icon(\r\n              icon,\r\n              color: Colors.white,\r\n              size: 16,\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _ColorSelector extends StatelessWidget {\r\n  final List<Color> colors;\r\n  final ValueChanged<Color> onSelect;\r\n  final Color activeColor;\r\n\r\n  const _ColorSelector({\r\n    super.key,\r\n    required this.colors,\r\n    required this.activeColor,\r\n    required this.onSelect,\r\n  });\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 6,\r\n      children: colors\r\n          .map((e) => GestureDetector(\r\n                onTap: () => onSelect(e),\r\n                child: _buildCircle(e),\r\n              ))\r\n          .toList(),\r\n    );\r\n  }\r\n\r\n  Widget _buildCircle(Color color) {\r\n    return CircleAvatar(\r\n      radius: 12,\r\n      child: color == activeColor\r\n          ? const Icon(\r\n              Icons.check,\r\n              color: Colors.white,\r\n              size: 16,\r\n            )\r\n          : null,\r\n      backgroundColor: color,\r\n    );\r\n  }\r\n}\r\n\r\nclass _BoxDecorationWrap extends StatefulWidget {\r\n  const _BoxDecorationWrap({super.key});\r\n\r\n  @override\r\n  State<_BoxDecorationWrap> createState() => _BoxDecorationWrapState();\r\n}\r\n\r\nclass _BoxDecorationWrapState extends State<_BoxDecorationWrap> {\r\n\r\n  @override\r\n  void didChangeDependencies() {\r\n    print("======BoxDecorationWrap#didChangeDependencies=========");\r\n    super.didChangeDependencies();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final Color color = CounterModel.of(context,CounterAspect.color)?.color ?? Colors.black;\r\n    return Container(\r\n      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n      child: const _CounterText(),\r\n      decoration: BoxDecoration(\r\n          color: Colors.white,\r\n          border: Border.all(color: color),\r\n          borderRadius: BorderRadius.circular(8),\r\n          boxShadow: [\r\n            BoxShadow(\r\n                color: color,\r\n                spreadRadius: 2,\r\n                blurRadius: 8,\r\n                offset: const Offset(0, 0))\r\n          ]),\r\n    );\r\n  }\r\n}\r\n\r\nclass _CounterText extends StatefulWidget {\r\n  const _CounterText({super.key});\r\n\r\n  @override\r\n  State<_CounterText> createState() => _CounterTextState();\r\n}\r\n\r\nclass _CounterTextState extends State<_CounterText> {\r\n  @override\r\n  void didChangeDependencies() {\r\n    print("======CounterText#didChangeDependencies=========");\r\n    super.didChangeDependencies();\r\n  }\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final Color color = CounterModel.of(context,CounterAspect.color)?.color ?? Colors.black;\r\n    final int counter = CounterModel.of(context,CounterAspect.value)?.counter ?? 0;\r\n    return Text(\r\n      "Counter = $counter",\r\n      style: TextStyle(color: color,fontWeight: FontWeight.bold),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(249,345,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass InheritedThemeDemo extends StatelessWidget {\r\n  const InheritedThemeDemo({super.key});\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const DefaultTextStyle(\r\n      style: TextStyle(fontSize: 24, color: Colors.blue),\r\n      child: TestBody(),\r\n    );\r\n  }\r\n}\r\n\r\nclass TestBody extends StatelessWidget {\r\n  const TestBody({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    return GestureDetector(\r\n        onTap: () => _toNextPage(context),\r\n        child: Container(\r\n            height: 60,\r\n            margin: const EdgeInsets.only(left: 40,right: 40),\r\n            alignment: Alignment.center,\r\n            color: Theme.of(context).primaryColor.withOpacity(0.1),\r\n            child: const Text(''InheritedTheme'')));\r\n  }\r\n\r\n  void _toNextPage(BuildContext context) {\r\n    // final NavigatorState navigator = Navigator.of(context);\r\n    // final CapturedThemes themes =\r\n    // InheritedTheme.capture(from: context, to: navigator.context);\r\n    //\r\n    // Navigator.of(context).push(\r\n    //   MaterialPageRoute(\r\n    //     builder: (BuildContext _) {\r\n    //       return themes.wrap(Container(\r\n    //         alignment: Alignment.center,\r\n    //         color: Colors.white,\r\n    //         child: Text(''Flutter Unit''),\r\n    //       ));\r\n    //     },\r\n    //   ),\r\n    // );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(250,346,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass InheritedWidgetDemo extends StatelessWidget {\r\n  final String info =\r\n      ''InheritedWidget 是一个抽象类，不可以直接使用。可以自定义对应共享数据的子类，如这里的通过 InfoInheritedWidget 实现：当前这段话可以在任意子树节点上下文获取。''\r\n      ''一般都会定义一个 XXX.of(context) 的方法来获取数据，如 MediaQuery.of，Theme.of 等。'';\r\n\r\n  const InheritedWidgetDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return InfoInheritedWidget(\r\n      info: info,\r\n      child: const InfoWidget(),\r\n    );\r\n  }\r\n}\r\n\r\nclass InfoWidget extends StatelessWidget {\r\n  const InfoWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    String info = InfoInheritedWidget.of(context)?.info??'''';\r\n\r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}\r\n\r\nclass InfoInheritedWidget extends InheritedWidget {\r\n  final String info;\r\n\r\n  const InfoInheritedWidget({super.key,required this.info, required super.child});\r\n\r\n  @override\r\n  bool updateShouldNotify(covariant InfoInheritedWidget oldWidget) =>\r\n      info != oldWidget.info;\r\n\r\n  static InfoInheritedWidget? of(BuildContext context) =>\r\n      context.dependOnInheritedWidgetOfExactType<InfoInheritedWidget>();\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(251,346,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n///\r\nclass InheritedWidgetDemo2 extends StatefulWidget {\r\n  const InheritedWidgetDemo2({super.key});\r\n\r\n  @override\r\n  State<InheritedWidgetDemo2> createState() => _InheritedWidgetDemo2State();\r\n}\r\n\r\nclass InheritedCounter extends InheritedWidget {\r\n  const InheritedCounter({\r\n    super.key,\r\n    this.color,\r\n    this.counter,\r\n    required super.child,\r\n  });\r\n\r\n  final Color? color;\r\n  final int? counter;\r\n\r\n  static InheritedCounter? of(BuildContext context) {\r\n    return context.dependOnInheritedWidgetOfExactType<InheritedCounter>();\r\n  }\r\n\r\n  @override\r\n  bool updateShouldNotify(InheritedCounter oldWidget) {\r\n    return color != oldWidget.color || counter != oldWidget.counter;\r\n  }\r\n}\r\n\r\nclass _InheritedWidgetDemo2State extends State<InheritedWidgetDemo2> {\r\n  int _counter = 0;\r\n  late Color _color = colors.first;\r\n\r\n  final List<Color> colors = const [\r\n    Colors.black,\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green,\r\n    Colors.orange,\r\n    Colors.indigo,\r\n    Colors.purple,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisAlignment: MainAxisAlignment.center,\r\n      children: <Widget>[\r\n        Row(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            CircleIconButton(\r\n              color: Colors.green,\r\n              icon: Icons.remove,\r\n              onPressed: _decrease,\r\n            ),\r\n            InheritedCounter(\r\n              color: _color,\r\n              counter: _counter,\r\n              child: const BoxDecorationWrap(),\r\n            ),\r\n            CircleIconButton(\r\n              color: Colors.blue,\r\n              icon: Icons.add,\r\n              onPressed: _increase,\r\n            ),\r\n          ],\r\n        ),\r\n        const SizedBox(height: 20),\r\n        ColorSelector(\r\n          colors: colors,\r\n          activeColor: _color,\r\n          onSelect: _onSelectColor,\r\n        )\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _increase() {\r\n    setState(() => _counter += 1);\r\n  }\r\n\r\n  void _decrease() {\r\n    setState(() => _counter -= 1);\r\n  }\r\n\r\n  void _onSelectColor(Color value) {\r\n    setState(() {\r\n      _color = value;\r\n    });\r\n  }\r\n}\r\n\r\nclass CircleIconButton extends StatelessWidget {\r\n  final Color color;\r\n  final IconData icon;\r\n  final VoidCallback onPressed;\r\n\r\n  const CircleIconButton(\r\n      {super.key,\r\n      required this.color,\r\n      required this.icon,\r\n      required this.onPressed});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: onPressed,\r\n      child: Container(\r\n        margin: const EdgeInsets.symmetric(horizontal: 20),\r\n        decoration: const BoxDecoration(\r\n          color: Color(0xFFDFDFDF),\r\n          shape: BoxShape.circle,\r\n          // border: Border.all(width: 14.0, color: Color(0xFFDFDFDF))\r\n        ),\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(2.0),\r\n          child: Container(\r\n            padding: const EdgeInsets.all(8),\r\n            decoration: BoxDecoration(\r\n              color: color,\r\n              shape: BoxShape.circle,\r\n              // border: Border.all(width: 14.0, color: Color(0xFFDFDFDF))\r\n            ),\r\n            child: Icon(\r\n              icon,\r\n              color: Colors.white,\r\n              size: 16,\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass ColorSelector extends StatelessWidget {\r\n  final List<Color> colors;\r\n  final ValueChanged<Color> onSelect;\r\n  final Color activeColor;\r\n\r\n  const ColorSelector({\r\n    super.key,\r\n    required this.colors,\r\n    required this.activeColor,\r\n    required this.onSelect,\r\n  });\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 6,\r\n      children: colors\r\n          .map((e) => GestureDetector(\r\n                onTap: () => onSelect(e),\r\n                child: _buildCircle(e),\r\n              ))\r\n          .toList(),\r\n    );\r\n  }\r\n\r\n  Widget _buildCircle(Color color) {\r\n    return CircleAvatar(\r\n      radius: 12,\r\n      child: color == activeColor\r\n          ? const Icon(\r\n              Icons.check,\r\n              color: Colors.white,\r\n              size: 16,\r\n            )\r\n          : null,\r\n      backgroundColor: color,\r\n    );\r\n  }\r\n}\r\n\r\nclass BoxDecorationWrap extends StatelessWidget {\r\n  const BoxDecorationWrap({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final Color color = InheritedCounter.of(context)?.color ?? Colors.black;\r\n    return Container(\r\n      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),\r\n      child: const CounterText(),\r\n      decoration: BoxDecoration(\r\n          color: Colors.white,\r\n          border: Border.all(color: color),\r\n          borderRadius: BorderRadius.circular(8),\r\n          boxShadow: [\r\n            BoxShadow(\r\n                color: color,\r\n                spreadRadius: 2,\r\n                blurRadius: 8,\r\n                offset: const Offset(0, 0))\r\n          ]),\r\n    );\r\n  }\r\n}\r\n\r\nclass CounterText extends StatelessWidget {\r\n  const CounterText({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final Color? color = InheritedCounter.of(context)?.color;\r\n    final int counter = InheritedCounter.of(context)?.counter??0;\r\n    return Text(\r\n      "Counter = $counter",\r\n      style: TextStyle(color: color,fontWeight: FontWeight.bold),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(252,152,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomInk extends StatelessWidget {\r\n  const CustomInk({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Material(\r\n      color: Colors.orangeAccent,\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(8.0),\r\n        child: Center(\r\n          child: Ink(\r\n            padding: const EdgeInsets.all(10),\r\n            decoration: const BoxDecoration(\r\n                color: Colors.yellow,\r\n                borderRadius: BorderRadius.all(Radius.circular(20))),\r\n            width: 200.0,\r\n            height: 100.0,\r\n            child: InkWell(\r\n              onTap: () {},\r\n              child: const Center(child: Text(''Hello'')),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(253,152,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass InkImage extends StatelessWidget {\r\n  const InkImage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Material(\r\n      color: Colors.grey[800],\r\n      child: Center(\r\n        child: Ink.image(\r\n          image: const AssetImage(''assets/images/sabar.webp''),\r\n          fit: BoxFit.cover,\r\n          width: 300.0,\r\n          height: 200.0,\r\n          child: InkWell(\r\n              onTap: () {},\r\n              child: const Align(\r\n                alignment: Alignment.topLeft,\r\n                child: Padding(\r\n                  padding: EdgeInsets.all(10.0),\r\n                  child: Text(''Chaos'',\r\n                      style: TextStyle(\r\n                          fontWeight: FontWeight.w900, color: Colors.black)),\r\n                ),\r\n              )),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(254,149,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomInkResponse extends StatefulWidget {\r\n  const CustomInkResponse({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomInkResponseState createState() => _CustomInkResponseState();\r\n}\r\n\r\nclass _CustomInkResponseState extends State<CustomInkResponse> {\r\n  String _info = ''Push'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return InkResponse(\r\n      onTap: () => setState(() => _info = ''onTap''),\r\n      onDoubleTap: () => setState(() => _info = ''onDoubleTap''),\r\n      onLongPress: () => setState(() => _info = ''onLongPress''),\r\n      onTapCancel: () => setState(() => _info = ''onTapCancel''),\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        width: 200,\r\n        height: 100,\r\n        child: Text(_info),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(255,149,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ColorInkResponse extends StatefulWidget {\r\n  const ColorInkResponse({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ColorInkResponseState createState() => _ColorInkResponseState();\r\n}\r\n\r\nclass _ColorInkResponseState extends State<ColorInkResponse> {\r\n  String _info = ''Push'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return InkResponse(\r\n      onTap: () => {},\r\n      splashColor: Colors.blueAccent,\r\n      highlightColor: Colors.orange,\r\n      onHighlightChanged: (v) =>\r\n          setState(() => _info = ''onHighlightChanged:$v''),\r\n      radius: 50,\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        width: 200,\r\n        height: 100,\r\n        child: Text(_info),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(256,150,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomInkWell extends StatefulWidget {\r\n  const CustomInkWell({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomInkWellState createState() => _CustomInkWellState();\r\n}\r\n\r\nclass _CustomInkWellState extends State<CustomInkWell> {\r\n  String _info = ''Push'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return InkWell(\r\n      onTap: () => setState(() => _info = ''onTap''),\r\n      onDoubleTap: () => setState(() => _info = ''onDoubleTap''),\r\n      onLongPress: () => setState(() => _info = ''onLongPress''),\r\n      onTapCancel: () => setState(() => _info = ''onTapCancel''),\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        width: 120,\r\n        height: 50,\r\n        child: Text(_info),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(257,150,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ColorInkWell extends StatefulWidget {\r\n  const ColorInkWell({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ColorInkWellState createState() => _ColorInkWellState();\r\n}\r\n\r\nclass _ColorInkWellState extends State<ColorInkWell> {\r\n  String _info = ''Push'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return InkWell(\r\n      onTap: () => {},\r\n      splashColor: Colors.blueAccent,\r\n      highlightColor: Colors.orange,\r\n      onHighlightChanged: (v) =>\r\n          setState(() => _info = ''onHighlightChanged:$v''),\r\n      radius: 50,\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        width: 180,\r\n        height: 50,\r\n        child: Text(_info),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(258,14,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass PressInputChip extends StatefulWidget {\r\n  const PressInputChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _PressInputChipState createState() => _PressInputChipState();\r\n}\r\n\r\nclass _PressInputChipState extends State<PressInputChip> {\r\n  bool _delete = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return InputChip(\r\n        padding: const EdgeInsets.all(5),\r\n        labelPadding: const EdgeInsets.all(3),\r\n        label: Text(\r\n            !_delete ?\r\n            "This is a InputChip." :\r\n            "You are clicked delete icon."),\r\n        backgroundColor: Colors.grey.withAlpha(66),\r\n        avatar: Image.asset("assets/images/icon_head.webp"),\r\n        selectedColor: Colors.orangeAccent.withAlpha(88),\r\n        selectedShadowColor: Colors.blue,\r\n        shadowColor: Colors.orangeAccent,\r\n        elevation: 3,\r\n        onPressed: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n        onDeleted: () => setState(() => _delete = !_delete));\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(259,14,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass SelectInputChip extends StatefulWidget {\r\n  const SelectInputChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SelectInputChipState createState() => _SelectInputChipState();\r\n}\r\n\r\nclass _SelectInputChipState extends State<SelectInputChip> {\r\n  bool _select = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return InputChip(\r\n      selected: _select,\r\n      padding: const EdgeInsets.all(5),\r\n      labelPadding: const EdgeInsets.all(3),\r\n      label: const Text("This is a InputChip."),\r\n      backgroundColor: Colors.grey.withAlpha(66),\r\n      avatar: Image.asset("assets/images/icon_head.webp"),\r\n      selectedColor: Colors.orangeAccent.withAlpha(88),\r\n      selectedShadowColor: Colors.blue,\r\n      shadowColor: Colors.orangeAccent,\r\n      elevation: 3,\r\n      onDeleted: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n      onSelected: (bool value) {\r\n        setState(() {\r\n          _select = value;\r\n        });\r\n        print("onSelected");\r\n      },\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(260,231,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass InputDecoratorDemo extends StatelessWidget {\r\n  const InputDecoratorDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(8.0),\r\n      child: InputDecorator(\r\n        decoration: const InputDecoration(),\r\n        child: EditableText(\r\n            controller: TextEditingController(text:''hello''),\r\n            focusNode: FocusNode(),\r\n            style: const TextStyle(fontSize: 12,color: Colors.black),\r\n            cursorColor: Colors.blue,\r\n            backgroundCursorColor: Colors.orange,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(261,351,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass InteractiveViewerDemo extends StatelessWidget {\r\n  const InteractiveViewerDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      height: 150,\r\n      color: Colors.grey.withAlpha(33),\r\n      child: InteractiveViewer(\r\n        boundaryMargin: const EdgeInsets.all(40.0),\r\n        maxScale: 2.5,\r\n        minScale: 0.3,\r\n        panEnabled: true,\r\n        scaleEnabled: true,\r\n        child: Image.asset(''assets/images/caver.webp''),\r\n        onInteractionStart: _onInteractionStart,\r\n        onInteractionUpdate: _onInteractionUpdate,\r\n        onInteractionEnd: _onInteractionEnd,\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onInteractionStart(ScaleStartDetails details) {\r\n    print(''onInteractionStart----'' + details.toString());\r\n  }\r\n\r\n  void _onInteractionUpdate(ScaleUpdateDetails details) {\r\n    print(''onInteractionUpdate----'' + details.toString());\r\n  }\r\n\r\n  void _onInteractionEnd(ScaleEndDetails details) {\r\n    print(''onInteractionEnd----'' + details.toString());\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(262,351,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass InteractiveViewerDemo2 extends StatelessWidget {\r\n  const InteractiveViewerDemo2({Key? key}) : super(key: key);\r\n\r\n  final List<Color> colors = const [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green\r\n  ];\r\n\r\n  final List<Color> colors2 = const [\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green,\r\n    Colors.red\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    int _rowCount = 20;\r\n    int _columnCount = 4;\r\n\r\n    return SizedBox(\r\n      width: 300,\r\n      height: 200,\r\n      child: InteractiveViewer(\r\n        constrained: false,\r\n        scaleEnabled: false,\r\n        child: Table(\r\n          columnWidths: <int, TableColumnWidth>{\r\n            for (int column = 0; column < _columnCount; column += 1)\r\n              column: const FixedColumnWidth(150.0),\r\n          },\r\n          children: buildRows(_rowCount, _columnCount),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  List<TableRow> buildRows(int rowCount, int columnCount) {\r\n    return <TableRow>[\r\n      for (int row = 0; row < rowCount; row += 1)\r\n        TableRow(\r\n          children: <Widget>[\r\n            for (int column = 0; column < columnCount; column += 1)\r\n              Container(\r\n                margin: const EdgeInsets.all(2),\r\n                height: 50,\r\n                alignment: Alignment.center,\r\n                color: _colorful(row, column),\r\n                child: Text(\r\n                  ''($row,$column)'',\r\n                  style: const TextStyle(fontSize: 20, color: Colors.white),\r\n                ),\r\n              ),\r\n          ],\r\n        ),\r\n    ];\r\n  }\r\n\r\n  Color _colorful(int row, int column) =>\r\n      row % 2 == 0 ? colors[column] : colors2[column];\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(263,351,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass InteractiveViewerDemo3 extends StatefulWidget {\r\n  const InteractiveViewerDemo3({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _InteractiveViewerDemo3State createState() => _InteractiveViewerDemo3State();\r\n}\r\n\r\nclass _InteractiveViewerDemo3State extends State<InteractiveViewerDemo3>\r\n    with SingleTickerProviderStateMixin {\r\n  final TransformationController _transformationController =\r\n      TransformationController();\r\n  late Animation<Matrix4> _animationReset;\r\n  late AnimationController _controllerReset;\r\n\r\n  void _onAnimateReset() {\r\n    _transformationController.value = _animationReset.value;\r\n    if (!_controllerReset.isAnimating) {\r\n      _animationReset.removeListener(_onAnimateReset);\r\n      _controllerReset.reset();\r\n    }\r\n  }\r\n\r\n  void _animateResetInitialize() {\r\n    _controllerReset.reset();\r\n    _animationReset = Matrix4Tween(\r\n      begin: _transformationController.value,\r\n      end: Matrix4.identity(),\r\n    ).animate(_controllerReset);\r\n    _animationReset.addListener(_onAnimateReset);\r\n    _controllerReset.forward();\r\n  }\r\n\r\n  void _animateResetStop() {\r\n    _controllerReset.stop();\r\n    _animationReset.removeListener(_onAnimateReset);\r\n    _controllerReset.reset();\r\n  }\r\n\r\n  void _onInteractionStart(ScaleStartDetails details) {\r\n    if (_controllerReset.status == AnimationStatus.forward) {\r\n      _animateResetStop();\r\n    }\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _controllerReset = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(milliseconds: 400),\r\n    );\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _controllerReset.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      direction: Axis.vertical,\r\n      spacing: 10,\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      alignment: WrapAlignment.center,\r\n      children: [\r\n        Container(\r\n          height: 150,\r\n          color: Colors.grey.withAlpha(33),\r\n          child: InteractiveViewer(\r\n            boundaryMargin: const EdgeInsets.all(40),\r\n            transformationController: _transformationController,\r\n            minScale: 0.1,\r\n            maxScale: 1.8,\r\n            onInteractionStart: _onInteractionStart,\r\n            child: Image.asset(''assets/images/caver.webp''),\r\n          ),\r\n        ),\r\n        Row(\r\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n          children: [\r\n            _buildButton(),\r\n            _buildButton2(),\r\n            _buildButton3(),\r\n          ],\r\n        )\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildButton() {\r\n    return MaterialButton(\r\n        child: const Icon(\r\n          Icons.refresh,\r\n          color: Colors.white,\r\n        ),\r\n        color: Colors.green,\r\n        shape: const CircleBorder(\r\n          side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n        ),\r\n        onPressed: _animateResetInitialize);\r\n  }\r\n\r\n  final double _x = 0.0;\r\n\r\n  Widget _buildButton2() {\r\n    return MaterialButton(\r\n        child: const Icon(\r\n          Icons.navigate_before,\r\n          color: Colors.white,\r\n        ),\r\n        color: Colors.green,\r\n        shape: const CircleBorder(\r\n          side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n        ),\r\n        onPressed: () {\r\n          var temp = _transformationController.value.clone();\r\n          temp.translate(_x - 4);\r\n          _transformationController.value = temp;\r\n        });\r\n  }\r\n\r\n  Widget _buildButton3() {\r\n    return MaterialButton(\r\n        child: const Icon(\r\n          Icons.navigate_next,\r\n          color: Colors.white,\r\n        ),\r\n        color: Colors.green,\r\n        shape: const CircleBorder(\r\n          side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n        ),\r\n        onPressed: () {\r\n          var temp = _transformationController.value.clone();\r\n          temp.translate(_x + 4);\r\n          _transformationController.value = temp;\r\n        });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(264,298,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass IntrinsicHeightDemo extends StatefulWidget {\r\n  const IntrinsicHeightDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _IntrinsicHeightDemoState createState() => _IntrinsicHeightDemoState();\r\n}\r\n\r\nclass _IntrinsicHeightDemoState extends State<IntrinsicHeightDemo> {\r\n  double _height =120.0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        buildChild(_height),\r\n        const SizedBox(height: 10),\r\n        _buildSlider()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget buildChild(double leftHeight) {\r\n    return IntrinsicHeight(\r\n      child: Row(\r\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: <Widget>[\r\n          Container(\r\n            height: leftHeight,\r\n            width: 120,\r\n            color: Colors.yellow,\r\n            alignment: Alignment.center,\r\n            child: Text("height:${leftHeight.toStringAsFixed(1)}"),\r\n          ),\r\n          Container(\r\n            color: Colors.blue,\r\n            width: 150,\r\n            height: 80,\r\n            alignment: Alignment.center,\r\n            child: const Text("固定高"),\r\n          ),\r\n          Container(\r\n            color: Colors.red,\r\n            width: 60,\r\n            alignment: Alignment.center,\r\n            child: const Text("最高"),\r\n          )\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSlider() =>Slider(\r\n    value: _height,\r\n    max: 200.0,\r\n    min: 30.0,\r\n    divisions: 17,\r\n    onChanged: (v)=> setState(() => _height= v),\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(265,297,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass IntrinsicWidthDemo extends StatefulWidget {\r\n  const IntrinsicWidthDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _IntrinsicWidthDemoState createState() => _IntrinsicWidthDemoState();\r\n}\r\n\r\nclass _IntrinsicWidthDemoState extends State<IntrinsicWidthDemo> {\r\n  double _height =120.0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        buildChild(_height),\r\n        const SizedBox(height: 10),\r\n        _buildSlider()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget buildChild(double leftWidth) {\r\n    return IntrinsicWidth(\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: <Widget>[\r\n          Container(\r\n            height: 50,\r\n            width: leftWidth,\r\n            color: Colors.yellow,\r\n            alignment: Alignment.center,\r\n            child: Text("width:${leftWidth.toStringAsFixed(1)}"),\r\n          ),\r\n          Container(\r\n            color: Colors.blue,\r\n            width: 150,\r\n            height: 60,\r\n            alignment: Alignment.center,\r\n            child: const Text("固定宽"),\r\n          ),\r\n          Container(\r\n            color: Colors.red,\r\n            height: 40,\r\n            alignment: Alignment.center,\r\n            child: const Text("最宽"),\r\n          )\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSlider() =>Slider(\r\n    value: _height,\r\n    max: 200.0,\r\n    min: 80.0,\r\n    divisions: 17,\r\n    onChanged: (v)=> setState(() => _height= v),\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(266,316,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass KeepAliveDemo extends StatelessWidget {\r\n  const KeepAliveDemo({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n    Colors.red[50]!,\r\n    Colors.red[100]!,\r\n    Colors.red[200]!,\r\n    Colors.red[300]!,\r\n    Colors.red[400]!,\r\n    Colors.red[500]!,\r\n    Colors.red[600]!,\r\n    Colors.red[700]!,\r\n    Colors.red[800]!,\r\n    Colors.red[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: ListView.builder(\r\n        itemCount: data.length,\r\n        itemBuilder: (_, index) => ColorBox(\r\n          color: data[index],\r\n          index: index,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass ColorBox extends StatefulWidget {\r\n  final Color color;\r\n  final int index;\r\n\r\n  const ColorBox({\r\n    Key? key,\r\n    required this.color,\r\n    required this.index,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  _ColorBoxState createState() => _ColorBoxState();\r\n}\r\n\r\nclass _ColorBoxState extends State<ColorBox> with AutomaticKeepAliveClientMixin {\r\n  bool _checked = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _checked = false;\r\n    print(''-----_ColorBoxState#initState---${widget.index}-------'');\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    print(''-----_ColorBoxState#dispose---${widget.index}-------'');\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    super.build(context);\r\n\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      height: 50,\r\n      color: widget.color,\r\n      child: Row(\r\n        children: [\r\n          const SizedBox(width: 60),\r\n          Checkbox(\r\n            value: _checked,\r\n            onChanged: (bool? v) {\r\n              setState(() {\r\n                _checked = v??false;\r\n              });\r\n            },\r\n          ),\r\n          Text(\r\n            "index ${widget.index}: ${colorString(widget.color)}",\r\n            style: const TextStyle(color: Colors.white, shadows: [\r\n              Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\n            ]),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  @override\r\n  bool get wantKeepAlive => true;\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(267,284,0,replace(replace('import ''package:flutter/material.dart'';\r\nimport ''package:flutter/services.dart'';\r\n\r\nclass KeyboardListenerDemo1 extends StatefulWidget {\r\n  const KeyboardListenerDemo1({super.key});\r\n\r\n  @override\r\n  State<KeyboardListenerDemo1> createState() => _KeyboardListenerDemo1State();\r\n}\r\n\r\nclass _KeyboardListenerDemo1State extends State<KeyboardListenerDemo1> {\r\n  FocusNode focusNode = FocusNode();\r\n  List<KeyEvent> events = [];\r\n  ScrollController _ctrl = ScrollController();\r\n\r\n  @override\r\n  void initState() {\r\n    focusNode.addListener(_onFocusChange);\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    focusNode.removeListener(_onFocusChange);\r\n    focusNode.dispose();\r\n\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Center(\r\n      child: TapRegion(\r\n        onTapInside: (_) {\r\n          focusNode.requestFocus();\r\n        },\r\n        onTapOutside: (_) {\r\n          focusNode.unfocus();\r\n        },\r\n        child: KeyboardListener(\r\n          autofocus: true,\r\n          focusNode: focusNode,\r\n          onKeyEvent: _onKeyEvent,\r\n          child: _buildDisplay(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onKeyEvent(KeyEvent value) {\r\n    events.add(value);\r\n    setState(() {});\r\n    _scrollToEnd();\r\n    print(''${value.runtimeType}:${value.logicalKey.keyLabel}'');\r\n  }\r\n\r\n  void _onFocusChange() {\r\n    if (!focusNode.hasFocus) {\r\n      events.clear();\r\n    }\r\n    setState(() {});\r\n  }\r\n\r\n  void _scrollToEnd() async {\r\n    if (_ctrl.hasClients) {\r\n      await Future.delayed(Duration(milliseconds: 200));\r\n      _ctrl.animateTo(_ctrl.position.maxScrollExtent,\r\n          duration: Duration(milliseconds: 100), curve: Curves.ease);\r\n    }\r\n  }\r\n\r\n  Widget _buildDisplay() {\r\n    Color color = focusNode.hasFocus ? Colors.blue : Colors.grey;\r\n\r\n    return Container(\r\n      decoration: BoxDecoration(border: Border.all(color: color)),\r\n      width: 460,\r\n      padding: EdgeInsets.symmetric(horizontal: 12),\r\n      alignment: Alignment.center,\r\n      height: 60,\r\n      child: events.isNotEmpty\r\n          ? SizedBox(\r\n              width: 460,\r\n              height: 60,\r\n              child: ListView.builder(\r\n                  controller: _ctrl,\r\n                  itemCount: events.length,\r\n                  scrollDirection: Axis.horizontal,\r\n                  itemBuilder: (_, index) => KeyBoardBox(\r\n                        event: events[index],\r\n                      )),\r\n            )\r\n          : Text(\r\n              focusNode.hasFocus ? ''键盘输入点东西吧'' : ''点击我获取焦点'',\r\n              style: TextStyle(color: color),\r\n            ),\r\n    );\r\n  }\r\n}\r\n\r\nclass KeyBoardBox extends StatelessWidget {\r\n  final KeyEvent event;\r\n\r\n  const KeyBoardBox({super.key, required this.event});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Color? color;\r\n    if (event is KeyDownEvent) {\r\n      color = Colors.blue;\r\n    }\r\n    if (event is KeyRepeatEvent) {\r\n      color = Colors.green;\r\n    }\r\n    if (event is KeyUpEvent) {\r\n      color = Colors.grey;\r\n    }\r\n    return Center(\r\n      child: Container(\r\n        margin: EdgeInsets.only(right: 4),\r\n        width: 32,\r\n        height: 32,\r\n        decoration: BoxDecoration(color: color),\r\n        alignment: Alignment.center,\r\n        child: Text(\r\n          event.logicalKey.keyLabel,\r\n          textAlign: TextAlign.center,\r\n          style: TextStyle(color: Colors.white, fontSize: 8, height: 1),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(268,287,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020-04-19\r\012/// contact me by email 1981462002@qq.com\r\012\r\012class CustomLayoutBuilder extends StatelessWidget {\r\012  const CustomLayoutBuilder({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    print(''CustomLayoutBuild'');\r\012    return Container(\r\012      alignment: Alignment.center,\r\012      height: 80,\r\012      width: 150,\r\012      color: Colors.green,\r\012      child: LayoutBuilder(\r\012        builder: (_, zone) {\r\012          return Text(\r\012            ''父容器宽:${zone.maxWidth}\n''\r\012            ''父容器高:${zone.maxHeight}'',\r\012            style: const TextStyle(color: Colors.white, fontSize: 16),\r\012          );\r\012        },\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(269,287,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass FitByLayoutBuilder extends StatefulWidget {\r\n  const FitByLayoutBuilder({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _FitByLayoutBuilderState createState() => _FitByLayoutBuilderState();\r\n}\r\n\r\nclass _FitByLayoutBuilderState extends State<FitByLayoutBuilder> {\r\n  double _width = 100;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        SizedBox(\r\n          width: _width,\r\n          child: LayoutBuilder(\r\n            builder: (_, zone) {\r\n              if (zone.maxWidth <= 150) {\r\n                return _buildType1();\r\n              } else {\r\n                return _buildType2(zone);\r\n              }\r\n            },\r\n          ),\r\n        ),\r\n        _buildSlider(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSlider() => Slider(\r\n          min: 50,\r\n          max: 300,\r\n          label: "父宽:${_width.toStringAsFixed(1)}",\r\n          value: _width,\r\n          onChanged: (v) => setState(() {\r\n              _width = v;\r\n            }));\r\n\r\n  Widget _buildType1() => Container(\r\n        color: Colors.blue,\r\n        child: Column(\r\n          children: <Widget>[\r\n            _buildTitle(),\r\n            Padding(\r\n              padding: const EdgeInsets.all(8.0),\r\n              child: _buildContent(),\r\n            ),\r\n          ],\r\n        ),\r\n      );\r\n\r\n  Widget _buildType2(BoxConstraints zone) => Container(\r\n        height: 100,\r\n        width: zone.maxWidth,\r\n        color: Colors.orange,\r\n        child: Row(\r\n          children: <Widget>[\r\n            Container(\r\n              margin: const EdgeInsets.all(10),\r\n              height: 80,\r\n              width: 30,\r\n              color: Colors.grey,\r\n            ),\r\n            Expanded(child: _buildContent())\r\n          ],\r\n        ),\r\n      );\r\n\r\n  Widget _buildTitle() => Container(\r\n        margin: const EdgeInsets.only(left: 10, right: 10, top: 10),\r\n        color: Colors.grey,\r\n        height: 30,\r\n      );\r\n\r\n  Widget _buildContent() => Wrap(\r\n        runSpacing: 3,\r\n        children: <Widget>[\r\n          Container(\r\n            color: Colors.red,\r\n            height: 30,\r\n          ),\r\n          Container(\r\n            color: Colors.yellow,\r\n            height: 30,\r\n          ),\r\n          Container(\r\n            color: Colors.green,\r\n            height: 30,\r\n          ),\r\n        ],\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(270,287,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass SimpleExpandableText extends StatefulWidget {\r\n  const SimpleExpandableText({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  createState() => _SimpleExpandableTextState();\r\n}\r\n\r\nclass _SimpleExpandableTextState extends State<SimpleExpandableText> {\r\n\r\n  final String text = ''桃树、杏树、梨树，你不让我，我不让你，都开满了花赶趟儿。''\r\n      ''红的像火，粉的像霞，白的像雪。''\r\n      ''花里带着甜味儿；闭了眼，树上仿佛已经满是桃儿、杏儿、梨儿。''\r\n      ''花下成千成百的蜜蜂嗡嗡地闹着，大小的蝴蝶飞来飞去。''\r\n      ''野花遍地是：杂样儿，有名字的，没名字的，散在草丛里，像眼睛，像星星，还眨呀眨的。'';\r\n\r\n  bool expand = false;\r\n  int maxLines = 3;\r\n\r\n  final TextStyle style =\r\n      const TextStyle(fontSize: 15, color: Colors.grey, shadows: [\r\n    Shadow(\r\n      color: Colors.white,\r\n      offset: Offset(1, 1),\r\n    ),\r\n  ]);\r\n\r\n  BoxDecoration get boxDecoration => BoxDecoration(\r\n        color: Colors.cyanAccent.withAlpha(8),\r\n        borderRadius: const BorderRadiusDirectional.all(\r\n          Radius.circular(20),\r\n        ),\r\n      );\r\n\r\n  late TextPainter painter;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    painter = TextPainter(\r\n      text: TextSpan(text: text, style: style),\r\n      maxLines: maxLines,\r\n      textDirection: TextDirection.ltr,\r\n    );\r\n  }\r\n\r\n  @override\r\n  build(context) => Container(\r\n        decoration: boxDecoration,\r\n        padding: const EdgeInsets.all(15),\r\n        child: LayoutBuilder(builder: (context, size) {\r\n          painter.layout(maxWidth: size.maxWidth);\r\n          if (!painter.didExceedMaxLines) {\r\n            return Text(text, style: style);\r\n          }\r\n          return Column(\r\n            mainAxisSize: MainAxisSize.min,\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            children: <Widget>[\r\n              Text(text, maxLines: expand ? null : 3, style: style),\r\n              GestureDetector(\r\n                onTap: toggle,\r\n                child: Text(\r\n                  expand ? ''<< 收起'' : ''展开 >>'',\r\n                  style: const TextStyle(color: Colors.blue),\r\n                ),\r\n              ),\r\n            ],\r\n          );\r\n        }),\r\n      );\r\n\r\n  void toggle() {\r\n    setState(() {\r\n      expand = !expand;\r\n    });\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(271,315,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/6/6\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\n\r\nclass LayoutIdDemo extends StatelessWidget {\r\n  const LayoutIdDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 300,\r\n      height: 150,\r\n      color: Colors.grey.withAlpha(33),\r\n      child: CustomMultiChildLayout(\r\n        delegate: CornerCustomMultiChildLayout(\r\n          padding:const EdgeInsets.only(left: 10,top: 5,right: 10,bottom: 5),\r\n        ),\r\n        children: [\r\n           LayoutId(id: CornerType.topLeft, child: const Box50(Colors.red)),\r\n           LayoutId(id: CornerType.topRight, child: const Box50(Colors.yellow)),\r\n           LayoutId(id: CornerType.bottomLeft, child: const Box50(Colors.blue)),\r\n           LayoutId(id: CornerType.bottomRight, child: const Box50(Colors.green)),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n// 50 颜色盒\r\nclass Box50 extends StatelessWidget {\r\n  final Color color;\r\n  const Box50(this.color, {Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 50,\r\n      height: 50,\r\n      color: color,\r\n    );\r\n  }\r\n}\r\n\r\n\r\nenum CornerType{\r\n  topLeft,\r\n  topRight,\r\n  bottomLeft,\r\n  bottomRight\r\n}\r\n\r\n\r\nclass CornerCustomMultiChildLayout extends MultiChildLayoutDelegate{\r\n  final EdgeInsets padding;\r\n  \r\n  CornerCustomMultiChildLayout({this.padding = EdgeInsets.zero});\r\n\r\n  @override\r\n  void performLayout(Size size) {\r\n    if (hasChild(CornerType.topLeft)) {\r\n      layoutChild(CornerType.topLeft, BoxConstraints.loose(size));\r\n      positionChild(CornerType.topLeft, Offset.zero.translate(padding.left, padding.top));\r\n    }\r\n    if (hasChild(CornerType.topRight)) {\r\n      var childSize = layoutChild(CornerType.topRight, BoxConstraints.loose(size));\r\n      positionChild(CornerType.topRight, Offset(size.width-childSize.width,0).translate(-padding.right, padding.top));\r\n    }\r\n    if (hasChild(CornerType.bottomLeft)) {\r\n      var childSize = layoutChild(CornerType.bottomLeft, BoxConstraints.loose(size));\r\n      positionChild(CornerType.bottomLeft, Offset(0,size.height-childSize.height).translate(padding.left, -padding.bottom));\r\n    }\r\n    if (hasChild(CornerType.bottomRight)) {\r\n      var childSize = layoutChild(CornerType.bottomRight, BoxConstraints.loose(size));\r\n      positionChild(CornerType.bottomRight, Offset(size.width-childSize.width,size.height-childSize.height).translate(-padding.right, -padding.bottom));\r\n    }\r\n  }\r\n\r\n  @override\r\n  bool shouldRelayout(CornerCustomMultiChildLayout oldDelegate) => oldDelegate.padding!=padding;\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(272,145,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomLicensePage extends StatelessWidget {\r\n  const CustomLicensePage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: MediaQuery.of(context).size.width,\r\n      height: 400,\r\n      child: const LicensePage(\r\n        applicationIcon: FlutterLogo(),\r\n        applicationVersion: ''v0.0.1'',\r\n        applicationName: ''Flutter Unit'',\r\n        applicationLegalese: ''Copyright© 2018-2024 张风捷特烈'',\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(273,79,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomLimitedBox extends StatefulWidget {\r\n  const CustomLimitedBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomLimitedBoxState createState() => _CustomLimitedBoxState();\r\n}\r\n\r\nclass _CustomLimitedBoxState extends State<CustomLimitedBox> {\r\n  String _text = '''';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget child = Container(\r\n      alignment: Alignment.center,\r\n      color: Colors.cyanAccent,\r\n      width: 50,\r\n      height: 50,\r\n      child: const Text("Static"),\r\n    );\r\n\r\n    Widget box = LimitedBox(\r\n      maxHeight: 60,\r\n      maxWidth: 100,\r\n      child: Container(color: Colors.orange, child: Text(_text)),\r\n    );\r\n\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 300,\r\n          height: 100,\r\n          child: Row(\r\n            children: <Widget>[child, UnconstrainedBox(child: box), child],\r\n          ),\r\n        ),\r\n        _buildInput()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildInput() {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(18.0),\r\n      child: TextField(\r\n        decoration: const InputDecoration(\r\n          border: OutlineInputBorder(),\r\n          hintText: ''请输入'',\r\n        ),\r\n        onChanged: (v) {\r\n          setState(() {\r\n            _text = v;\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(274,47,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomLinearProgressIndicator extends StatefulWidget {\r\n  const CustomLinearProgressIndicator({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomLinearProgressIndicatorState createState() =>\r\n      _CustomLinearProgressIndicatorState();\r\n}\r\n\r\nclass _CustomLinearProgressIndicatorState\r\n    extends State<CustomLinearProgressIndicator> {\r\n  List<double?> data = [0.2, 0.4, 0.6, 0.8, null];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      children: data\r\n          .map((e) => SizedBox(\r\n        width: 50,\r\n        height: 3,\r\n        child:LinearProgressIndicator(\r\n          value: e,\r\n          backgroundColor: Colors.grey.withAlpha(33),\r\n          valueColor: const AlwaysStoppedAnimation(Colors.orange),\r\n        ),\r\n      ))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(275,342,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/8/2\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ListBodyDemo extends StatelessWidget {\r\n  const ListBodyDemo({Key? key}) : super(key: key);\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: ListView(\r\n          children: <Widget>[\r\n            ListBody(\r\n              mainAxis: Axis.vertical,\r\n              reverse: false,\r\n              children: <Widget>[\r\n                Container(color: Colors.red,  height: 50.0,),\r\n                Container(color: Colors.orange, height: 50.0,),\r\n                Container(color: Colors.yellow,  height: 50.0,),\r\n              ],\r\n            ),\r\n            Container(color: Colors.green,  height: 80.0,),\r\n            ListBody(\r\n              mainAxis: Axis.vertical,\r\n              reverse: false,\r\n              children: <Widget>[\r\n                Container(color: Colors.blue, height: 50.0,),\r\n                Container(color: Colors.indigo,  height: 50.0,),\r\n                Container(color: Colors.purple, height: 50.0,),\r\n              ],\r\n            )\r\n          ]\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(276,147,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomListener extends StatefulWidget {\r\n  const CustomListener({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomListenerState createState() => _CustomListenerState();\r\n}\r\n\r\nclass _CustomListenerState extends State<CustomListener> {\r\n  String _info = '''';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Listener(\r\n      onPointerDown: (detail) => setState(() => _info = detail.toString()),\r\n      onPointerMove: (detail) => setState(() => _info = detail.toString()),\r\n      onPointerUp: (detail) => setState(() => _info = detail.toString()),\r\n      onPointerCancel: (detail) => setState(() => _info = detail.toString()),\r\n\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        width: 300,\r\n        height: 300 * 0.618,\r\n        color: Colors.grey.withAlpha(33),\r\n        child: Text(\r\n          _info,\r\n          style: const TextStyle(fontSize: 16, color: Colors.blue),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(277,16,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomListTile extends StatelessWidget {\r\n  const CustomListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: ListTile(\r\n        leading: Image.asset("assets/images/icon_head.webp"),\r\n        title: const Text("以梦为马"),\r\n        subtitle: const Text("海子"),\r\n        contentPadding: const EdgeInsets.all(5),\r\n        trailing: const Icon(Icons.more_vert),\r\n        onLongPress: () => Navigator.of(context).pushNamed(''AboutMePage''),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(278,16,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SelectListTile extends StatefulWidget {\r\n  const SelectListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SelectListTileState createState() => _SelectListTileState();\r\n}\r\n\r\nclass _SelectListTileState extends State<SelectListTile> {\r\n  bool _selected = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: ListTile(\r\n        leading: Image.asset("assets/images/icon_head.webp"),\r\n        selected: _selected,\r\n        title: const Text("以梦为马"),\r\n        subtitle: const Text("海子"),\r\n        contentPadding: const EdgeInsets.all(5),\r\n        trailing: const Icon(Icons.more_vert),\r\n        onTap: () => setState(() => _selected = !_selected),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(279,16,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DenseListTile extends StatefulWidget {\r\n  const DenseListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DenseListTileState createState() => _DenseListTileState();\r\n}\r\n\r\nclass _DenseListTileState extends State<DenseListTile> {\r\n  bool _dense = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: ListTile(\r\n        leading: Image.asset("assets/images/icon_head.webp"),\r\n        title: const Text("以梦为马"),\r\n        subtitle: const Text("海子"),\r\n        selected: false,\r\n        contentPadding: const EdgeInsets.all(5),\r\n        trailing: const Icon(Icons.more_vert),\r\n        dense: _dense,\r\n        onTap: () => setState(() => _dense = !_dense),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(280,334,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ListTileThemeDemo extends StatelessWidget {\r\n  const ListTileThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ListTileTheme(\r\n      dense: false,\r\n      style: ListTileStyle.list,\r\n      selectedColor: Colors.blue,\r\n      contentPadding: const EdgeInsets.only(left: 15,right: 15,top: 5,bottom: 5),\r\n      iconColor: Colors.purple,\r\n      textColor: Colors.orange,\r\n      child: _ListTileSimple(),\r\n    );\r\n  }\r\n}\r\n\r\nclass _ListTileSimple extends StatefulWidget {\r\n  @override\r\n  _ListTileSimpleState createState() => _ListTileSimpleState();\r\n}\r\n\r\nclass _ListTileSimpleState extends State<_ListTileSimple> {\r\n  bool _selected = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: ListTile(\r\n        leading: Image.asset("assets/images/icon_head.webp"),\r\n        selected: _selected,\r\n        title: const Text("以梦为马"),\r\n        subtitle: const Text("海子"),\r\n        trailing: const Icon(Icons.more_vert),\r\n        onTap: () => setState(() => _selected = !_selected),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(281,162,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomListView extends StatelessWidget {\r\n  const CustomListView({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  TextStyle get textStyle => const TextStyle(\r\n        color: Colors.white,\r\n        shadows: [\r\n          Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\n        ],\r\n      );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: ListView(\r\n        padding: const EdgeInsets.symmetric(horizontal: 5),\r\n        children: data\r\n            .map((color) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 50,\r\n                  color: color,\r\n                  child: Text(\r\n                    colorString(color),\r\n                    style: textStyle,\r\n                  ),\r\n                ))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(282,162,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass HorizontalListView extends StatelessWidget {\r\n  const HorizontalListView({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  TextStyle get textStyle => const TextStyle(\r\n    color: Colors.white,\r\n    shadows: [\r\n      Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\n    ],\r\n  );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: ListView(\r\n        reverse: true,\r\n        shrinkWrap: true,\r\n        scrollDirection: Axis.horizontal,\r\n        children: data\r\n            .map((color) => Container(\r\n          alignment: Alignment.center,\r\n          width: 100,\r\n          height: 50,\r\n          color: color,\r\n          child: Text(\r\n            colorString(color),\r\n            style: textStyle,\r\n          ),\r\n        ))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(283,162,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass BuilderListView extends StatelessWidget {\r\n  const BuilderListView({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: ListView.builder(\r\n        itemCount: data.length,\r\n        itemBuilder: (context, index) => _buildItem(data[index]),\r\n      ),\r\n    );\r\n  }\r\n\r\n  TextStyle get textStyle => const TextStyle(\r\n        color: Colors.white,\r\n        shadows: [\r\n          Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\n        ],\r\n      );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  Widget _buildItem(Color color) => Container(\r\n        alignment: Alignment.center,\r\n        width: 100,\r\n        height: 50,\r\n        color: color,\r\n        child: Text(\r\n          colorString(color),\r\n          style: textStyle,\r\n        ),\r\n      );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(284,162,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SeparatedListView extends StatelessWidget {\r\n  const SeparatedListView({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: ListView.separated(\r\n        separatorBuilder: (context, index) => const Divider(\r\n          thickness: 1,\r\n          height: 1,\r\n          color: Colors.orange,\r\n        ),\r\n        itemCount: data.length,\r\n        itemBuilder: (context, index) => _buildItem(data[index]),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  TextStyle get textStyle => const TextStyle(\r\n        color: Colors.white,\r\n        shadows: [\r\n          Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\n        ],\r\n      );\r\n\r\n  Widget _buildItem(Color color) => Container(\r\n        alignment: Alignment.center,\r\n        width: 100,\r\n        height: 50,\r\n        color: color,\r\n        child: Text(\r\n          colorString(color),\r\n          style: textStyle,\r\n        ),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(285,179,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomListWheelScrollView extends StatefulWidget {\r\n  const CustomListWheelScrollView({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomListWheelScrollViewState createState() =>\r\n      _CustomListWheelScrollViewState();\r\n}\r\n\r\nclass _CustomListWheelScrollViewState extends State<CustomListWheelScrollView> {\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n  Color _color = Colors.blue;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildCircle(),\r\n        SizedBox(\r\n          height: 150,\r\n          width: 300,\r\n          child: ListWheelScrollView(\r\n            perspective: 0.006,\r\n            itemExtent: 50,\r\n            onSelectedItemChanged: (index) {\r\n              print(''onSelectedItemChanged:$index'');\r\n              setState(() => _color = data[index]);\r\n            },\r\n            children: data.map((color) => _buildItem(color)).toList(),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildCircle() => Container(\r\n    margin: const EdgeInsets.only(bottom: 5),\r\n        width: 30,\r\n        height: 30,\r\n        decoration: BoxDecoration(color: _color, shape: BoxShape.circle),\r\n      );\r\n\r\n  Widget _buildItem(Color color) {\r\n    return Container(\r\n      key: ValueKey(color)  ,\r\n      alignment: Alignment.center,\r\n      height: 50,\r\n      color: color,\r\n      child: Text(\r\n        colorString(color),\r\n        style: const TextStyle(color: Colors.white, shadows: [\r\n          Shadow(\r\n            color: Colors.black,\r\n            offset: Offset(.5, .5),\r\n            blurRadius: 2,\r\n          )\r\n        ]),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(286,291,0,replace(replace('import ''package:flutter/gestures.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ListWheelViewportDemo extends StatelessWidget {\r\n  const ListWheelViewportDemo({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.blue[50]!,\r\n    Colors.blue[100]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[900]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[100]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 250,\r\n      width: 320,\r\n      child: Scrollable(\r\n          axisDirection: AxisDirection.down,\r\n          physics: const BouncingScrollPhysics(),\r\n          dragStartBehavior: DragStartBehavior.start,\r\n          viewportBuilder: (ctx, position) => ListWheelViewport(\r\n                itemExtent: 100,\r\n                offset: position,\r\n                childDelegate: ListWheelChildLoopingListDelegate(\r\n                    children: data.map((e) => _buildItem(e)).toList()),\r\n              )),\r\n    );\r\n  }\r\n\r\n  Widget _buildItem(Color color) => Container(\r\n        alignment: Alignment.center,\r\n        color: color,\r\n        child: Text(colorString(color),\r\n            style: const TextStyle(color: Colors.white, shadows: [\r\n              Shadow(\r\n                color: Colors.black,\r\n                offset: Offset(.5, .5),\r\n                blurRadius: 2,\r\n              ),\r\n            ])),\r\n      );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(287,291,0,replace(replace('import ''package:flutter/gestures.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ListWheelViewportDemo2 extends StatelessWidget {\r\n  const ListWheelViewportDemo2({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.blue[50]!,\r\n    Colors.blue[100]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[900]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[100]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 250,\r\n      width: 320,\r\n      child: Scrollable(\r\n          axisDirection: AxisDirection.down,\r\n          physics: const BouncingScrollPhysics(),\r\n          dragStartBehavior: DragStartBehavior.start,\r\n          viewportBuilder: (ctx, position) => ListWheelViewport(\r\n                perspective: 0.008,\r\n                squeeze: 1,\r\n                diameterRatio: 2,\r\n                itemExtent: 50,\r\n                offset: position,\r\n                childDelegate: ListWheelChildLoopingListDelegate(\r\n                    children: data.map((e) => _buildItem(e)).toList()),\r\n              )),\r\n    );\r\n  }\r\n\r\n  Widget _buildItem(Color color) => Container(\r\n    alignment: Alignment.center,\r\n    color: color,\r\n    child: Text(colorString(color),\r\n            style: const TextStyle(color: Colors.white, shadows: [\r\n              Shadow(\r\n                color: Colors.black,\r\n                offset: Offset(.5, .5),\r\n                blurRadius: 2,\r\n              )\r\n            ])),\r\n  );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(288,291,0,replace(replace('import ''package:flutter/gestures.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ListWheelViewportDemo3 extends StatelessWidget {\r\n  const ListWheelViewportDemo3({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.blue[50]!,\r\n    Colors.blue[100]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[900]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[100]!,\r\n  ];\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 250,\r\n      width: 320,\r\n      // color: Colors.red,\r\n      child: Scrollable(\r\n          axisDirection: AxisDirection.down,\r\n          physics: const BouncingScrollPhysics(),\r\n          dragStartBehavior: DragStartBehavior.start,\r\n          viewportBuilder: (ctx, position) => ListWheelViewport(\r\n            perspective: 0.008,\r\n            squeeze: 1,\r\n            diameterRatio: 2,\r\n            itemExtent: 50,\r\n            useMagnifier: true,\r\n            magnification: 2,\r\n            renderChildrenOutsideViewport: true,\r\n            clipBehavior: Clip.none,\r\n            offset: position,\r\n            childDelegate: ListWheelChildLoopingListDelegate(\r\n                children: data.map((e) => _buildItem(e)).toList()),\r\n          )),\r\n    );\r\n  }\r\n\r\n  Widget _buildItem(Color color) => Container(\r\n    alignment: Alignment.center,\r\n    color: color,\r\n    child: Text(colorString(color),\r\n        style: const TextStyle(color: Colors.white, shadows: [\r\n          Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\n        ])),\r\n  );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(289,291,0,replace(replace('import ''package:flutter/gestures.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ListWheelViewportDemo4 extends StatelessWidget {\r\n  const ListWheelViewportDemo4({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.blue[50]!,\r\n    Colors.blue[100]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[900]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[100]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 250,\r\n      width: 320,\r\n      // color: Colors.red,\r\n      child: Scrollable(\r\n          axisDirection: AxisDirection.down,\r\n          physics: const BouncingScrollPhysics(),\r\n          dragStartBehavior: DragStartBehavior.start,\r\n          viewportBuilder: (ctx, position) => ListWheelViewport(\r\n                perspective: 0.008,\r\n                squeeze: 1,\r\n                diameterRatio: 2,\r\n                offAxisFraction: 0.2,\r\n                overAndUnderCenterOpacity: 0.4,\r\n                itemExtent: 50,\r\n                offset: position,\r\n                childDelegate: ListWheelChildLoopingListDelegate(\r\n                    children: data.map((e) => _buildItem(e)).toList()),\r\n              )),\r\n    );\r\n  }\r\n\r\n  Widget _buildItem(Color color) => Container(\r\n    alignment: Alignment.center,\r\n    color: color,\r\n    child: Text(colorString(color),\r\n            style: const TextStyle(color: Colors.white, shadows: [\r\n              Shadow(\r\n                color: Colors.black,\r\n                offset: Offset(.5, .5),\r\n                blurRadius: 2,\r\n              )\r\n            ])),\r\n  );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(290,290,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nclass LocalizationsDemo1 extends StatelessWidget {\r\n  const LocalizationsDemo1({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Locale locale = Localizations.localeOf(context);\r\n    return Text(''Locale: ${locale.toString()}'');\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(291,105,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomLongPressDraggable extends StatefulWidget {\r\n  const CustomLongPressDraggable({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomLongPressDraggableState createState() =>\r\n      _CustomLongPressDraggableState();\r\n}\r\n\r\nclass _CustomLongPressDraggableState extends State<CustomLongPressDraggable> {\r\n  Color _color = Colors.grey;\r\n  String _info = ''DragTarget'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Wrap(\r\n          children: _buildColors(),\r\n          spacing: 10,\r\n        ),\r\n        const SizedBox(height: 20),\r\n        _buildDragTarget()\r\n      ],\r\n    );\r\n  }\r\n\r\n  final List<Color> colors = const [\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green,\r\n    Colors.orange,\r\n    Colors.purple,\r\n    Colors.cyanAccent\r\n  ];\r\n\r\n  List<Widget> _buildColors() => colors\r\n      .map(\r\n        (e) => LongPressDraggable<Color>(\r\n            onDragStarted: () => setState(() => _info = ''开始拖拽''),\r\n            onDragEnd: (d) => setState(() => _info = ''结束拖拽''),\r\n            onDragCompleted: () => _info = ''拖拽完成'',\r\n            onDraggableCanceled: (v, o) => _info = ''拖拽取消'',\r\n            child: Container(\r\n              width: 30,\r\n              height: 30,\r\n              alignment: Alignment.center,\r\n              child: Text(\r\n                colors.indexOf(e).toString(),\r\n                style: const TextStyle(\r\n                    color: Colors.white, fontWeight: FontWeight.bold),\r\n              ),\r\n              decoration: BoxDecoration(color: e, shape: BoxShape.circle),\r\n            ),\r\n            data: e,\r\n            feedback: Container(\r\n              width: 25,\r\n              height: 25,\r\n              decoration: BoxDecoration(color: e, shape: BoxShape.circle),\r\n            )),\r\n      )\r\n      .toList();\r\n\r\n  Widget _buildDragTarget() {\r\n    return DragTarget<Color>(\r\n        onAccept: (data) => setState(() {\r\n              _info=''onAccept'';\r\n          _color = data;\r\n        }),\r\n        builder: (context, candidateData, rejectedData) => Container(\r\n            width: 150.0,\r\n            height: 50.0,\r\n            color: _color,\r\n            child: Center(\r\n              child: Text(\r\n                _info,\r\n                style: const TextStyle(color: Colors.white),\r\n              ),\r\n            )));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(292,160,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomMaterial extends StatelessWidget {\r\n  const CustomMaterial({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        spacing: 10,\r\n        runSpacing: 10,\r\n        children: MaterialType.values.map((e) => _buildMaterial(e)).toList());\r\n  }\r\n\r\n  Material _buildMaterial(MaterialType type) => Material(\r\n        shadowColor: Colors.blue,\r\n        type: type,\r\n        color: Colors.orange,\r\n        elevation: 3,\r\n        child: Container(\r\n          alignment: Alignment.center,\r\n          width: 100,\r\n          height: 60,\r\n          child: Text(\r\n            type.toString().split(''.'')[1],\r\n            style: const TextStyle(color: Colors.black),\r\n          ),\r\n        ),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(293,160,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ShapeMaterial extends StatelessWidget {\r\n  const ShapeMaterial({Key? key}) : super(key: key);\r\n\r\n  final Map<String, ShapeBorder> shapeMap = const {\r\n    ''BorderDirectional'': BorderDirectional(\r\n        top: BorderSide(\r\n          color: Colors.white,\r\n        ),\r\n        start: BorderSide(color: Colors.black, width: 15),\r\n        bottom: BorderSide(\r\n          color: Colors.white,\r\n        )),\r\n    ''Border'': Border(\r\n      top: BorderSide(width: 5.0, color: Color(0xFFDFDFDF)),\r\n      left: BorderSide(width: 5.0, color: Color(0xFFDFDFDF)),\r\n      right: BorderSide(width: 5.0, color: Color(0xFF7F7F7F)),\r\n      bottom: BorderSide(width: 5.0, color: Color(0xFF7F7F7F)),\r\n    ),\r\n    ''Circle'': CircleBorder(\r\n      side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n    ),\r\n    ''RoundedRectangleBorder'': RoundedRectangleBorder(\r\n        side: BorderSide(width: 1.0, color: Colors.black),\r\n        borderRadius: BorderRadius.all(Radius.circular(15))),\r\n    ''ContinuousRectangleBorder'': ContinuousRectangleBorder(\r\n      side: BorderSide.none,\r\n      borderRadius: BorderRadius.all(Radius.circular(40.0)),\r\n    )\r\n  };\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      runSpacing: 10,\r\n      children: shapeMap.keys.map((e) => _buildMaterial(e)).toList(),\r\n    );\r\n  }\r\n\r\n  Material _buildMaterial(String type) => Material(\r\n    shadowColor: Colors.blue,\r\n    shape: shapeMap[type],\r\n    color: Colors.orange,\r\n    elevation: 3,\r\n    textStyle: const TextStyle(color: Colors.white),\r\n    child: Container(\r\n      alignment: Alignment.center,\r\n      width: 300,\r\n      height: 60,\r\n      child: Text(\r\n        type,\r\n      ),\r\n    ),\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(294,65,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-17\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass MaterialAppDemo extends StatefulWidget {\r\n  const MaterialAppDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _WidgetsAppDemoState createState() => _WidgetsAppDemoState();\r\n}\r\n\r\nclass _WidgetsAppDemoState extends State<MaterialAppDemo> {\r\n  bool _debugShowCheckedModeBanner = false;\r\n  bool _showPerformanceOverlay = false;\r\n  bool _debugShowMaterialGrid = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: [\r\n        _buildSwitchers(),\r\n        SizedBox(\r\n          height: 250,\r\n          child: MaterialApp(\r\n            debugShowCheckedModeBanner: _debugShowCheckedModeBanner,\r\n            showPerformanceOverlay: _showPerformanceOverlay,\r\n            debugShowMaterialGrid: _debugShowMaterialGrid,\r\n            home: const HomePage(),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitchers() {\r\n    return DefaultTextStyle(\r\n      style: const TextStyle(color: Colors.blue),\r\n      child: Wrap(\r\n        spacing: 10,\r\n        children: [\r\n          Column(\r\n            children: [\r\n              Switch(\r\n                value: _showPerformanceOverlay,\r\n                onChanged: (v) {\r\n                  setState(() {\r\n                    _showPerformanceOverlay = v;\r\n                  });\r\n                },\r\n              ),\r\n              const Text(''性能浮层'')\r\n            ],\r\n          ),\r\n          Column(\r\n            children: [\r\n              Switch(\r\n                value: _debugShowCheckedModeBanner,\r\n                onChanged: (v) {\r\n                  setState(() {\r\n                    _debugShowCheckedModeBanner = v;\r\n                  });\r\n                },\r\n              ),\r\n              const Text(''开启角标'')\r\n            ],\r\n          ),\r\n          Column(\r\n            children: [\r\n              Switch(\r\n                value: _debugShowMaterialGrid,\r\n                onChanged: (v) {\r\n                  setState(() {\r\n                    _debugShowMaterialGrid = v;\r\n                  });\r\n                },\r\n              ),\r\n              const Text(''开启网格'')\r\n            ],\r\n          )\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass HomePage extends StatefulWidget {\r\n  const HomePage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _HomePageState createState() => _HomePageState();\r\n}\r\n\r\nclass _HomePageState extends State<HomePage> {\r\n  var _count = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Container(\r\n        alignment: const Alignment(0, 0.7),\r\n        child: Text(\r\n          ''你点击了$_count次'',\r\n          style: const TextStyle(fontSize: 18, color: Colors.blue),\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        child: const Icon(Icons.add),\r\n        onPressed: () {\r\n          setState(() {\r\n            _count++;\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(295,211,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass MaterialBannerDemo extends StatelessWidget {\r\n  const MaterialBannerDemo({Key? key}) : super(key: key);\r\n\r\n  final String info = ''Welcome to Flutter Unit!'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        MaterialBanner(\r\n          content: Text(\r\n            info,\r\n            style: const TextStyle(color: Colors.white),\r\n          ),\r\n          backgroundColor: Colors.purple,\r\n          leading: const Icon(Icons.info, color: Colors.lightBlueAccent),\r\n          padding: const EdgeInsetsDirectional.only(start: 16.0, top: 2.0),\r\n          forceActionsBelow: false,\r\n          // 默认false\r\n          actions: const <Widget>[\r\n            Text(\r\n              ''I KNOW'',\r\n              style: TextStyle(\r\n                  color: Colors.orange,\r\n                  fontWeight: FontWeight.bold,\r\n                  fontSize: 14),\r\n            )\r\n          ],\r\n        )],\r\n    );\r\n  }\r\n\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(296,211,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass MaterialBannerDemoTwo extends StatelessWidget {\r\n  const MaterialBannerDemoTwo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''A banner displays an important, succinct message, and provides actions for users to address. ''\r\n      ''A user action is required for itto be dismissed.'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        MaterialBanner(\r\n          content: Text(\r\n            info,\r\n            style: const TextStyle(color: Colors.white),\r\n          ),\r\n          backgroundColor: Colors.purple,\r\n          leading: const Icon(Icons.warning, color: Colors.yellow),\r\n          padding:\r\n              const EdgeInsetsDirectional.only(start: 16.0, top: 2.0, end: 2),\r\n          leadingPadding: const EdgeInsetsDirectional.only(end: 16.0),\r\n          actions: <Widget>[\r\n            ElevatedButton(\r\n              style: TextButton.styleFrom(\r\n                backgroundColor: Colors.white,\r\n              ),\r\n              onPressed: () {},\r\n              child: const Text(\r\n                ''I KNOW'',\r\n                style: TextStyle(\r\n                    color: Colors.purple,\r\n                    fontWeight: FontWeight.bold,\r\n                    fontSize: 14),\r\n              ),\r\n            ),\r\n            ElevatedButton(\r\n              style: TextButton.styleFrom(\r\n                backgroundColor: Colors.white,\r\n              ),\r\n              onPressed: () {},\r\n              child: const Text(\r\n                ''I IGNORE'',\r\n                style: TextStyle(\r\n                    color: Colors.purple,\r\n                    fontWeight: FontWeight.bold,\r\n                    fontSize: 14),\r\n              ),\r\n            ),\r\n          ],\r\n      )],\r\n    );\r\n  }\r\n\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(297,327,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass MaterialBannerThemeDemo extends StatelessWidget {\r\n  const MaterialBannerThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialBannerTheme(\r\n      data: MaterialBannerTheme.of(context).copyWith(\r\n        backgroundColor: Colors.purple,\r\n        padding: const EdgeInsetsDirectional.only(start: 16.0, top: 2.0,end: 2),\r\n        leadingPadding:const EdgeInsetsDirectional.only(end: 16.0) ,\r\n        contentTextStyle:  const TextStyle(color: Colors.white),\r\n      ),\r\n      child: _MaterialBannerDemo(),\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass _MaterialBannerDemo extends StatelessWidget {\r\n  final info =\r\n      ''A banner displays an important, succinct message, and provides actions for users to address. ''\r\n      ''A user action is required for itto be dismissed.'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[MaterialBanner(\r\n        content: Text(info),\r\n        leading: const Icon(Icons.warning, color: Colors.yellow),\r\n        actions: <Widget>[\r\n          ElevatedButton(\r\n            style: ElevatedButton.styleFrom(backgroundColor: Colors.white),\r\n            onPressed: () {},\r\n            child: const Text(\r\n              ''I KNOW'',\r\n              style: TextStyle(\r\n                  color: Colors.purple,\r\n                  fontWeight: FontWeight.bold,\r\n                  fontSize: 14),\r\n            ),\r\n          ),\r\n          ElevatedButton(\r\n            style: ElevatedButton.styleFrom(backgroundColor: Colors.white),\r\n            onPressed: () {},\r\n            child: const Text(\r\n              ''I IGNORE'',\r\n              style: TextStyle(\r\n                  color: Colors.purple,\r\n                  fontWeight: FontWeight.bold,\r\n                  fontSize: 14),\r\n            ),\r\n          ),\r\n        ],\r\n      )],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(298,23,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomMaterialButton extends StatelessWidget {\r\n  const CustomMaterialButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialButton(\r\n        height: 40,\r\n        elevation: 5,\r\n        color: Colors.blue,\r\n        textColor: Colors.white,\r\n        splashColor: Colors.orangeAccent,\r\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(6)),\r\n        child: const Text("MaterialButton"),\r\n        onPressed: () {\r\n\r\n          // Navigator.of(context).pushNamed(''AboutMePage'');\r\n        });\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(299,23,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass LongPressMaterialButton extends StatelessWidget {\r\n  const LongPressMaterialButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialButton(\r\n        height: 40,\r\n        elevation: 5,\r\n        color: Colors.blue,\r\n        highlightColor: Colors.green,\r\n        textColor: Colors.white,\r\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(6)),\r\n        child: const Text("MaterialButton"),\r\n        onLongPress: () {\r\n          // Navigator.of(context).pushNamed(''AboutMePage'');\r\n        },\r\n        onPressed: () {\r\n          // Navigator.of(context).pushNamed(''AboutMePage'');\r\n        });\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(300,23,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ShapeMaterialButton extends StatelessWidget {\r\n  const ShapeMaterialButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: <Widget>[\r\n        SizedBox(\r\n          width: 40,\r\n          height: 40,\r\n          child: MaterialButton(\r\n              padding: const EdgeInsets.all(0),\r\n              textColor: const Color(0xffFfffff),\r\n              elevation: 3,\r\n              color: Colors.blue,\r\n              highlightColor: const Color(0xffF88B0A),\r\n              splashColor: Colors.red,\r\n              child: const Icon(\r\n                Icons.add,\r\n                color: Colors.white,\r\n              ),\r\n              shape: const CircleBorder(\r\n                side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n              ),\r\n              onLongPress: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n              onPressed: () =>  Navigator.of(context).pushNamed(''AboutMePage'')),\r\n        ),\r\n        SizedBox(\r\n          width: 100,\r\n          height: 40,\r\n          child: MaterialButton(\r\n              padding: const EdgeInsets.all(0),\r\n              textColor: const Color(0xffFfffff),\r\n              elevation: 3,\r\n              color: Colors.blue,\r\n              highlightColor: const Color(0xffF88B0A),\r\n              splashColor: Colors.red,\r\n              child: const Icon(\r\n                Icons.remove,\r\n                color: Colors.white,\r\n              ),\r\n              shape: const RoundedRectangleBorder(\r\n                  borderRadius: BorderRadius.all(Radius.circular(15))),\r\n              onLongPress: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n              onPressed: () =>  Navigator.of(context).pushNamed(''AboutMePage'')),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(301,167,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomMediaQuery extends StatelessWidget {\r\n  const CustomMediaQuery({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    MediaQueryData queryData = MediaQuery.of(context);\r\n    Map<String,Object> data = {\r\n      "size": queryData.size,\r\n      "devicePixelRatio": queryData.devicePixelRatio.toStringAsFixed(1),\r\n      "textScaleFactor": queryData.textScaleFactor.toStringAsFixed(1),\r\n      "platformBrightness": queryData.platformBrightness,\r\n      "padding": queryData.padding,\r\n      "viewInsets": queryData.viewInsets,\r\n      "systemGestureInsets": queryData.padding,\r\n      "viewPadding": queryData.padding,\r\n      "physicalDepth": queryData.padding,\r\n      "alwaysUse24HourFormat": queryData.padding,\r\n      "accessibleNavigation": queryData.alwaysUse24HourFormat,\r\n      "invertColors": queryData.invertColors,\r\n      "highContrast": queryData.highContrast,\r\n      "disableAnimations": queryData.disableAnimations,\r\n      "boldText": queryData.boldText,\r\n    };\r\n\r\n    return Container(\r\n      height: 200,\r\n      color: Colors.grey.withAlpha(11),\r\n      child:ListView(\r\n          children: data.keys.map((e) => buildItem(e, data)).toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget buildItem(String e, Map<String, Object> data) => Column(\r\n        children: <Widget>[\r\n          Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n              children: <Widget>[\r\n                Text(\r\n                  e,\r\n                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n                ),\r\n                Text(\r\n                  data[e].toString(),\r\n                  style: const TextStyle(fontSize: 16, color: Colors.orange),\r\n                )\r\n              ],\r\n            ),\r\n          ),\r\n          const Divider(\r\n            height: 1,\r\n          )\r\n        ],\r\n      );\r\n}\r\n\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(302,261,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass MergeableMaterialDemo extends StatefulWidget {\r\n  const MergeableMaterialDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _MergeableMaterialDemoState createState() => _MergeableMaterialDemoState();\r\n}\r\n\r\nclass _MergeableMaterialDemoState extends State<MergeableMaterialDemo> {\r\n  List<MergeableMaterialItem> items=[];\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _init(20);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return  SizedBox(\r\n      height: 300,\r\n      child: SingleChildScrollView(\r\n              child: MergeableMaterial(\r\n                elevation: 1,\r\n                hasDividers: true,\r\n                dividerColor: Colors.red,\r\n                children: items,\r\n              ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!\r\n  ];\r\n\r\n  void _init(int count) {\r\n    for (int i = 0; i < count; i++) {\r\n      items.add(MaterialSlice(\r\n          key: ValueKey(i),\r\n          child: Container(\r\n            alignment: Alignment.center,\r\n            height: 60,\r\n            color: data[i % data.length],\r\n            child: Text(colorString(data[i % data.length])),\r\n          )));\r\n      if(i!=count-1){\r\n        items.add(MaterialGap(\r\n            key: ValueKey(i),\r\n            size: 5));\r\n      }\r\n    }\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(303,212,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ModalBarrierDemo extends StatelessWidget {\r\n  const ModalBarrierDemo({Key? key}) : super(key: key);\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: 200,\r\n      height: 100,\r\n      child: Stack(alignment: Alignment.center, children: [\r\n        ModalBarrier(\r\n          dismissible: true,\r\n          color: Colors.grey.withOpacity(0.3),\r\n        ),\r\n        const Text(''点击背景返回'')\r\n      ]),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(304,293,0,replace(replace('\r\012import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020/7/22\r\012/// contact me by email 1981462002@qq.com\r\012\r\012\r\012class MouseRegionDemo extends StatefulWidget {\r\012  const MouseRegionDemo({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  _MouseRegionDemoState createState() => _MouseRegionDemoState();\r\012}\r\012\r\012class _MouseRegionDemoState extends State<MouseRegionDemo> {\r\012  int _enterCounter = 0;\r\012  int _exitCounter = 0;\r\012  double x = 0.0;\r\012  double y = 0.0;\r\012  void _incrementEnter(PointerEvent details) {\r\012    setState(() {\r\012      _enterCounter++;\r\012    });\r\012  }\r\012  void _incrementExit(PointerEvent details) {\r\012    setState(() {\r\012      _exitCounter++;\r\012    });\r\012  }\r\012  void _updateLocation(PointerEvent details) {\r\012    setState(() {\r\012      x = details.position.dx;\r\012      y = details.position.dy;\r\012    });\r\012  }\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return ConstrainedBox(\r\012      constraints: BoxConstraints.tight(const Size(300.0, 200.0)),\r\012      child: MouseRegion(\r\012        onEnter: _incrementEnter,\r\012        onHover: _updateLocation,\r\012        onExit: _incrementExit,\r\012        child: Container(\r\012          color: Colors.lightBlueAccent,\r\012          child: Column(\r\012            mainAxisAlignment: MainAxisAlignment.center,\r\012            children: <Widget>[\r\012              const Text(''你的鼠标移入移除信息:''),\r\012              Text(\r\012                ''$_enterCounter Entries\n$_exitCounter Exits'',\r\012                style: Theme.of(context).textTheme.headlineMedium,\r\012              ),\r\012              Text(\r\012                ''The cursor is here: (${x.toStringAsFixed(2)}, ${y.toStringAsFixed(2)})'',\r\012              ),\r\012            ],\r\012          ),\r\012        ),\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(305,358,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2022/7/23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomNavigationRail extends StatefulWidget {\r\n  const CustomNavigationRail({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<CustomNavigationRail> createState() => _CustomNavigationRailState();\r\n}\r\n\r\nclass _CustomNavigationRailState extends State<CustomNavigationRail> {\r\n  final PageController _controller = PageController();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(),\r\n      body: Row(\r\n        children: [\r\n          _NavigationRailDemo(\r\n            onDestinationSelected: _onDestinationSelected,\r\n          ),\r\n          Expanded(\r\n              child: PageView(\r\n            controller: _controller,\r\n            children: const [\r\n              _TestContent(content: ''消息''),\r\n              _TestContent(content: ''视频会议''),\r\n              _TestContent(content: ''通讯录''),\r\n              _TestContent(content: ''云文档''),\r\n              _TestContent(content: ''工作台''),\r\n              _TestContent(content: ''日历''),\r\n            ],\r\n          ))\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onDestinationSelected(int value) {\r\n    _controller.jumpToPage(value);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _controller.dispose();\r\n    super.dispose();\r\n  }\r\n}\r\n\r\nclass _TestContent extends StatelessWidget {\r\n  final String content;\r\n\r\n  const _TestContent({Key? key, required this.content}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Center(\r\n        child: Text(\r\n      content,\r\n      style: const TextStyle(fontSize: 26),\r\n    ));\r\n  }\r\n}\r\n\r\nclass _NavigationRailDemo extends StatefulWidget {\r\n  final ValueChanged<int>? onDestinationSelected;\r\n\r\n  const _NavigationRailDemo({Key? key, this.onDestinationSelected})\r\n      : super(key: key);\r\n\r\n  @override\r\n  State<_NavigationRailDemo> createState() => _NavigationRailDemoState();\r\n}\r\n\r\nclass _NavigationRailDemoState extends State<_NavigationRailDemo> {\r\n  int _selectIndex = 0;\r\n\r\n  final List<NavigationRailDestination> destinations = const [\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.message_outlined), label: Text("消息")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.video_camera_back_outlined), label: Text("视频会议")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.book_outlined), label: Text("通讯录")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.cloud_upload_outlined), label: Text("云文档")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.games_sharp), label: Text("工作台")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.calendar_month), label: Text("日历"))\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return NavigationRail(\r\n      onDestinationSelected: _onDestinationSelected,\r\n      labelType: NavigationRailLabelType.all,\r\n      destinations: destinations,\r\n      selectedIndex: _selectIndex,\r\n    );\r\n  }\r\n\r\n  void _onDestinationSelected(int value) {\r\n    _selectIndex = value;\r\n    setState(() {});\r\n    widget.onDestinationSelected?.call(value);\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(306,358,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2022/7/23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ExtendableNavigationRail extends StatefulWidget {\r\n  const ExtendableNavigationRail({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<ExtendableNavigationRail> createState() =>\r\n      _ExtendableNavigationRailState();\r\n}\r\n\r\nclass _ExtendableNavigationRailState extends State<ExtendableNavigationRail> {\r\n  final PageController _controller = PageController();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(),\r\n      body: Row(\r\n        children: [\r\n          ExtendableNavigation(\r\n            onDestinationSelected: _onDestinationSelected,\r\n          ),\r\n          Expanded(\r\n              child: PageView(\r\n            controller: _controller,\r\n            children: const [\r\n              _TestContent(content: ''消息''),\r\n              _TestContent(content: ''视频会议''),\r\n              _TestContent(content: ''通讯录''),\r\n              _TestContent(content: ''云文档''),\r\n              _TestContent(content: ''工作台''),\r\n              _TestContent(content: ''日历''),\r\n            ],\r\n          ))\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onDestinationSelected(int value) {\r\n    _controller.jumpToPage(value);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _controller.dispose();\r\n    super.dispose();\r\n  }\r\n}\r\n\r\nclass _TestContent extends StatelessWidget {\r\n  final String content;\r\n\r\n  const _TestContent({Key? key, required this.content}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Center(\r\n        child: Text(\r\n      content,\r\n      style: const TextStyle(fontSize: 26),\r\n    ));\r\n  }\r\n}\r\n\r\nclass ExtendableNavigation extends StatefulWidget {\r\n  final ValueChanged<int>? onDestinationSelected;\r\n\r\n  const ExtendableNavigation({Key? key, this.onDestinationSelected})\r\n      : super(key: key);\r\n\r\n  @override\r\n  State<ExtendableNavigation> createState() => _ExtendableNavigationState();\r\n}\r\n\r\nclass _ExtendableNavigationState extends State<ExtendableNavigation> {\r\n  int _selectIndex = 0;\r\n  bool _extended = false;\r\n\r\n  final List<NavigationRailDestination> destinations = const [\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.message_outlined), label: Text("消息")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.video_camera_back_outlined), label: Text("视频会议")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.book_outlined), label: Text("通讯录")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.cloud_upload_outlined), label: Text("云文档")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.games_sharp), label: Text("工作台")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.calendar_month), label: Text("日历"))\r\n  ];\r\n\r\n  Widget buildLeading() {\r\n    return GestureDetector(\r\n        onTap: _toggleExtended,\r\n        child: const Icon(\r\n          Icons.menu_open,\r\n          color: Colors.grey,\r\n        ));\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return NavigationRail(\r\n      leading: buildLeading(),\r\n      extended: _extended,\r\n      elevation: 1,\r\n      trailing: const Expanded(\r\n        child: Align(\r\n          alignment: Alignment.bottomCenter,\r\n          child: Padding(\r\n            padding: EdgeInsets.only(bottom: 20.0),\r\n            child: FlutterLogo(),\r\n          ),\r\n        ),\r\n      ),\r\n      onDestinationSelected: _onDestinationSelected,\r\n      destinations: destinations,\r\n      selectedIndex: _selectIndex,\r\n    );\r\n  }\r\n\r\n  void _onDestinationSelected(int value) {\r\n    _selectIndex = value;\r\n    setState(() {});\r\n    widget.onDestinationSelected?.call(value);\r\n  }\r\n\r\n  void _toggleExtended() {\r\n    setState(() {\r\n      _extended = !_extended;\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(307,358,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n//       minWidth: 72,\r\n//       minExtendedWidth: 200 ,\r\n//       unselectedIconTheme: const IconThemeData(color: textColor) ,\r\n//       selectedIconTheme: const IconThemeData(color: activeColor) ,\r\n//       unselectedLabelTextStyle: labelStyle,\r\n//       selectedLabelTextStyle: labelStyle,\r\n\r\n/// create by 张风捷特烈 on 2022/7/23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DarkNavigationRail extends StatefulWidget {\r\n  const DarkNavigationRail({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<DarkNavigationRail> createState() => _DarkNavigationRailState();\r\n}\r\n\r\nclass _DarkNavigationRailState extends State<DarkNavigationRail> {\r\n  final PageController _controller = PageController();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(),\r\n      body: Row(\r\n        children: [\r\n          DarkExtendableNavigation(\r\n            onDestinationSelected: _onDestinationSelected,\r\n          ),\r\n          Expanded(\r\n              child: PageView(\r\n            controller: _controller,\r\n            children: const [\r\n              _TestContent(content: ''消息''),\r\n              _TestContent(content: ''视频会议''),\r\n              _TestContent(content: ''通讯录''),\r\n              _TestContent(content: ''云文档''),\r\n              _TestContent(content: ''工作台''),\r\n              _TestContent(content: ''日历''),\r\n            ],\r\n          ))\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onDestinationSelected(int value) {\r\n    _controller.jumpToPage(value);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _controller.dispose();\r\n    super.dispose();\r\n  }\r\n}\r\n\r\nclass _TestContent extends StatelessWidget {\r\n  final String content;\r\n\r\n  const _TestContent({Key? key, required this.content}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Center(\r\n        child: Text(\r\n      content,\r\n      style: const TextStyle(fontSize: 26),\r\n    ));\r\n  }\r\n}\r\n\r\nclass DarkExtendableNavigation extends StatefulWidget {\r\n  final ValueChanged<int>? onDestinationSelected;\r\n\r\n  const DarkExtendableNavigation({Key? key, this.onDestinationSelected})\r\n      : super(key: key);\r\n\r\n  @override\r\n  State<DarkExtendableNavigation> createState() =>\r\n      _DarkExtendableNavigationState();\r\n}\r\n\r\nclass _DarkExtendableNavigationState extends State<DarkExtendableNavigation> {\r\n  int _selectIndex = 0;\r\n  bool _extended = false;\r\n\r\n  final List<NavigationRailDestination> destinations = const [\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.message_outlined), label: Text("消息")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.video_camera_back_outlined), label: Text("视频会议")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.book_outlined), label: Text("通讯录")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.cloud_upload_outlined), label: Text("云文档")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.games_sharp), label: Text("工作台")),\r\n    NavigationRailDestination(\r\n        icon: Icon(Icons.calendar_month), label: Text("日历"))\r\n  ];\r\n\r\n  Widget buildLeading() {\r\n    return GestureDetector(\r\n        onTap: _toggleExtended,\r\n        child: const Icon(\r\n          Icons.menu_open,\r\n          color: Colors.grey,\r\n        ));\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    const Color textColor = Color(0xffcfd1d7);\r\n    const Color activeColor = Colors.white;\r\n    const TextStyle labelStyle = TextStyle(color: textColor, fontSize: 11);\r\n\r\n    return NavigationRail(\r\n      leading: buildLeading(),\r\n      extended: _extended,\r\n      labelType: NavigationRailLabelType.none,\r\n      useIndicator: true,\r\n      indicatorColor: Colors.blue,\r\n      elevation: 1,\r\n      backgroundColor: const Color(0xff324465),\r\n      minWidth: 72,\r\n      minExtendedWidth: 200,\r\n      unselectedIconTheme: const IconThemeData(color: textColor),\r\n      selectedIconTheme: const IconThemeData(color: activeColor),\r\n      unselectedLabelTextStyle: labelStyle,\r\n      selectedLabelTextStyle: labelStyle,\r\n      trailing: const Expanded(\r\n        child: Align(\r\n          alignment: Alignment.bottomCenter,\r\n          child: Padding(\r\n            padding: EdgeInsets.only(bottom: 20.0),\r\n            child: FlutterLogo(),\r\n          ),\r\n        ),\r\n      ),\r\n      onDestinationSelected: _onDestinationSelected,\r\n      destinations: destinations,\r\n      selectedIndex: _selectIndex,\r\n    );\r\n  }\r\n\r\n  void _onDestinationSelected(int value) {\r\n    _selectIndex = value;\r\n    setState(() {});\r\n    widget.onDestinationSelected?.call(value);\r\n  }\r\n\r\n  void _toggleExtended() {\r\n    setState(() {\r\n      _extended = !_extended;\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(308,214,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/20\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass NavigationToolbarDemo extends StatelessWidget {\r\n  const NavigationToolbarDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return  Column(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: const <Widget>[\r\n          SizedBox(\r\n            height: 60,\r\n            child: NavigationToolbar(\r\n              leading: Icon(Icons.ac_unit),\r\n              middle: Text(''middleSpacing#true''),\r\n              middleSpacing: 20,\r\n              centerMiddle: true,\r\n              trailing: Icon(Icons.more_vert),\r\n            ),\r\n          ),\r\n          SizedBox(\r\n            height: 60,\r\n            child: NavigationToolbar(\r\n              leading: Icon(Icons.ac_unit),\r\n              middle: Text(''middleSpacing#false''),\r\n              middleSpacing: 20,\r\n              centerMiddle: false,\r\n              trailing: Icon(Icons.more_vert),\r\n            ),\r\n          ),\r\n        ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(309,232,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass NavigatorDemo extends StatelessWidget {\r\n  const NavigatorDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      width: 300,\r\n      child: Navigator(\r\n        onPopPage: _onPopPage,\r\n        initialRoute: ''/home-content'',\r\n        onGenerateRoute: _onGenerateRoute,\r\n        observers: [TolyNavigatorObservers()],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Route _onGenerateRoute(RouteSettings settings) {\r\n    switch (settings.name) {\r\n      case ''/home-content'':\r\n        return MaterialPageRoute(\r\n            builder: (_) => const HomeContent(), settings: settings);\r\n      case "/red":\r\n        return MaterialPageRoute(builder: (_) => const RedPage(), settings: settings);\r\n      case "/yellow":\r\n        return MaterialPageRoute(\r\n            builder: (_) => const YellowPage(), settings: settings);\r\n      case "/green":\r\n        return MaterialPageRoute(\r\n            builder: (_) => const GreenPage(), settings: settings);\r\n      default:\r\n        return MaterialPageRoute(\r\n            builder: (_) => const HomeContent(), settings: settings);\r\n    }\r\n  }\r\n\r\n  bool _onPopPage(Route<dynamic> route, result) {\r\n    print(''----_onPopPage-----'');\r\n    return true;\r\n  }\r\n}\r\n\r\n//路由监听器\r\nclass TolyNavigatorObservers extends NavigatorObserver {\r\n  @override\r\n  void didPush(Route<dynamic> route, Route<dynamic>? previousRoute) {\r\n    print(\r\n        ''--didPush:--route:--${route.settings}--previousRoute:--${previousRoute?.settings}'');\r\n  }\r\n\r\n  @override\r\n  void didStopUserGesture() {\r\n    print(''--didStopUserGesture:--'');\r\n  }\r\n\r\n  @override\r\n  void didStartUserGesture(Route<dynamic> route, Route<dynamic>? previousRoute) {\r\n    print(\r\n        ''--didStartUserGesture:--route:--${route.settings}--previousRoute:--${previousRoute?.settings}'');\r\n  }\r\n\r\n  @override\r\n  void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute}) {\r\n    print(\r\n        ''--didReplace:--newRoute:--${newRoute?.settings}--oldRoute:--${oldRoute?.settings}'');\r\n  }\r\n\r\n  @override\r\n  void didRemove(Route<dynamic>? route, Route<dynamic>? previousRoute) {\r\n    print(\r\n        ''--didRemove:--route:--${route?.settings}--previousRoute:--${previousRoute?.settings}'');\r\n  }\r\n\r\n  @override\r\n  void didPop(Route<dynamic> route, Route<dynamic>? previousRoute) {\r\n    print(\r\n        ''--didPop:--route:--${route.settings}--previousRoute:--${previousRoute?.settings}'');\r\n  }\r\n}\r\n\r\nclass HomeContent extends StatelessWidget {\r\n  const HomeContent({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Row(\r\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n          children: <Widget>[\r\n            ElevatedButton(\r\n              style: TextButton.styleFrom(\r\n                backgroundColor: Colors.red,\r\n                shape: const CircleBorder(\r\n                  side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n                ),\r\n              ),\r\n              child: const Text(''to red''),\r\n              onPressed: () {\r\n                Navigator.pushNamed(context, ''/red'');\r\n              },\r\n            ),\r\n            ElevatedButton(\r\n              style: TextButton.styleFrom(\r\n                backgroundColor: Colors.yellow,\r\n                shape: const CircleBorder(\r\n                  side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n                ),\r\n              ),\r\n              child: const Text(''to yellow''),\r\n              onPressed: () {\r\n                Navigator.pushNamed(context, ''/yellow'');\r\n              },\r\n            ),\r\n            ElevatedButton(\r\n              style: TextButton.styleFrom(\r\n                backgroundColor: Colors.green,\r\n                shape: const CircleBorder(\r\n                  side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n                ),\r\n              ),\r\n              child: const Text(''to yellow''),\r\n              onPressed: () {\r\n                Navigator.pushNamed(context, ''/green'');\r\n              },\r\n            )\r\n          ],\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n\r\nclass RedPage extends StatelessWidget {\r\n  const RedPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text("RedPage"),\r\n      ),\r\n      body: Container(\r\n        color: Colors.red,\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass YellowPage extends StatelessWidget {\r\n  const YellowPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text("YellowPage"),\r\n      ),\r\n      body: Container(\r\n        color: Colors.yellow,\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass GreenPage extends StatelessWidget {\r\n  const GreenPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text("GreenPage"),\r\n      ),\r\n      body: Container(\r\n        color: Colors.green,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(310,251,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/6/16\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass NestedScrollViewDemo extends StatelessWidget {\r\n  final List<String> _tabs = const [''风神传'', ''封妖志'', "幻将录", "永恒传说"];\r\n\r\n  const NestedScrollViewDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n        width: MediaQuery.of(context).size.width,\r\n        height: MediaQuery.of(context).size.height - 200,\r\n        child: Scaffold(\r\n          body: DefaultTabController(\r\n            length: _tabs.length,\r\n            child: NestedScrollView(\r\n              headerSliverBuilder:\r\n                  (BuildContext context, bool innerBoxIsScrolled) {\r\n                return <Widget>[\r\n                  SliverOverlapAbsorber(\r\n                    handle: NestedScrollView.sliverOverlapAbsorberHandleFor(context),\r\n                    sliver: SliverAppBar(\r\n                      title: const Text(''旷古奇书''),\r\n                      pinned: true,\r\n                      elevation: 6, //影深\r\n                      expandedHeight: 220.0,\r\n                      forceElevated: innerBoxIsScrolled, //为true时展开有阴影\r\n                      flexibleSpace: FlexibleSpaceBar(\r\n                        background: Image.asset(\r\n                          "assets/images/wy_300x200_filter.webp",\r\n                          fit: BoxFit.cover,\r\n                        ),\r\n                      ),\r\n                      bottom: TabBar(\r\n                        tabs: _tabs\r\n                            .map((String name) => Tab(text: name,))\r\n                            .toList(),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ];\r\n              },\r\n              body: _buildTabBarView(),\r\n            ),\r\n          ),\r\n        ));\r\n  }\r\n\r\n  Widget _buildTabBarView() {\r\n    return TabBarView(\r\n      children: _tabs.map((String name) {\r\n        return SafeArea(\r\n          top: false,\r\n          bottom: false,\r\n          child: Builder(\r\n            builder: (BuildContext context) {\r\n              return CustomScrollView(\r\n                key: PageStorageKey<String>(name),\r\n                slivers: <Widget>[\r\n                  SliverOverlapInjector(\r\n                    handle: NestedScrollView.sliverOverlapAbsorberHandleFor(context),\r\n                  ),\r\n                  SliverPadding(\r\n                    padding: const EdgeInsets.all(8.0),\r\n                    sliver: SliverFixedExtentList(\r\n                      itemExtent: 48.0,\r\n                      delegate: SliverChildBuilderDelegate(\r\n                        (BuildContext context, int index) {\r\n                          return ListTile(\r\n                            title: Text(''《$name》 第 $index章''),\r\n                          );\r\n                        },\r\n                        childCount: 50,\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ],\r\n              );\r\n            },\r\n          ),\r\n        );\r\n      }).toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(311,344,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass NestedScrollViewViewportDemo extends StatelessWidget {\r\n  const NestedScrollViewViewportDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''NestedScrollViewViewport 在源码中只有一处使用：''\r\n      ''_NestedScrollViewCustomScrollView 继承自 CustomScrollView，复写了 buildViewport 方法，返回 NestedScrollViewViewport 。''\r\n      ''而 NestedScrollView 构建时使用了 _NestedScrollViewCustomScrollView，也就是 NestedScrollView 的视口依赖于 NestedScrollViewViewport。''\r\n      ''NestedScrollViewViewport 的特点是持有 SliverOverlapAbsorberHandle 类对象 handle，源码中该 handle 在 NestedScrollViewState 中初始化。''\r\n      ''可通过上下文获取，用于 SliverOverlapAbsorber/SliverOverlapInjector 组件，使用详见相关组件。'';\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(312,220,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/8/14\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass NotificationListenerDemo extends StatefulWidget {\r\n  const NotificationListenerDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _NotificationListenerDemoState createState() => _NotificationListenerDemoState();\r\n}\r\n\r\nclass _NotificationListenerDemoState extends State<NotificationListenerDemo> {\r\n  final List<String> data = List.generate(30, (i) => ''第${i + 1}条'');\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 250,\r\n      child: NotificationListener<OverscrollIndicatorNotification>(\r\n          onNotification: _onNotification,\r\n          child: CupertinoScrollbar(\r\n            child: ListView.separated(\r\n              itemBuilder: _buildItem,\r\n              itemCount: data.length,\r\n              separatorBuilder: (_,__)=>const Divider(height: 5,),\r\n            ),\r\n          )),\r\n    );\r\n  }\r\n\r\n  bool _onNotification(OverscrollIndicatorNotification notification) {\r\n    if (notification.leading) {\r\n      notification.disallowIndicator();\r\n      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(\r\n        content: Text(''已滑到顶部''),\r\n        backgroundColor: Colors.blue,\r\n        duration: Duration(milliseconds: 200),\r\n      ));\r\n    } else {\r\n      notification.disallowIndicator();\r\n      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(\r\n        content: Text(''已滑到底部''),\r\n        duration: Duration(milliseconds: 200),\r\n        backgroundColor: Colors.blue,\r\n      ));\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  Widget _buildItem(BuildContext context, int index) {\r\n    return Container(\r\n      height: 50,\r\n      alignment: Alignment.center,\r\n      child: Text(data[index],style: TextStyle(color: Theme.of(context).primaryColor,fontSize: 18),),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(313,220,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\012import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020/8/14\r\012/// contact me by email 1981462002@qq.com\r\012\r\012\r\012class NotificationListenerUpdate extends StatefulWidget {\r\012  const NotificationListenerUpdate({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  _NotificationListenerUpdateState createState() =>\r\012      _NotificationListenerUpdateState();\r\012}\r\012\r\012class _NotificationListenerUpdateState\r\012    extends State<NotificationListenerUpdate> {\r\012  final List<String> data = List.generate(30, (i) => ''第${i + 1}条'');\r\012\r\012  String _info = '''';\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return SizedBox(\r\012      height: 300,\r\012      child: Stack(\r\012        children: [\r\012          Positioned(\r\012              child: Padding(\r\012            padding: const EdgeInsets.only(left: 8.0),\r\012            child: Text(_info),\r\012          )),\r\012          NotificationListener<ScrollUpdateNotification>(\r\012              onNotification: _onNotification,\r\012              child: CupertinoScrollbar(\r\012                child: ListView.separated(\r\012                  itemBuilder: _buildItem,\r\012                  itemCount: data.length,\r\012                  separatorBuilder: (_, __) => const Divider(height: 5),\r\012                ),\r\012              )),\r\012\r\012        ],\r\012      ),\r\012    );\r\012  }\r\012\r\012  bool _onNotification(ScrollUpdateNotification notification) {\r\012    setState(() {\r\012      _info = ''axis------【${notification.metrics.axis}】------\n''\r\012          ''pixels------【${notification.metrics.pixels}】------\n''\r\012          ''atEdge------【${notification.metrics.atEdge}】------\n''\r\012          ''axisDirection------【${notification.metrics.axisDirection}】------\n''\r\012          ''extentInside------【${notification.metrics.extentInside}】------\n''\r\012          ''outOfRange------【${notification.metrics.outOfRange}】------\n''\r\012          ''minScrollExtent------【${notification.metrics.minScrollExtent}】------\n''\r\012          ''maxScrollExtent------【${notification.metrics.maxScrollExtent}】------\n''\r\012          ''viewportDimension------【${notification.metrics.viewportDimension}】------\n''\r\012          ''delta------【${notification.dragDetails?.delta}】------\n''\r\012          ''globalPosition------【${notification.dragDetails?.globalPosition}】------\n''\r\012          ''localPosition------【${notification.dragDetails?.localPosition}】------\n''\r\012          ''scrollDelta------【${notification.scrollDelta}】------\n''\r\012          ''depth------【${notification.depth}】------'';\r\012    });\r\012    return true;\r\012  }\r\012\r\012  Widget _buildItem(BuildContext context, int index) {\r\012    return Container(\r\012      height: 50,\r\012      alignment: Alignment.centerRight,\r\012      padding: const EdgeInsets.only(right: 8),\r\012      child: Text(\r\012        data[index],\r\012        style: TextStyle(color: Theme.of(context).primaryColor, fontSize: 18),\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(314,71,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomOffstage extends StatefulWidget {\r\n  const CustomOffstage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomOffstageState createState() => _CustomOffstageState();\r\n}\r\n\r\nclass _CustomOffstageState extends State<CustomOffstage> {\r\n  bool _off = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget radBox = Container(\r\n      height: 50,\r\n      width: 60,\r\n      color: Colors.red,\r\n      child: Switch(\r\n          value: _off,\r\n          onChanged: (v) => setState(() => _off = v)),\r\n    );\r\n\r\n    return SizedBox(\r\n      width: 250,\r\n      height: 200,\r\n      child: Row(\r\n        children: <Widget>[radBox, _buildOffStage(), radBox],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildOffStage() => Offstage(\r\n      offstage: _off,\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        height: 100,\r\n        width: 100,\r\n        color: Colors.blue,\r\n        child: const Text(\r\n          "Offstage",\r\n          style: TextStyle(fontSize: 20),\r\n        ),\r\n      ));\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(315,73,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomOpacity extends StatefulWidget {\r\n  const CustomOpacity({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomOpacityState createState() => _CustomOpacityState();\r\n}\r\n\r\nclass _CustomOpacityState extends State<CustomOpacity> {\r\n  double _opacity = 0.2;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: [_buildSlider(), _buildOpacity()],\r\n    );\r\n  }\r\n\r\n  // 创建Opacity\r\n  Widget _buildOpacity() => Opacity(\r\n        opacity: _opacity,\r\n        child: Image.asset(// 图片\r\n          ''assets/images/icon_head.webp'',\r\n          width: 100,\r\n        ),\r\n      );\r\n  Widget _buildSlider() => Slider(\r\n      divisions: 20,\r\n      label: _opacity.toString(),\r\n      value: _opacity,\r\n      onChanged: (v) => setState(() => _opacity = v));\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(316,203,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass OrientationBuilderDemo extends StatefulWidget {\r\n  const OrientationBuilderDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _OrientationBuilderDemoState createState() => _OrientationBuilderDemoState();\r\n}\r\n\r\nclass _OrientationBuilderDemoState extends State<OrientationBuilderDemo> {\r\n  double _width = 200;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n          width: _width,\r\n          height: 200,\r\n          child: OrientationBuilder(builder: _builder),\r\n          color: Colors.orange,\r\n        ),\r\n        _buildSlider()\r\n      ],\r\n    );\r\n  }\r\n\r\n  //根据回调的orientation返回组件\r\n  Widget _builder(BuildContext context, Orientation orientation) {\r\n    switch(orientation){\r\n      case Orientation.portrait:\r\n        return const Icon(Icons.phone_android,size: 60,);\r\n      case Orientation.landscape:\r\n        return const RotatedBox(\r\n          quarterTurns: 1,\r\n            child: Icon(Icons.phone_android,size: 60,));\r\n      default: return Container();\r\n    }\r\n  }\r\n\r\n  Widget _buildSlider() =>Slider(\r\n    value: _width,\r\n    max: 350.0,\r\n    min: 80.0,\r\n    divisions: 17,\r\n    onChanged: (v)=> setState(() => _width= v),\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(317,355,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass OutlinedButtonDemo extends StatelessWidget {\r\n  const OutlinedButtonDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n        alignment: Alignment.center,\r\n        height: 60,\r\n        child: Wrap(\r\n          spacing: 20,\r\n          children: [\r\n            OutlinedButton(\r\n              child: const Text(''OutlinedButton''),\r\n              onPressed: _onPressed,\r\n              onLongPress: _onLongPress,\r\n            ),\r\n            const OutlinedButton(\r\n              child: Text(''禁用按钮''),\r\n              onPressed: null,\r\n              onLongPress: null,\r\n            ),\r\n          ],\r\n        ));\r\n  }\r\n\r\n  void _onPressed() {}\r\n\r\n  void _onLongPress() {}\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(318,355,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass OutlinedButtonStyleDemo extends StatelessWidget {\r\n  const OutlinedButtonStyleDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      child: Wrap(\r\n        spacing: 10,\r\n        children: [\r\n          OutlinedButton(\r\n            style: TextButton.styleFrom(\r\n                backgroundColor: Colors.orange,\r\n                foregroundColor: Colors.white,\r\n                elevation: 2,\r\n                shadowColor: Colors.orangeAccent),\r\n            child: const Text(''ElevatedButton样式''),\r\n            onPressed: _onPressed,\r\n            onLongPress: _onLongPress,\r\n          ),\r\n          OutlinedButton(\r\n            style: TextButton.styleFrom(\r\n                backgroundColor: Colors.white,\r\n                foregroundColor: Colors.black,\r\n                side: const BorderSide(color: Colors.blue,width: 1),\r\n                shape: const RoundedRectangleBorder(\r\n                  borderRadius: BorderRadius.all(Radius.circular(10))\r\n                ),\r\n                // elevation: 2,\r\n                shadowColor: Colors.orangeAccent),\r\n            child: const Text(''ElevatedButton边线''),\r\n            autofocus: false,\r\n            onPressed: _onPressed,\r\n            onLongPress: _onLongPress,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onPressed() {}\r\n\r\n  void _onLongPress() {}\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(319,83,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomOverflowBox extends StatefulWidget {\r\n  const CustomOverflowBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomOverflowBoxState createState() => _CustomOverflowBoxState();\r\n}\r\n\r\nclass _CustomOverflowBoxState extends State<CustomOverflowBox> {\r\n  String _text = '''';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget box = OverflowBox(\r\n      alignment: Alignment.center,\r\n      minHeight: 50,\r\n      minWidth: 50,\r\n      maxWidth: 200,\r\n      maxHeight: 120,\r\n      child: Container(\r\n        color: Colors.orange,\r\n        child: Text(_text),\r\n      ),\r\n    );\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n            color: Colors.grey.withAlpha(33),\r\n            width: 100,\r\n            height: 100,\r\n            child: box),\r\n        _buildInput()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildInput() {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(18.0),\r\n      child: TextField(\r\n        decoration: const InputDecoration(\r\n          border: OutlineInputBorder(),\r\n          hintText: ''请输入'',\r\n        ),\r\n        onChanged: (v) {\r\n          setState(() {\r\n            _text = v;\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(320,182,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomOverlay extends StatelessWidget {\r\n  const CustomOverlay({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: <Widget>[\r\n        SizedBox(\r\n          height: 50,\r\n          child: RawMaterialButton(\r\n            elevation: 2,\r\n            shape: const CircleBorder(\r\n              side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n            ),\r\n            fillColor: Colors.blue,\r\n            splashColor: Colors.orange,\r\n            textStyle: const TextStyle(color: Colors.white),\r\n            child: const Icon(Icons.add),\r\n            onPressed: ()=>showFloating(context),\r\n          ),\r\n        ),\r\n        const SizedBox(\r\n          height: 50,\r\n          child: RawMaterialButton(\r\n            elevation: 2,\r\n            shape: CircleBorder(\r\n              side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n            ),\r\n            fillColor: Colors.red,\r\n            splashColor: Colors.orange,\r\n            textStyle: TextStyle(color: Colors.white),\r\n            child: Icon(Icons.remove),\r\n            onPressed: hideFloating,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n\r\nbool show = false;\r\nOffset offset = const Offset(200, 200);\r\n\r\nconst double radius = 60;\r\n\r\nvar entry = OverlayEntry(\r\n    builder: (context) => Stack(\r\n      children: <Widget>[\r\n        Positioned(\r\n          left: offset.dx,\r\n          top: offset.dy,\r\n          child: _buildFloating(),\r\n        ),\r\n      ],\r\n    ));\r\n\r\n///绘制悬浮控件\r\n_buildFloating() => GestureDetector(\r\n    onPanDown: (details) {\r\n      offset = details.globalPosition - const Offset(radius / 2, radius / 2);\r\n      entry.markNeedsBuild();\r\n    },\r\n    onPanUpdate: (DragUpdateDetails details) {\r\n      offset = offset + details.delta;\r\n      entry.markNeedsBuild();\r\n    },\r\n    onLongPress: hideFloating,\r\n    child: Material(\r\n      color: Colors.transparent,\r\n      child: Container(\r\n        height: radius,\r\n        width: radius,\r\n        alignment: Alignment.center,\r\n        decoration: const BoxDecoration(\r\n          shape: BoxShape.circle,\r\n          image: DecorationImage(\r\n              image: AssetImage(''assets/images/icon_head.webp'')),\r\n        ),\r\n      ),\r\n    ));\r\n\r\nshowFloating(BuildContext context) {\r\n  if (!show) {\r\n    Overlay.of(context)?.insert(entry);\r\n    show = true;\r\n  }\r\n}\r\n\r\nhideFloating() {\r\n  if (show) {\r\n    entry.remove();\r\n    show = false;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(321,74,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/5/3\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PaddingAll extends StatelessWidget {\r\n  const PaddingAll({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.grey.withAlpha(22),\r\n      width: 200,\r\n      height: 150,\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(20),\r\n        child: _buildChild(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildChild() => Container(\r\n      alignment: Alignment.center,\r\n      color: Colors.cyanAccent,\r\n      width: 100,\r\n      height: 100,\r\n      child: const Text("孩子"),\r\n    );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(322,74,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/5/3\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PaddingOnly extends StatelessWidget {\r\n  const PaddingOnly({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.grey.withAlpha(22),\r\n      width: 200,\r\n      height: 150,\r\n      child: Padding(\r\n        padding: const EdgeInsets.only(top:10,left: 10),\r\n        child: _buildChild(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildChild() => Container(\r\n      alignment: Alignment.center,\r\n      color: Colors.cyanAccent,\r\n      width: 100,\r\n      height: 100,\r\n      child: const Text("孩子"),\r\n    );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(323,74,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/5/3\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PaddingSymmetric extends StatelessWidget {\r\n  const PaddingSymmetric({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.grey.withAlpha(22),\r\n      width: 200,\r\n      height: 150,\r\n      child: Padding(\r\n        padding: const EdgeInsets.symmetric(vertical: 30,horizontal: 10),\r\n        child: _buildChild(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildChild() => Container(\r\n      alignment: Alignment.center,\r\n      color: Colors.cyanAccent,\r\n      width: 100,\r\n      height: 100,\r\n      child: const Text("孩子"),\r\n    );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(324,210,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/8/14\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass PageStorageDemo extends StatefulWidget {\r\n  const PageStorageDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _PageStorageDemoState createState() => _PageStorageDemoState();\r\n}\r\n\r\nclass _PageStorageDemoState extends State<PageStorageDemo> {\r\n  int _pageIndex = 0;\r\n  final PageStorageBucket _bucket = PageStorageBucket();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: Scaffold(\r\n        body: PageStorage(\r\n          child: _buildContentByIndex(),\r\n          bucket: _bucket,\r\n        ),\r\n        bottomNavigationBar: BottomNavigationBar(\r\n          elevation: 0,\r\n          backgroundColor: Colors.blueAccent.withAlpha(55),\r\n          currentIndex: _pageIndex,\r\n          onTap: (int index) {\r\n            setState(() {\r\n              _pageIndex = index;\r\n            });\r\n          },\r\n          items: const [\r\n            BottomNavigationBarItem(\r\n              icon: Icon(Icons.home),\r\n              label: ''Home'',\r\n            ),\r\n            BottomNavigationBarItem(\r\n              icon: Icon(Icons.settings),\r\n              label: ''Setting'',\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildContentByIndex() {\r\n    if (_pageIndex == 0) {\r\n      return const CountWidget(key: PageStorageKey(''CountWidget1''));\r\n    }\r\n\r\n    if (_pageIndex == 1) {\r\n      return const CountWidget(key: PageStorageKey(''CountWidget2''));\r\n    }\r\n\r\n    return ListView();\r\n  }\r\n}\r\n\r\nclass CountWidget extends StatefulWidget {\r\n  const CountWidget({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CountWidgetState createState() => _CountWidgetState();\r\n}\r\n\r\nclass _CountWidgetState extends State<CountWidget> {\r\n  int _count = 0;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _count = PageStorage.of(context)?.readState(context);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      child: Column(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: [\r\n          Text(''点击了$_count次''),\r\n          MaterialButton(\r\n              onPressed: _addCount,\r\n              child: const Icon(\r\n                Icons.add,\r\n                color: Colors.white,\r\n              ),\r\n              color: Colors.green,\r\n              shape: const CircleBorder(\r\n                side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n              ))\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _addCount() {\r\n    setState(() {\r\n      _count++;\r\n      PageStorage.of(context)?.writeState(context, _count);\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(325,165,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-28\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomPageView extends StatelessWidget {\r\n  const CustomPageView({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.green[50]!,\r\n    Colors.green[100]!,\r\n    Colors.green[200]!,\r\n    Colors.green[300]!,\r\n    Colors.green[400]!,\r\n    Colors.green[500]!,\r\n    Colors.green[600]!,\r\n    Colors.green[700]!,\r\n    Colors.green[800]!,\r\n    Colors.green[900]!,\r\n  ];\r\n\r\n  TextStyle get textStyle =>\r\n      const TextStyle(color: Colors.white, fontSize: 24, shadows: [\r\n        Shadow(\r\n          color: Colors.black,\r\n          offset: Offset(.5, .5),\r\n          blurRadius: 2,\r\n        ),\r\n      ]);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 150,\r\n      child: PageView(\r\n        onPageChanged: (position) => print(position),\r\n        children: data\r\n            .map((color) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 90,\r\n                  color: color,\r\n                  child: Text(\r\n                    colorString(color),\r\n                    style: textStyle,\r\n                  ),\r\n                ))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(326,165,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-28\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DirectionPageView extends StatelessWidget {\r\n  const DirectionPageView({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n  TextStyle get textStyle =>\r\n      const TextStyle(color: Colors.white, fontSize: 24, shadows: [\r\n        Shadow(\r\n          color: Colors.black,\r\n          offset: Offset(.5, .5),\r\n          blurRadius: 2,\r\n        ),\r\n      ]);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 150,\r\n      child: PageView(\r\n        scrollDirection: Axis.vertical,\r\n        reverse: true,\r\n        onPageChanged: (position) {\r\n          print(position);\r\n        },\r\n        children: data\r\n            .map((color) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 90,\r\n                  color: color,\r\n                  child: Text(\r\n                    colorString(color),\r\n                    style: textStyle,\r\n                  ),\r\n                ))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(327,165,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-28\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CtrlPageView extends StatefulWidget {\r\n  const CtrlPageView({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CtrlPageViewState createState() => _CtrlPageViewState();\r\n}\r\n\r\nclass _CtrlPageViewState extends State<CtrlPageView> {\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n  late PageController _controller;\r\n\r\n  @override\r\n  void dispose() {\r\n    _controller.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _controller=PageController(\r\n      viewportFraction: 0.8,\r\n      initialPage: (data.length/2).round()\r\n    );\r\n  }\r\n  TextStyle get textStyle =>\r\n      const TextStyle(color: Colors.white, fontSize: 24, shadows: [\r\n        Shadow(\r\n          color: Colors.black,\r\n          offset: Offset(.5, .5),\r\n          blurRadius: 2,\r\n        ),\r\n      ]);\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 150,\r\n      child: PageView(\r\n        controller: _controller,\r\n        onPageChanged: (position) {\r\n          print(position);\r\n        },\r\n        children: data\r\n            .map((color) =>\r\n            Container(\r\n              alignment: Alignment.center,\r\n              width: 90,\r\n              color: color,\r\n              child: Text(\r\n                colorString(color),\r\n                style: textStyle,\r\n              ),\r\n            ))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(328,235,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PaginatedDataTableDemo extends StatefulWidget {\r\n  const PaginatedDataTableDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<StatefulWidget> createState() => _PaginatedDataTableDemoState();\r\n}\r\n\r\nclass _PaginatedDataTableDemoState extends State<PaginatedDataTableDemo> {\r\n  int _rowsPerPage = 5;\r\n\r\n  int _sortColumnIndex = 0;\r\n  bool _sortAscending = true;\r\n\r\n  final DessertDataSource _dessertsDataSource = DessertDataSource();\r\n\r\n  void sort<T>(\r\n    Comparable<T> Function(HeroInfo d) getField,\r\n    int columnIndex,\r\n    bool ascending,\r\n  ) {\r\n    _dessertsDataSource.sort<T>(getField, ascending);\r\n    setState(() {\r\n      _sortColumnIndex = columnIndex;\r\n      _sortAscending = ascending;\r\n    });\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n        height: 300,\r\n        width: 350,\r\n        child: SingleChildScrollView(\r\n          child: PaginatedDataTable(\r\n              actions: const <Widget>[\r\n                IconButton(icon: Icon(Icons.add), onPressed: null),\r\n              ],\r\n              header: const Text(\r\n                ''《旷古奇书》-角色预设'',\r\n                style: TextStyle(color: Colors.blue),\r\n              ),\r\n              rowsPerPage: _rowsPerPage,\r\n              availableRowsPerPage: const [5, 8, 10, 15],\r\n              onRowsPerPageChanged: (int? value) {\r\n                setState(() {\r\n                  _rowsPerPage = value ?? 0;\r\n                });\r\n              },\r\n              sortColumnIndex: _sortColumnIndex,\r\n              sortAscending: _sortAscending,\r\n              onSelectAll: _dessertsDataSource._selectAll,\r\n              columns: <DataColumn>[\r\n                DataColumn(\r\n                    label: const Text(''角色名称''),\r\n                    onSort: (int columnIndex, bool ascending) => sort<String>(\r\n                        (HeroInfo d) => d.name, columnIndex, ascending)),\r\n                DataColumn(\r\n                    label: const Text(''主场卷部''),\r\n                    tooltip: ''人物主要出场的作品.'',\r\n                    numeric: true,\r\n                    onSort: (int columnIndex, bool ascending) => sort<String>(\r\n                        (HeroInfo d) => d.calories, columnIndex, ascending)),\r\n                DataColumn(\r\n                    label: const Text(''种族''),\r\n                    numeric: true,\r\n                    onSort: (int columnIndex, bool ascending) => sort<String>(\r\n                        (HeroInfo d) => d.fat, columnIndex, ascending)),\r\n                DataColumn(\r\n                    label: const Text(''性别''),\r\n                    numeric: true,\r\n                    onSort: (int columnIndex, bool ascending) => sort<String>(\r\n                        (HeroInfo d) => d.carbs, columnIndex, ascending)),\r\n              ],\r\n              source: _dessertsDataSource),\r\n        ));\r\n  }\r\n}\r\n\r\nclass HeroInfo {\r\n  HeroInfo(this.name, this.calories, this.fat, this.carbs);\r\n\r\n  final String name;\r\n  final String calories;\r\n  final String fat;\r\n  final String carbs;\r\n  bool selected = false;\r\n}\r\n\r\nclass DessertDataSource extends DataTableSource {\r\n  final List<HeroInfo> _desserts = [\r\n    HeroInfo(''捷特'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''龙少'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''巫缨'', ''《幻将录》'', "人族", "女"),\r\n    HeroInfo(''林兮'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''九方玄玉'', ''《风神传》'', "神族", "男"),\r\n    HeroInfo(''七日洪荒'', ''《风神传》'', "魔族", "男"),\r\n    HeroInfo(''林昔瑶'', ''《封妖志》'', "鬼族", "女"),\r\n    HeroInfo(''林兮鬼帝'', ''《封妖志》'', "鬼族", "男"),\r\n    HeroInfo(''艾隆'', ''《封妖志》'', "鬼族", "男"),\r\n    HeroInfo(''语熙华'', ''《风神传》'', "道族", "男"),\r\n    HeroInfo(''雪玉宛如'', ''《幻将录》'', "人族", "女"),\r\n    HeroInfo(''破千'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''浪封'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''虎翼穷奇'', ''《封妖志》'', "妖族", "男"),\r\n    HeroInfo(''凯'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''荆棘'', ''《幻将录》'', "人族", "女"),\r\n    HeroInfo(''龙右'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''梦千'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''梦小梦'', ''《幻将录》'', "人族", "女"),\r\n    HeroInfo(''梦瞳'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''十戈'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''计画天'', ''《幻将录》'', "人族", "女"),\r\n    HeroInfo(''士方'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''巫妻孋'', ''《幻将录》'', "人族", "女"),\r\n    HeroInfo(''木时黎'', ''《永恒传说》'', "人族", "男"),\r\n    HeroInfo(''木艾奇'', ''《永恒传说》'', "人族", "男"),\r\n    HeroInfo(''张风'', ''《永恒传说》'', "人族", "男"),\r\n    HeroInfo(''薛剑儿'', ''《永恒传说》'', "人族", "男"),\r\n    HeroInfo(''李月'', ''《永恒传说》'', "人族", "女"),\r\n    HeroInfo(''刘雪'', ''《永恒传说》'', "人族", "女"),\r\n    HeroInfo(''葛心'', ''《永恒传说》'', "人族", "女"),\r\n    HeroInfo(''步映容'', ''《幻将录》'', "人族", "女"),\r\n    HeroInfo(''莫慈良'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''莫向阳'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''莫子薇'', ''《永恒传说》'', "人族", "女"),\r\n    HeroInfo(''藏凯阳'', ''《永恒传说》'', "人族", "男"),\r\n    HeroInfo(''奇雨歆'', ''《永恒传说》'', "人族", "女"),\r\n    HeroInfo(''林天蕊'', ''《永恒传说》'', "人族", "女"),\r\n    HeroInfo(''吴灏然'', ''《永恒传说》'', "人族", "男"),\r\n    HeroInfo(''何解连'', ''《永恒传说》'', "人族", "男"),\r\n    HeroInfo(''步络尘'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''拓雷'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''炽阳骑'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''正构'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''烈'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''梦华君'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''初星'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''梦飞烟'', ''《幻将录》'', "人族", "男"),\r\n    HeroInfo(''武落英'', ''《幻将录》'', "人族", "女"),\r\n    HeroInfo(''古千缘'', ''《幻将录》'', "人族", "男"),\r\n  ];\r\n\r\n  void sort<T>(\r\n    Comparable<T> Function(HeroInfo d) getField,\r\n    bool ascending,\r\n  ) {\r\n    _desserts.sort((HeroInfo a, HeroInfo b) {\r\n      if (!ascending) {\r\n        final HeroInfo c = a;\r\n        a = b;\r\n        b = c;\r\n      }\r\n      final Comparable<T> aValue = getField(a);\r\n      final Comparable<T> bValue = getField(b);\r\n      return Comparable.compare(aValue, bValue);\r\n    });\r\n    notifyListeners();\r\n  }\r\n\r\n  int _selectedCount = 0;\r\n\r\n  @override\r\n  DataRow? getRow(int index) {\r\n    if (index >= _desserts.length) return null;\r\n    final HeroInfo dessert = _desserts[index];\r\n    return DataRow.byIndex(\r\n        index: index,\r\n        selected: dessert.selected,\r\n        onSelectChanged: (bool? value) {\r\n          if (dessert.selected != value && value != null) {\r\n            _selectedCount += value ? 1 : -1;\r\n            assert(_selectedCount >= 0);\r\n            dessert.selected = value;\r\n            notifyListeners();\r\n          }\r\n        },\r\n        cells: <DataCell>[\r\n          DataCell(Center(child: Text(dessert.name))),\r\n          DataCell(Center(child: Text(dessert.calories))),\r\n          DataCell(Center(child: Text(dessert.fat))),\r\n          DataCell(Center(child: Text(dessert.carbs))),\r\n        ]);\r\n  }\r\n\r\n  @override\r\n  bool get isRowCountApproximate => false;\r\n\r\n  @override\r\n  int get rowCount => _desserts.length;\r\n\r\n  @override\r\n  int get selectedRowCount => _selectedCount;\r\n\r\n  void _selectAll(bool? checked) {\r\n    if (checked == null) return;\r\n    for (HeroInfo dessert in _desserts) {\r\n      dessert.selected = checked;\r\n    }\r\n    _selectedCount = checked ? _desserts.length : 0;\r\n    notifyListeners();\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(329,347,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ParentDataWidgetDemo extends StatelessWidget {\r\n  const ParentDataWidgetDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''ParentDataWidget 是一个抽象类，不能直接使用，它拥有 ParentData 子类型的泛型，该泛型会限定该组件的适应场景。''\r\n      ''如 Positioned 组件继承自 ParentDataWidget<StackParentData>，就说明 Positioned 的上层组件必须使用 Stack 族组件。''\r\n      ''如 Flexible 组件继承自 ParentDataWidget<FlexParentData>，就说明 Flexible 的上层组件必须使用 Flex 族组件。'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(330,312,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass PerformanceOverlayDemo extends StatelessWidget {\r\n  const PerformanceOverlayDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return PerformanceOverlay.allEnabled(\r\n\r\n    );\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(331,296,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-23\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PhysicalModelDemo extends StatelessWidget{\r\n  const PhysicalModelDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n      children: [\r\n        SizedBox(\r\n          width: 150,\r\n          height: 150,\r\n          child: PhysicalModel(\r\n              shadowColor: Colors.orange,\r\n              elevation: 3,\r\n              child: Image.asset(\r\n                ''assets/images/caver.webp'',\r\n                fit: BoxFit.cover,\r\n              ),\r\n              clipBehavior: Clip.hardEdge,\r\n              shape: BoxShape.circle,\r\n              color: Colors.deepPurpleAccent),\r\n        ),\r\n\r\n        SizedBox(\r\n          width: 150,\r\n          height: 150,\r\n          child: PhysicalModel(\r\n              shadowColor: Colors.orange,\r\n              elevation: 3,\r\n              child: Image.asset(\r\n                ''assets/images/caver.webp'',\r\n                fit: BoxFit.cover,\r\n              ),\r\n              borderRadius: const BorderRadius.all(Radius.circular(20)),\r\n              clipBehavior: Clip.hardEdge,\r\n              shape: BoxShape.rectangle,\r\n              color: Colors.deepPurpleAccent),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(332,279,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass PhysicalShapeDemo extends StatelessWidget {\r\n  const PhysicalShapeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: 200,\r\n      height: 200,\r\n      child: PhysicalShape(\r\n          shadowColor: Colors.orange,\r\n          elevation: 3,\r\n          child: Image.asset(\r\n            ''assets/images/caver.webp'',\r\n            fit: BoxFit.cover,\r\n          ),\r\n          clipBehavior: Clip.hardEdge,\r\n          clipper: const ShapeBorderClipper(\r\n            shape: CircleBorder(side: BorderSide.none),\r\n          ),\r\n          color: Colors.deepPurpleAccent),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(333,309,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\012// Use of this source code is governed by a BSD-style license that can be\r\012// found in the LICENSE file.\r\012\r\012import ''package:flutter/material.dart'';\r\012\r\012\r\012\r\012class PinnedHeaderSliverNode1 extends StatefulWidget {\r\012  const PinnedHeaderSliverNode1({ super.key });\r\012\r\012  @override\r\012  State<PinnedHeaderSliverNode1> createState() => _PinnedHeaderSliverNode1State();\r\012}\r\012\r\012class _PinnedHeaderSliverNode1State extends State<PinnedHeaderSliverNode1> {\r\012  int count = 0;\r\012  late final ScrollController scrollController;\r\012\r\012  @override\r\012  void initState() {\r\012    super.initState();\r\012    scrollController = ScrollController();\r\012  }\r\012\r\012  @override\r\012  void dispose() {\r\012    scrollController.dispose();\r\012    super.dispose();\r\012  }\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    final ThemeData theme = Theme.of(context);\r\012    final ColorScheme colorScheme = theme.colorScheme;\r\012\r\012    final Widget header = Container(\r\012      color: colorScheme.surface,\r\012      padding: const EdgeInsets.all(4),\r\012      child: Material(\r\012        color: colorScheme.primaryContainer,\r\012        shape: RoundedRectangleBorder(\r\012          borderRadius: BorderRadius.circular(8),\r\012          side: BorderSide(\r\012            width: 7,\r\012            color: colorScheme.outline,\r\012          ),\r\012        ),\r\012        child: Container(\r\012          alignment: Alignment.center,\r\012          padding: const EdgeInsets.symmetric(vertical: 48),\r\012          child: Text(\r\012            count.isOdd ? ''Alternative Title\nWith Two Lines'' : ''PinnedHeaderSliver'',\r\012            style: theme.textTheme.headlineMedium!.copyWith(\r\012              color: colorScheme.onPrimaryContainer,\r\012            ),\r\012          ),\r\012        ),\r\012      ),\r\012    );\r\012\r\012    return Scaffold(\r\012      body: SafeArea(\r\012        child: Padding(\r\012          padding: const EdgeInsets.symmetric(horizontal: 4),\r\012          child:\r\012        CustomScrollView(\r\012            controller: scrollController,\r\012            slivers: <Widget>[\r\012              PinnedHeaderSliver(child: header),\r\012              const _ItemList(),\r\012            ],\r\012          ),\r\012        ),\r\012      ),\r\012      floatingActionButton: FloatingActionButton(\r\012        onPressed: () {\r\012          setState(() {\r\012            count += 1;\r\012          });\r\012        },\r\012        child: const Icon(Icons.add),\r\012      ),\r\012    );\r\012  }\r\012}\r\012\r\012// A placeholder SliverList of 25 items.\r\012class _ItemList extends StatelessWidget {\r\012  const _ItemList({\r\012    super.key,\r\012    this.itemCount = 50,\r\012  });\r\012\r\012  final int itemCount;\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    final ColorScheme colorScheme = Theme.of(context).colorScheme;\r\012    return SliverList(\r\012      delegate: SliverChildBuilderDelegate(\r\012        (BuildContext context, int index) {\r\012          return Card(\r\012            color: colorScheme.onSecondary,\r\012            child: ListTile(\r\012              textColor: colorScheme.secondary,\r\012              title: Text(''Item $index''),\r\012            ),\r\012          );\r\012        },\r\012        childCount: itemCount,\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(334,309,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''dart:ui'';\r\n\r\nimport ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:flutter/services.dart'';\r\n\r\nclass PinnedHeaderSliverNode2 extends StatefulWidget {\r\n  const PinnedHeaderSliverNode2({super.key});\r\n\r\n  @override\r\n  State<PinnedHeaderSliverNode2> createState() => _PinnedHeaderSliverNode2State();\r\n}\r\n\r\nclass _PinnedHeaderSliverNode2State extends State<PinnedHeaderSliverNode2> {\r\n  int count = 0;\r\n  late final ScrollController scrollController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    scrollController = ScrollController();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    scrollController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final ThemeData theme = Theme.of(context);\r\n    final ColorScheme colorScheme = theme.colorScheme;\r\n    return Scaffold(\r\n      backgroundColor: Colors.white,\r\n      body:\r\n      CustomScrollView(\r\n        controller: scrollController,\r\n        slivers: <Widget>[\r\n          _buildSliverBar(),\r\n          _buildTitleText(),\r\n          const PinnedHeaderSliver(child: Divider()),\r\n          const _ItemList(),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverBar() {\r\n    const Icon icon = Icon(CupertinoIcons.settings, color: Colors.blue);\r\n    const TextStyle style = TextStyle(fontSize: 16, fontWeight: FontWeight.bold);\r\n    const Text text = Text(''Settings'', style: style);\r\n    Widget action = IconButton(onPressed: () {}, icon: icon );\r\n    return SliverLayoutBuilder(builder: (_, scs) {\r\n      double factor = (scs.scrollOffset / kToolbarHeight).clamp(0, 1);\r\n      factor = factor < 0.2 ? 0 : factor;\r\n      AppBar header = AppBar(\r\n        backgroundColor: Colors.white,\r\n        surfaceTintColor: Colors.transparent,\r\n        actions: [action],\r\n        centerTitle: true,\r\n        title: Opacity(opacity: factor, child: text),\r\n      );\r\n      return PinnedHeaderSliver(child: header);\r\n    });\r\n  }\r\n\r\n  Widget _buildTitleText() {\r\n    const TextStyle style = TextStyle(fontSize: 20, fontWeight: FontWeight.bold);\r\n    const Text text = Text(''Settings'', style: style);\r\n    return const SliverToBoxAdapter(\r\n      child: Padding(\r\n        padding: EdgeInsets.only(left: 12.0, bottom: 8),\r\n        child: text,\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _ItemList extends StatelessWidget {\r\n  const _ItemList({\r\n    super.key,\r\n    this.itemCount = 50,\r\n  });\r\n\r\n  final int itemCount;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final ColorScheme colorScheme = Theme.of(context).colorScheme;\r\n    return SliverList(\r\n      delegate: SliverChildBuilderDelegate(\r\n        (BuildContext context, int index) {\r\n          return ListTile(\r\n            dense: true,\r\n            textColor: colorScheme.secondary,\r\n            title: Text(''#$index title''),\r\n            subtitle: Text(''Subtitle in line $index''),\r\n          );\r\n        },\r\n        childCount: itemCount,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(335,309,0,replace(replace('// Copyright 2014 The Flutter Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport ''dart:ui'';\r\n\r\nimport ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:flutter/services.dart'';\r\n\r\nclass PinnedHeaderSliverNode3 extends StatefulWidget {\r\n  const PinnedHeaderSliverNode3({super.key});\r\n\r\n  @override\r\n  State<PinnedHeaderSliverNode3> createState() => _PinnedHeaderSliverNode3State();\r\n}\r\n\r\nclass _PinnedHeaderSliverNode3State extends State<PinnedHeaderSliverNode3> {\r\n  int count = 0;\r\n  late final ScrollController scrollController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    scrollController = ScrollController();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    scrollController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final ThemeData theme = Theme.of(context);\r\n    final ColorScheme colorScheme = theme.colorScheme;\r\n\r\n    return Scaffold(\r\n      backgroundColor: Colors.white,\r\n      body: CustomScrollView(\r\n        controller: scrollController,\r\n        slivers: <Widget>[\r\n          _buildSliverBar(),\r\n          _buildTitleText(),\r\n          _buildSliverSearch(),\r\n\r\n//           PinnedHeaderSliver(child: Padding(\r\n//             padding: const EdgeInsets.symmetric(horizontal: 12.0),\r\n//             child: TextField(\r\n// decoration: InputDecoration(\r\n//   filled: true,\r\n//   fillColor: Colors.white,\r\n//   border: InputBorder.none\r\n// ),\r\n//             ),\r\n//           )),\r\n\r\n          const _ItemList(),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverBar() {\r\n    const Icon icon = Icon(CupertinoIcons.settings, color: Colors.blue);\r\n    const TextStyle style = TextStyle(fontSize: 16, fontWeight: FontWeight.bold);\r\n    const Text text = Text(''Settings'', style: style);\r\n    Widget action = IconButton(onPressed: () {}, icon: icon);\r\n    return SliverLayoutBuilder(builder: (_, scs) {\r\n      double factor = (scs.scrollOffset / kToolbarHeight).clamp(0, 1);\r\n      factor = factor < 0.2 ? 0 : factor;\r\n      AppBar header = AppBar(\r\n        backgroundColor: Colors.white,\r\n        surfaceTintColor: Colors.transparent,\r\n        actions: [action],\r\n        centerTitle: true,\r\n        title: Opacity(opacity: factor, child: text),\r\n      );\r\n      return PinnedHeaderSliver(child: header);\r\n    });\r\n  }\r\n\r\n  Widget _buildTitleText() {\r\n    const TextStyle style = TextStyle(fontSize: 20, fontWeight: FontWeight.bold);\r\n    const Text text = Text(''Settings'', style: style);\r\n    return const SliverToBoxAdapter(\r\n      child: Padding(\r\n        padding: EdgeInsets.only(left: 12.0, bottom: 8),\r\n        child: text,\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverSearch() {\r\n    BoxDecoration decoration = BoxDecoration(\r\n        color: const Color(0xffefeff1), borderRadius: BorderRadius.circular(6));\r\n    Widget prefix = const Padding(\r\n      padding: EdgeInsets.only(left: 8.0),\r\n      child: Icon(CupertinoIcons.search, size: 20, color: Color(0xff808082))\r\n    );\r\n    return PinnedHeaderSliver(\r\n        child: ColoredBox(\r\n          color: Colors.white,\r\n          child: Column(\r\n            children: [\r\n              Padding(\r\n                padding: const EdgeInsets.only(bottom: 8.0, right: 12, left: 12),\r\n                child: CupertinoTextField(\r\n                  readOnly: true,\r\n                  placeholder: ''搜索'',\r\n                  onTap: _toSearchPage,\r\n                  decoration: decoration,\r\n                  prefix:prefix,\r\n                  style: const TextStyle(fontSize: 14),\r\n                  placeholderStyle: const TextStyle(color: Color(0xff808082)),\r\n                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),\r\n                ),\r\n              ),\r\n              const Divider(),\r\n            ],\r\n          ),\r\n        ));\r\n  }\r\n\r\n  void _toSearchPage() {\r\n    Navigator.of(context).push(\r\n      MaterialPageRoute(builder: (_) => Scaffold(appBar: AppBar(title: const Text(''SearchPage'')))),\r\n    );\r\n  }\r\n}\r\n\r\n// A placeholder SliverList of 25 items.\r\nclass _ItemList extends StatelessWidget {\r\n  const _ItemList({\r\n    super.key,\r\n    this.itemCount = 50,\r\n  });\r\n\r\n  final int itemCount;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final ColorScheme colorScheme = Theme\r\n        .of(context)\r\n        .colorScheme;\r\n    return SliverList(\r\n      delegate: SliverChildBuilderDelegate(\r\n            (BuildContext context, int index) {\r\n          return ListTile(\r\n            dense: true,\r\n            textColor: colorScheme.secondary,\r\n            title: Text(''#$index title''),\r\n            subtitle: Text(''Subtitle in line $index''),\r\n          );\r\n        },\r\n        childCount: itemCount,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(336,36,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomPlaceholder extends StatelessWidget {\r\n  const CustomPlaceholder({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const SizedBox(\r\n      width: 100,\r\n      height: 100*0.618,\r\n      child:  Placeholder(\r\n        color: Colors.orangeAccent,\r\n        strokeWidth: 2,\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(337,36,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass FallbackPlaceholder extends StatelessWidget {\r\n  const FallbackPlaceholder({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const UnconstrainedBox(\r\n      child:  Placeholder(\r\n        color: Colors.blue,\r\n        strokeWidth: 2,\r\n        fallbackHeight: 100,\r\n        fallbackWidth: 150,\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(338,56,0,replace(replace('import ''package:flutter/material.dart'';\r\nimport ''package:unit_widgets_display/display_ability.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-16\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomPopupMenuButton extends StatefulWidget {\r\n  const CustomPopupMenuButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomPopupMenuButtonState createState() => _CustomPopupMenuButtonState();\r\n}\r\n\r\nclass _CustomPopupMenuButtonState extends State<CustomPopupMenuButton> {\r\n  final Map<String, IconData> map = const {\r\n    "关于": Icons.info_outline,\r\n    "帮助": Icons.help_outline,\r\n    "问题反馈": Icons.add_comment,\r\n  };\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return PopupMenuButton<String>(\r\n      itemBuilder: (context) => buildItems(),\r\n      offset: const Offset(0, 50),\r\n      color: const Color(0xffF4FFFA),\r\n      elevation: 1,\r\n      shape: const RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.only(\r\n        topLeft: Radius.circular(20),\r\n        bottomRight: Radius.circular(20),\r\n        topRight: Radius.circular(5),\r\n        bottomLeft: Radius.circular(5),\r\n      )),\r\n      onSelected: (e) {\r\n        print(e);\r\n        if (e == ''关于'') {\r\n          DisplayPlugin().showAbout(context);\r\n        }\r\n      },\r\n      onCanceled: () => print(''onCanceled''),\r\n    );\r\n  }\r\n\r\n  List<PopupMenuItem<String>> buildItems() {\r\n    return map.keys\r\n        .toList()\r\n        .map((e) => PopupMenuItem<String>(\r\n            value: e,\r\n            child: Wrap(\r\n              spacing: 10,\r\n              children: <Widget>[\r\n                Icon(map[e], color: Colors.blue),\r\n                Text(e),\r\n              ],\r\n            )))\r\n        .toList();\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(339,174,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nimport ''../../display_ability.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomPopupMenuDivider extends StatelessWidget {\r\n  const CustomPopupMenuDivider({Key? key}) : super(key: key);\r\n\r\n  final Map<String, IconData> map = const {\r\n    "关于": Icons.info_outline,\r\n    "帮助": Icons.help_outline,\r\n    "问题反馈": Icons.add_comment,\r\n  };\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildPopupMenuButton(context),\r\n        const PopupMenuDivider(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  PopupMenuButton<String> _buildPopupMenuButton(BuildContext context) {\r\n    return PopupMenuButton<String>(\r\n      itemBuilder: (context) => [\r\n        ...buildItems().sublist(0, 2),\r\n        const PopupMenuDivider(),\r\n        ...buildItems().sublist(2, 3)\r\n      ],\r\n      offset: const Offset(0, 50),\r\n      color: const Color(0xffF4FFFA),\r\n      elevation: 1,\r\n      shape: const RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.only(\r\n        topLeft: Radius.circular(20),\r\n        bottomRight: Radius.circular(20),\r\n        topRight: Radius.circular(5),\r\n        bottomLeft: Radius.circular(5),\r\n      )),\r\n      onSelected: (e) {\r\n        print(e);\r\n        if (e == ''关于'') {\r\n          DisplayPlugin().showAbout(context);\r\n        }\r\n      },\r\n      onCanceled: () => print(''onCanceled''),\r\n    );\r\n  }\r\n\r\n  List<PopupMenuItem<String>> buildItems() {\r\n    return map.keys\r\n        .toList()\r\n        .map((e) => PopupMenuItem<String>(\r\n            value: e,\r\n            child: Wrap(\r\n              spacing: 10,\r\n              children: <Widget>[\r\n                Icon(map[e], color: Colors.blue),\r\n                Text(e),\r\n              ],\r\n            )))\r\n        .toList();\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(340,330,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PopupMenuThemeDemo extends StatelessWidget {\r\n  const PopupMenuThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return PopupMenuTheme(\r\n      data: PopupMenuTheme.of(context).copyWith(\r\n        color: Colors.orangeAccent,\r\n        elevation: 1,\r\n        textStyle:  const TextStyle(color: Colors.white),\r\n        shape: const RoundedRectangleBorder(\r\n            borderRadius: BorderRadius.only(\r\n              topLeft: Radius.circular(20),\r\n              bottomRight: Radius.circular(20),\r\n              topRight: Radius.circular(5),\r\n              bottomLeft: Radius.circular(5),\r\n            )),\r\n      ),\r\n      child: _PopupMenuButtonSimple(),\r\n    );\r\n  }\r\n}\r\n\r\nclass _PopupMenuButtonSimple extends StatefulWidget {\r\n  @override\r\n  _PopupMenuButtonSimpleState createState() => _PopupMenuButtonSimpleState();\r\n}\r\n\r\nclass _PopupMenuButtonSimpleState extends State<_PopupMenuButtonSimple> {\r\n  final Map<String,IconData> map = {\r\n    "关于": Icons.info_outline,\r\n    "帮助": Icons.help_outline,\r\n    "反馈": Icons.add_comment,\r\n  };\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return PopupMenuButton<String>(\r\n      itemBuilder: (context) => buildItems(),\r\n      offset: const Offset(0, 50),\r\n      onSelected: print,\r\n      onCanceled: () => print(''onCanceled''),\r\n    );\r\n  }\r\n\r\n  List<PopupMenuItem<String>> buildItems() {\r\n    return map.keys\r\n        .toList()\r\n        .map((e) => PopupMenuItem<String>(\r\n        value: e,\r\n        child: Wrap(\r\n          spacing: 6,\r\n          children: <Widget>[\r\n            Icon(\r\n              map[e],\r\n            ),\r\n            Text(e),\r\n          ],\r\n        )))\r\n        .toList();\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(341,108,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomPositioned extends StatelessWidget {\r\n  const CustomPositioned({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget yellowBox = Container(\r\n      color: Colors.yellow,\r\n      height: 100,\r\n      width: 100,\r\n    );\r\n\r\n    Widget redBox = Container(\r\n      color: Colors.red,\r\n      height: 90,\r\n      width: 90,\r\n    );\r\n\r\n    Widget greenBox = Container(\r\n      color: Colors.green,\r\n      height: 80,\r\n      width: 80,\r\n    );\r\n\r\n    Widget cyanBox = Container(\r\n      color: Colors.cyanAccent,\r\n      height: 70,\r\n      width: 70,\r\n    );\r\n\r\n    return Container(\r\n        width: 200,\r\n        height: 120,\r\n        color: Colors.grey.withAlpha(33),\r\n        child: Stack(\r\n          children: [\r\n            yellowBox,\r\n            redBox,\r\n            Positioned(top: 20, left: 20, child: greenBox),\r\n            Positioned(\r\n              child: cyanBox,\r\n              bottom: 10,\r\n              right: 10,\r\n            )\r\n          ],\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(342,159,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomPositionedDirectional extends StatelessWidget {\r\n  const CustomPositionedDirectional({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget yellowBox = Container(\r\n      color: Colors.yellow,\r\n      height: 100,\r\n      width: 100,\r\n    );\r\n\r\n    Widget redBox = Container(\r\n      color: Colors.red,\r\n      height: 90,\r\n      width: 90,\r\n    );\r\n\r\n    Widget greenBox = Container(\r\n      color: Colors.green,\r\n      height: 80,\r\n      width: 80,\r\n    );\r\n\r\n    Widget cyanBox = Container(\r\n      color: Colors.cyanAccent,\r\n      height: 70,\r\n      width: 70,\r\n    );\r\n\r\n    return Container(\r\n        width: 200,\r\n        height: 120,\r\n        color: Colors.grey.withAlpha(33),\r\n        child: Stack(\r\n          children: <Widget>[\r\n            yellowBox,\r\n            redBox,\r\n            PositionedDirectional(top: 20, start: 20, child: greenBox),\r\n            PositionedDirectional(\r\n              child: cyanBox,\r\n              bottom: 10,\r\n              end: 10,\r\n            )\r\n          ],\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(343,93,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomPositionedTransition extends StatefulWidget {\r\n  const CustomPositionedTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomPositionedTransitionState createState() =>\r\n      _CustomPositionedTransitionState();\r\n}\r\n\r\nclass _CustomPositionedTransitionState extends State<CustomPositionedTransition>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    _ctrl = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 2),\r\n    );\r\n    _ctrl.forward();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n        onTap: () => _ctrl.forward(from: 0),\r\n        child: Container(\r\n          color: Colors.grey.withAlpha(33),\r\n          width: 200,\r\n          height: 100,\r\n          child: Stack(\r\n            children: <Widget>[\r\n              PositionedTransition(\r\n                rect: RelativeRectTween(\r\n                  begin: const RelativeRect.fromLTRB(0, 50, 150, 100),\r\n                  end: const RelativeRect.fromLTRB(60, 0, 150, -50),\r\n                ).animate(_ctrl),\r\n                child: const Icon(\r\n                  Icons.android,\r\n                  color: Colors.green,\r\n                  size: 50,\r\n                ),\r\n              )\r\n            ],\r\n          ),\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(344,204,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/5/3\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomPreferredSize extends StatelessWidget {\r\n  const CustomPreferredSize({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: Scaffold(\r\n        appBar: PreferredSize(\r\n          preferredSize: const Size.fromHeight(150),\r\n          child: AppBar(\r\n            title: const Text(''PreferredSize''),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(345,204,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/5/3\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass AdapterPreferredSize extends StatelessWidget {\r\n  const AdapterPreferredSize({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: Scaffold(\r\n        appBar: PreferredSize(\r\n          preferredSize: const Size.fromHeight(150),\r\n          child: AppBar(\r\n            title: const Text(''PreferredSize''),\r\n            bottom: PreferredSize(\r\n              preferredSize: const Size.fromHeight(40),\r\n              child: Container(\r\n                height: 40,\r\n                color: Colors.orange,\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(346,335,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020/3/31\r\012/// contact me by email 1981462002@qq.com\r\012///\r\012\r\012class PrimaryScrollControllerDemo extends StatelessWidget {\r\012  const PrimaryScrollControllerDemo({Key? key}) : super(key: key);\r\012\r\012  final String info =\r\012      ''PrimaryScrollController 是 InheritedWidget 子类，也就说明它可以为子树组件提供某些默认数据，''\r\012      ''子树可以通过 context 来获取上层该组件的提供 ScrollController 对象。\n''\r\012      ''对于一些可滑动组件 ScrollView、SingleChildScrollView、NestedScrollView 等，''\r\012      ''在使用者未提供 ScrollController 时，且 primary 属性为 true 时(默认true) ，''\r\012      ''会使用上层 PrimaryScrollController 组件提供的滑动控制器。\n''\r\012      ''使用 MaterialApp 组件，其已经内置 PrimaryScrollController，'';\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    ScrollController? label = PrimaryScrollController.of(context);\r\012\r\012    return Container(\r\012      color: Colors.blue.withOpacity(0.1),\r\012      padding: const EdgeInsets.all(10),\r\012      margin: const EdgeInsets.all(10),\r\012      child: Text(info+"当前其持有的滑动控制器对象: $label"),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(347,45,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomRadio extends StatefulWidget {\r\n  const CustomRadio({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomRadioState createState() => _CustomRadioState();\r\n}\r\n\r\nclass _CustomRadioState extends State<CustomRadio> {\r\n  List<double> data = [1, 2, 3, 4, 5];\r\n  double _value = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Row(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: data\r\n          .map((e) => Radio<double>(\r\n          activeColor: Colors.orangeAccent,\r\n          value: e,\r\n          groupValue: _value,\r\n          onChanged: (v) => setState(() => _value = v??0)))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(348,19,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nenum ItemType {\r\n  java,\r\n  kotlin,\r\n  dart,\r\n}\r\n\r\nclass ItemBean {\r\n  final String title;\r\n  final String subTitle;\r\n  final String imgUrl;\r\n\r\n  ItemBean(this.title, this.subTitle, this.imgUrl);\r\n}\r\n\r\nclass CustomRadioListTile extends StatefulWidget {\r\n  const CustomRadioListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomRadioListTileState createState() => _CustomRadioListTileState();\r\n}\r\n\r\nclass _CustomRadioListTileState extends State<CustomRadioListTile> {\r\n  final Map<ItemType, ItemBean> languages = {\r\n    ItemType.java:\r\n    ItemBean("Java", "曾经世界上最流行的语言", "assets/images/java.webp"),\r\n    ItemType.kotlin:\r\n    ItemBean("Kotlin", "未来世界上最流行的语言", "assets/images/kotlin.webp"),\r\n    ItemType.dart:\r\n    ItemBean("Dart", "世界上最优雅的语言", "assets/images/dart.webp"),\r\n  };\r\n  ItemType _type = ItemType.java;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.grey.withAlpha(11),\r\n      child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: languages.keys\r\n              .map((type) => RadioListTile<ItemType>(\r\n            value: type,\r\n            groupValue: _type,\r\n            title: Text(languages[type]!.title),\r\n            subtitle: Text(languages[type]!.subTitle),\r\n            selected: _type == type,\r\n            secondary: CircleAvatar(\r\n              backgroundImage: AssetImage(languages[type]!.imgUrl),\r\n            ),\r\n            onChanged: (ItemType? type) => setState(() => _type = type?? _type),\r\n          ))\r\n              .toList()),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(349,19,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nenum ItemType {\r\n  java,\r\n  kotlin,\r\n  dart,\r\n}\r\n\r\nclass ItemBean {\r\n  final String title;\r\n  final String subTitle;\r\n  final String imgUrl;\r\n\r\n  ItemBean(this.title, this.subTitle, this.imgUrl);\r\n}\r\n\r\nclass DenseRadioListTile extends StatefulWidget {\r\n  const DenseRadioListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DenseRadioListTileState createState() => _DenseRadioListTileState();\r\n}\r\n\r\nclass _DenseRadioListTileState extends State<DenseRadioListTile> {\r\n  final Map<ItemType, ItemBean> languages = {\r\n    ItemType.java: ItemBean("Java", "曾经世界上最流行的语言", "assets/images/java.webp"),\r\n    ItemType.kotlin:\r\n        ItemBean("Kotlin", "未来世界上最流行的语言", "assets/images/kotlin.webp"),\r\n    ItemType.dart: ItemBean("Dart", "世界上最优雅的语言", "assets/images/dart.webp"),\r\n  };\r\n  ItemType _type = ItemType.java;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.grey.withAlpha(11),\r\n      child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: languages.keys\r\n              .map((type) => RadioListTile<ItemType>(\r\n                    value: type,\r\n                    groupValue: _type,\r\n                    title: Text(languages[type]!.title),\r\n                    activeColor: Colors.orangeAccent,\r\n                    dense: true,\r\n                    subtitle: Text(languages[type]!.subTitle),\r\n                    selected: _type == type,\r\n                    secondary: CircleAvatar(\r\n                      backgroundImage: AssetImage(languages[type]!.imgUrl),\r\n                    ),\r\n                    onChanged: (ItemType? type) =>\r\n                        setState(() => _type = type ?? _type),\r\n                  ))\r\n              .toList()),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(350,44,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomRangeSlider extends StatefulWidget {\r\n  const CustomRangeSlider({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomRangeSliderState createState() => _CustomRangeSliderState();\r\n}\r\n\r\nclass _CustomRangeSliderState extends State<CustomRangeSlider> {\r\n  RangeValues _rangeValues = const RangeValues(90, 270);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return RangeSlider(\r\n        values: _rangeValues,\r\n        divisions: 180,\r\n        min: 0.0,\r\n        max: 360.0,\r\n        labels: RangeLabels(_rangeValues.start.toStringAsFixed(1),\r\n            _rangeValues.end.toStringAsFixed(1)),\r\n        activeColor: Colors.orangeAccent,\r\n        inactiveColor: Colors.green.withAlpha(99),\r\n        onChangeStart: (value) {\r\n          print(''开始滑动:$value'');\r\n        },\r\n        onChangeEnd: (value) {\r\n          print(''滑动结束:$value'');\r\n        },\r\n        onChanged: (value) {\r\n          setState(() {\r\n            _rangeValues = value;\r\n          });\r\n        });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(351,153,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PressRawChip extends StatelessWidget {\r\n  const PressRawChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return RawChip(\r\n      padding: const EdgeInsets.all(5),\r\n      labelPadding: const EdgeInsets.all(3),\r\n      label: const Text(''张风捷特烈''),\r\n      avatar: Image.asset("assets/images/icon_head.webp"),\r\n      elevation: 3,\r\n      pressElevation: 5,\r\n      shadowColor: Colors.orangeAccent,\r\n      onPressed: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(352,153,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SelectRawChip extends StatefulWidget {\r\n  const SelectRawChip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SelectRawChipState createState() => _SelectRawChipState();\r\n}\r\n\r\nclass _SelectRawChipState extends State<SelectRawChip> {\r\n  bool _selected = false;\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return RawChip(\r\n      selected: _selected,\r\n      padding: const EdgeInsets.all(5),\r\n      labelPadding: const EdgeInsets.all(3),\r\n      deleteIconColor: Colors.red,\r\n      selectedColor: Colors.orangeAccent.withAlpha(44),\r\n      label: const Text(''张风捷特烈''),\r\n      avatar: Image.asset("assets/images/icon_head.webp"),\r\n      elevation: 3,\r\n      pressElevation: 5,\r\n      shadowColor: Colors.orangeAccent,\r\n      onSelected: (v)=> setState(() => _selected=v),\r\n      onDeleted: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(353,248,0,replace(replace('\r\nimport ''package:flutter/gestures.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass RawGestureDetectorDemo extends StatefulWidget {\r\n  const RawGestureDetectorDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _RawGestureDetectorDemoState createState() => _RawGestureDetectorDemoState();\r\n}\r\n\r\nclass _RawGestureDetectorDemoState extends State<RawGestureDetectorDemo> {\r\n  String _last = "";\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return RawGestureDetector(\r\n      gestures: <Type, GestureRecognizerFactory>{\r\n        TapGestureRecognizer:\r\n            GestureRecognizerFactoryWithHandlers<TapGestureRecognizer>(\r\n          () => TapGestureRecognizer(),\r\n          init,\r\n        ),\r\n      },\r\n      child: Container(\r\n          width: 300.0,\r\n          height: 100.0,\r\n          alignment: Alignment.center,\r\n          color: Colors.yellow,\r\n          child: Text(_last)),\r\n    );\r\n  }\r\n\r\n  void init(TapGestureRecognizer instance) {\r\n    instance..onTapDown = (TapDownDetails details) {\r\n        setState(() {\r\n          _last = ''down'';\r\n        });\r\n      }\r\n      ..onTapUp = (TapUpDetails details) {\r\n        setState(() {\r\n          _last = ''up'';\r\n        });\r\n      }\r\n      ..onTap = () {\r\n        setState(() {\r\n          _last = ''tap'';\r\n        });\r\n      }\r\n      ..onTapCancel = () {\r\n        setState(() {\r\n          _last = ''cancel'';\r\n        });\r\n      }\r\n      ;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(354,313,0,replace(replace('import ''dart:async'';\r\nimport ''dart:typed_data'';\r\nimport ''dart:ui'' as ui;\r\n\r\nimport ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:flutter/services.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass RawImageDemo extends StatefulWidget {\r\n  const RawImageDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _RawImageDemoState createState() => _RawImageDemoState();\r\n}\r\n\r\nclass _RawImageDemoState extends State<RawImageDemo> {\r\n  ui.Image? _image;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadImageFromAssets(''assets/images/icon_head.webp'');\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    if (_image == null) {\r\n      return const SizedBox(\r\n        width: 80,\r\n        height: 80,\r\n      );\r\n    }\r\n\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n      children: [\r\n        Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            RawImage(\r\n              image: _image,\r\n              width: 150,\r\n              height: 150,\r\n              isAntiAlias: true,\r\n              filterQuality: FilterQuality.high,\r\n            ),\r\n            const Text(''isAntiAlias: true''),\r\n            const Text(''FilterQuality.high'')\r\n          ],\r\n        ),\r\n        Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            RawImage(\r\n              image: _image,\r\n              width: 150,\r\n              height: 150,\r\n              isAntiAlias: false,\r\n            ),\r\n            const Text(''isAntiAlias: false''),\r\n            const Text(''FilterQuality.low'')\r\n          ],\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _loadImageFromAssets(String name) async {\r\n    _image = await loadImageFromAssets(name);\r\n    setState(() {});\r\n  }\r\n\r\n  //读取 assets 中的图片\r\n  Future<ui.Image> loadImageFromAssets(String path) async {\r\n    ByteData data = await rootBundle.load(path);\r\n    List<int> bytes = data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);\r\n    return decodeImageFromList(Uint8List.fromList(bytes));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(355,254,0,replace(replace('import ''package:flutter/material.dart'';\r\012import ''package:flutter/services.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020/9/21\r\012/// contact me by email 1981462002@qq.com\r\012\r\012\r\012class RawKeyboardListenerDemo extends StatefulWidget {\r\012  const RawKeyboardListenerDemo({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  _RawKeyboardListenerDemoState createState() => _RawKeyboardListenerDemoState();\r\012}\r\012\r\012class _RawKeyboardListenerDemoState extends State<RawKeyboardListenerDemo> {\r\012  String _info = "";\r\012\r\012  final FocusNode node = FocusNode();\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return RawKeyboardListener(\r\012      focusNode: node,\r\012      onKey: _onKey,\r\012      child: SizedBox(\r\012        width: 300,\r\012        child: Row(\r\012          children: [\r\012            const Expanded(\r\012              child: TextField(\r\012                decoration: InputDecoration(\r\012                  border: OutlineInputBorder()\r\012                ),\r\012              ),\r\012            ),\r\012            const SizedBox(width: 20,),\r\012            Text(_info)\r\012          ],\r\012        ),\r\012      ),\r\012    );\r\012  }\r\012\r\012  void _onKey(RawKeyEvent value) {\r\012    print(value);\r\012    if(value is RawKeyDownEvent){\r\012      _info = "按下: ${value.logicalKey.debugName}\nid: 0x${value.logicalKey.keyId.toRadixString(16).padLeft(9,"0")}";\r\012    }\r\012    if(value is RawKeyUpEvent){\r\012      _info = "抬起: ${value.logicalKey.debugName}\nid: 0x${value.logicalKey.keyId.toRadixString(16).padLeft(9,"0")}";\r\012    }\r\012    setState(() {\r\012\r\012    });\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(356,360,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass MagnifierCircleShape extends StatefulWidget{\r\n\r\n  const MagnifierCircleShape({super.key});\r\n\r\n  @override\r\n  State<MagnifierCircleShape> createState() => _MagnifierCircleShapeState();\r\n}\r\n\r\nclass _MagnifierCircleShapeState extends State<MagnifierCircleShape> {\r\n  final Size magnifierSize =  const Size(150, 150);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Stack(\r\n      alignment: Alignment.center,\r\n      children: <Widget>[\r\n        GestureDetector(\r\n            onPanDown: _onPanDown,\r\n            onPanEnd: _onPanEnd,\r\n            onPanUpdate: _onPanUpdate,\r\n            onPanCancel: _onPanCancel,\r\n            child: Image.asset(''assets/images/sabar_bar.webp'')),\r\n        Text("张风捷特烈",style: TextStyle(color: Colors.white),),\r\n        if(_show)\r\n          Positioned(\r\n              left: _dragGesturePosition.dx,\r\n              top: _dragGesturePosition.dy,\r\n              child: _buildMagnifier()),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildMagnifier(){\r\n    return RawMagnifier(\r\n        decoration: const MagnifierDecoration(\r\n          shape: CircleBorder(\r\n            side: BorderSide(color: Colors.blue, width: 2),\r\n          ),\r\n        ),\r\n      size: magnifierSize,\r\n      // focalPointOffset:  Offset(-10, 0),\r\n      magnificationScale: 3,\r\n    );\r\n  }\r\n\r\n  Offset _dragGesturePosition = Offset.zero;\r\n  bool _show = false;\r\n\r\n  void _onPanDown(DragDownDetails details) {\r\n    _dragGesturePosition = details.localPosition-Offset(magnifierSize.width/2,magnifierSize.height/2);\r\n    _show = true;\r\n    setState(() {\r\n\r\n    });\r\n  }\r\n\r\n  void _onPanEnd(DragEndDetails details) {\r\n    setState(() => _show = false);\r\n  }\r\n\r\n  void _onPanUpdate(DragUpdateDetails details) {\r\n    _dragGesturePosition = details.localPosition-Offset(magnifierSize.width/2,magnifierSize.height/2);\r\n    setState(() {\r\n\r\n    });\r\n  }\r\n\r\n  void _onPanCancel() {\r\n    setState(() => _show = false);\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(357,360,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass MagnifierStarShape extends StatefulWidget{\r\n\r\n  const MagnifierStarShape({super.key});\r\n\r\n  @override\r\n  State<MagnifierStarShape> createState() => _MagnifierStarShapeState();\r\n}\r\n\r\nclass _MagnifierStarShapeState extends State<MagnifierStarShape> {\r\n  final Size magnifierSize =  const Size(150, 150);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Stack(\r\n      alignment: Alignment.center,\r\n      children: <Widget>[\r\n        GestureDetector(\r\n            onPanDown: _onPanDown,\r\n            onPanEnd: _onPanEnd,\r\n            onPanUpdate: _onPanUpdate,\r\n            onPanCancel: _onPanCancel,\r\n            child: Image.asset(''assets/images/sabar_bar.webp'')),\r\n        Text("张风捷特烈",style: TextStyle(color: Colors.white),),\r\n        if(_show)\r\n          Positioned(\r\n              left: _dragGesturePosition.dx,\r\n              top: _dragGesturePosition.dy,\r\n              child: _buildMagnifier()),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildMagnifier(){\r\n    return RawMagnifier(\r\n        decoration:  MagnifierDecoration(\r\n          shape: _StarShapeBorder(),\r\n        ),\r\n      size: magnifierSize,\r\n      // focalPointOffset:  Offset(-10, 0),\r\n      magnificationScale: 3,\r\n    );\r\n  }\r\n\r\n  Offset _dragGesturePosition = Offset.zero;\r\n  bool _show = false;\r\n\r\n  void _onPanDown(DragDownDetails details) {\r\n    _dragGesturePosition = details.localPosition-Offset(magnifierSize.width/2,magnifierSize.height/2);\r\n    _show = true;\r\n    setState(() {\r\n\r\n    });\r\n  }\r\n\r\n  void _onPanEnd(DragEndDetails details) {\r\n    setState(() => _show = false);\r\n  }\r\n\r\n  void _onPanUpdate(DragUpdateDetails details) {\r\n    _dragGesturePosition = details.localPosition-Offset(magnifierSize.width/2,magnifierSize.height/2);\r\n    setState(() {\r\n\r\n    });\r\n  }\r\n\r\n  void _onPanCancel() {\r\n    setState(() => _show = false);\r\n  }\r\n}\r\n\r\nclass _StarShapeBorder extends ShapeBorder {\r\n  final Path _path = Path();\r\n\r\n  @override\r\n  EdgeInsetsGeometry get dimensions => EdgeInsets.zero;\r\n\r\n  @override\r\n  Path getInnerPath(Rect rect, {TextDirection? textDirection}) {\r\n    return Path();\r\n  }\r\n\r\n  @override\r\n  Path getOuterPath(Rect rect, {TextDirection? textDirection}) =>\r\n      nStarPath(5, rect.height / 2, rect.height / 2 * 0.5,\r\n          dx: rect.width / 2, dy: rect.height / 2);\r\n\r\n  @override\r\n  void paint(Canvas canvas, Rect rect, {TextDirection? textDirection}) {\r\n    Paint paint = Paint()..style=PaintingStyle.stroke..color=Colors.blue..strokeWidth =2;\r\n    canvas.drawPath(getOuterPath(rect), paint);\r\n  }\r\n\r\n  Path nStarPath(int num, double R, double r, {dx = 0, dy = 0}) {\r\n    double perRad = 2 * pi / num;\r\n    double radA = perRad / 2 / 2;\r\n    double radB = 2 * pi / (num - 1) / 2 - radA / 2 + radA;\r\n    _path.moveTo(cos(radA) * R + dx, -sin(radA) * R + dy);\r\n    for (int i = 0; i < num; i++) {\r\n      _path.lineTo(\r\n          cos(radA + perRad * i) * R + dx, -sin(radA + perRad * i) * R + dy);\r\n      _path.lineTo(\r\n          cos(radB + perRad * i) * r + dx, -sin(radB + perRad * i) * r + dy);\r\n    }\r\n    _path.close();\r\n    return _path;\r\n  }\r\n\r\n  @override\r\n  ShapeBorder scale(double t) => this;\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(358,175,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomRawMaterialButton extends StatelessWidget {\r\n  const CustomRawMaterialButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: [\r\n        RawMaterialButton(\r\n          elevation: 2,\r\n          fillColor: Colors.green,\r\n          splashColor: Colors.orange,\r\n          textStyle: const TextStyle(color: Colors.white),\r\n          onLongPress: ()=>print(''onLongPress''),\r\n          child: const Icon(Icons.remove),\r\n          onPressed: ()=>print(''onPressed''),\r\n        ),\r\n        RawMaterialButton(\r\n          elevation: 2,\r\n          fillColor: Colors.blue,\r\n          splashColor: Colors.orange,\r\n          textStyle: const TextStyle(color: Colors.white),\r\n          onLongPress: ()=>print(''onLongPress''),\r\n          child: const Text(''Push''),\r\n          onPressed: ()=>print(''onPressed''),\r\n        ),\r\n        RawMaterialButton(\r\n          elevation: 2,\r\n          fillColor: Colors.red,\r\n          splashColor: Colors.orange,\r\n          textStyle: const TextStyle(color: Colors.white),\r\n          onLongPress: ()=>print(''onLongPress''),\r\n          child: const Icon(Icons.add),\r\n          onPressed: ()=>print(''onPressed''),\r\n        ),\r\n\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(359,175,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ShapeRawMaterialButton extends StatelessWidget {\r\n  const ShapeRawMaterialButton({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: [\r\n        RawMaterialButton(\r\n          elevation: 2,\r\n          shape: const CircleBorder(\r\n            side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n          ),\r\n          fillColor: Colors.green,\r\n          splashColor: Colors.orange,\r\n          textStyle: const TextStyle(color: Colors.white),\r\n          onLongPress: () => print(''onLongPress''),\r\n          child: const Icon(Icons.remove),\r\n          onPressed: () => print(''onPressed''),\r\n        ),\r\n        RawMaterialButton(\r\n          shape: const RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.all(Radius.circular(15))),\r\n          elevation: 0,\r\n          highlightElevation: 0,\r\n          fillColor: Colors.blue,\r\n          splashColor: Colors.orange,\r\n          textStyle: const TextStyle(color: Colors.white),\r\n          onLongPress: () => print(''onLongPress''),\r\n          child: const Text(''Push''),\r\n          onPressed: () => print(''onPressed''),\r\n        ),\r\n        RawMaterialButton(\r\n          elevation: 2,\r\n          shape: const CircleBorder(\r\n            side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n          ),\r\n          fillColor: Colors.red,\r\n          splashColor: Colors.orange,\r\n          textStyle: const TextStyle(color: Colors.white),\r\n          onLongPress: () => print(''onLongPress''),\r\n          child: const Icon(Icons.add),\r\n          onPressed: () => print(''onPressed''),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(360,49,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomRefreshIndicator extends StatefulWidget {\r\n  const CustomRefreshIndicator({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomRefreshIndicatorState createState() => _CustomRefreshIndicatorState();\r\n}\r\n\r\nclass _CustomRefreshIndicatorState extends State<CustomRefreshIndicator> {\r\n  int _count = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      width: 200,\r\n      child: RefreshIndicator(\r\n        onRefresh: _increment,\r\n        displacement: 20,\r\n        color: Colors.orange,\r\n        backgroundColor: Colors.white,\r\n        child: SingleChildScrollView(\r\n          child: Container(\r\n            alignment: Alignment.center,\r\n            width: 200,\r\n            height: 300,\r\n            color: Colors.blue,\r\n            child: Text(''$_count'',style: const TextStyle(color: Colors.white,fontSize: 40)),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _increment() async {\r\n    await Future.delayed(const Duration(seconds: 2));\r\n    setState(() {\r\n      _count++;\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(361,115,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomRelativePositionedTransition extends StatefulWidget {\r\n  const CustomRelativePositionedTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomRelativePositionedTransitionState createState() =>\r\n      _CustomRelativePositionedTransitionState();\r\n}\r\n\r\nclass _CustomRelativePositionedTransitionState\r\n    extends State<CustomRelativePositionedTransition>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _ctrl;\r\n  late Animation<Rect?> rectAnimation;\r\n\r\n  @override\r\n  void initState() {\r\n    _ctrl = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 2),\r\n    );\r\n    rectAnimation = RectTween(\r\n      begin: const Rect.fromLTRB(0, 0, 50, 50),\r\n      end: const Rect.fromLTRB(0, 0, 50, 50).translate(100, 50),\r\n    ).animate(_ctrl);\r\n    _ctrl.forward();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n        onTap: () => _ctrl.forward(from: 0),\r\n        child: Container(\r\n          color: Colors.grey.withAlpha(33),\r\n          width: 200,\r\n          height: 100,\r\n          child: Stack(\r\n            children: <Widget>[\r\n              RelativePositionedTransition(\r\n                size: const Size(200, 100),\r\n                rect: rectAnimation as Animation<Rect>,\r\n                child: const Icon(\r\n                  Icons.android,\r\n                  color: Colors.green,\r\n                  size: 50,\r\n                ),\r\n              )\r\n            ],\r\n          ),\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(362,289,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass RenderObjectToWidgetAdapterDemo extends StatelessWidget {\r\n  const RenderObjectToWidgetAdapterDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''该组件并没有什么太大的使用价值，但却非常有纪念意义。它是 Flutter 框架中最顶层的 Widget，它的 child 是 runApp 传入的组件，在 attachRootWidget 方法中被实例化。''\r\n      ''它持有根渲染对象 RenderView ，负责创建根元素 RenderObjectToWidgetElement，是一个无名英雄，一个深藏功与名的组件。'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(363,177,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomReorderableListView extends StatefulWidget {\r\n  const CustomReorderableListView({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomReorderableListViewState createState() => _CustomReorderableListViewState();\r\n}\r\n\r\nclass _CustomReorderableListViewState extends State<CustomReorderableListView> {\r\n\r\nfinal List<Color> data = [\r\n    Colors.yellow[50]!,\r\n    Colors.yellow[100]!,\r\n    Colors.yellow[200]!,\r\n    Colors.yellow[300]!,\r\n    Colors.yellow[400]!,\r\n    Colors.yellow[500]!,\r\n    Colors.yellow[600]!,\r\n    Colors.yellow[700]!,\r\n    Colors.yellow[800]!,\r\n    Colors.yellow[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 250,\r\n      child: ReorderableListView(\r\n        padding: const EdgeInsets.all(10),\r\n        header: Container(\r\n          color: Colors.blue,\r\n          alignment: Alignment.center,\r\n            height: 50,\r\n            child: const Text(''长按拖拽进行换位'',style: TextStyle(color: Colors.white),)),\r\n        onReorder: _handleReorder,\r\n        children: data.map((color) => _buildItem(color)).toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _handleReorder(int oldIndex, int newIndex) {\r\n    if (oldIndex < newIndex) {\r\n      newIndex -= 1;\r\n    }\r\n\r\n    setState(() {\r\n      final element = data.removeAt(oldIndex);\r\n      data.insert(newIndex, element);\r\n    });\r\n\r\n  }\r\n\r\n  Widget _buildItem(Color color) {\r\n    return Container(\r\n      key: ValueKey(color)  ,\r\n      alignment: Alignment.center,\r\n      height: 50,\r\n      color: color,\r\n      child: Text(\r\n        colorString(color),\r\n        style: const TextStyle(color: Colors.white, shadows: [\r\n          Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\n        ]),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(364,177,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DirectionReorderableListView extends StatefulWidget {\r\n  const DirectionReorderableListView({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DirectionReorderableListViewState createState() =>\r\n      _DirectionReorderableListViewState();\r\n}\r\n\r\nclass _DirectionReorderableListViewState extends State<DirectionReorderableListView> {\r\n  final List<Color> data = [\r\n    Colors.yellow[50]!,\r\n    Colors.yellow[100]!,\r\n    Colors.yellow[200]!,\r\n    Colors.yellow[300]!,\r\n    Colors.yellow[400]!,\r\n    Colors.yellow[500]!,\r\n    Colors.yellow[600]!,\r\n    Colors.yellow[700]!,\r\n    Colors.yellow[800]!,\r\n    Colors.yellow[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: ReorderableListView(\r\n        scrollDirection: Axis.horizontal,\r\n        reverse: false,\r\n        onReorder: _handleReorder,\r\n        children: data.map((color) => _buildItem(color)).toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _handleReorder(int oldIndex, int newIndex) {\r\n    if (oldIndex < newIndex) {\r\n      newIndex -= 1;\r\n    }\r\n\r\n    setState(() {\r\n      final element = data.removeAt(oldIndex);\r\n      data.insert(newIndex, element);\r\n    });\r\n\r\n  }\r\n\r\n  Widget _buildItem(Color color) {\r\n    return Container(\r\n      key: ValueKey(color)  ,\r\n      alignment: Alignment.center,\r\n      width: 80,\r\n      color: color,\r\n      child: Text(\r\n        colorString(color),\r\n        style: const TextStyle(color: Colors.white, shadows: [\r\n          Shadow(\r\n            color: Colors.black,\r\n            offset: Offset(.5, .5),\r\n            blurRadius: 2,\r\n          )\r\n        ]),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(365,264,0,replace(replace('import ''dart:ui'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass RepaintBoundaryDemo extends StatelessWidget{\r\n  const RepaintBoundaryDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const RepaintBoundary(\r\n      child: TempPlayBezier3Page(),\r\n    );\r\n  }\r\n}\r\n\r\nclass TempPlayBezier3Page extends StatefulWidget {\r\n  const TempPlayBezier3Page({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _TempPlayBezier3PageState createState() => _TempPlayBezier3PageState();\r\n}\r\n\r\nclass _TempPlayBezier3PageState extends State<TempPlayBezier3Page> {\r\n  List<Offset> _pos = <Offset>[];\r\n  int? selectPos;\r\n\r\n  @override\r\n  void initState() {\r\n    _initPoints();\r\n    super.initState();\r\n  }\r\n\r\n  void _initPoints() {\r\n    _pos = [];\r\n    _pos.add(const Offset(0, 0));\r\n    _pos.add(const Offset(60, -60));\r\n    _pos.add(const Offset(-90, -90));\r\n    _pos.add(const Offset(-120, -40));\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      width: MediaQuery.of(context).size.width,\r\n      child: CustomPaint(\r\n        painter: TempBezierPainter(pos: _pos, selectPos: selectPos),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass TempBezierPainter extends CustomPainter {\r\n  late Paint _gridPaint;\r\n  late Path _gridPath;\r\n\r\n  late Paint _mainPaint;\r\n  late Path _mainPath;\r\n  int? selectPos;\r\n  late Paint _helpPaint;\r\n\r\n  List<Offset> pos;\r\n\r\n  TempBezierPainter({this.pos=const [], this.selectPos}) {\r\n    _gridPaint = Paint()..style = PaintingStyle.stroke;\r\n    _gridPath = Path();\r\n\r\n    _mainPaint = Paint()\r\n      ..color = Colors.orange\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeWidth = 2;\r\n    _mainPath = Path();\r\n\r\n    _helpPaint = Paint()\r\n      ..color = Colors.purple\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeWidth = 2\r\n      ..strokeCap = StrokeCap.round;\r\n  }\r\n\r\n  @override\r\n  void paint(Canvas canvas, Size size) {\r\n    print(''----------Paint-------'');\r\n    canvas.clipRect(Offset.zero & size);\r\n    canvas.translate(size.width / 2, size.height / 2);\r\n    _drawGrid(canvas, size); //绘制格线\r\n    _drawAxis(canvas, size); //绘制轴线\r\n\r\n    _mainPath.moveTo(pos[0].dx, pos[0].dy);\r\n    _mainPath.cubicTo(\r\n        pos[1].dx, pos[1].dy, pos[2].dx, pos[2].dy, pos[3].dx, pos[3].dy);\r\n    canvas.drawPath(_mainPath, _mainPaint);\r\n    _drawHelp(canvas);\r\n    _drawSelectPos(canvas);\r\n  }\r\n\r\n  @override\r\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\r\n\r\n  void _drawGrid(Canvas canvas, Size size) {\r\n    _gridPaint\r\n      ..color = Colors.grey\r\n      ..strokeWidth = 0.5;\r\n    _gridPath = _buildGridPath(_gridPath, size);\r\n    canvas.drawPath(_buildGridPath(_gridPath, size), _gridPaint);\r\n\r\n    canvas.save();\r\n    canvas.scale(1, -1); //沿x轴镜像\r\n    canvas.drawPath(_gridPath, _gridPaint);\r\n    canvas.restore();\r\n\r\n    canvas.save();\r\n    canvas.scale(-1, 1); //沿y轴镜像\r\n    canvas.drawPath(_gridPath, _gridPaint);\r\n    canvas.restore();\r\n\r\n    canvas.save();\r\n    canvas.scale(-1, -1); //沿原点镜像\r\n    canvas.drawPath(_gridPath, _gridPaint);\r\n    canvas.restore();\r\n  }\r\n\r\n  void _drawAxis(Canvas canvas, Size size) {\r\n    canvas.drawPoints(\r\n        PointMode.lines,\r\n        [\r\n          Offset(-size.width / 2, 0),\r\n          Offset(size.width / 2, 0),\r\n          Offset(0, -size.height / 2),\r\n          Offset(0, size.height / 2),\r\n          Offset(0, size.height / 2),\r\n          Offset(0 - 7.0, size.height / 2 - 10),\r\n          Offset(0, size.height / 2),\r\n          Offset(0 + 7.0, size.height / 2 - 10),\r\n          Offset(size.width / 2, 0),\r\n          Offset(size.width / 2 - 10, 7),\r\n          Offset(size.width / 2, 0),\r\n          Offset(size.width / 2 - 10, -7),\r\n        ],\r\n        _gridPaint\r\n          ..color = Colors.blue\r\n          ..strokeWidth = 1.5);\r\n  }\r\n\r\n  Path _buildGridPath(Path path, Size size, {step = 20.0}) {\r\n    for (int i = 0; i < size.height / 2 / step; i++) {\r\n      path.moveTo(0, step * i);\r\n      path.relativeLineTo(size.width / 2, 0);\r\n    }\r\n    for (int i = 0; i < size.width / 2 / step; i++) {\r\n      path.moveTo(step * i, 0);\r\n      path.relativeLineTo(\r\n        0,\r\n        size.height / 2,\r\n      );\r\n    }\r\n    return path;\r\n  }\r\n\r\n  void _drawHelp(Canvas canvas) {\r\n    canvas.drawPoints(PointMode.lines, pos, _helpPaint..strokeWidth = 1);\r\n    canvas.drawPoints(PointMode.points, pos, _helpPaint..strokeWidth = 8);\r\n  }\r\n\r\n  void _drawSelectPos(Canvas canvas) {\r\n    if (selectPos == null) return;\r\n    canvas.drawCircle(\r\n        pos[selectPos!],\r\n        10,\r\n        _helpPaint\r\n          ..color = Colors.green\r\n          ..strokeWidth = 2);\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(366,264,0,replace(replace('import ''dart:typed_data'';\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:flutter/rendering.dart'';\r\nimport ''dart:ui'' as ui;\r\nimport ''node1_base.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass RepaintBoundarySave extends StatefulWidget {\r\n  const RepaintBoundarySave({super.key});\r\n\r\n  @override\r\n  State<RepaintBoundarySave> createState() => _RepaintBoundarySaveState();\r\n}\r\n\r\nclass _RepaintBoundarySaveState extends State<RepaintBoundarySave> {\r\n  final GlobalKey _globalKey = GlobalKey();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Stack(\r\n      children: [\r\n        RepaintBoundary(\r\n          key: _globalKey,\r\n          child: const TempPlayBezier3Page(),\r\n        ),\r\n        Positioned(right: -10, child: _buildButton3(context))\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildButton3(context) => MaterialButton(\r\n      child: const Icon(\r\n        Icons.save_alt,\r\n        size: 15,\r\n        color: Colors.white,\r\n      ),\r\n      color: Colors.green,\r\n      shape: const CircleBorder(\r\n        side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n      ),\r\n      onPressed: () async {\r\n        // Uint8List? bits = await _widget2Image(_globalKey);\r\n        // Directory dir = await getApplicationSupportDirectory();\r\n        // File file = File(dir.path + "/save_img.png");\r\n        // if(bits==null) return;\r\n        // var f = await file.writeAsBytes(bits);\r\n        // ScaffoldMessenger.of(context).showSnackBar(SnackBar(\r\n        //   backgroundColor: Theme.of(context).primaryColor,\r\n        //   content: Text(''保存成功后! 路径为:${f.path}''),\r\n        // ));\r\n      });\r\n\r\n  Future<Uint8List?> _widget2Image(GlobalKey key) async {\r\n    RenderObject? boundary = key.currentContext?.findRenderObject();\r\n    if (boundary == null || boundary is! RenderRepaintBoundary) return null;\r\n\r\n    //获得 ui.image\r\n    ui.Image img = await boundary.toImage();\r\n    //获取图片字节\r\n    var byteData = await img.toByteData(format: ui.ImageByteFormat.png);\r\n    Uint8List? bits = byteData?.buffer.asUint8List();\r\n    return bits;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(367,101,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nimport ''../../utils/color_utils.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomRichText extends StatelessWidget {\r\n  const CustomRichText({Key? key}) : super(key: key);\r\n\r\n  final str = "        发光强度简称光强，国际单位是（坎德拉）简写cd。"\r\n      "1cd是指光源在指定方向的单位立体角内发出的光通量。"\r\n      "光源辐射是均匀时，则光强为I=F/Ω，Ω为立体角，单位为球面度（sr）,F为光通量，"\r\n      "单位是流明，对于点光源由I=F/4π 。光亮度是表示发光面明亮程度的，"\r\n      "指发光表面在指定方向的发光强度与垂直且指定方向的发光面的面积之比，"\r\n      "单位是坎德拉/平方米。对于一个漫散射面，尽管各个方向的光强和光通量不同，"\r\n      "但各个方向的亮度都是相等的。电视机的荧光屏就是近似于这样的漫散射面，"\r\n      "所以从各个方向上观看图像，都有相同的亮度感。";\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: const EdgeInsets.only(\r\n        left: 10.0,\r\n        right: 10,\r\n      ),\r\n      child: RichText(\r\n          text: TextSpan(\r\n              children: str\r\n                  .split("")\r\n                  .map((str) => TextSpan(\r\n                      text: str,\r\n                      style: TextStyle(\r\n                          fontSize: 14, color: ColorUtils.randomColor())))\r\n                  .toList())),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(368,101,0,replace(replace('import ''package:flutter/material.dart'';\r\012/// create by 张风捷特烈 on 2020-03-30\r\012/// contact me by email 1981462002@qq.com\r\012\r\012class RichTextWithWidget extends StatelessWidget {\r\012  const RichTextWithWidget({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return RichText(\r\012      text: TextSpan(\r\012        text: ''hello '',\r\012        style: const TextStyle(color: Colors.black, fontSize: 18),\r\012        children: <InlineSpan>[\r\012          WidgetSpan(\r\012              child: Image.asset(\r\012                ''assets/images/icon_head.webp'',\r\012                width: 30,\r\012              ),\r\012              alignment: PlaceholderAlignment.baseline,\r\012              baseline: TextBaseline.ideographic),\r\012          const TextSpan(\r\012            text: '' , welcome to '',\r\012            style: TextStyle(color: Colors.blue, fontSize: 18),\r\012          ),\r\012          const WidgetSpan(\r\012              child: FlutterLogo(),\r\012              alignment: PlaceholderAlignment.baseline,\r\012              baseline: TextBaseline.ideographic),\r\012          const TextSpan(\r\012            text: '' .\n'',\r\012          ),\r\012          const TextSpan(\r\012            text: ''focus me on '',\r\012            style: TextStyle(color: Colors.orange, fontSize: 16),\r\012          ),\r\012          const TextSpan(\r\012            text: ''https://github.com/toly1994328'',\r\012            style: TextStyle(\r\012                color: Colors.blue,\r\012                fontSize: 18,\r\012                decoration: TextDecoration.underline),\r\012          ),\r\012          const TextSpan(\r\012            text: '' .\n'',\r\012          ),\r\012        ],\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(369,72,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomRotatedBox extends StatefulWidget {\r\n  const CustomRotatedBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomRotatedBoxState createState() => _CustomRotatedBoxState();\r\n}\r\n\r\nclass _CustomRotatedBoxState extends State<CustomRotatedBox> {\r\n  int _quarterTurns = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return RotatedBox(\r\n      quarterTurns: _quarterTurns,\r\n      child: GestureDetector(\r\n          onTap: () => setState(() => _quarterTurns++),\r\n          child: const Icon(\r\n            Icons.android,\r\n            size: 60,\r\n            color: Colors.blue,\r\n          )),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(370,90,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomRotationTransition extends StatefulWidget {\r\n  const CustomRotationTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomRotationTransitionState createState() => _CustomRotationTransitionState();\r\n}\r\n\r\nclass _CustomRotationTransitionState extends State<CustomRotationTransition> with SingleTickerProviderStateMixin{\r\n\r\n  late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _ctrl = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 2),\r\n    );\r\n    _ctrl.forward();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: () => _ctrl.forward(from: 0),\r\n      child: Container(\r\n        color: Colors.grey.withAlpha(22),\r\n        width: 100,\r\n        height: 100,\r\n        child: RotationTransition(\r\n          turns: CurvedAnimation(\r\n            parent: _ctrl,\r\n            curve: Curves.linear,\r\n          ),\r\n          child: const Icon(\r\n            Icons.camera_outlined,\r\n            color: Colors.green,\r\n            size: 60,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(371,95,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomRow extends StatelessWidget {\r\n  const CustomRow({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n        height: 70,\r\n        color: const Color(0x4484FFFF),\r\n        child: Row(\r\n          children: const [\r\n            Padding(\r\n              child: Icon(\r\n                Icons.add_location,\r\n                size: 30,\r\n                color: Colors.pink,\r\n              ),\r\n              padding: EdgeInsets.only(left: 25, right: 20),\r\n            ),\r\n            Expanded(\r\n              child: Text(\r\n                "附近",\r\n                style: TextStyle(fontSize: 18),\r\n              ),\r\n            ),\r\n            Padding(\r\n              child: Icon(Icons.keyboard_arrow_right, color: Colors.black38),\r\n              padding: EdgeInsets.only(right: 25),\r\n            ),\r\n          ],\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(372,207,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass SafeAreaDemo extends StatelessWidget {\r\n  const SafeAreaDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      padding: const EdgeInsets.all(10),\r\n      child: ElevatedButton(\r\n        onPressed: () {\r\n          Navigator.push(\r\n            context,\r\n            MaterialPageRoute(builder: (context) => const SafeAreaPage()),\r\n          );\r\n        },\r\n        child: const Text("进入 SafeArea 测试页"),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass SafeAreaPage extends StatefulWidget {\r\n  const SafeAreaPage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SafeAreaPageState createState() => _SafeAreaPageState();\r\n}\r\n\r\nclass _SafeAreaPageState extends State<SafeAreaPage> {\r\n  bool _top = true;\r\n  bool _left = true;\r\n  bool _right = true;\r\n  bool _bottom = true;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      top: _top,\r\n      left: _left,\r\n      right: _right,\r\n      bottom: _bottom,\r\n      child: Scaffold(\r\n        appBar: AppBar(\r\n          title: const Text(\r\n            ''SafeArea 测试'',\r\n          ),\r\n        ),\r\n        body: Column(\r\n          children: [\r\n            ..._buildSlider(),\r\n            Expanded(\r\n              child: ListView.separated(\r\n                itemCount: 20,\r\n                separatorBuilder: (_, __) => const Divider(\r\n                  height: 1,\r\n                ),\r\n                itemBuilder: (_, index) => Container(\r\n                  color: Colors.blue,\r\n                  // padding: EdgeInsets.only(left: 20),\r\n                  alignment: Alignment.center,\r\n                  height: 50,\r\n                  child: Text(\r\n                    "第$index个",\r\n                    style: const TextStyle(fontSize: 24, color: Colors.white),\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  List<Widget> _buildSlider()=>[Row(\r\n    children: [\r\n      Switch(\r\n        value: _top,\r\n        onChanged: (v) => setState(() => _top = v),\r\n      ),\r\n      Text("top: $_top")\r\n    ],\r\n  ),\r\n    Row(\r\n      children: [\r\n        Switch(\r\n          value: _left,\r\n          onChanged: (v) => setState(() => _left = v),\r\n        ),\r\n        Text("left: $_left")\r\n      ],\r\n    ),\r\n    Row(\r\n      children: [\r\n        Switch(\r\n          value: _right,\r\n          onChanged: (v) => setState(() => _right = v),\r\n        ),\r\n        Text("right: $_right")\r\n      ],\r\n    ),\r\n    Row(\r\n      children: [\r\n        Switch(\r\n          value: _bottom,\r\n          onChanged: (v) => setState(() => _bottom = v),\r\n        ),\r\n        Text("bottom: $_bottom")\r\n      ],\r\n    ),];\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(373,64,0,replace(replace('import ''package:flutter/material.dart'';\r\nimport ''../PopupMenuButton/node1_base.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomScaffold extends StatefulWidget {\r\n  const CustomScaffold({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<StatefulWidget> createState() => _CustomScaffoldState();\r\n}\r\n\r\n// AppBar 默认的实例,有状态\r\nclass _CustomScaffoldState extends State with SingleTickerProviderStateMixin {\r\n  final List<String> tabs = const [''风画庭'', ''雨韵舍'', ''雷鸣殿'', ''电疾堂'', ''霜寒阁'', ''雪月楼''];\r\n  int _position = 0;\r\n  final Map<String,IconData> iconsMap = {\r\n    "图鉴": Icons.home,\r\n    "动态": Icons.toys,\r\n    "喜欢": Icons.favorite,\r\n    "手册": Icons.class_,\r\n    "我的": Icons.account_circle,\r\n  };\r\n  final List<Color> _colors = [\r\n    Colors.blue,\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.green,\r\n    Colors.purple,\r\n  ];\r\n\r\n  late TabController _tabController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _tabController = TabController(vsync: this, length: tabs.length);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _tabController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: MediaQuery.of(context).size.width,\r\n      height: MediaQuery.of(context).size.height - 300,\r\n      child: Scaffold(\r\n        floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,\r\n        floatingActionButton: FloatingActionButton(\r\n          child: const Icon(Icons.add),\r\n          onPressed: () {},\r\n        ),\r\n        drawer: _buildLeftDrawer(),\r\n        endDrawer: _buildLeftDrawer(),\r\n        appBar: AppBar(\r\n          title: const Text(''风雅六社''),\r\n          backgroundColor: Colors.blue,\r\n          centerTitle: true,\r\n          actions: const [Icon(Icons.star), CustomPopupMenuButton()],\r\n          bottom: _buildTabBar(),\r\n        ),\r\n        body: _buildTableBarView(),\r\n        bottomNavigationBar: _buildBottomNavigationBar(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Drawer _buildLeftDrawer() => Drawer(\r\n        elevation: 1,\r\n        child: Image.asset(\r\n          ''assets/images/sabar.webp'',\r\n          fit: BoxFit.cover,\r\n        ),\r\n      );\r\n\r\n  PreferredSizeWidget _buildTabBar() => TabBar(\r\n        isScrollable: true,\r\n        controller: _tabController,\r\n        indicatorColor: Colors.orangeAccent,\r\n        tabs: tabs.map((e) => Tab(text: e)).toList(),\r\n      );\r\n\r\n  Widget _buildBottomNavigationBar() => BottomNavigationBar(\r\n        onTap: (position) => setState(() => _position = position),\r\n        currentIndex: _position,\r\n        elevation: 1,\r\n        backgroundColor: Colors.white,\r\n        iconSize: 25,\r\n        selectedLabelStyle: const TextStyle(fontWeight: FontWeight.bold),\r\n        showUnselectedLabels: false,\r\n        showSelectedLabels: true,\r\n        items: iconsMap.keys\r\n            .map((key) => BottomNavigationBarItem(\r\n                label: key,\r\n                icon: Icon(iconsMap[key]),\r\n                backgroundColor: _colors[_position]))\r\n            .toList(),\r\n      );\r\n\r\n  Widget _buildTableBarView() => TabBarView(\r\n      controller: _tabController,\r\n      children: tabs\r\n          .map((e) => Center(\r\n                  child: Text(\r\n                e,\r\n                style: const TextStyle(color: Colors.blue, fontSize: 20),\r\n              )))\r\n          .toList());\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(374,91,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomScaleTransition extends StatefulWidget {\r\n  const CustomScaleTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomScaleTransitionState createState() => _CustomScaleTransitionState();\r\n}\r\n\r\nclass _CustomScaleTransitionState extends State<CustomScaleTransition>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    _ctrl = AnimationController(vsync: this, duration: const Duration(seconds: 2));\r\n    _ctrl.forward();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n        onTap: () => _ctrl.forward(from: 0),\r\n        child: Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 100,\r\n          height: 100,\r\n          child: ScaleTransition(\r\n            scale: CurvedAnimation(parent: _ctrl, curve: Curves.linear),\r\n            child: const Icon(Icons.android, color: Colors.green, size: 60),\r\n          ),\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(375,253,0,replace(replace('import ''package:flutter/gestures.dart'';\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:flutter/rendering.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/8/2\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ScrollableDemo extends StatelessWidget {\r\n  const ScrollableDemo({super.key});\r\n\r\n  List<Color> get data => List.generate(32, (i) => Color(0xFF6600FF - 2 * i));\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 250,\r\n      child: Scrollable(\r\n        axisDirection: AxisDirection.down,\r\n        physics: const BouncingScrollPhysics(),\r\n        dragStartBehavior: DragStartBehavior.start,\r\n        viewportBuilder: (ctx, position) => Viewport(\r\n          cacheExtent: 200,\r\n          cacheExtentStyle: CacheExtentStyle.pixel,\r\n          offset: position,\r\n          slivers: <Widget>[_buildSliverList()],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverList(\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n              margin: const EdgeInsets.only(top: 1),\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(\r\n                      color: Colors.white,\r\n                      shadows: [\r\n                        Shadow(\r\n                            color: Colors.black,\r\n                            offset: Offset(.5, .5),\r\n                            blurRadius: 2)\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(376,194,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomScrollbar extends StatelessWidget {\r\n  const CustomScrollbar({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: Scrollbar(\r\n        child: ListView(\r\n          padding: const EdgeInsets.symmetric(horizontal: 5),\r\n          children: data\r\n              .map((color) => Container(\r\n                    alignment: Alignment.center,\r\n                    width: 100,\r\n                    height: 50,\r\n                    color: color,\r\n                    child: Text(\r\n                      colorString(color),\r\n                      style: const TextStyle(\r\n                        color: Colors.white,\r\n                        shadows: [\r\n                          Shadow(\r\n                              color: Colors.black,\r\n                              offset: Offset(.5, .5),\r\n                              blurRadius: 2)\r\n                        ],\r\n                      ),\r\n                    ),\r\n              ))\r\n              .toList(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(377,180,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomScrollConfiguration extends StatelessWidget {\r\n  const CustomScrollConfiguration({super.key});\r\n\r\n   List<Color> get data => [\r\n    Colors.cyan[50]!,\r\n    Colors.cyan[100]!,\r\n    Colors.cyan[200]!,\r\n    Colors.cyan[300]!,\r\n    Colors.cyan[400]!,\r\n    Colors.cyan[500]!,\r\n    Colors.cyan[600]!,\r\n    Colors.cyan[700]!,\r\n    Colors.cyan[800]!,\r\n    Colors.cyan[900]!,\r\n  ];\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: ScrollConfiguration(\r\n          behavior: NoScrollBehavior(), child: _buildListView()),\r\n    );\r\n  }\r\n\r\n  Widget _buildListView() => ListView(\r\n        padding: const EdgeInsets.symmetric(horizontal: 5),\r\n        children: data\r\n            .map((color) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 50,\r\n                  color: color,\r\n                  child: Text(\r\n                    colorString(color),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ))\r\n            .toList(),\r\n      );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n\r\nclass NoScrollBehavior extends ScrollBehavior {\r\n  @override\r\n  Widget buildViewportChrome(\r\n          BuildContext context, Widget child, AxisDirection axisDirection) =>\r\n      child;\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(378,349,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ScrollViewDemo extends StatelessWidget {\r\n  const ScrollViewDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: MyScrollView(),\r\n    );\r\n  }\r\n}\r\n\r\nclass MyScrollView extends ScrollView {\r\n  MyScrollView({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''ScrollView 其内部依靠 Viewport + Scrollable 实现滑动。它只有一个 buildSlivers 的抽象方法，返回 Sliver 家族 Widget 列表，''\r\n      ''其子类最简单的是 CustomScrollView，将 slivers 交由用户传递，自身打个酱油。''\r\n      ''ListView 和 GridView 在底层源码中也是使用 Sliver 家族相关组件实现的。'';\r\n\r\n  final List<Color> data = [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  List<Widget> buildSlivers(BuildContext context) {\r\n    return [\r\n      _buildSliverAppBar(),\r\n      SliverToBoxAdapter(\r\n        child: Container(\r\n          color: Colors.blue.withOpacity(0.1),\r\n          padding: const EdgeInsets.all(10),\r\n          margin: const EdgeInsets.all(10),\r\n          child: Text(info),\r\n        ),\r\n      ),\r\n      _buildSliverFixedExtentList()\r\n    ];\r\n  }\r\n\r\n  _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: Container(\r\n          margin: const EdgeInsets.all(10),\r\n          child: Image.asset(''assets/images/icon_head.webp'')),\r\n      flexibleSpace: FlexibleSpaceBar(//伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        title: const Text(\r\n          ''张风捷特烈'',\r\n          style: TextStyle(color: Colors.black, //标题\r\n              shadows: [\r\n                Shadow(color: Colors.blue, offset: Offset(1, 1), blurRadius: 2)\r\n              ]),\r\n        ),\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverFixedExtentList() => SliverFixedExtentList(\r\n        itemExtent: 60,\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 50,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(379,53,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSelectableText extends StatelessWidget {\r\n  const CustomSelectableText({Key? key}) : super(key: key);\r\n\r\n  final String text = "        始臣之解牛之时，所见无非牛者。三年之后，未尝见全牛也。方今之时，"\r\n      "臣以神遇而不以目视，官知止而神欲行。依乎天理，批大郤，导大窾，因其固然，"\r\n      "技经肯綮之未尝，而况大軱乎！良庖岁更刀，割也；族庖月更刀，折也。"\r\n      "今臣之刀十九年矣，所解数千牛矣，而刀刃若新发于硎。彼节者有间，而刀刃者无厚；"\r\n      "以无厚入有间，恢恢乎其于游刃必有余地矣，是以十九年而刀刃若新发于硎。"\r\n      "虽然，每至于族，吾见其难为，怵然为戒，视为止，行为迟。动刀甚微，謋然已解，如土委地。"\r\n      "提刀而立，为之四顾，为之踌躇满志，善刀而藏之.";\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SelectableText(\r\n      text,\r\n      style: const TextStyle(fontSize: 18, color: Colors.orange),\r\n      cursorColor: Colors.green,\r\n      cursorRadius: const Radius.circular(3),\r\n      cursorWidth: 5,\r\n      showCursor: true,\r\n      autofocus: false,\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(380,53,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass AlignSelectableText extends StatefulWidget {\r\n  const AlignSelectableText({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _AlignSelectableTextState createState() => _AlignSelectableTextState();\r\n}\r\n\r\nclass _AlignSelectableTextState extends State<AlignSelectableText> {\r\n  final String text =\r\n      "The [SelectableText] widget displays a string of text with a single style."\r\n      "The string might break across multiple lines or might all be displayed on"\r\n      "the same line depending on the layout constraints.";\r\n  TextAlign _textAlign = TextAlign.left;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSelector(),\r\n        SelectableText(\r\n          text,\r\n          style: const TextStyle(fontSize: 18, color: Colors.red),\r\n          cursorColor: Colors.green,\r\n          cursorRadius: const Radius.circular(3),\r\n          cursorWidth: 5,\r\n          showCursor: true,\r\n          textAlign: _textAlign,\r\n          textDirection: TextDirection.ltr,\r\n          autofocus: false,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSelector() {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n      children: <Widget>[\r\n        const Text(\r\n          "textAlign属性选择:",\r\n          style: TextStyle(\r\n            fontSize: 16,\r\n            color: Colors.blue,\r\n            fontWeight: FontWeight.bold,\r\n          ),\r\n        ),\r\n        DropdownButton<TextAlign>(\r\n            underline: Container(),\r\n            value: _textAlign,\r\n            items: TextAlign.values\r\n                .map((e) => DropdownMenuItem<TextAlign>(\r\n                      value: e,\r\n                      child: Text(e.toString()),\r\n                    ))\r\n                .toList(),\r\n            onChanged: (e) {\r\n              setState(() {\r\n                _textAlign = e??_textAlign;\r\n              });\r\n            }),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(381,277,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-12\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass RadialShaderMask extends StatelessWidget {\r\n  const RadialShaderMask({Key? key}) : super(key: key);\r\n\r\n  final List<Color> colors = const [Colors.red, Colors.yellow, Colors.blue];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: <Widget>[\r\n        ShaderMask(\r\n          shaderCallback: _buildShader,\r\n          child: Image.asset(\r\n            ''assets/images/icon_head.webp'',\r\n            height: 70,\r\n            width: 70,\r\n          ),\r\n        ),\r\n        ShaderMask(\r\n          shaderCallback: _buildShader,\r\n          child: const Text(\r\n            ''张风捷特烈'',\r\n            style: TextStyle(fontSize: 40, color: Colors.white),\r\n          ),\r\n        ),\r\n        ShaderMask(\r\n          shaderCallback: _buildShader,\r\n          child: Container(\r\n            height: 100,\r\n            color: Colors.white,\r\n            width: 50,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n\r\n  Shader _buildShader(Rect bounds) => RadialGradient(\r\n      center: Alignment.topLeft,\r\n      radius: 1.0,\r\n      tileMode: TileMode.mirror,\r\n      colors: colors)\r\n      .createShader(bounds);\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(382,277,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-12\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass LinearShaderMask extends StatelessWidget {\r\n  const LinearShaderMask({Key? key}) : super(key: key);\r\n\r\n  final List<Color> colors = const [Colors.red, Colors.yellow, Colors.blue];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      crossAxisAlignment: WrapCrossAlignment.center,\r\n      children: <Widget>[\r\n        ShaderMask(\r\n          shaderCallback: _buildShader,\r\n          child: Image.asset(\r\n            ''assets/images/icon_head.webp'',\r\n            height: 70,\r\n            width: 70,\r\n          ),\r\n        ),\r\n        ShaderMask(\r\n          shaderCallback: _buildShader,\r\n          child: const Text(\r\n            ''张风捷特烈'',\r\n            style: TextStyle(fontSize: 40, color: Colors.white),\r\n          ),\r\n        ),\r\n        ShaderMask(\r\n          shaderCallback: _buildShader,\r\n          child: Container(\r\n            height: 100,\r\n            color: Colors.white,\r\n            width: 50,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Shader _buildShader(Rect bounds) => LinearGradient(\r\n      begin: Alignment.centerLeft,\r\n      end: Alignment.centerRight,\r\n      tileMode: TileMode.mirror,\r\n      colors: colors)\r\n      .createShader(bounds);\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(383,343,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ShrinkWrappingViewportDemo extends StatelessWidget {\r\n\r\n  const ShrinkWrappingViewportDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''ShrinkWrappingViewport 在源码中只有一处使用：''\r\n      ''在 ScrollView 中如果 shrinkWrap 为 true，会使用 ShrinkWrappingViewport，该属性在其子类 ListView、GridView、CustomScrollView 中可指定。''\r\n      ''如果 shrinkWrap 为 false，视口会使用 Viewport，此时，视图区域将会沿滑动方向尽可能延伸。在无边界约束的情况下，shrinkWrap 需要是 true。''\r\n      ''另外 ShrinkWrappingViewport 使用比较昂贵，因为滑动时需要重新计算滑动视图的尺寸。'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(384,128,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-24\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSimpleDialog extends StatelessWidget {\r\n  const CustomSimpleDialog({Key? key}) : super(key: key);\r\n\r\n  final List<String> info = const [\r\n    ''性别:    男     未婚'',\r\n    ''微信:    zdl1994328'',\r\n    "掘金:    张风捷特烈",\r\n    "github:    toly1994328",\r\n    "邮箱:    1981462008@qq.com",\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Stack(\r\n      children: <Widget>[\r\n        _buildSimpleDialog(context),\r\n        Positioned(\r\n            top: 70,\r\n            right: 30,\r\n            child: _buildRaisedButton(context)),\r\n\r\n      ],\r\n    );\r\n  }\r\n  Widget _buildRaisedButton(BuildContext context) => ElevatedButton(\r\n    style: TextButton.styleFrom(\r\n      backgroundColor: Colors.blue,\r\n      shape: const RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.all(Radius.circular(10)),\r\n      ),\r\n    ),\r\n    onPressed: () {\r\n      showDialog(context: context, builder: (ctx) => _buildSimpleDialog(ctx));\r\n    },\r\n    child: const Text(\r\n          ''Just Show It'',\r\n          style: TextStyle(color: Colors.white),\r\n        ),\r\n  );\r\n\r\n  SimpleDialog _buildSimpleDialog(BuildContext context) {\r\n    return SimpleDialog(\r\n      title: _buildTitle(),\r\n      titlePadding: const EdgeInsets.only(\r\n        top: 5,\r\n        left: 20,\r\n      ),\r\n      contentPadding: const EdgeInsets.symmetric(horizontal: 5),\r\n      children: _buildChild(context),\r\n      backgroundColor: Colors.white,\r\n      elevation: 4,\r\n      shape: const RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.all(Radius.circular(10))),\r\n    );\r\n  }\r\n\r\n  List<Column> _buildChild(BuildContext context) {\r\n    return info\r\n        .map((str) => Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: <Widget>[\r\n                SimpleDialogOption(\r\n                  onPressed: () => print(str),\r\n                  child: SizedBox(\r\n                    width: double.infinity,\r\n                    child: Text(\r\n                      str,\r\n                      style: const TextStyle(\r\n                          color: Color(0xff999999), fontSize: 16),\r\n                    ),\r\n                  ),\r\n                ),\r\n                Divider(\r\n                  indent: 20,\r\n                  height: 12,\r\n                  color: info.indexOf(str) == info.length - 1\r\n                      ? Colors.transparent\r\n                      : Theme.of(context).dividerColor,\r\n                )\r\n              ],\r\n            ))\r\n        .toList();\r\n  }\r\n\r\n  Widget _buildTitle() {\r\n    return Row(//标题\r\n      children: <Widget>[\r\n        Image.asset(\r\n          "assets/images/icon_head.webp",\r\n          width: 30,\r\n          height: 30,\r\n        ),\r\n        const SizedBox(\r\n          width: 10,\r\n        ),\r\n        const Expanded(\r\n            child: Text(\r\n          "张风捷特烈",\r\n          style: TextStyle(fontSize: 18),\r\n        )),\r\n        const CloseButton()\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(385,133,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSimpleDialogOption extends StatelessWidget {\r\n  const CustomSimpleDialogOption({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n          alignment: Alignment.center,\r\n          width: double.infinity,\r\n          height: 50,\r\n          margin: const EdgeInsets.all(5),\r\n          color: Colors.grey.withAlpha(33),\r\n          child: SimpleDialogOption(\r\n              onPressed: () => Navigator.of(context).pushNamed(''AboutMePage''),\r\n              child: const Text(''张风捷特烈'')),\r\n        ),\r\n        Container(\r\n          height: 50,\r\n          alignment: Alignment.center,\r\n          width: double.infinity,\r\n          color: Colors.grey.withAlpha(33),\r\n          margin: const EdgeInsets.all(5),\r\n          child: SimpleDialogOption(\r\n              onPressed: () =>  Navigator.of(context).pushNamed(''AboutMePage''),\r\n              child: const Text(''百里·巫缨'')),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(386,164,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-28\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSingleChildScrollView extends StatelessWidget {\r\n  const CustomSingleChildScrollView({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.blue[50]!,\r\n    Colors.blue[100]!,\r\n    Colors.blue[200]!,\r\n    Colors.blue[300]!,\r\n    Colors.blue[400]!,\r\n    Colors.blue[500]!,\r\n    Colors.blue[600]!,\r\n    Colors.blue[700]!,\r\n    Colors.blue[800]!,\r\n    Colors.blue[900]!,\r\n  ];\r\n\r\n  TextStyle get textStyle => const TextStyle(\r\n        color: Colors.white,\r\n        shadows: [\r\n          Shadow(\r\n            color: Colors.black,\r\n            offset: Offset(.5, .5),\r\n            blurRadius: 2,\r\n          )\r\n        ],\r\n      );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: SingleChildScrollView(\r\n        padding: const EdgeInsets.symmetric(horizontal: 10),\r\n        child: Column(\r\n          children: data\r\n              .map((color) => Container(\r\n                    alignment: Alignment.center,\r\n                    height: 50,\r\n                    color: color,\r\n                    child: Text(\r\n                      colorString(color),\r\n                      style: textStyle,\r\n                    ),\r\n                  ))\r\n              .toList(),\r\n        ),\r\n\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(387,164,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DirectionSingleChildScrollView extends StatelessWidget {\r\n  const DirectionSingleChildScrollView({super.key});\r\n\r\n  List<Color> get data => [\r\n        Colors.blue[50]!,\r\n        Colors.blue[100]!,\r\n        Colors.blue[200]!,\r\n        Colors.blue[300]!,\r\n        Colors.blue[400]!,\r\n        Colors.blue[500]!,\r\n        Colors.blue[600]!,\r\n        Colors.blue[700]!,\r\n        Colors.blue[800]!,\r\n        Colors.blue[900]!,\r\n      ];\r\n\r\n  TextStyle get textStyle => const TextStyle(\r\n        color: Colors.white,\r\n        shadows: [\r\n          Shadow(\r\n            color: Colors.black,\r\n            offset: Offset(.5, .5),\r\n            blurRadius: 2,\r\n          )\r\n        ],\r\n      );\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: SingleChildScrollView(\r\n        scrollDirection: Axis.horizontal,\r\n        reverse: true,\r\n        padding: const EdgeInsets.symmetric(horizontal: 10),\r\n        child: Row(\r\n          children: data\r\n              .map((color) => Container(\r\n                    alignment: Alignment.center,\r\n                    width: 90,\r\n                    color: color,\r\n                    child: Text(\r\n                      colorString(color),\r\n                      style: textStyle,\r\n                    ),\r\n                  ))\r\n              .toList(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(388,294,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass SizeChangedLayoutNotifierDemo extends StatefulWidget {\r\n  const SizeChangedLayoutNotifierDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SizeChangedLayoutNotifierDemoState createState() => _SizeChangedLayoutNotifierDemoState();\r\n}\r\n\r\nclass _SizeChangedLayoutNotifierDemoState extends State<SizeChangedLayoutNotifierDemo> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return NotificationListener<SizeChangedLayoutNotification>(\r\n      onNotification: _onNotification,\r\n      child: const ChangeableBox(),\r\n    );\r\n  }\r\n\r\n  bool _onNotification(SizeChangedLayoutNotification notification) {\r\n    print(''---------SizeChangedLayoutNotification------'');\r\n    return false;\r\n  }\r\n}\r\n\r\nclass ChangeableBox extends StatefulWidget {\r\n  const ChangeableBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ChangeableBoxState createState() => _ChangeableBoxState();\r\n}\r\n\r\nclass _ChangeableBoxState extends State<ChangeableBox> {\r\n  double width = 40;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: [\r\n        SizeChangedLayoutNotifier(\r\n          child: Container(\r\n            width: width,\r\n            height: 100,\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n        Slider(\r\n          max: 200,\r\n          min: 20,\r\n          divisions: 10,\r\n          value: width,\r\n          onChanged: _changeWidth,\r\n        )\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _changeWidth(double value) {\r\n    setState(() {\r\n      width = value;\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(389,76,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSizedBox extends StatelessWidget {\r\n  const CustomSizedBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget child = Container(\r\n      alignment: Alignment.center,\r\n      color: Colors.cyanAccent,\r\n      width: 50,\r\n      height: 50,\r\n      child: const Text("Static"),\r\n    );\r\n\r\n    Widget box = SizedBox(\r\n      width: 80,\r\n      height: 40,\r\n      child: Container(\r\n          color: Colors.orange,\r\n          child: const Icon(\r\n            Icons.android,\r\n            color: Colors.white,\r\n          )),\r\n    );\r\n\r\n    return Container(\r\n      color: Colors.grey.withAlpha(22),\r\n      width: 200,\r\n      height: 100,\r\n      child: Row(\r\n        children: <Widget>[child, box, child],\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(390,84,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSizedOverflowBox extends StatefulWidget {\r\n  const CustomSizedOverflowBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomSizedOverflowBoxState createState() => _CustomSizedOverflowBoxState();\r\n}\r\n\r\nclass _CustomSizedOverflowBoxState extends State<CustomSizedOverflowBox> {\r\n  double _x = 50;\r\n  double _y = 44;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget box = SizedOverflowBox(\r\n      alignment: Alignment.bottomRight,\r\n      size: Size(_x, _y),\r\n      child: Container(width: 30, height: 50, color: Colors.orange),\r\n    );\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n            alignment: Alignment.topLeft,\r\n            color: Colors.grey.withAlpha(88),\r\n            width: 250,\r\n            height: 60,\r\n            child: box),\r\n        _buildSlider()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSlider() =>\r\n      Column(\r\n        children: <Widget>[\r\n          Slider(\r\n              divisions: 100,\r\n              min: 0,\r\n              max: 250,\r\n              label: ''x:'' + _x.toStringAsFixed(1),\r\n              value: _x,\r\n              onChanged: (v) => setState(() => _x = v)),\r\n          Slider(\r\n              divisions: 100,\r\n              min: 0,\r\n              max: 100,\r\n              label: ''y:'' + _y.toStringAsFixed(1),\r\n              value: _y,\r\n              onChanged: (v) => setState(() => _y = v)),\r\n\r\n        ],\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(391,92,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSizeTransition extends StatefulWidget {\r\n  const CustomSizeTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomSizeTransitionState createState() => _CustomSizeTransitionState();\r\n}\r\n\r\nclass _CustomSizeTransitionState extends State<CustomSizeTransition>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    _ctrl =\r\n        AnimationController(vsync: this, duration: const Duration(seconds: 1));\r\n    _ctrl.forward();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: () => _ctrl.forward(from: 0),\r\n      child: Wrap(\r\n        runSpacing: 20,\r\n        children: <Widget>[\r\n          SizeTransition(\r\n            axis: Axis.horizontal,\r\n            sizeFactor: CurvedAnimation(parent: _ctrl, curve: Curves.linear),\r\n            child: Container(\r\n                width: MediaQuery.of(context).size.width,\r\n                color: Colors.orange,\r\n                child:\r\n                    const Icon(Icons.android, color: Colors.green, size: 80)),\r\n          ),\r\n          SizeTransition(\r\n            axis: Axis.vertical,\r\n            sizeFactor: CurvedAnimation(parent: _ctrl, curve: Curves.linear),\r\n            child: Container(\r\n                width: MediaQuery.of(context).size.width,\r\n                color: Colors.orange,\r\n                child:\r\n                    const Icon(Icons.android, color: Colors.green, size: 80)),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(392,42,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSlider extends StatefulWidget {\r\n  const CustomSlider({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomSliderState createState() => _CustomSliderState();\r\n}\r\n\r\nclass _CustomSliderState extends State<CustomSlider> {\r\n  double _value = 0.0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Text(''当前值:${_value.toStringAsFixed(1)}''),\r\n        Slider(\r\n            value: _value,\r\n            min: 0.0,\r\n            max: 360.0,\r\n            activeColor: Colors.orangeAccent,\r\n            inactiveColor: Colors.green.withAlpha(99),\r\n            onChanged: _onChange),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _onChange(value) {\r\n    setState(() {\r\n      _value = value;\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(393,42,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DivisionsSlider extends StatefulWidget {\r\n  const DivisionsSlider({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DivisionsSliderState createState() => _DivisionsSliderState();\r\n}\r\n\r\nclass _DivisionsSliderState extends State<DivisionsSlider> {\r\n  double _value = 0.0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Slider(\r\n        value: _value,\r\n        min: 0.0,\r\n        max: 360.0,\r\n        divisions: 10,\r\n        label: _value.toStringAsFixed(1),\r\n        activeColor: Colors.orangeAccent,\r\n        inactiveColor: Colors.green.withAlpha(99),\r\n        onChangeStart: (value) {\r\n          print(''开始滑动:$value'');\r\n        },\r\n        onChangeEnd: (value) {\r\n          print(''滑动结束:$value'');\r\n        },\r\n        onChanged: (value) {\r\n          setState(() {\r\n            _value = value;\r\n          });\r\n        });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(394,331,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-12\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass SliderThemeDemo extends StatefulWidget {\r\n  const SliderThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SliderThemeDemoState createState() => _SliderThemeDemoState();\r\n}\r\n\r\nclass _SliderThemeDemoState extends State<SliderThemeDemo> {\r\n  double _bliss = 0.5;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SliderTheme(\r\n      data: SliderTheme.of(context).copyWith(activeTrackColor: Colors.orange),\r\n      child: Slider(\r\n        min: 0.0,\r\n        max: 200.0,\r\n        divisions: 10,\r\n        label: _bliss.toStringAsFixed(1),\r\n        onChanged: (double value) {\r\n          setState(() {\r\n            _bliss = value;\r\n          });\r\n        },\r\n        value: _bliss,\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(395,331,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-12\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass DIYSliderTheme extends StatefulWidget {\r\n  const DIYSliderTheme({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DIYSliderThemeState createState() => _DIYSliderThemeState();\r\n}\r\n\r\nclass _DIYSliderThemeState extends State<DIYSliderTheme> {\r\n  double _bliss = 0.5;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final ThemeData theme = Theme.of(context);\r\n    return SliderTheme(\r\n      data: theme.sliderTheme.copyWith(\r\n        activeTrackColor: Colors.deepPurple,\r\n        inactiveTrackColor: Colors.blue.withAlpha(55),\r\n        activeTickMarkColor: theme.colorScheme.onSurface.withOpacity(0.7),\r\n        inactiveTickMarkColor: theme.colorScheme.surface.withOpacity(0.7),\r\n        overlayColor: theme.colorScheme.onSurface.withOpacity(0.12),\r\n        thumbColor: Colors.deepPurple,\r\n        valueIndicatorColor: Colors.deepPurpleAccent,\r\n        thumbShape: _CustomThumbShape(),\r\n        valueIndicatorShape: _CustomValueIndicatorShape(),\r\n        valueIndicatorTextStyle: theme.primaryTextTheme.bodyMedium?.copyWith(color: theme.colorScheme.onSurface),\r\n      ),\r\n      child: Slider(\r\n        min: 0.0,\r\n        max: 200.0,\r\n        divisions: 10,\r\n        label: _bliss.toStringAsFixed(1),\r\n        onChanged: (double value) {\r\n          setState(() {\r\n            _bliss = value;\r\n          });\r\n        },\r\n        value: _bliss,\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _CustomThumbShape extends SliderComponentShape {\r\n  static const double _thumbSize = 4.0;\r\n  static const double _disabledThumbSize = 3.0;\r\n\r\n  @override\r\n  Size getPreferredSize(bool isEnabled, bool isDiscrete) {\r\n    return isEnabled\r\n        ? const Size.fromRadius(_thumbSize)\r\n        : const Size.fromRadius(_disabledThumbSize);\r\n  }\r\n\r\n  static final Animatable<double> sizeTween = Tween<double>(\r\n    begin: _disabledThumbSize,\r\n    end: _thumbSize,\r\n  );\r\n\r\n  @override\r\n  void paint(\r\n    PaintingContext context,\r\n    Offset center, {\r\n    required Animation<double> activationAnimation,\r\n    required Animation<double> enableAnimation,\r\n    required bool isDiscrete,\r\n    required TextPainter labelPainter,\r\n    required RenderBox parentBox,\r\n    required SliderThemeData sliderTheme,\r\n    required TextDirection textDirection,\r\n    required double value,\r\n    required double textScaleFactor,\r\n    required Size sizeWithOverflow,\r\n  }) {\r\n    final Canvas canvas = context.canvas;\r\n    final ColorTween colorTween = ColorTween(\r\n      begin: sliderTheme.disabledThumbColor,\r\n      end: sliderTheme.thumbColor,\r\n    );\r\n    final double size = _thumbSize * sizeTween.evaluate(enableAnimation);\r\n    final Path thumbPath = _downTriangle(size, center);\r\n    canvas.drawPath(thumbPath,\r\n        Paint()..color = colorTween.evaluate(enableAnimation) ?? Colors.blue);\r\n  }\r\n}\r\n\r\nPath _upTriangle(double size, Offset thumbCenter) =>\r\n    _downTriangle(size, thumbCenter, invert: true);\r\n\r\nPath _downTriangle(double size, Offset thumbCenter, {bool invert = false}) {\r\n  final Path thumbPath = Path();\r\n  final double height = sqrt(3.0) / 2.0;\r\n  final double centerHeight = size * height / 3.0;\r\n  final double halfSize = size / 2.0;\r\n  final double sign = invert ? -1.0 : 1.0;\r\n  thumbPath.moveTo(\r\n      thumbCenter.dx - halfSize, thumbCenter.dy + sign * centerHeight);\r\n  thumbPath.lineTo(thumbCenter.dx, thumbCenter.dy - 2.0 * sign * centerHeight);\r\n  thumbPath.lineTo(\r\n      thumbCenter.dx + halfSize, thumbCenter.dy + sign * centerHeight);\r\n  thumbPath.close();\r\n  return thumbPath;\r\n}\r\n\r\nclass _CustomValueIndicatorShape extends SliderComponentShape {\r\n  static const double _indicatorSize = 4.0;\r\n  static const double _disabledIndicatorSize = 3.0;\r\n  static const double _slideUpHeight = 30.0;\r\n\r\n  @override\r\n  Size getPreferredSize(bool isEnabled, bool isDiscrete) {\r\n    return Size.fromRadius(isEnabled ? _indicatorSize : _disabledIndicatorSize);\r\n  }\r\n\r\n  static final Animatable<double> sizeTween = Tween<double>(\r\n    begin: _disabledIndicatorSize,\r\n    end: _indicatorSize,\r\n  );\r\n\r\n  @override\r\n  void paint(PaintingContext context, Offset center,\r\n      {required Animation<double> activationAnimation,\r\n      required Animation<double> enableAnimation,\r\n      required bool isDiscrete,\r\n      required TextPainter labelPainter,\r\n      required RenderBox parentBox,\r\n      required SliderThemeData sliderTheme,\r\n      required TextDirection textDirection,\r\n      required double value,\r\n      required double textScaleFactor,\r\n      required Size sizeWithOverflow}) {\r\n    final Canvas canvas = context.canvas;\r\n    final ColorTween enableColor = ColorTween(\r\n      begin: sliderTheme.disabledThumbColor,\r\n      end: sliderTheme.valueIndicatorColor,\r\n    );\r\n    final Tween<double> slideUpTween = Tween<double>(\r\n      begin: 0.0,\r\n      end: _slideUpHeight,\r\n    );\r\n    final double size = _indicatorSize * sizeTween.evaluate(enableAnimation);\r\n    final Offset slideUpOffset =\r\n        Offset(0.0, -slideUpTween.evaluate(activationAnimation));\r\n    final Path thumbPath = _upTriangle(size, center + slideUpOffset);\r\n    final Color paintColor = enableColor\r\n            .evaluate(enableAnimation)\r\n            ?.withAlpha((255.0 * activationAnimation.value).round()) ??\r\n        Colors.black;\r\n    canvas.drawPath(\r\n      thumbPath,\r\n      Paint()..color = paintColor,\r\n    );\r\n    canvas.drawLine(\r\n        center,\r\n        center + slideUpOffset,\r\n        Paint()\r\n          ..color = paintColor\r\n          ..style = PaintingStyle.stroke\r\n          ..strokeWidth = 2.0);\r\n    labelPainter.paint(\r\n        canvas,\r\n        center +\r\n            slideUpOffset +\r\n            Offset(-labelPainter.width / 2.0, -labelPainter.height - 4.0));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(396,112,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSlideTransition extends StatefulWidget {\r\n  const CustomSlideTransition({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomSlideTransitionState createState() => _CustomSlideTransitionState();\r\n}\r\n\r\nclass _CustomSlideTransitionState extends State<CustomSlideTransition>\r\n    with SingleTickerProviderStateMixin {\r\n late AnimationController _ctrl;\r\n late Animation<Offset> animation;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _ctrl = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 2),\r\n    )..forward();\r\n\r\n    animation = Tween<Offset>(\r\n      begin: Offset.zero,\r\n      end: const Offset(0.5, 0.5),\r\n    ).animate(_ctrl);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _ctrl.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n        onTap: () => _ctrl.forward(from: 0),\r\n        child: Container(\r\n          width: 200,\r\n          color: Colors.grey.withAlpha(33),\r\n          height: 100,\r\n          child: Stack(\r\n            fit: StackFit.expand,\r\n            children: [\r\n              SlideTransition(\r\n                textDirection: TextDirection.ltr,\r\n                position: animation,\r\n                child: _buildChild(),\r\n              ),\r\n              SlideTransition(\r\n                textDirection: TextDirection.rtl,\r\n                position: animation,\r\n                child: _buildChild(),\r\n              ),\r\n            ],\r\n          ),\r\n        ));\r\n  }\r\n  Widget _buildChild() => const Icon(\r\n    Icons.accessible_forward_sharp,\r\n    color: Colors.green,\r\n    size: 25,\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(397,301,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverAnimatedListDemo extends StatefulWidget {\r\n  const SliverAnimatedListDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SliverAnimatedListDemoState createState() =>\r\n      _SliverAnimatedListDemoState();\r\n}\r\n\r\nclass _SliverAnimatedListDemoState extends State<SliverAnimatedListDemo> {\r\n\r\n  final GlobalKey<SliverAnimatedListState> _listKey = GlobalKey<SliverAnimatedListState>();\r\n  late ListModel<int> _list;\r\n  int? _selectedItem;\r\n  int _nextItem=0;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _list = ListModel<int>(\r\n      listKey: _listKey,\r\n      initialItems: <int>[0, 1, 2],\r\n      removedItemBuilder: _buildRemovedItem,\r\n    );\r\n    _nextItem = 3;\r\n  }\r\n\r\n  Widget _buildItem(BuildContext context, int index, Animation<double> animation) {\r\n    return CardItem(\r\n      animation: animation,\r\n      item: _list[index],\r\n      selected: _selectedItem == _list[index],\r\n      onTap: () {\r\n        setState(() {\r\n          _selectedItem = _selectedItem == _list[index] ? null : _list[index];\r\n        });\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildRemovedItem(int item, BuildContext context, Animation<double> animation) {\r\n    return CardItem(\r\n      animation: animation,\r\n      item: item,\r\n      selected: false,\r\n    );\r\n  }\r\n\r\n  void _insert() {\r\n    final int index = _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);\r\n    _list.insert(index, _nextItem++);\r\n  }\r\n\r\n  void _remove() {\r\n    if (_selectedItem != null) {\r\n      _list.removeAt(_list.indexOf(_selectedItem!));\r\n      setState(() {\r\n        _selectedItem = null;\r\n      });\r\n    } else {\r\n      if(_list.length>0){\r\n        _list.removeAt(0);\r\n        setState(() {\r\n          _selectedItem = null;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return  SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n            slivers: <Widget>[\r\n              SliverAppBar(\r\n                title: const Text(\r\n                  ''SliverAnimatedList'',\r\n                  style: TextStyle(fontSize: 20),\r\n                ),\r\n                expandedHeight: 60,\r\n                centerTitle: true,\r\n                leading: IconButton(\r\n                  icon: const Icon(Icons.add_circle),\r\n                  onPressed: _insert,\r\n                  tooltip: ''插入一个item'',\r\n                  iconSize: 32,\r\n                ),\r\n                actions: [\r\n                  IconButton(\r\n                    icon: const Icon(Icons.remove_circle),\r\n                    onPressed: _remove,\r\n                    tooltip: ''删除选中的item'',\r\n                    iconSize: 32,\r\n                  ),\r\n                ],\r\n              ),\r\n              SliverAnimatedList(\r\n                key: _listKey,\r\n                initialItemCount: _list.length,\r\n                itemBuilder: _buildItem,\r\n              ),\r\n            ],\r\n      ),\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nclass ListModel<E> {\r\n  ListModel({\r\n    required this.listKey,\r\n    required this.removedItemBuilder,\r\n    required Iterable<E>? initialItems,\r\n  }) : assert(removedItemBuilder != null),\r\n        _items = List<E>.from(initialItems ?? <E>[]);\r\n  final GlobalKey<SliverAnimatedListState> listKey;\r\n  final dynamic removedItemBuilder;\r\n  final List<E> _items;\r\n  SliverAnimatedListState? get _animatedList => listKey.currentState;\r\n  void insert(int index, E item) {\r\n    _items.insert(index, item);\r\n    _animatedList?.insertItem(index);\r\n  }\r\n  E removeAt(int index) {\r\n    final E removedItem = _items.removeAt(index);\r\n    if (removedItem != null) {\r\n      _animatedList?.removeItem(\r\n        index,\r\n            (BuildContext context, Animation<double> animation) => removedItemBuilder(removedItem, context, animation),\r\n      );\r\n    }\r\n    return removedItem;\r\n  }\r\n  int get length => _items.length;\r\n  E operator [](int index) => _items[index];\r\n  int indexOf(E item) => _items.indexOf(item);\r\n}\r\n\r\n\r\nclass CardItem extends StatelessWidget {\r\n  const CardItem({\r\n    Key? key,\r\n    required this.animation,\r\n    required this.item,\r\n    this.onTap,\r\n    this.selected = false,\r\n  }) :super(key: key);\r\n  final Animation<double> animation;\r\n  final VoidCallback? onTap;\r\n  final int item;\r\n  final bool selected;\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding:\r\n      const EdgeInsets.only(\r\n        left: 2.0,\r\n        right: 2.0,\r\n        top: 2.0,\r\n        bottom: 0.0,\r\n      ),\r\n      child: SizeTransition(\r\n        axis: Axis.vertical,\r\n        sizeFactor: animation,\r\n        child: GestureDetector(\r\n          onTap: onTap,\r\n          child: SizedBox(\r\n            height: 60.0,\r\n            child: Card(\r\n              color: selected\r\n                  ? Colors.black12\r\n                  : Colors.primaries[item % Colors.primaries.length],\r\n              child: Center(\r\n                child: Text(\r\n                  ''Item $item'',\r\n                  style: const TextStyle(color: Colors.white,fontSize: 16),\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(398,184,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverAppBarDemo extends StatefulWidget {\r\n  const SliverAppBarDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SliverAppBarDemoState createState() => _SliverAppBarDemoState();\r\n}\r\n\r\nclass _SliverAppBarDemoState extends State<SliverAppBarDemo> {\r\n  bool _floating = false;\r\n  bool _pinned = false;\r\n  bool _snap = false;\r\n\r\n  final List<Color> data = [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildTool(),\r\n        SizedBox(\r\n          height: 300,\r\n          child: CustomScrollView(\r\n            slivers: <Widget>[\r\n              _buildSliverAppBar(),\r\n              _buildSliverFixedExtentList()\r\n            ],\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverAppBar() {\r\n    print(_floating);\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      floating: _floating,\r\n      pinned: _pinned,\r\n      snap: _snap,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(//伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  Widget _buildSliverFixedExtentList() => SliverFixedExtentList(\r\n        itemExtent: 60,\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 50,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  Widget _buildTool() {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.center,\r\n      children: <Widget>[\r\n        Wrap(\r\n          direction: Axis.vertical,\r\n          crossAxisAlignment: WrapCrossAlignment.center,\r\n          children: <Widget>[\r\n            const Text(''floating''),\r\n            Switch(\r\n                value: _floating,\r\n                onChanged: (v) {\r\n                  if(_snap&&!v){\r\n                    _snap =false;\r\n                  }\r\n                  setState(() => _floating = v);\r\n                }),\r\n          ],\r\n        ),\r\n        Wrap(\r\n          direction: Axis.vertical,\r\n          crossAxisAlignment: WrapCrossAlignment.center,\r\n          children: <Widget>[\r\n            const Text(''pinned''),\r\n            Switch(\r\n                value: _pinned,\r\n                onChanged: (v) => setState(() => _pinned = v)),\r\n          ],\r\n        )       ,Wrap(\r\n          direction: Axis.vertical,\r\n          crossAxisAlignment: WrapCrossAlignment.center,\r\n          children: <Widget>[\r\n            const Text(''snap''),\r\n            Switch(\r\n                value: _snap,\r\n                onChanged: (v) {\r\n                  if(_floating){\r\n                    setState(() => _snap = v);\r\n                  }\r\n                }),\r\n          ],\r\n        )\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(399,270,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/8/18\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverConstrainedCrossAxisDemo extends StatelessWidget {\r\n  const SliverConstrainedCrossAxisDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[\r\n          SliverCrossAxisGroup(\r\n            slivers: <Widget>[\r\n              SliverConstrainedCrossAxis(\r\n                maxExtent: 100,\r\n                sliver: _SliverColorList(\r\n                  height: 100.0,\r\n                  fontSize: 24,\r\n                  count: 8,\r\n                  color1: Colors.amber[300],\r\n                  color2: Colors.blue[300],\r\n                ),\r\n              ),\r\n              SliverCrossAxisExpanded(\r\n                flex: 1,\r\n                sliver: _SliverColorList(\r\n                  height: 80.0,\r\n                  fontSize: 18,\r\n                  count: 15,\r\n                  color1: Colors.green[300],\r\n                  color2: Colors.red[300],\r\n                ),\r\n              ),\r\n              SliverCrossAxisExpanded(\r\n                  flex: 1,\r\n                  sliver: _SliverColorList(\r\n                    height: 50.0,\r\n                    fontSize: 20,\r\n                    count: 6,\r\n                    color1: Colors.purple[300],\r\n                    color2: Colors.orange[300],\r\n                  )),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _SliverColorList extends StatelessWidget {\r\n  final double height;\r\n  final double fontSize;\r\n  final Color? color1;\r\n  final Color? color2;\r\n  final int count;\r\n  const _SliverColorList(\r\n      {super.key,\r\n        required this.height,\r\n        required this.fontSize,\r\n        required this.count,\r\n        this.color1,\r\n        this.color2});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SliverList.builder(\r\n      itemBuilder: (BuildContext context, int index) {\r\n        return Container(\r\n          color: index.isEven ? color1 : color2,\r\n          height: height,\r\n          child: Center(\r\n            child: Text(\r\n              ''Item ${index}'',\r\n              style: TextStyle(fontSize: fontSize),\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n      itemCount: count,\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(400,271,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/8/18\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverCrossAxisExpandedDemo extends StatelessWidget {\r\n  const SliverCrossAxisExpandedDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[\r\n          SliverCrossAxisGroup(\r\n            slivers: <Widget>[\r\n              SliverCrossAxisExpanded(\r\n                flex: 1,\r\n                sliver: _SliverColorList(\r\n                  height: 80.0,\r\n                  fontSize: 18,\r\n                  count: 15,\r\n                  color1: Colors.green[300],\r\n                  color2: Colors.red[300],\r\n                ),\r\n              ),\r\n              SliverCrossAxisExpanded(\r\n                  flex: 1,\r\n                  sliver: _SliverColorList(\r\n                    height: 50.0,\r\n                    fontSize: 20,\r\n                    count: 6,\r\n                    color1: Colors.purple[300],\r\n                    color2: Colors.orange[300],\r\n                  )),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _SliverColorList extends StatelessWidget {\r\n  final double height;\r\n  final double fontSize;\r\n  final Color? color1;\r\n  final Color? color2;\r\n  final int count;\r\n  const _SliverColorList(\r\n      {super.key,\r\n        required this.height,\r\n        required this.fontSize,\r\n        required this.count,\r\n        this.color1,\r\n        this.color2});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SliverList.builder(\r\n      itemBuilder: (BuildContext context, int index) {\r\n        return Container(\r\n          color: index.isEven ? color1 : color2,\r\n          height: height,\r\n          child: Center(\r\n            child: Text(\r\n              ''Item ${index}'',\r\n              style: TextStyle(fontSize: fontSize),\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n      itemCount: count,\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(401,269,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/8/18\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverCrossAxisGroupDemo extends StatelessWidget {\r\n  const SliverCrossAxisGroupDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    double width = MediaQuery.of(context).size.width;\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[\r\n          SliverCrossAxisGroup(\r\n            slivers: <Widget>[\r\n              SliverConstrainedCrossAxis(\r\n                maxExtent: 100,\r\n                sliver: _SliverColorList(\r\n                  height: 100.0,\r\n                  fontSize: 24,\r\n                  count: 8,\r\n                  color1: Colors.amber[300],\r\n                  color2: Colors.blue[300],\r\n                ),\r\n              ),\r\n              SliverConstrainedCrossAxis(\r\n                maxExtent: width - 100,\r\n                sliver: _SliverColorList(\r\n                  height: 80.0,\r\n                  fontSize: 18,\r\n                  count: 15,\r\n                  color1: Colors.green[300],\r\n                  color2: Colors.red[300],\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n\r\n  }\r\n}\r\n\r\nclass _SliverColorList extends StatelessWidget {\r\n  final double height;\r\n  final double fontSize;\r\n  final Color? color1;\r\n  final Color? color2;\r\n  final int count;\r\n  const _SliverColorList(\r\n      {super.key,\r\n        required this.height,\r\n        required this.fontSize,\r\n        required this.count,\r\n        this.color1,\r\n        this.color2});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SliverList.builder(\r\n      itemBuilder: (BuildContext context, int index) {\r\n        return Container(\r\n          color: index.isEven ? color1 : color2,\r\n          height: height,\r\n          child: Center(\r\n            child: Text(\r\n              ''Item ${index}'',\r\n              style: TextStyle(fontSize: fontSize),\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n      itemCount: count,\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(402,306,0,replace(replace('import ''dart:math'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverFillRemainingDemo extends StatefulWidget {\r\n  const SliverFillRemainingDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SliverFillRemainingDemoState createState() =>\r\n      _SliverFillRemainingDemoState();\r\n}\r\n\r\nclass _SliverFillRemainingDemoState extends State<SliverFillRemainingDemo> {\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n  final Random r = Random();\r\n\r\n  bool hasScrollBody = false;\r\n  bool fillOverscroll = true;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        physics: const BouncingScrollPhysics(parent: AlwaysScrollableScrollPhysics()),\r\n        slivers: <Widget>[\r\n          _buildSliverAppBar(),\r\n          _buildSliverList(),\r\n          SliverFillRemaining(\r\n            hasScrollBody: hasScrollBody,\r\n            fillOverscroll: fillOverscroll,\r\n            child: Container(\r\n              decoration: const BoxDecoration(\r\n                  image: DecorationImage(\r\n                      fit: BoxFit.cover,\r\n                      image: AssetImage("assets/images/sabar_bar.webp"))),\r\n              // // color: Colors.teal[100],\r\n              child: _buildBottomChild(),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildBottomChild() => Align(\r\n        alignment: Alignment.bottomCenter,\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(16.0),\r\n          child: Wrap(\r\n            spacing: 10,\r\n            children: [\r\n              ElevatedButton(\r\n                style: TextButton.styleFrom(\r\n                  backgroundColor: Colors.blue,\r\n                ),\r\n                onPressed: () {\r\n                  setState(() {\r\n                    hasScrollBody = !hasScrollBody;\r\n                  });\r\n                },\r\n                child: Text(''hasScrollBody:$hasScrollBody'',style: const TextStyle(color: Colors.white),),\r\n              ),\r\n              ElevatedButton(\r\n                style: TextButton.styleFrom(\r\n                  backgroundColor: Colors.blue,\r\n                ),\r\n                onPressed: () {\r\n                  setState(() {\r\n                    fillOverscroll = !fillOverscroll;\r\n                  });\r\n                },\r\n                child: Text(''fillOverscroll:$fillOverscroll'',style: const TextStyle(color: Colors.white)),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      );\r\n\r\n  Widget _buildSliverList() => SliverFixedExtentList(\r\n        itemExtent: 50,\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 120.0,\r\n      leading: Container(\r\n          margin: const EdgeInsets.all(10),\r\n          child: Image.asset(''assets/images/icon_head.webp'')),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(403,187,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverFillViewportDemo extends StatefulWidget {\r\n  const SliverFillViewportDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SliverFillViewportDemoState createState() => _SliverFillViewportDemoState();\r\n}\r\n\r\nclass _SliverFillViewportDemoState extends State<SliverFillViewportDemo> {\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n  double _viewportFraction = 0.5;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildTool(),\r\n        SizedBox(\r\n          height: 300,\r\n          child: CustomScrollView(\r\n            slivers: <Widget>[_buildSliverAppBar(), _buildSliverList()],\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverFillViewport(\r\n        viewportFraction: _viewportFraction,\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  _buildTool() {\r\n    return Slider(\r\n        value: _viewportFraction,\r\n        min: 0.01,\r\n        divisions: 20,\r\n        label: _viewportFraction.toStringAsFixed(1),\r\n        max: 2.0,\r\n        onChanged: (v) => setState(() => _viewportFraction = v));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(404,186,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverFixedExtentListDemo extends StatefulWidget {\r\n  const SliverFixedExtentListDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SliverFixedExtentListDemoState createState() => _SliverFixedExtentListDemoState();\r\n}\r\n\r\nclass _SliverFixedExtentListDemoState extends State<SliverFixedExtentListDemo> {\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[_buildSliverAppBar(), _buildSliverList()],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverFixedExtentList(\r\n        itemExtent: 50,\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(405,188,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverGirdDemo extends StatelessWidget {\r\n  const SliverGirdDemo({super.key});\r\n\r\n  List<Color> get data =>  List.generate(128, (i) => Color(0xFF6600FF - 2 * i));\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[_buildSliverAppBar(), _buildSliverList()],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverGrid.extent(\r\n        childAspectRatio: 1 / 0.618,\r\n        maxCrossAxisExtent: 180,\r\n        crossAxisSpacing: 5,\r\n        mainAxisSpacing: 5,\r\n        children: data\r\n            .map((e) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: e,\r\n                  child: Text(\r\n                    colorString(e),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ))\r\n            .toList(),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(406,305,0,replace(replace('import ''dart:math'';\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverIgnorePointerDemo extends StatefulWidget {\r\n  const SliverIgnorePointerDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SliverIgnorePointerDemoState createState() =>\r\n      _SliverIgnorePointerDemoState();\r\n}\r\n\r\nclass _SliverIgnorePointerDemoState extends State<SliverIgnorePointerDemo> {\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n  final Random r = Random();\r\n  bool hasScrollBody = false;\r\n  bool fillOverscroll = true;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        physics: const BouncingScrollPhysics(parent: AlwaysScrollableScrollPhysics()),\r\n        slivers: <Widget>[\r\n          _buildSliverAppBar(),\r\n          _buildSliverList(),\r\n          SliverIgnorePointer(\r\n            ignoring: true,\r\n            sliver: SliverFillRemaining(\r\n              hasScrollBody: hasScrollBody,\r\n              fillOverscroll: fillOverscroll,\r\n              child: Container(\r\n                decoration: const BoxDecoration(\r\n                    image: DecorationImage(\r\n                        fit: BoxFit.cover,\r\n                        image: AssetImage("assets/images/sabar_bar.webp"))),\r\n                // // color: Colors.teal[100],\r\n                child: _buildBottomChild(),\r\n              ),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildBottomChild() => Align(\r\n        alignment: Alignment.bottomCenter,\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(16.0),\r\n          child: Wrap(\r\n            spacing: 10,\r\n            children: [\r\n              ElevatedButton(\r\n                style: TextButton.styleFrom(\r\n                  backgroundColor: Colors.blue,\r\n                ),\r\n                onPressed: () {\r\n                  setState(() {\r\n                    hasScrollBody = !hasScrollBody;\r\n                  });\r\n                },\r\n                child: Text(''hasScrollBody:$hasScrollBody'',style: const TextStyle(color: Colors.white),),\r\n              ),\r\n              ElevatedButton(\r\n                style: TextButton.styleFrom(\r\n                  backgroundColor: Colors.blue,\r\n                ),\r\n                onPressed: () {\r\n                  setState(() {\r\n                    fillOverscroll = !fillOverscroll;\r\n                  });\r\n                },\r\n                child: Text(''fillOverscroll:$fillOverscroll'',style: const TextStyle(color: Colors.white)),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      );\r\n\r\n  Widget _buildSliverList() => SliverFixedExtentList(\r\n        itemExtent: 50,\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 120.0,\r\n      leading: Container(\r\n          margin: const EdgeInsets.all(10),\r\n          child: Image.asset(''assets/images/icon_head.webp'')),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(407,304,0,replace(replace('import ''package:flutter/material.dart'';\r\nimport ''package:flutter/rendering.dart'';\r\n\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverLayoutBuilderDemo extends StatefulWidget {\r\n  const SliverLayoutBuilderDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SliverLayoutBuilderDemoState createState() =>\r\n      _SliverLayoutBuilderDemoState();\r\n}\r\n\r\nclass _SliverLayoutBuilderDemoState extends State<SliverLayoutBuilderDemo> {\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        physics: const BouncingScrollPhysics(parent: AlwaysScrollableScrollPhysics()),\r\n        slivers: <Widget>[\r\n          _buildSliverAppBar(),\r\n          SliverLayoutBuilder(\r\n            builder: _buildSliver,\r\n          ),\r\n          _buildSliverList(),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverFixedExtentList(\r\n        itemExtent: 50,\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 120.0,\r\n      leading: Container(\r\n          margin: const EdgeInsets.all(10),\r\n          child: Image.asset(''assets/images/icon_head.webp'')),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n\r\n  Widget _buildSliver(BuildContext context, SliverConstraints constraints) {\r\n    return SliverToBoxAdapter(\r\n      child: Container(\r\n        alignment: Alignment.center,\r\n        height: constraints.remainingPaintExtent / 3,\r\n        color: Colors.red,\r\n        child: const Text(\r\n          "SliverLayoutBuilder",\r\n          style: TextStyle(color: Colors.white, fontSize: 20),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(408,185,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverListDemo extends StatelessWidget {\r\n  const SliverListDemo({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[_buildSliverAppBar(), _buildSliverList()],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverList(\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(409,268,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2023/8/18\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ItemData {\r\n  final String groupName;\r\n  final List<String> users;\r\n\r\n  ItemData({required this.groupName, this.users = const []});\r\n\r\n  static List<ItemData> get testData => [\r\n    ItemData(groupName: ''幻将术士'', users: [''梦小梦'', ''梦千'']),\r\n    ItemData(\r\n        groupName: ''幻将剑客'', users: [''捷特'', ''龙少'', ''莫向阳'', ''何解连'', ''浪封'', ''梦飞烟'']),\r\n    ItemData(groupName: ''幻将弓者'', users: [''巫缨'', ''巫妻孋'', ''摄王'', ''裔王'', ''梦童'']),\r\n    ItemData(\r\n        groupName: ''其他'', users: List.generate(20, (index) => ''小兵$index'')),\r\n  ];\r\n}\r\n\r\nclass SliverMainAxisGroupDemo extends StatelessWidget{\r\n  const SliverMainAxisGroupDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: ItemData.testData.map(_buildGroup).toList(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildGroup(ItemData itemData) {\r\n    return SliverMainAxisGroup(slivers: [\r\n      SliverPersistentHeader(\r\n        pinned: true,\r\n        delegate: _HeaderDelegate(itemData.groupName),\r\n      ),\r\n      SliverList(\r\n        // tag2\r\n        delegate: SliverChildBuilderDelegate(\r\n              (_, index) => _buildItemByUser(itemData.users[index]),\r\n          childCount: itemData.users.length,\r\n        ),\r\n      ),\r\n    ]);\r\n  }\r\n\r\n  Widget _buildItemByUser(String user) {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      height: 56,\r\n      child: Row(\r\n        children: [\r\n          const Padding(\r\n            padding: EdgeInsets.only(left: 20, right: 10.0),\r\n            child: FlutterLogo(size: 30),\r\n          ),\r\n          Text(\r\n            user,\r\n            style: const TextStyle(fontSize: 16),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _HeaderDelegate extends SliverPersistentHeaderDelegate {\r\n  const _HeaderDelegate(this.title);\r\n\r\n  final String title;\r\n\r\n  @override\r\n  Widget build(\r\n      BuildContext context, double shrinkOffset, bool overlapsContent) {\r\n    return Container(\r\n        alignment: Alignment.centerLeft,\r\n        color: const Color(0xffF6F6F6),\r\n        padding: const EdgeInsets.only(left: 20),\r\n        height: 40,\r\n        child: Text(title));\r\n  }\r\n\r\n  @override\r\n  double get maxExtent => minExtent;\r\n\r\n  @override\r\n  double get minExtent => 40;\r\n\r\n  @override\r\n  bool shouldRebuild(covariant _HeaderDelegate oldDelegate) => title!=oldDelegate.title;\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(410,192,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverOpacityDemo extends StatelessWidget {\r\n  const SliverOpacityDemo({super.key});\r\n\r\n  List<Color> get data => List.generate(128, (i) => Color(0xFF6600FF - 2 * i));\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[\r\n          _buildSliverAppBar(),\r\n          SliverPadding(\r\n              padding: const EdgeInsets.only(top: 10),\r\n              sliver: SliverOpacity(opacity: 0.2, sliver: _buildSliverGrid()))\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverGrid() => SliverGrid.extent(\r\n        childAspectRatio: 1 / 0.618,\r\n        maxCrossAxisExtent: 180,\r\n        crossAxisSpacing: 5,\r\n        mainAxisSpacing: 5,\r\n        children: data\r\n            .map((e) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: e,\r\n                  child: Text(\r\n                    colorString(e),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ))\r\n            .toList(),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(411,307,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/6/16\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass SliverOverlapAbsorberDemo extends StatelessWidget {\r\n  const SliverOverlapAbsorberDemo({Key? key}) : super(key: key);\r\n\r\n  final List<String> _tabs = const [''风神传'', ''封妖志'', "幻将录", "永恒传说"];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n        width: MediaQuery.of(context).size.width,\r\n        height: MediaQuery.of(context).size.height - 200,\r\n        child: Scaffold(\r\n          body: DefaultTabController(\r\n            length: _tabs.length,\r\n            child: NestedScrollView(\r\n              headerSliverBuilder:\r\n                  (BuildContext context, bool innerBoxIsScrolled) {\r\n                return <Widget>[\r\n                  SliverOverlapAbsorber(\r\n                    handle: NestedScrollView.sliverOverlapAbsorberHandleFor(context),\r\n                    sliver: SliverAppBar(\r\n                      title: const Text(''旷古奇书''),\r\n                      pinned: true,\r\n                      elevation: 6, //影深\r\n                      expandedHeight: 220.0,\r\n                      forceElevated: innerBoxIsScrolled, //为true时展开有阴影\r\n                      flexibleSpace: FlexibleSpaceBar(\r\n                        background: Image.asset(\r\n                          "assets/images/wy_300x200_filter.webp",\r\n                          fit: BoxFit.cover,\r\n                        ),\r\n                      ),\r\n                      bottom: TabBar(\r\n                        tabs: _tabs\r\n                            .map((String name) => Tab(text: name,))\r\n                            .toList(),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ];\r\n              },\r\n              body: _buildTabBarView(),\r\n            ),\r\n          ),\r\n        ));\r\n  }\r\n\r\n  Widget _buildTabBarView() {\r\n    return TabBarView(\r\n      children: _tabs.map((String name) {\r\n        return SafeArea(\r\n          top: false,\r\n          bottom: false,\r\n          child: Builder(\r\n            builder: (BuildContext context) {\r\n              return CustomScrollView(\r\n                key: PageStorageKey<String>(name),\r\n                slivers: <Widget>[\r\n                  SliverOverlapInjector(\r\n                    handle: NestedScrollView.sliverOverlapAbsorberHandleFor(\r\n                        context),\r\n                  ),\r\n                  buildContent(name),\r\n                ],\r\n              );\r\n            },\r\n          ),\r\n        );\r\n      }).toList(),\r\n    );\r\n  }\r\n\r\n  Widget buildContent(String name) => SliverPadding(\r\n        padding: const EdgeInsets.all(8.0),\r\n        sliver: SliverFixedExtentList(\r\n          itemExtent: 48.0,\r\n          delegate: SliverChildBuilderDelegate(\r\n            (BuildContext context, int index) {\r\n              return ListTile(\r\n                title: Text(''《$name》 第 $index章''),\r\n              );\r\n            },\r\n            childCount: 50,\r\n          ),\r\n        ),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(412,308,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/6/16\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass SliverOverlapInjectorDemo extends StatelessWidget {\r\n  const SliverOverlapInjectorDemo({Key? key}) : super(key: key);\r\n\r\n  final List<String> _tabs = const [''风神传'', ''封妖志'', "幻将录", "永恒传说"];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n        width: MediaQuery.of(context).size.width,\r\n        height: MediaQuery.of(context).size.height - 200,\r\n        child: Scaffold(\r\n          body: DefaultTabController(\r\n            length: _tabs.length,\r\n            child: NestedScrollView(\r\n              headerSliverBuilder:\r\n                  (BuildContext context, bool innerBoxIsScrolled) {\r\n                return <Widget>[\r\n                  SliverOverlapAbsorber(\r\n                    handle: NestedScrollView.sliverOverlapAbsorberHandleFor(context),\r\n                    sliver: SliverAppBar(\r\n                      title: const Text(''旷古奇书''),\r\n                      pinned: true,\r\n                      elevation: 6, //影深\r\n                      expandedHeight: 220.0,\r\n                      forceElevated: innerBoxIsScrolled, //为true时展开有阴影\r\n                      flexibleSpace: FlexibleSpaceBar(\r\n                        background: Image.asset(\r\n                          "assets/images/wy_300x200_filter.webp",\r\n                          fit: BoxFit.cover,\r\n                        ),\r\n                      ),\r\n                      bottom: TabBar(\r\n                        tabs: _tabs\r\n                            .map((String name) => Tab(text: name,))\r\n                            .toList(),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ];\r\n              },\r\n              body: _buildTabBarView(),\r\n            ),\r\n          ),\r\n        ));\r\n  }\r\n\r\n  Widget _buildTabBarView() {\r\n    return TabBarView(\r\n      children: _tabs.map((String name) {\r\n        return SafeArea(\r\n          top: false,\r\n          bottom: false,\r\n          child: Builder(\r\n            builder: (BuildContext context) {\r\n              return CustomScrollView(\r\n                key: PageStorageKey<String>(name),\r\n                slivers: <Widget>[\r\n                  SliverOverlapInjector(\r\n                    handle: NestedScrollView.sliverOverlapAbsorberHandleFor(\r\n                        context),\r\n                  ),\r\n                  buildContent(name),\r\n                ],\r\n              );\r\n            },\r\n          ),\r\n        );\r\n      }).toList(),\r\n    );\r\n  }\r\n\r\n  Widget buildContent(String name) => SliverPadding(\r\n        padding: const EdgeInsets.all(8.0),\r\n        sliver: SliverFixedExtentList(\r\n          itemExtent: 48.0,\r\n          delegate: SliverChildBuilderDelegate(\r\n            (BuildContext context, int index) {\r\n              return ListTile(\r\n                title: Text(''《$name》 第 $index章''),\r\n              );\r\n            },\r\n            childCount: 50,\r\n          ),\r\n        ),\r\n      );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(413,191,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverPaddingDemo extends StatelessWidget {\r\n  const SliverPaddingDemo({super.key});\r\n\r\n  List<Color> get data =>  List.generate(128, (i) => Color(0xFF6600FF - 2 * i));\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[\r\n          _buildSliverAppBar(),\r\n          SliverPadding(\r\n              padding: const EdgeInsets.only(top: 10),\r\n              sliver: _buildSliverGrid())\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverGrid() => SliverGrid.extent(\r\n    childAspectRatio: 1 / 0.618,\r\n    maxCrossAxisExtent: 180,\r\n    crossAxisSpacing: 5,\r\n    mainAxisSpacing: 5,\r\n    children: data\r\n        .map((e) => Container(\r\n      alignment: Alignment.center,\r\n      width: 100,\r\n      height: 60,\r\n      color: e,\r\n      child: Text(\r\n        colorString(e),\r\n        style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n      ),\r\n    ))\r\n        .toList(),\r\n  );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => [\r\n    IconButton(\r\n      onPressed: () {},\r\n      icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n    )\r\n  ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(414,190,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverPersistentHeaderDemo extends StatelessWidget {\r\n  const SliverPersistentHeaderDemo({super.key});\r\n\r\n  List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 500,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[\r\n          _buildSliverAppBar(),\r\n          _buildPersistentHeader(''袅缈岁月，青丝银发'',const Color(0xffe7fcc9)),\r\n          _buildCommonWidget(),\r\n          _buildPersistentHeader(''以梦为马，不负韶华'',const Color(0xffcca4ff)),\r\n          _buildSliverList()\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildCommonWidget() => SliverToBoxAdapter(\r\n    child: Container(\r\n      padding: const EdgeInsets.symmetric(horizontal: 10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: ListTile(\r\n        leading: Image.asset("assets/images/icon_head.webp"),\r\n        title: const Text("以梦为马"),\r\n        subtitle: const Text("海子"),\r\n        selected: true,\r\n        contentPadding: const EdgeInsets.all(5),\r\n        trailing: const Icon(Icons.more_vert),\r\n      ),\r\n    ),\r\n  );\r\n  Widget _buildPersistentHeader(String text,Color color) => SliverPersistentHeader(\r\n    pinned: true,\r\n    delegate: _SliverDelegate(\r\n        minHeight: 40.0,\r\n        maxHeight: 100.0,\r\n        child: Container(\r\n          color: color,\r\n          child: Center(\r\n            child: Text(text, style: const TextStyle(\r\n                fontSize: 18,\r\n                shadows: [Shadow(color: Colors.white, offset: Offset(1, 1))]),\r\n          ),\r\n        )),\r\n  ));\r\n\r\n  Widget _buildSliverList() => SliverList(\r\n    delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n          alignment: Alignment.center,\r\n          width: 100,\r\n          height: 60,\r\n          color: data[index],\r\n          child: Text(\r\n            colorString(data[index]),\r\n            style: const TextStyle(color: Colors.white, shadows: [\r\n              Shadow(\r\n                  color: Colors.black,\r\n                  offset: Offset(.5, .5),\r\n                  blurRadius: 2)\r\n            ]),\r\n          ),\r\n        ),\r\n        childCount: data.length),\r\n  );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 2,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n    IconButton(\r\n      onPressed: () {},\r\n      icon: const Icon(\r\n        Icons.star_border,\r\n        color: Colors.white,\r\n      ),\r\n    )\r\n  ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n\r\n\r\nclass _SliverDelegate extends SliverPersistentHeaderDelegate {\r\n  _SliverDelegate({\r\n    required this.minHeight,\r\n    required this.maxHeight,\r\n    required this.child,\r\n  });\r\n\r\n  final double minHeight; //最小高度\r\n  final double maxHeight; //最大高度\r\n  final Widget child; //孩子\r\n\r\n  @override\r\n  double get minExtent => minHeight;\r\n\r\n  @override\r\n  double get maxExtent => max(maxHeight, minHeight);\r\n\r\n  @override\r\n  Widget build(\r\n      BuildContext context, double shrinkOffset, bool overlapsContent) {\r\n    return SizedBox.expand(child: child);\r\n  }\r\n\r\n  @override //是否需要重建\r\n  bool shouldRebuild(_SliverDelegate oldDelegate) {\r\n    return maxHeight != oldDelegate.maxHeight ||\r\n        minHeight != oldDelegate.minHeight ||\r\n        child != oldDelegate.child;\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(415,314,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverPrototypeExtentListDemo extends StatefulWidget {\r\n  const SliverPrototypeExtentListDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SliverPrototypeExtentListDemoState createState() =>\r\n      _SliverPrototypeExtentListDemoState();\r\n}\r\n\r\nclass _SliverPrototypeExtentListDemoState\r\n    extends State<SliverPrototypeExtentListDemo> {\r\n  final List<Color> data = [\r\n    Colors.orange[50]!,\r\n    Colors.orange[100]!,\r\n    Colors.orange[200]!,\r\n    Colors.orange[300]!,\r\n    Colors.orange[400]!,\r\n    Colors.orange[500]!,\r\n    Colors.orange[600]!,\r\n    Colors.orange[700]!,\r\n    Colors.orange[800]!,\r\n    Colors.orange[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[_buildSliverAppBar(), _buildSliverList()],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverPrototypeExtentList(\r\n        prototypeItem: Container(\r\n          height: 80,\r\n        ),\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 150.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 5,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(416,189,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-31\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SliverToBoxAdapterDemo extends StatelessWidget {\r\n  const SliverToBoxAdapterDemo({super.key});\r\n\r\n   List<Color> get data => [\r\n    Colors.purple[50]!,\r\n    Colors.purple[100]!,\r\n    Colors.purple[200]!,\r\n    Colors.purple[300]!,\r\n    Colors.purple[400]!,\r\n    Colors.purple[500]!,\r\n    Colors.purple[600]!,\r\n    Colors.purple[700]!,\r\n    Colors.purple[800]!,\r\n    Colors.purple[900]!,\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 300,\r\n      child: CustomScrollView(\r\n        slivers: <Widget>[\r\n          _buildSliverAppBar(),\r\n          _buildCommonWidget(),\r\n          _buildSliverList()\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildCommonWidget() => SliverToBoxAdapter(\r\n        child: Container(\r\n          padding: const EdgeInsets.symmetric(horizontal: 10),\r\n          color: Colors.grey.withAlpha(22),\r\n          child: ListTile(\r\n            leading: Image.asset("assets/images/icon_head.webp"),\r\n            title: const Text("以梦为马"),\r\n            subtitle: const Text("海子"),\r\n            selected: true,\r\n            contentPadding: const EdgeInsets.all(5),\r\n            trailing: const Icon(Icons.more_vert),\r\n          ),\r\n        ),\r\n      );\r\n\r\n  Widget _buildSliverList() => SliverList(\r\n        delegate: SliverChildBuilderDelegate(\r\n            (_, int index) => Container(\r\n                  alignment: Alignment.center,\r\n                  width: 100,\r\n                  height: 60,\r\n                  color: data[index],\r\n                  child: Text(\r\n                    colorString(data[index]),\r\n                    style: const TextStyle(color: Colors.white, shadows: [\r\n                      Shadow(\r\n                          color: Colors.black,\r\n                          offset: Offset(.5, .5),\r\n                          blurRadius: 2)\r\n                    ]),\r\n                  ),\r\n                ),\r\n            childCount: data.length),\r\n      );\r\n\r\n  Widget _buildSliverAppBar() {\r\n    return SliverAppBar(\r\n      expandedHeight: 190.0,\r\n      leading: _buildLeading(),\r\n      title: const Text(''张风捷特烈''),\r\n      actions: _buildActions(),\r\n      elevation: 2,\r\n      pinned: true,\r\n      backgroundColor: Colors.orange,\r\n      flexibleSpace: FlexibleSpaceBar(\r\n        //伸展处布局\r\n        titlePadding: const EdgeInsets.only(left: 55, bottom: 15), //标题边距\r\n        collapseMode: CollapseMode.parallax, //视差效果\r\n        background: Image.asset(\r\n          "assets/images/caver.webp",\r\n          fit: BoxFit.cover,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildLeading() => Container(\r\n      margin: const EdgeInsets.all(10),\r\n      child: Image.asset(''assets/images/icon_head.webp''));\r\n\r\n  List<Widget> _buildActions() => <Widget>[\r\n        IconButton(\r\n          onPressed: () {},\r\n          icon: const Icon(\r\n            Icons.star_border,\r\n            color: Colors.white,\r\n          ),\r\n        )\r\n      ];\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(417,348,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\n\r\nclass SliverWithKeepAliveWidgetDemo extends StatelessWidget {\r\n  const SliverWithKeepAliveWidgetDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''只有 SliverWithKeepAliveWidget 之下才可以包含 KeepAlive 组件, 由于其为抽象类，不能直接使用。其子类 SliverMultiBoxAdaptorWidget 也说抽象类，''\r\n      ''用于容纳多个孩子，帮助它的子类使用 SliverChildDelegate 构建懒加载 children。''\r\n      ''最终实现类为 SliverGrid、SliverList、SliverPrototypeExtentList、SliverFixedExtentList，表示他们都可以支持 item 的状态保持。''\r\n      ''除此之外还有 _SliverFillViewportRenderObjectWidget 的私有实现类，这是 PageView 的底层实现，这也是为什么 PageView 也支持保活的原因。'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    return Container(\r\n      color: Theme.of(context).primaryColor.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(418,140,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSnackBar extends StatefulWidget {\r\n  const CustomSnackBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomSnackBarState createState() => _CustomSnackBarState();\r\n}\r\n\r\nclass _CustomSnackBarState extends State<CustomSnackBar> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ElevatedButton(\r\n        onPressed: () =>\r\n            ScaffoldMessenger.of(context).showSnackBar(_buildSnackBar()),\r\n        child: const Text(\r\n          ''点我弹出SnackBar'',\r\n          style: TextStyle(color: Colors.white),\r\n        ));\r\n  }\r\n\r\n  SnackBar _buildSnackBar() {\r\n    return SnackBar(\r\n      elevation: 3,\r\n      shape: const RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.only(\r\n              topLeft: Radius.circular(10), topRight: Radius.circular(10))),\r\n      content: const Text(''Wellcome to for join Flutter Unit!''),\r\n      duration: const Duration(seconds: 3),\r\n      //持续时间\r\n      backgroundColor: Colors.red,\r\n      onVisible: () => print(''onVisible''),\r\n      action: SnackBarAction(\r\n          textColor: Colors.white, label: ''确定'', onPressed: () {}),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(419,141,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSnackBarAction extends StatelessWidget {\r\n  const CustomSnackBarAction({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SnackBarAction(\r\n      disabledTextColor: Colors.red,\r\n      textColor: Colors.blue,\r\n      label: ''确定'',\r\n      onPressed: () => print(''onPressed''),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(420,107,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass OneSpacer extends StatelessWidget {\r\n  const OneSpacer({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return\r\n      Container(\r\n        color: Colors.grey.withAlpha(33),\r\n        child: Row(children: <Widget>[\r\n          Container(\r\n            alignment: Alignment.center,\r\n            width: 100,\r\n            height: 50,\r\n            color: Colors.red,\r\n          ),\r\n          const Spacer(),\r\n          Container(\r\n            alignment: Alignment.center,\r\n            width: 60,\r\n            height: 50,\r\n            color: Colors.blue,\r\n          ),\r\n        ],),\r\n      );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(421,107,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ManySpacer extends StatefulWidget {\r\n  const ManySpacer({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ManySpacerState createState() => _ManySpacerState();\r\n}\r\n\r\nclass _ManySpacerState extends State<ManySpacer> {\r\n  int _flexA = 1;\r\n  int _flexB = 1;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildSliders(),\r\n        Container(\r\n          color: Colors.grey.withAlpha(33),\r\n          child: Row(children: <Widget>[\r\n            Spacer(flex: _flexA),\r\n            Container(\r\n              alignment: Alignment.center,\r\n              width: 100,\r\n              height: 50,\r\n              color: Colors.red,\r\n            ),\r\n            Spacer(flex: _flexB),\r\n            Container(\r\n              alignment: Alignment.center,\r\n              width: 60,\r\n              height: 50,\r\n              color: Colors.blue,\r\n            ),\r\n          ],),\r\n        )\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSliders() {\r\n    return Column(\r\n      children: <Widget>[\r\n        Slider(\r\n            divisions: 20,\r\n            min: 1,\r\n            max: 10,\r\n            label: "左边flex: $_flexA",\r\n            value: _flexA.toDouble(),\r\n            onChanged: (v) => setState(() => _flexA = v.round())\r\n        ),\r\n        Slider(\r\n            divisions: 20,\r\n            label: "右边flex: $_flexB",\r\n            min: 1,\r\n            max: 10,\r\n            value: _flexB.toDouble(),\r\n            onChanged: (v) => setState(() => _flexB = v.round())\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(422,97,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomStack extends StatelessWidget {\r\n  const CustomStack({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget yellowBox = Container(\r\n      color: Colors.yellow,\r\n      height: 100,\r\n      width: 100,\r\n    );\r\n\r\n    Widget redBox = Container(\r\n      color: Colors.red,\r\n      height: 90,\r\n      width: 90,\r\n    );\r\n\r\n    Widget greenBox = Container(\r\n      color: Colors.green,\r\n      height: 80,\r\n      width: 80,\r\n    );\r\n\r\n    Widget cyanBox = Container(\r\n      color: Colors.cyanAccent,\r\n      height: 70,\r\n      width: 70,\r\n    );\r\n\r\n    return Container(\r\n      width: 200,\r\n      height: 120,\r\n      color: Colors.grey.withAlpha(33),\r\n      child: Stack(\r\n        textDirection: TextDirection.rtl,\r\n        fit: StackFit.loose,\r\n        alignment: Alignment.topRight,\r\n        // overflow: Overflow.clip, // 1.22.0 被去除\r\n        children: <Widget>[yellowBox, redBox, greenBox, cyanBox],\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(423,97,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass PositionedStack extends StatelessWidget {\r\n  const PositionedStack({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget yellowBox = Container(\r\n      color: Colors.yellow,\r\n      height: 100,\r\n      width: 100,\r\n    );\r\n\r\n    Widget redBox = Container(\r\n      color: Colors.red,\r\n      height: 90,\r\n      width: 90,\r\n    );\r\n\r\n    Widget greenBox = Container(\r\n      color: Colors.green,\r\n      height: 80,\r\n      width: 80,\r\n    );\r\n\r\n    Widget cyanBox = Container(\r\n      color: Colors.cyanAccent,\r\n      height: 70,\r\n      width: 70,\r\n    );\r\n\r\n    return Container(\r\n        width: 200,\r\n        height: 120,\r\n        color: Colors.grey.withAlpha(33),\r\n        child: Stack(\r\n          children: <Widget>[yellowBox, redBox, greenBox,\r\n            Positioned(\r\n              child: cyanBox,\r\n              bottom: 10,\r\n              right: 10,\r\n            )\r\n          ],\r\n        ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(424,242,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass StatefulBuilderDemo extends StatelessWidget {\r\n  const StatefulBuilderDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    int count = 0;\r\n\r\n    return StatefulBuilder(\r\n      builder: (ctx, setState) => ElevatedButton(\r\n        child: Text("当前数字: $count"),\r\n        onPressed: () {\r\n          setState(() {\r\n            count++;\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(425,233,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\n\r\nclass StatusTransitionWidgetDemo extends StatefulWidget {\r\n  const StatusTransitionWidgetDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _StatusTransitionWidgetDemoState createState() =>\r\n      _StatusTransitionWidgetDemoState();\r\n}\r\n\r\nclass _StatusTransitionWidgetDemoState extends State<StatusTransitionWidgetDemo>\r\n    with SingleTickerProviderStateMixin {\r\n  late AnimationController _ctrl;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _ctrl = AnimationController(\r\n      vsync: this,\r\n      duration: const Duration(seconds: 1),\r\n    )..forward();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: (){\r\n        _ctrl.forward(from: 0);\r\n      },\r\n      child: ColorStatusTransitionWidget(\r\n        anim: _ctrl,\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass ColorStatusTransitionWidget extends StatusTransitionWidget {\r\n  final Animation<double> anim;\r\n\r\n  const ColorStatusTransitionWidget({Key? key,required this.anim})\r\n      : super(key: key, animation: anim);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Color color = Colors.blue;\r\n    switch (animation.status) {\r\n      case AnimationStatus.dismissed:\r\n        color = Colors.black;\r\n        break;\r\n      case AnimationStatus.forward:\r\n        color = Colors.blue;\r\n        break;\r\n      case AnimationStatus.reverse:\r\n        color = Colors.red;\r\n        break;\r\n      case AnimationStatus.completed:\r\n        color = Colors.green;\r\n        break;\r\n    }\r\n\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      width: 80,\r\n      height: 80,\r\n      decoration: BoxDecoration(color: color, shape: BoxShape.circle),\r\n      child: Text(''${animation.status}''.split(''.'')[1],style: const TextStyle(color: Colors.white),),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(426,200,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass StepperDemo extends StatefulWidget {\r\n  const StepperDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _StepperDemoState createState() => _StepperDemoState();\r\n}\r\n\r\nclass _StepperDemoState extends State<StepperDemo> {\r\n  int _position = 0;\r\n\r\n  final Map<String, String> stepsData = {\r\n    "填写表单": ''请按表单填写个人信息。'',\r\n    "邮箱校验": ''已将邮件发送至您的邮箱，请按照相关指示对您的账号进行邮箱校验。'',\r\n    "注册完成": ''恭喜您，注册完成！'',\r\n  };\r\n\r\n  final List<Step> steps = const [\r\n    Step(\r\n      title: Text("填写表单"),\r\n      content: SizedBox(height: 60, child: Text("请按表单填写个人信息")),\r\n    ),\r\n    Step(title: Text("邮箱校验"), content: Text("请对您的账号进行邮箱校验")),\r\n    Step(title: Text("注册完成"), content: Text("恭喜您，注册完成")),\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: Stepper(\r\n          type: StepperType.horizontal,\r\n          currentStep: _position,\r\n          onStepTapped: (index) {\r\n            setState(() {\r\n              _position = index;\r\n            });\r\n          },\r\n          onStepContinue: () {\r\n            setState(() {\r\n              if (_position < 2) {\r\n                _position++;\r\n              }\r\n            });\r\n          },\r\n          onStepCancel: () {\r\n            if (_position > 0) {\r\n              setState(() {\r\n                _position--;\r\n              });\r\n            }\r\n          },\r\n          controlsBuilder: (_, ControlsDetails details) {\r\n            return Row(\r\n              children: <Widget>[\r\n                ElevatedButton(\r\n                  style: ElevatedButton.styleFrom(\r\n                      backgroundColor: Colors.blue,\r\n                      shape: const CircleBorder(\r\n                        side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n                      )),\r\n                  onPressed: details.onStepContinue,\r\n                  child: const Icon(\r\n                    Icons.check,\r\n                    color: Colors.white,\r\n                  ),\r\n                ),\r\n                ElevatedButton(\r\n                  style: ElevatedButton.styleFrom(\r\n                      backgroundColor: Colors.red,\r\n                      shape: const CircleBorder(\r\n                        side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n                      )),\r\n                  onPressed: details.onStepCancel,\r\n                  child: const Icon(\r\n                    Icons.keyboard_backspace,\r\n                    color: Colors.white,\r\n                  ),\r\n                ),\r\n              ],\r\n            );\r\n          },\r\n          steps: stepsData.keys.map((e){\r\n            bool isActive = stepsData.keys.toList().indexOf(e) ==_position;\r\n            return Step(\r\n            title: Text(e,style: TextStyle(color: isActive?Colors.blue:Colors.black),),\r\n            isActive: isActive,\r\n            state: _getState(stepsData.keys.toList().indexOf(e)),\r\n            content: SizedBox(height: 60, child: Text(stepsData[e]!)),\r\n          );\r\n          }).toList()),\r\n    );\r\n  }\r\n\r\n  StepState _getState(index){\r\n    if(_position==index) return StepState.editing;\r\n    if(_position>index) return StepState.complete;\r\n    return StepState.indexed;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(427,200,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass VerticalStepper extends StatefulWidget {\r\n  const VerticalStepper({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _VerticalStepperState createState() => _VerticalStepperState();\r\n}\r\n\r\nclass _VerticalStepperState extends State<VerticalStepper> {\r\n  int _position = 0;\r\n\r\n  final Map<String,String> stepsData = {\r\n    "填写表单": ''请按表单填写个人信息。'',\r\n    "邮箱校验": ''已将邮件发送至您的邮箱，请按照相关指示对您的账号进行邮箱校验。'',\r\n    "注册完成": ''恭喜您，注册完成！'',\r\n  };\r\n\r\n  final List<Step> steps = const[\r\n    Step(\r\n      title: Text("填写表单"),\r\n      content: SizedBox(height: 60, child: Text("请按表单填写个人信息")),\r\n    ),\r\n    Step(title: Text("邮箱校验"), content: Text("请对您的账号进行邮箱校验")),\r\n    Step(title: Text("注册完成"), content: Text("恭喜您，注册完成")),\r\n  ];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Stepper(\r\n        type: StepperType.vertical,\r\n        currentStep: _position,\r\n        onStepTapped: (index) {\r\n          setState(() {\r\n            _position = index;\r\n          });\r\n        },\r\n        onStepContinue: () {\r\n          setState(() {\r\n            if (_position < 2) {\r\n              _position++;\r\n            }\r\n          });\r\n        },\r\n        onStepCancel: () {\r\n          if (_position > 0) {\r\n            setState(() {\r\n              _position--;\r\n            });\r\n          }\r\n        },\r\n        controlsBuilder: (_,ControlsDetails details) {\r\n          return Row(\r\n            children: <Widget>[\r\n              ElevatedButton(\r\n                style: ElevatedButton.styleFrom(\r\n                    backgroundColor: Colors.blue,\r\n                    shape: const CircleBorder(\r\n                      side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n                    )),\r\n                onPressed: details.onStepContinue,\r\n                child: const Icon(\r\n                  Icons.check,\r\n                  color: Colors.white,\r\n                ),\r\n              ),\r\n              ElevatedButton(\r\n                style: ElevatedButton.styleFrom(\r\n                    backgroundColor: Colors.red,\r\n                    shape: const CircleBorder(\r\n                      side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n                    )),\r\n                onPressed: details.onStepCancel,\r\n                child: const Icon(\r\n                  Icons.keyboard_backspace,\r\n                  color: Colors.white,\r\n                ),\r\n              ),\r\n            ],\r\n          );\r\n        },\r\n        steps: stepsData.keys.map((e) {\r\n          bool isActive = stepsData.keys.toList().indexOf(e) == _position;\r\n          return Step(\r\n            title: Text(\r\n              e,\r\n              style: TextStyle(color: isActive ? Colors.blue : Colors.black),\r\n            ),\r\n            isActive: isActive,\r\n            state: _getState(stepsData.keys.toList().indexOf(e)),\r\n            content: SizedBox(height: 60, child: Text(stepsData[e]!)),\r\n          );\r\n        }).toList());\r\n  }\r\n\r\n  StepState _getState(index) {\r\n    if (_position == index) return StepState.editing;\r\n    if (_position > index) return StepState.complete;\r\n    return StepState.indexed;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(428,173,0,replace(replace('import ''dart:async'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomStreamBuilder extends StatefulWidget {\r\n  const CustomStreamBuilder({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomStreamBuilderState createState() => _CustomStreamBuilderState();\r\n}\r\n\r\nclass _CustomStreamBuilderState extends State<CustomStreamBuilder> {\r\n  final CountGenerator _generator = CountGenerator()..increment();\r\n\r\n  @override\r\n  void dispose() {\r\n    _generator.dispose(); //关闭控制器\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Row(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: <Widget>[\r\n        ElevatedButton(\r\n          style: ElevatedButton.styleFrom(\r\n              shape: const CircleBorder(\r\n                side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n              )),\r\n          child: const Icon(\r\n            Icons.add,\r\n            color: Colors.white,\r\n          ),\r\n          onPressed: () async {\r\n            await _generator.increment();\r\n          },\r\n        ),\r\n        _buildStreamBuilder(),\r\n        ElevatedButton(\r\n          style: ElevatedButton.styleFrom(\r\n              shape: const CircleBorder(\r\n                side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n              )),\r\n          child: const Icon(\r\n            Icons.remove,\r\n            color: Colors.white,\r\n          ),\r\n          onPressed: () async {\r\n            await _generator.minus();\r\n          },\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildStreamBuilder() => StreamBuilder<int>(\r\n      stream: _generator.state,\r\n      builder: (BuildContext context, AsyncSnapshot snap) {\r\n        print(snap);\r\n        if (snap.connectionState == ConnectionState.done) {\r\n          return const Text(''Done'');\r\n        }\r\n        if (snap.connectionState == ConnectionState.active) {\r\n          return Text(\r\n            snap.data.toString(),\r\n            style: Theme.of(context).textTheme.bodyMedium,\r\n          );\r\n        }\r\n        if (snap.connectionState == ConnectionState.waiting) {\r\n          return const CircularProgressIndicator();\r\n        }\r\n        if (snap.hasError) {\r\n          return const Text(''Error'');\r\n        }\r\n        return Container();\r\n      });\r\n}\r\n\r\nclass CountGenerator {\r\n  int _count = 0; //计数器数据\r\n  final StreamController<int> _controller = StreamController(); //控制器\r\n\r\n  Stream<int> get state => _controller.stream; //获取状态流\r\n  int get count => _count; //获取计数器数据\r\n\r\n  void dispose() {//关闭控制器\r\n    _controller.close();\r\n  }\r\n\r\n  Future<void> increment() async {//增加记数方法\r\n    _controller.add(++_count);\r\n  }\r\n\r\n  Future<void> minus() async {//增加记数方法\r\n    _controller.add(--_count);\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(429,40,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-14\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSwitch extends StatefulWidget {\r\n  const CustomSwitch({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomSwitchState createState() => _CustomSwitchState();\r\n}\r\n\r\nclass _CustomSwitchState extends State<CustomSwitch> {\r\n  final List<Color> colors = const[\r\n    Colors.red,\r\n    Colors.yellow,\r\n    Colors.blue,\r\n    Colors.green\r\n  ];\r\n  bool _checked = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      children: colors\r\n          .map((e) => Switch(\r\n              value: _checked,\r\n              inactiveThumbColor: e,\r\n              inactiveTrackColor: Colors.grey.withAlpha(88),\r\n              activeColor: Colors.green,\r\n              activeTrackColor: Colors.orange,\r\n              onChanged: (v) {\r\n                setState(() => _checked = v);\r\n              }))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(430,40,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-14\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ImageSwitch extends StatefulWidget {\r\n  const ImageSwitch({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ImageSwitchState createState() => _ImageSwitchState();\r\n}\r\n\r\nclass _ImageSwitchState extends State<ImageSwitch> {\r\n  final List<String> imgs = const [\r\n    "assets/images/head_icon/icon_5.webp",\r\n    "assets/images/head_icon/icon_6.webp",\r\n    "assets/images/head_icon/icon_7.webp",\r\n    "assets/images/head_icon/icon_8.webp"\r\n  ];\r\n  bool _checked = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      children: imgs\r\n          .map((e) =>\r\n          Switch(\r\n              value: _checked,\r\n              inactiveThumbImage: AssetImage(e),\r\n              activeThumbImage: const AssetImage(''assets/images/icon_head.webp''),\r\n              onChanged: (v) {\r\n                setState(() => _checked = v);\r\n              }))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(431,18,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomSwitchListTile extends StatefulWidget {\r\n  const CustomSwitchListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomSwitchListTileState createState() => _CustomSwitchListTileState();\r\n}\r\n\r\nclass _CustomSwitchListTileState extends State<CustomSwitchListTile> {\r\n  var _value=false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: SwitchListTile(\r\n        value: _value,\r\n        inactiveThumbColor:Colors.cyanAccent ,\r\n        inactiveTrackColor: Colors.blue.withAlpha(88),\r\n        activeColor: Colors.orangeAccent,\r\n        activeTrackColor: Colors.orange,\r\n        secondary: Image.asset("assets/images/icon_head.webp"),\r\n        title: const Text("张风捷特烈"),\r\n        subtitle: const Text("@万花过尽知无物"),\r\n        onChanged: (v) => setState(() => _value = !_value),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(432,18,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SelectSwitchListTile extends StatefulWidget {\r\n  const SelectSwitchListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SelectSwitchListTileState createState() => _SelectSwitchListTileState();\r\n}\r\n\r\nclass _SelectSwitchListTileState extends State<SelectSwitchListTile> {\r\n  bool _value=false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: SwitchListTile(\r\n        value: _value,\r\n        selected: _value,\r\n        activeColor: Colors.orangeAccent,\r\n        secondary: Image.asset("assets/images/icon_head.webp"),\r\n        inactiveThumbImage: const AssetImage("assets/images/head_icon/icon_5.webp"),\r\n        activeThumbImage: const AssetImage("assets/images/icon_head.webp"),\r\n        title: const Text("张风捷特烈"),\r\n        subtitle: const Text("@万花过尽知无物"),\r\n        onChanged: (v) => setState(() => _value = !_value),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(433,18,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DenseSwitchListTile extends StatefulWidget {\r\n  const DenseSwitchListTile({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DenseSwitchListTileState createState() => _DenseSwitchListTileState();\r\n}\r\n\r\nclass _DenseSwitchListTileState extends State<DenseSwitchListTile> {\r\n  bool _value = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      margin: const EdgeInsets.all(10),\r\n      color: Colors.grey.withAlpha(22),\r\n      child: SwitchListTile(\r\n        value: _value,\r\n        dense: true,\r\n        selected: _value,\r\n        activeColor: Colors.orangeAccent,\r\n        secondary: Image.asset("assets/images/icon_head.webp"),\r\n        title: const Text("张风捷特烈"),\r\n        subtitle: const Text("@万花过尽知无物"),\r\n        onChanged: (v) => setState(() => _value = !_value),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(434,148,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomTab extends StatelessWidget {\r\n  const CustomTab({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n      children: const [\r\n        Tab(\r\n          icon:Icon( Icons.add,color: Colors.blue,),\r\n          child: Text(''添加''),\r\n        ),\r\n        Tab(\r\n          icon:Icon( Icons.close,color: Colors.red,),\r\n          text: ''删除'',\r\n        ),\r\n        Tab(\r\n          icon:Icon( Icons.refresh,color: Colors.green),\r\n          text: ''更新'',\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(435,58,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-16\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomTabBar extends StatefulWidget {\r\n  const CustomTabBar({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomTabBarState createState() => _CustomTabBarState();\r\n}\r\n\r\nclass _CustomTabBarState extends State<CustomTabBar>\r\n    with SingleTickerProviderStateMixin {\r\n  final List<String> tabs = [''风画庭'', ''雨韵舍'', ''雷鸣殿'', ''电疾堂'', ''霜寒阁'', ''雪月楼''];\r\n  late TabController _tabController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _tabController = TabController(vsync: this, length: tabs.length);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _tabController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return TabBar(\r\n      onTap: (tab) => print(tab),\r\n      labelStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n      unselectedLabelStyle: const TextStyle(fontSize: 16),\r\n      isScrollable: true,\r\n      controller: _tabController,\r\n      labelColor: Colors.blue,\r\n      indicatorWeight: 3,\r\n      indicatorPadding: const EdgeInsets.symmetric(horizontal: 10),\r\n      unselectedLabelColor: Colors.grey,\r\n      indicatorColor: Colors.orangeAccent,\r\n      tabs: tabs.map((e) => Tab(text: e)).toList(),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(436,58,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass NoShadowTabBarDemo extends StatefulWidget {\r\n  const NoShadowTabBarDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _NSTabBarState createState() => _NSTabBarState();\r\n}\r\n\r\nclass _NSTabBarState extends State<NoShadowTabBarDemo>\r\n    with SingleTickerProviderStateMixin {\r\n  final List<String> tabs = [''风画庭'', ''雨韵舍'', ''雷鸣殿'', ''电疾堂'', ''霜寒阁'', ''雪月楼''];\r\n  late TabController _tabController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _tabController = TabController(vsync: this, length: tabs.length);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _tabController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Theme(\r\n      data: Theme.of(context).copyWith(\r\n        splashColor: Colors.transparent,\r\n        highlightColor: Colors.transparent,\r\n      ),\r\n      child: TabBar(\r\n        onTap: (tab) => print(tab),\r\n        labelStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n        unselectedLabelStyle: const TextStyle(fontSize: 16),\r\n        isScrollable: true,\r\n        controller: _tabController,\r\n        labelColor: Colors.blue,\r\n        indicatorWeight: 3,\r\n        indicatorPadding: const EdgeInsets.symmetric(horizontal: 10),\r\n        unselectedLabelColor: Colors.grey,\r\n        indicatorColor: Colors.orangeAccent,\r\n        tabs: tabs.map((e) => Tab(text: e)).toList(),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(437,59,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomTabBarView extends StatefulWidget {\r\n  const CustomTabBarView({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomTabBarViewState createState() => _CustomTabBarViewState();\r\n}\r\n\r\nclass _CustomTabBarViewState extends State<CustomTabBarView> with SingleTickerProviderStateMixin {\r\n  final List<String> tabs = const [\r\n    ''风画庭'',\r\n    ''雨韵舍'',\r\n    ''雷鸣殿'',\r\n    ''电疾堂'',\r\n    ''霜寒阁'',\r\n    ''雪月楼'',\r\n  ];\r\n  late TabController _tabController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _tabController = TabController(vsync: this, length: tabs.length);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _tabController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        _buildTabBar(),\r\n        Container(\r\n            color: Colors.purple,\r\n            width: MediaQuery.of(context).size.width,\r\n            height: 200,\r\n            child: _buildTableBarView())\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTabBar() => TabBar(\r\n        onTap: (tab) => print(tab),\r\n        labelStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n        unselectedLabelStyle: const TextStyle(fontSize: 16),\r\n        isScrollable: true,\r\n        controller: _tabController,\r\n        labelColor: Colors.blue,\r\n        indicatorWeight: 3,\r\n        indicatorPadding: const EdgeInsets.symmetric(horizontal: 10),\r\n        unselectedLabelColor: Colors.grey,\r\n        indicatorColor: Colors.orangeAccent,\r\n        tabs: tabs.map((e) => Tab(text: e)).toList(),\r\n      );\r\n\r\n  Widget _buildTableBarView() => TabBarView(\r\n      controller: _tabController,\r\n      children: tabs.map((e) => Center(\r\n                  child: Text(\r\n                e,\r\n                style: const TextStyle(\r\n                  color: Colors.white,\r\n                  fontSize: 20,\r\n                ),\r\n              ))).toList());\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(438,110,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomTable extends StatelessWidget {\r\n  const CustomTable({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    _ItemBean title = _ItemBean("单位称", "量纲", "单位", "单位名称", "单位符号");\r\n    _ItemBean m = _ItemBean("长度", "L", "1m", "米", "m");\r\n    _ItemBean kg = _ItemBean("质量", "M", "1Kg", "千克", "Kg");\r\n    _ItemBean s = _ItemBean("时间", "T", "1s", "秒", "s");\r\n    _ItemBean a = _ItemBean("安培", "Ι", "1A", "安培", "A");\r\n    _ItemBean k = _ItemBean("热力学温度", "θ", "1K", "开尔文", "K");\r\n    _ItemBean mol = _ItemBean("物质的量", "N", "1mol", "摩尔", "mol");\r\n    _ItemBean cd = _ItemBean("发光强度", "J", "1cd", "坎德拉", "cd");\r\n\r\n    List<_ItemBean> data = [title, m, kg, s, a, k, mol, cd];\r\n\r\n    return SingleChildScrollView(\r\n      scrollDirection: Axis.horizontal,\r\n      child: Table(\r\n        columnWidths: const <int, TableColumnWidth>{\r\n          0: FixedColumnWidth(80.0),\r\n          1: FixedColumnWidth(80.0),\r\n          2: FixedColumnWidth(80.0),\r\n          3: FixedColumnWidth(80.0),\r\n          4: FixedColumnWidth(80.0),\r\n        },\r\n        defaultVerticalAlignment: TableCellVerticalAlignment.middle,\r\n        border: TableBorder.all(\r\n            color: Colors.orangeAccent, width: 1.0, style: BorderStyle.solid),\r\n        children: data\r\n            .map((item) => TableRow(children: <Widget>[\r\n                  Center(\r\n                      child: Text(\r\n                    item.name,\r\n                    style: const TextStyle(color: Colors.blue),\r\n                  )),\r\n                  Padding(\r\n                    padding: const EdgeInsets.all(8.0),\r\n                    child: Center(child: Text(item.symbol)),\r\n                  ),\r\n                  Padding(\r\n                    padding: const EdgeInsets.all(8.0),\r\n                    child: Center(child: Text(item.unitSymbol)),\r\n                  ),\r\n                  Padding(\r\n                    padding: const EdgeInsets.all(8.0),\r\n                    child: Center(child: Text(item.unitName)),\r\n                  ),\r\n                  Padding(\r\n                    padding: const EdgeInsets.all(8.0),\r\n                    child: Center(child: Text(item.unit)),\r\n                  ),\r\n                ]))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _ItemBean {\r\n  String name;\r\n  String symbol;\r\n  String unit;\r\n  String unitName;\r\n  String unitSymbol;\r\n\r\n  _ItemBean(this.name, this.symbol, this.unit, this.unitName, this.unitSymbol);\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(439,317,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass TableCellDemo extends StatelessWidget {\r\n  const TableCellDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    _ItemBean title = _ItemBean("单位称", "量纲", "单位", "单位名称", "单位符号");\r\n    _ItemBean m = _ItemBean("长度", "L", "1m", "米", "m");\r\n    _ItemBean kg = _ItemBean("质量", "M", "1Kg", "千克", "Kg");\r\n    _ItemBean s = _ItemBean("时间", "T", "1s", "秒", "s");\r\n    _ItemBean a = _ItemBean("安培", "Ι", "1A", "安培", "A");\r\n    _ItemBean k = _ItemBean("热力学温度", "θ", "1K", "开尔文", "K");\r\n    _ItemBean mol = _ItemBean("物质的量", "N", "1mol", "摩尔", "mol");\r\n    _ItemBean cd = _ItemBean("发光强度", "J", "1cd", "坎德拉", "cd");\r\n\r\n    List<_ItemBean> data = [title, m, kg, s, a, k, mol, cd];\r\n\r\n    return SingleChildScrollView(\r\n      scrollDirection: Axis.horizontal,\r\n      child: Table(\r\n        columnWidths: const <int, TableColumnWidth>{\r\n          0: FixedColumnWidth(80.0),\r\n          1: FixedColumnWidth(80.0),\r\n          2: FixedColumnWidth(80.0),\r\n          3: FixedColumnWidth(80.0),\r\n          4: FixedColumnWidth(80.0),\r\n        },\r\n        defaultVerticalAlignment: TableCellVerticalAlignment.middle,\r\n        border: TableBorder.all(\r\n            color: Colors.orangeAccent, width: 1.0, style: BorderStyle.solid),\r\n        children: data\r\n            .map((item) => TableRow(children: <Widget>[\r\n                  TableCell(\r\n                      verticalAlignment: TableCellVerticalAlignment.bottom,\r\n                      child: Text(\r\n                        item.name,\r\n                        style: const TextStyle(color: Colors.blue),\r\n                      )),\r\n                  TableCell(\r\n                      verticalAlignment: TableCellVerticalAlignment.baseline,\r\n                      child: Text(item.symbol)),\r\n                  TableCell(\r\n                      verticalAlignment: TableCellVerticalAlignment.top,\r\n                      child: Text(item.unitSymbol)),\r\n                  TableCell(\r\n                      verticalAlignment: TableCellVerticalAlignment.fill,\r\n                      child: Text(item.unitName)),\r\n                  TableCell(\r\n                    verticalAlignment: TableCellVerticalAlignment.middle,\r\n                    child: SizedBox(height: 30, child: Text(item.unit)),\r\n                  ),\r\n                ]))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _ItemBean {\r\n  String name;\r\n  String symbol;\r\n  String unit;\r\n  String unitName;\r\n  String unitSymbol;\r\n\r\n  _ItemBean(this.name, this.symbol, this.unit, this.unitName, this.unitSymbol);\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(440,151,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-26\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomTableRowInkWell extends StatelessWidget {\r\n  const CustomTableRowInkWell({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    _ItemBean title = _ItemBean("单位称", "量纲", "单位", "单位名称", "单位符号");\r\n    _ItemBean m = _ItemBean("长度", "L", "1m", "米", "m");\r\n    _ItemBean kg = _ItemBean("质量", "M", "1Kg", "千克", "Kg");\r\n    _ItemBean s = _ItemBean("时间", "T", "1s", "秒", "s");\r\n    _ItemBean a = _ItemBean("安培", "Ι", "1A", "安培", "A");\r\n    _ItemBean k = _ItemBean("热力学温度", "θ", "1K", "开尔文", "K");\r\n    _ItemBean mol = _ItemBean("物质的量", "N", "1mol", "摩尔", "mol");\r\n    _ItemBean cd = _ItemBean("发光强度", "J", "1cd", "坎德拉", "cd");\r\n\r\n    List<_ItemBean> data = [title, m, kg, s, a, k, mol, cd];\r\n\r\n    return SingleChildScrollView(\r\n      scrollDirection: Axis.horizontal,\r\n      child: Table(\r\n        columnWidths: const <int, TableColumnWidth>{\r\n          0: FixedColumnWidth(80.0),\r\n          1: FixedColumnWidth(80.0),\r\n          2: FixedColumnWidth(80.0),\r\n          3: FixedColumnWidth(80.0),\r\n          4: FixedColumnWidth(80.0),\r\n        },\r\n        defaultVerticalAlignment: TableCellVerticalAlignment.middle,\r\n        border: TableBorder.all(\r\n            color: Colors.orangeAccent, width: 1.0, style: BorderStyle.solid),\r\n        children: data\r\n            .map((item) => TableRow(children: <Widget>[\r\n          TableRowInkWell(\r\n            onTap: () => print(''onTap''),\r\n            onDoubleTap: () => print(''onDoubleTap''),\r\n            onLongPress: () => print(''onLongPress''),\r\n            onHighlightChanged: (v) => print(''onHighlightChanged:$v''),\r\n            child: Center(\r\n                child: Text(\r\n                  item.name,\r\n                  style: const TextStyle(color: Colors.blue),\r\n                )),\r\n          ),\r\n          Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child: Center(child: Text(item.symbol)),\r\n          ),\r\n          Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child: Center(child: Text(item.unitSymbol)),\r\n          ),\r\n          Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child: Center(child: Text(item.unitName)),\r\n          ),\r\n          Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child: Center(child: Text(item.unit)),\r\n          ),\r\n        ]))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _ItemBean {\r\n  String name;\r\n  String symbol;\r\n  String unit;\r\n  String unitName;\r\n  String unitSymbol;\r\n\r\n  _ItemBean(this.name, this.symbol, this.unit, this.unitName, this.unitSymbol);\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(441,205,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass TabPageSelectorDemo extends StatefulWidget {\r\n  const TabPageSelectorDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _TabPageSelectorDemoState createState() => _TabPageSelectorDemoState();\r\n}\r\n\r\nclass _TabPageSelectorDemoState extends State<TabPageSelectorDemo>\r\n    with SingleTickerProviderStateMixin {\r\n  final List<String> tabs = [''风画庭'', ''雨韵舍'', ''雷鸣殿'', ''电疾堂'', ''霜寒阁'', ''雪月楼''];\r\n  late TabController _tabController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _tabController = TabController(vsync: this, length: tabs.length);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _tabController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: Stack(\r\n        alignment: Alignment.center,\r\n        children: <Widget>[\r\n          Container(color: Colors.purple, child: _buildTableBarView()),\r\n          Positioned(\r\n            bottom: 10,\r\n            child: buildTabPageSelector(),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget buildTabPageSelector() => TabPageSelector(\r\n            controller: _tabController,\r\n            color: Colors.white,\r\n            indicatorSize: 10,\r\n            selectedColor: Colors.orangeAccent,\r\n          );\r\n\r\n  Widget _buildTableBarView() => TabBarView(\r\n      controller: _tabController,\r\n      children: tabs\r\n          .map((e) => Center(\r\n                  child: Text(\r\n                e,\r\n                style: const TextStyle(color: Colors.white, fontSize: 20),\r\n              )))\r\n          .toList());\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(442,206,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass TabPageSelectorIndicatorDemo extends StatelessWidget {\r\n  const TabPageSelectorIndicatorDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n      children:const [\r\n        TabPageSelectorIndicator(\r\n          backgroundColor: Colors.greenAccent,\r\n          borderColor: Colors.deepPurpleAccent,\r\n          size: 15,\r\n        ),\r\n        TabPageSelectorIndicator(\r\n          backgroundColor: Colors.blue,\r\n          borderColor: Colors.grey,\r\n          size: 20,\r\n        ),\r\n        TabPageSelectorIndicator(\r\n          backgroundColor: Colors.green,\r\n          borderColor: Colors.red,\r\n          size: 25,\r\n        ),\r\n        TabPageSelectorIndicator(\r\n          backgroundColor: Colors.yellow,\r\n          borderColor: Colors.brown,\r\n          size: 30,\r\n        ),\r\n        TabPageSelectorIndicator(\r\n          backgroundColor: Colors.amber,\r\n          borderColor: Colors.purpleAccent,\r\n          size: 35,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(443,280,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012class TapRegionDemo1 extends StatefulWidget {\r\012  const TapRegionDemo1({super.key});\r\012\r\012  @override\r\012  State<TapRegionDemo1> createState() => _TapRegionDemo1State();\r\012}\r\012\r\012class _TapRegionDemo1State extends State<TapRegionDemo1> {\r\012  String info = ''Tap any where'';\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return TapRegion(\r\012      onTapOutside: _onTapOutside,\r\012      onTapInside: _onTapInside,\r\012      child: Container(\r\012        alignment: Alignment.center,\r\012        height: 64,\r\012        width: 160,\r\012        color: isOut ? Colors.grey : Colors.blue,\r\012        child: Text(\r\012          info,\r\012          textAlign: TextAlign.center,\r\012          style: const TextStyle(color: Colors.white),\r\012        ),\r\012      ),\r\012    );\r\012  }\r\012\r\012  bool get isOut => info.contains(''TapOutside'');\r\012\r\012  void _onTapOutside(PointerDownEvent event) {\r\012    setState(() {\r\012      info = "TapOutside:\n${event.position}";\r\012    });\r\012  }\r\012\r\012  void _onTapInside(PointerDownEvent event) {\r\012    setState(() {\r\012      info = "TapInside:\n${event.position}";\r\012    });\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(444,2,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TextDemo1 extends StatelessWidget {\r\n  const TextDemo1({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    const TextStyle style =  TextStyle(\r\n      color: Colors.blue,\r\n      fontSize: 20,\r\n      fontWeight: FontWeight.bold,\r\n      fontStyle: FontStyle.italic,\r\n      letterSpacing: 10,\r\n    );\r\n    return Container(\r\n      width: 200,\r\n      color: Colors.cyanAccent.withAlpha(33),\r\n      height: 76,\r\n      child: const Text("toly-张风捷特烈-1994`", style: style),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(445,2,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TextDemo2 extends StatelessWidget {\r\n  const TextDemo2({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    const TextStyle style = TextStyle(\r\n        fontSize: 50,\r\n        color: Colors.white,\r\n        backgroundColor: Colors.black,\r\n        shadows: [\r\n          Shadow(color: Colors.cyanAccent, offset: Offset(1, 1), blurRadius: 10),\r\n          Shadow(color: Colors.blue, offset: Offset(-0.1, 0.1), blurRadius: 10),\r\n        ]);\r\n    return const Text("张风捷特烈", style: style);\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(446,2,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DecorationText extends StatelessWidget {\r\n  const DecorationText({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const Text(\r\n      "19940328",\r\n      style: TextStyle(\r\n          fontSize: 50,\r\n          fontWeight: FontWeight.bold,\r\n          decoration: TextDecoration.underline,\r\n          decorationThickness: 3,\r\n          decorationStyle: TextDecorationStyle.wavy,\r\n          decorationColor: Colors.blue,\r\n          fontStyle: FontStyle.italic,\r\n          fontFamily: "DancingScript",\r\n          letterSpacing: 10),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(447,2,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TextAlignText extends StatelessWidget {\r\n  const TextAlignText({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      runSpacing: 10,\r\n      children: TextAlign.values\r\n          .map((TextAlign textAlign) => Container(\r\n        width: 120,\r\n        color: Colors.cyanAccent.withAlpha(33),\r\n        height: 120 * 0.618,\r\n        child: Text(\r\n          " 张风捷特烈 toly " * 3,\r\n          textAlign: textAlign,\r\n        ),\r\n      ))\r\n          .toList(),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(448,2,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TextDirectionText extends StatelessWidget {\r\n  const TextDirectionText({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 40,\r\n      runSpacing: 10,\r\n      children: TextDirection.values\r\n          .map((TextDirection direction) => Container(\r\n        width: 120,\r\n        color: Colors.cyanAccent.withAlpha(33),\r\n        height: 120 * 0.618,\r\n        child: Text(\r\n          " 张风捷特烈 toly " * 10,\r\n          textDirection: direction,\r\n          maxLines: 3,\r\n          overflow: TextOverflow.ellipsis,\r\n        ),\r\n      ))\r\n          .toList(),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(449,2,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SoftWrapText extends StatelessWidget {\r\n  const SoftWrapText({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 10,\r\n      runSpacing: 10,\r\n      children: TextOverflow.values\r\n          .map((TextOverflow textOverflow) => Container(\r\n                width: 150,\r\n                color: Colors.cyanAccent.withAlpha(33),\r\n                height: 150 * 0.618 * 0.618,\r\n                child: Text(\r\n                  " 张风捷特烈 toly " * 5,\r\n                  overflow: textOverflow,\r\n                  softWrap: false,\r\n                ),\r\n              ))\r\n          .toList(),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(450,353,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass TextButtonDemo extends StatelessWidget {\r\n  const TextButtonDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n        alignment: Alignment.center,\r\n        height: 60,\r\n        child: Wrap(\r\n          spacing: 20,\r\n          children: [\r\n            TextButton(\r\n              child: const Text(''TextButton 文字''),\r\n              onPressed: _onPressed,\r\n              onLongPress: _onLongPress,\r\n            ),\r\n            const TextButton(\r\n              child: Text(''TextButton 禁用''),\r\n              onPressed: null,\r\n              onLongPress: null,\r\n            ),\r\n          ],\r\n        ));\r\n  }\r\n\r\n  void _onPressed() {}\r\n\r\n  void _onLongPress() {}\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(451,353,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass TextButtonStyleDemo extends StatelessWidget {\r\n  const TextButtonStyleDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      alignment: Alignment.center,\r\n      child: Wrap(\r\n        spacing: 10,\r\n        children: [\r\n          TextButton(\r\n            style: TextButton.styleFrom(\r\n                backgroundColor: Colors.blue,\r\n                padding: const EdgeInsets.symmetric(horizontal: 8),\r\n                foregroundColor: Colors.white,\r\n                elevation: 2,\r\n                shadowColor: Colors.orangeAccent),\r\n            child: const Text(''TextButton 样式''),\r\n            onPressed: _onPressed,\r\n            onLongPress: _onLongPress,\r\n          ),\r\n          TextButton(\r\n            style: TextButton.styleFrom(\r\n                backgroundColor: Colors.white,\r\n                foregroundColor: Colors.black,\r\n                side: const BorderSide(color: Colors.blue, width: 1),\r\n                shape: const RoundedRectangleBorder(\r\n                    borderRadius: BorderRadius.all(Radius.circular(10))),\r\n                // elevation: 2,\r\n                shadowColor: Colors.orangeAccent),\r\n            child: const Text(''TextButton 边线''),\r\n            autofocus: false,\r\n            onPressed: _onPressed,\r\n            onLongPress: _onLongPress,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _onPressed() {}\r\n\r\n  void _onLongPress() {}\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(452,54,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomTextField extends StatefulWidget {\r\n  const CustomTextField({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomTextFieldState createState() => _CustomTextFieldState();\r\n}\r\n\r\nclass _CustomTextFieldState extends State<CustomTextField> {\r\n  final FocusNode _focusNode = FocusNode();\r\n  late TextEditingController _controller;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _controller = TextEditingController();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _controller.dispose();\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n        width: 300,\r\n        child: TextField(\r\n          controller: _controller,\r\n          style: const TextStyle(color: Colors.blue),\r\n          decoration: const InputDecoration(\r\n            border: OutlineInputBorder(),\r\n            labelText: ''username'',\r\n          ),\r\n          onEditingComplete: () {\r\n            print(''onEditingComplete'');\r\n          },\r\n          onChanged: (v) {\r\n            print(''onChanged:'' + v);\r\n          },\r\n          onSubmitted: (v) {\r\n            FocusScope.of(context).requestFocus(_focusNode);\r\n            print(''onSubmitted:'' + v);\r\n            _controller.clear();\r\n          },\r\n        ));\r\n  }\r\n}\r\n\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(453,54,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CursorTextField extends StatefulWidget {\r\n  const CursorTextField({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CursorTextFieldState createState() => _CursorTextFieldState();\r\n}\r\n\r\nclass _CursorTextFieldState extends State<CursorTextField> {\r\n  final FocusNode _focusNode = FocusNode();\r\n\r\n  @override\r\n  void dispose() {\r\n    _focusNode.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.end,\r\n      children: <Widget>[\r\n        _buildSubmitBtn(),\r\n        _buildTextField(context),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTextField(BuildContext context) {\r\n    return SizedBox(\r\n      width: 300,\r\n      child: TextField(\r\n        style: const TextStyle(color: Colors.blue),\r\n        minLines: 3,\r\n        maxLines: 5,\r\n        cursorColor: Colors.green,\r\n        cursorRadius: const Radius.circular(3),\r\n        cursorWidth: 5,\r\n        showCursor: true,\r\n        decoration: const InputDecoration(\r\n          contentPadding: EdgeInsets.all(10),\r\n          hintText: "请输入...",\r\n          border: OutlineInputBorder(),\r\n        ),\r\n        onChanged: (v) {},\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSubmitBtn() => ElevatedButton(\r\n      child: const Text(\r\n        "提交",\r\n        style: TextStyle(color: Colors.white, fontSize: 16),\r\n      ),\r\n      onPressed: () => FocusScope.of(context).requestFocus(_focusNode));\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(454,54,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ComplexTextField extends StatelessWidget {\r\n  const ComplexTextField({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const TextField(\r\n        decoration: InputDecoration(\r\n      border: OutlineInputBorder(),\r\n      focusedBorder: OutlineInputBorder(\r\n          borderSide: BorderSide(color: Colors.blue),\r\n          borderRadius: BorderRadius.only(\r\n              topLeft: Radius.circular(10), bottomLeft: Radius.circular(10))),\r\n      enabledBorder: OutlineInputBorder(\r\n          borderSide: BorderSide(color: Colors.deepPurpleAccent),\r\n          borderRadius: BorderRadius.only(\r\n              topLeft: Radius.circular(10), bottomLeft: Radius.circular(10))),\r\n      labelText: ''username'',\r\n      labelStyle: TextStyle(color: Colors.purple),\r\n      helperText: "help me",\r\n      helperStyle: TextStyle(color: Colors.blue),\r\n\r\n      suffixText: "suffix",\r\n      suffixIcon: Icon(Icons.done),\r\n      suffixStyle: TextStyle(color: Colors.green),\r\n\r\n      counterText: "counter",\r\n      counterStyle: TextStyle(color: Colors.orange),\r\n\r\n      prefixText: "ID  ",\r\n      prefixStyle: TextStyle(color: Colors.blue),\r\n      prefixIcon: Icon(Icons.language),\r\n\r\n      fillColor: Color(0x110099ee),\r\n      filled: true,\r\n\r\n      //  errorText: "error",\r\n      //  errorMaxLines: 1,\r\n      //  errorStyle: TextStyle(color: Colors.red),\r\n      //  errorBorder: UnderlineInputBorder(),\r\n\r\n      hintText: "请输入用户名",\r\n      hintMaxLines: 1,\r\n      hintStyle: TextStyle(color: Colors.black38),\r\n      icon: Icon(Icons.assignment_ind),\r\n    ));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(455,281,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nclass TextFieldTapRegionDemo1 extends StatefulWidget {\r\n  const TextFieldTapRegionDemo1({super.key});\r\n\r\n  @override\r\n  State<TextFieldTapRegionDemo1> createState() => _TextFieldTapRegionDemo1State();\r\n}\r\n\r\nclass _TextFieldTapRegionDemo1State extends State<TextFieldTapRegionDemo1> {\r\n  TextEditingController controller = TextEditingController(text: ''0'');\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: 160,\r\n      child: Row(\r\n        children: [\r\n          Expanded(child: _buildInput()),\r\n          const SizedBox(width: 8),\r\n          TextFieldTapRegion(child: buildButtons())\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildInput() {\r\n    return TextField(\r\n      autofocus: true,\r\n      decoration: const InputDecoration(\r\n        border: OutlineInputBorder(),\r\n      ),\r\n      onChanged: _onChange,\r\n      controller: controller,\r\n      textAlign: TextAlign.center,\r\n    );\r\n  }\r\n\r\n  void _onChange(String value) {}\r\n\r\n  Widget buildButtons() {\r\n    ButtonStyle style = circleStyle;\r\n    return Column(\r\n      mainAxisAlignment: MainAxisAlignment.center,\r\n      children: <Widget>[\r\n        OutlinedButton(\r\n          style: style,\r\n          onPressed: _increment,\r\n          child: const Icon(Icons.add, size: 16),\r\n        ),\r\n        const SizedBox(height: 2),\r\n        OutlinedButton(\r\n          onPressed: _decrement,\r\n          style: style,\r\n          child: const Icon(Icons.remove, size: 16),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  ButtonStyle get circleStyle => OutlinedButton.styleFrom(\r\n        shape: const StadiumBorder(),\r\n        padding: EdgeInsets.zero,\r\n        minimumSize: const Size(32, 32),\r\n        maximumSize: const Size(32, 32),\r\n      );\r\n\r\n  void _increment() {\r\n    int value = int.tryParse(controller.text) ?? 0;\r\n    _updateText(''${value + 1}'', collapsed: true);\r\n  }\r\n\r\n  void _decrement() {\r\n    int value = int.tryParse(controller.text) ?? 0;\r\n    _updateText(''${value - 1}'', collapsed: true);\r\n  }\r\n\r\n  void _updateText(String text, {bool collapsed = true}) {\r\n    if (text != controller.text) {\r\n      controller.value = TextEditingValue(\r\n        text: text,\r\n      );\r\n    }\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(456,199,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomTextFormField extends StatefulWidget {\r\n  const CustomTextFormField({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomTextFormFieldState createState() => _CustomTextFormFieldState();\r\n}\r\n\r\nclass _CustomTextFormFieldState extends State<CustomTextFormField> {\r\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Row(\r\n      children: <Widget>[\r\n        const SizedBox(width: 40),\r\n        Expanded(\r\n          child: TextFormField(\r\n            style: const TextStyle(textBaseline: TextBaseline.alphabetic),\r\n            decoration: const InputDecoration(\r\n              border: OutlineInputBorder(),\r\n              labelText: ''username'',\r\n            ),\r\n            validator: _validateUsername,\r\n            onFieldSubmitted: _onFieldSubmitted,\r\n            onSaved: _onSaved,\r\n          ),\r\n        ),\r\n        _buildSubmitButton(context),\r\n      ],\r\n    );\r\n  }\r\n\r\n  String? _validateUsername(value) {\r\n    if (value.isEmpty) {\r\n      return ''用户名不能为空'';\r\n    }\r\n    return null;\r\n  }\r\n\r\n  void _onSaved(value) {\r\n    print(''onSaved:'' + value);\r\n  }\r\n\r\n  void _onFieldSubmitted(value) {\r\n    print(''onFieldSubmitted:'' + value);\r\n  }\r\n\r\n  Widget _buildSubmitButton(BuildContext context) => ElevatedButton(\r\n        style: ElevatedButton.styleFrom(\r\n            backgroundColor: Colors.blue,\r\n            shape: const CircleBorder(\r\n              side: BorderSide(width: 2.0, color: Color(0xFFDFDFDF)),\r\n            )),\r\n        onPressed: _onSubmit,\r\n        child: const Icon(\r\n          Icons.check,\r\n          color: Colors.white,\r\n        ),\r\n      );\r\n\r\n  void _onSubmit() {\r\n    if (_formKey.currentState == null) return;\r\n    _formKey.currentState!.save();\r\n    if (_formKey.currentState!.validate()) {\r\n      FocusScope.of(context).requestFocus(FocusNode());\r\n    }\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(457,168,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TextThemeDemo extends StatelessWidget {\r\n  const TextThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    TextTheme queryData = Theme.of(context).textTheme;\r\n    Map<String, TextStyle> styles = {\r\n      "headlineSmall: ": queryData.headlineSmall!,\r\n      "headlineMedium: ": queryData.headlineMedium!,\r\n      "headlineLarge: ": queryData.headlineLarge!,\r\n      "bodySmall: ": queryData.bodySmall!,\r\n      "bodyMedium: ": queryData.bodyMedium!,\r\n      "bodyLarge: ": queryData.bodyLarge!,\r\n      "titleSmall: ": queryData.titleSmall!,\r\n      "titleMedium: ": queryData.titleMedium!,\r\n      "titleLarge: ": queryData.titleLarge!,\r\n      "labelMedium: ": queryData.labelMedium!,\r\n      "labelSmall: ": queryData.labelSmall!,\r\n      "labelLarge: ": queryData.labelLarge!,\r\n    };\r\n\r\n    return Column(\r\n      children: styles.keys\r\n          .map((String styleInfo) => buildItem(styleInfo, styles[styleInfo]!))\r\n          .toList(),\r\n    );\r\n  }\r\n\r\n  TextStyle get textStyle => const TextStyle(\r\n        fontSize: 16,\r\n        fontWeight: FontWeight.bold,\r\n      );\r\n\r\n  Widget buildItem(String styleInfo, TextStyle style) => Column(\r\n        children: <Widget>[\r\n          Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n              children: <Widget>[\r\n                Text(styleInfo, style: textStyle),\r\n                Text("@toly", style: style)\r\n              ],\r\n            ),\r\n          ),\r\n          const Divider(height: 1)\r\n        ],\r\n      );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(458,168,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomTheme extends StatelessWidget {\r\n  const CustomTheme({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Theme(\r\n        data: ThemeData(\r\n            cardTheme: const CardThemeData(\r\n              color: Colors.red,\r\n              elevation: 4,\r\n            ),\r\n            dividerTheme: const DividerThemeData(\r\n              color: Colors.blue,\r\n              thickness: 2,\r\n            ),\r\n            sliderTheme: const SliderThemeData(\r\n              thumbColor: Colors.red,\r\n              activeTrackColor: Colors.green,\r\n              inactiveTrackColor: Colors.grey,\r\n            )),\r\n        child: Wrap(\r\n            crossAxisAlignment: WrapCrossAlignment.center,\r\n            children: <Widget>[\r\n              Card(\r\n                child: Container(\r\n                  width: 50,\r\n                  height: 50,\r\n                  color: Colors.transparent,\r\n                ),\r\n              ),\r\n              const SizedBox(\r\n                width: 150,\r\n                child: Slider(value: 0.8, onChanged: null),\r\n              ),\r\n              const SizedBox(width: 150, child: Divider())\r\n            ]));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(459,246,0,replace(replace('import ''package:flutter/cupertino.dart'';\r\nimport ''package:flutter/material.dart'';\r\n\r\nclass TickerModeDemo1 extends StatefulWidget {\r\n  const TickerModeDemo1({super.key});\r\n\r\n  @override\r\n  State<TickerModeDemo1> createState() => _TickerModeDemo1State();\r\n}\r\n\r\nclass _TickerModeDemo1State extends State<TickerModeDemo1> {\r\n  bool _disable = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: [\r\n        buildOutSwitch(),\r\n        const SizedBox(height: 4),\r\n        TickerMode(enabled: !_disable, child: buildTestContent()),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget buildOutSwitch() => Wrap(\r\n        alignment: WrapAlignment.center,\r\n        crossAxisAlignment: WrapCrossAlignment.center,\r\n        children: [\r\n          const Text(''TickerMode外的Switch:''),\r\n          Switch(value: _disable, onChanged: _onChanged)\r\n        ],\r\n      );\r\n\r\n  Widget buildTestContent() => Wrap(\r\n        alignment: WrapAlignment.center,\r\n        crossAxisAlignment: WrapCrossAlignment.center,\r\n        spacing: 20,\r\n        children: [\r\n          Switch(value: _disable, onChanged: _onChanged),\r\n          const CupertinoActivityIndicator(),\r\n          const CircularProgressIndicator(),\r\n        ],\r\n      );\r\n\r\n  void _onChanged(bool value) {\r\n    setState(() {\r\n      _disable = value;\r\n    });\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(460,208,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TitleDemo extends StatelessWidget {\r\n  const TitleDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Title(\r\n      title: ''张风捷特烈'',\r\n      color: const Color(0xFF9C27B0),\r\n      child: const Center(\r\n        child: Text(''应用菜单栏中该页的名称为: 张风捷特烈''),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(461,33,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomToggleButtons extends StatefulWidget {\r\n  const CustomToggleButtons({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomToggleButtonsState createState() => _CustomToggleButtonsState();\r\n}\r\n\r\nclass _CustomToggleButtonsState extends State<CustomToggleButtons> {\r\n  List<bool> _isSelected = [true, false, false];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ToggleButtons(\r\n      children: const <Widget>[\r\n         Icon(Icons.skip_previous),\r\n         Icon(Icons.pause),\r\n         Icon(Icons.skip_next),\r\n      ],\r\n      borderWidth: 1,\r\n      borderRadius: BorderRadius.circular(10),\r\n      isSelected: _isSelected,\r\n      onPressed: (value) => setState(() {\r\n        _isSelected = _isSelected.map((e) => false).toList();\r\n        _isSelected[value] = true;\r\n      }),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(462,33,0,replace(replace('\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ColorToggleButtons extends StatefulWidget {\r\n  const ColorToggleButtons({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ColorToggleButtonsState createState() => _ColorToggleButtonsState();\r\n}\r\n\r\nclass _ColorToggleButtonsState extends State<ColorToggleButtons> {\r\n  List<bool> _isSelected = [true, false, false];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ToggleButtons(\r\n      children: const <Widget>[\r\n        Icon(Icons.skip_previous),\r\n        Icon(Icons.pause),\r\n        Icon(Icons.skip_next),\r\n      ],\r\n      borderWidth: 1,\r\n      borderColor: Colors.orangeAccent,\r\n      selectedBorderColor: Colors.blue,\r\n      splashColor: Colors.purple.withAlpha(66),\r\n      borderRadius: BorderRadius.circular(10),\r\n      selectedColor: Colors.red,\r\n      fillColor: Colors.green.withAlpha(11),\r\n      isSelected: _isSelected,\r\n      onPressed: (value) => setState(() {\r\n        _isSelected = _isSelected.map((e) => false).toList();\r\n        _isSelected[value] = true;\r\n      }),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(463,33,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ProToggleButtons extends StatefulWidget {\r\n  const ProToggleButtons({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ProToggleButtonsState createState() => _ProToggleButtonsState();\r\n}\r\n\r\nclass _ProToggleButtonsState extends State<ProToggleButtons> {\r\n  final List<bool> _isSelected = [false, false, false];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ToggleButtons(\r\n      children: const <Widget>[\r\n        Icon(Icons.skip_previous),\r\n        Icon(Icons.pause),\r\n        Icon(Icons.skip_next),\r\n      ],\r\n      borderWidth: 1,\r\n      borderColor: Colors.blue,\r\n      selectedBorderColor: Colors.orangeAccent,\r\n      splashColor: Colors.purple.withAlpha(66),\r\n      borderRadius: BorderRadius.circular(10),\r\n      selectedColor: Colors.red,\r\n      fillColor: Colors.green.withAlpha(11),\r\n      isSelected: _isSelected,\r\n      onPressed: (value) => setState(() {\r\n        _isSelected[value] = !_isSelected[value];\r\n      }),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(464,332,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ToggleButtonsThemeDemo extends StatelessWidget {\r\n  const ToggleButtonsThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ToggleButtonsTheme(\r\n      data: ToggleButtonsTheme.of(context).copyWith(\r\n        borderWidth: 1,\r\n        borderColor: Colors.orangeAccent,\r\n        selectedBorderColor: Colors.blue,\r\n        splashColor: Colors.purple.withAlpha(66),\r\n        borderRadius: BorderRadius.circular(10),\r\n        selectedColor: Colors.red,\r\n        fillColor: Colors.green.withAlpha(11),\r\n      ),\r\n      child: _ToggleButtonsSimple(),\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass _ToggleButtonsSimple extends StatefulWidget {\r\n  @override\r\n  _ToggleButtonsSimpleState createState() => _ToggleButtonsSimpleState();\r\n}\r\n\r\nclass _ToggleButtonsSimpleState extends State<_ToggleButtonsSimple> {\r\n  var _isSelected = [true, false, false];\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ToggleButtons(\r\n      children: const[\r\n        Icon(Icons.skip_previous),\r\n        Icon(Icons.pause),\r\n        Icon(Icons.skip_next),\r\n      ],\r\n      isSelected: _isSelected,\r\n      onPressed: (value) => setState(() {\r\n        _isSelected = _isSelected.map((e) => false).toList();\r\n        _isSelected[value] = true;\r\n      }),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(465,50,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomTooltip extends StatelessWidget {\r\n  const CustomTooltip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const Tooltip(\r\n      preferBelow: true,\r\n      padding: EdgeInsets.all(5),\r\n      margin: EdgeInsets.all(5),\r\n      message: "天王盖地虎",\r\n      showDuration: Duration(seconds: 3),\r\n      waitDuration: Duration(milliseconds: 200),\r\n      child: Icon(Icons.info_outline),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(466,50,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-01\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DecorationTooltip extends StatelessWidget {\r\n  const DecorationTooltip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return const Tooltip(\r\n        preferBelow: false,\r\n        padding: EdgeInsets.all(5),\r\n        margin: EdgeInsets.all(2),\r\n        message: "宝塔镇河妖",\r\n        textStyle: TextStyle(\r\n            color: Colors.red,\r\n            shadows: [Shadow(color: Colors.white,\r\n                offset: Offset(1, 1))]),\r\n        decoration: BoxDecoration(boxShadow: [\r\n          BoxShadow(\r\n              color: Colors.orangeAccent,\r\n              offset: Offset(1, 1), blurRadius: 8)\r\n        ]),\r\n        child: Icon(Icons.info_outline));\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(467,333,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/22\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass TooltipThemeDemo extends StatelessWidget {\r\n  const TooltipThemeDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return TooltipTheme(\r\n        child: const TempTooltip(),\r\n        data: TooltipTheme.of(context).copyWith(\r\n            preferBelow: false,\r\n            padding: const EdgeInsets.all(5),\r\n            verticalOffset: 20,\r\n            margin: const EdgeInsets.all(2),\r\n            textStyle: const TextStyle(color: Colors.red, shadows: [\r\n              Shadow(color: Colors.white, offset: Offset(1, 1)),\r\n            ]),\r\n            decoration: const BoxDecoration(boxShadow: [\r\n              BoxShadow(\r\n                  color: Colors.orangeAccent,\r\n                  offset: Offset(1, 1),\r\n                  blurRadius: 8)\r\n            ])));\r\n  }\r\n}\r\n\r\nclass TempTooltip extends StatelessWidget {\r\n  const TempTooltip({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n      children: const [\r\n        Tooltip(message: "天王盖地虎", child: Icon(Icons.info_outline)),\r\n        Tooltip(message: "宝塔镇河妖", child: Icon(Icons.info_outline)),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(468,78,0,replace(replace('import ''dart:math'';\r\nimport ''package:flutter/material.dart'';\r\n\r\nimport ''matrix4_shower.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass SkewTransform extends StatefulWidget {\r\n  const SkewTransform({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SkewTransformState createState() => _SkewTransformState();\r\n}\r\n\r\nclass _SkewTransformState extends State<SkewTransform> {\r\n  late Matrix4 _m4;\r\n  double _alpha = 0;\r\n  double _beta = 0;\r\n\r\n  @override\r\n  void initState() {\r\n    _m4 = Matrix4.identity();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Row(\r\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n          children: <Widget>[_buildTransform(), Matrix4Shower(_m4)],\r\n        ),\r\n        _buildSliders()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTransform() {\r\n    _m4 = Matrix4.skew(_alpha, _beta);\r\n    return Transform(\r\n      transform: _m4,\r\n      child: Container(\r\n          color: Colors.cyanAccent,\r\n          width: 100,\r\n          height: 100,\r\n          child: Image.asset(\r\n            ''assets/images/wy_300x200.webp'',\r\n            fit: BoxFit.cover,\r\n          )),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliders() => Column(\r\n        children: <Widget>[\r\n          Slider(\r\n              min: -pi,\r\n              max: pi,\r\n              value: _alpha,\r\n              divisions: 360,\r\n              label: ''alpha:'' + (_alpha * 180 / pi).toStringAsFixed(1) + "°",\r\n              onChanged: (v) {\r\n                setState(() {\r\n                  _alpha = v;\r\n                });\r\n              }),\r\n          Slider(\r\n              min: -pi,\r\n              max: pi,\r\n              value: _beta,\r\n              divisions: 360,\r\n              label: ''beta:'' + (_beta * 180 / pi).toStringAsFixed(1) + "°",\r\n              onChanged: (v) {\r\n                setState(() {\r\n                  _beta = v;\r\n                });\r\n              })\r\n        ],\r\n      );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(469,78,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nimport ''matrix4_shower.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TranslationTransform extends StatefulWidget {\r\n  const TranslationTransform({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _TranslationTransformState createState() => _TranslationTransformState();\r\n}\r\n\r\nclass _TranslationTransformState extends State<TranslationTransform> {\r\n  late Matrix4 _m4;\r\n  double _x = 0;\r\n  double _y = 0;\r\n  double _z = 0;\r\n\r\n  @override\r\n  void initState() {\r\n    _m4 = Matrix4.identity();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Row(\r\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n          children: <Widget>[_buildTransform(), Matrix4Shower(_m4)],\r\n        ),\r\n        _buildSliders()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTransform() {\r\n    _m4 = Matrix4.translationValues(_x, _y, _z);\r\n    return Transform(\r\n      transform: _m4,\r\n      child: Container(\r\n          color: Colors.cyanAccent,\r\n          width: 100,\r\n          height: 100,\r\n          child: Image.asset(\r\n            ''assets/images/wy_300x200.webp'',\r\n            fit: BoxFit.cover,\r\n          )),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliders() => Column(\r\n    children: <Widget>[\r\n      Slider(\r\n          min: -100,\r\n          max: 100,\r\n          value: _x,\r\n          divisions: 360,\r\n          label: ''x:${_x.toStringAsFixed(1)}'',\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _x = v;\r\n            });\r\n          }),\r\n      Slider(\r\n          min: -100,\r\n          max: 100,\r\n          value: _y,\r\n          divisions: 360,\r\n          label: ''y:${_y.toStringAsFixed(1)}'',\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _y = v;\r\n            });\r\n          }),\r\n      Slider(\r\n          min: -100,\r\n          max: 100,\r\n          value: _z,\r\n          divisions: 360,\r\n          label: ''z:${_z.toStringAsFixed(1)}'',\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _z = v;\r\n            });\r\n          })\r\n    ],\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(470,78,0,replace(replace('import ''package:flutter/material.dart'';\r\nimport ''matrix4_shower.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ScaleTransform extends StatefulWidget {\r\n  const ScaleTransform({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _ScaleTransformState createState() => _ScaleTransformState();\r\n}\r\n\r\nclass _ScaleTransformState extends State<ScaleTransform> {\r\n  late Matrix4 _m4;\r\n  double _x = 1.0;\r\n  double _y = 1.0;\r\n  double _z = 1.0;\r\n\r\n  @override\r\n  void initState() {\r\n    _m4 = Matrix4.identity();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Row(\r\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n          children: <Widget>[_buildTransform(), Matrix4Shower(_m4)],\r\n        ),\r\n        _buildSliders()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTransform() {\r\n    _m4 = Matrix4.diagonal3Values(_x, _y, _z);\r\n    return Transform(\r\n      transform: _m4,\r\n      child: Container(\r\n          color: Colors.cyanAccent,\r\n          width: 100,\r\n          height: 100,\r\n          child: Image.asset(\r\n            ''assets/images/wy_300x200.webp'',\r\n            fit: BoxFit.cover,\r\n          )),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliders() => Column(\r\n    children: <Widget>[\r\n      Slider(\r\n          min: -2,\r\n          max: 2,\r\n          value: _x,\r\n          divisions: 360,\r\n          label: ''x:${_x.toStringAsFixed(1)}'',\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _x = v;\r\n            });\r\n          }),\r\n      Slider(\r\n          min: -2,\r\n          max: 2,\r\n          value: _y,\r\n          divisions: 360,\r\n          label: ''y:${_y.toStringAsFixed(1)}'',\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _y = v;\r\n            });\r\n          }),\r\n      Slider(\r\n          min: -2,\r\n          max: 2,\r\n          value: _z,\r\n          divisions: 360,\r\n          label: ''z:${_z.toStringAsFixed(1)}'',\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _z = v;\r\n            });\r\n          })\r\n    ],\r\n  );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(471,78,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\nimport ''matrix4_shower.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass RotateTransform extends StatefulWidget {\r\n  const RotateTransform({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _RotateTransformState createState() => _RotateTransformState();\r\n}\r\n\r\nclass _RotateTransformState extends State<RotateTransform> {\r\n  late Matrix4 _m4;\r\n  double _x = 0;\r\n  int _rotateFlag = 1;\r\n\r\n  @override\r\n  void initState() {\r\n    _m4 = Matrix4.identity();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: <Widget>[\r\n        Row(\r\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n          children: <Widget>[_buildTransform(), Matrix4Shower(_m4)],\r\n        ),\r\n        _buildSliders()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTransform() {\r\n    if (_rotateFlag == 1) {\r\n      _m4 = Matrix4.rotationX(_x);\r\n    } else if (_rotateFlag == 2) {\r\n      _m4 = Matrix4.rotationY(_x);\r\n    } else {\r\n      _m4 = Matrix4.rotationZ(_x);\r\n    }\r\n\r\n    return Transform(\r\n      transform: _m4,\r\n      child: Container(\r\n          color: Colors.cyanAccent,\r\n          width: 100,\r\n          height: 100,\r\n          child: Image.asset(\r\n            ''assets/images/wy_300x200.webp'',\r\n            fit: BoxFit.cover,\r\n          )),\r\n    );\r\n  }\r\n\r\n  final Map<int, String> map = {\r\n    1: ''rotationX'',\r\n    2: ''rotationY'',\r\n    3: ''rotationZ'',\r\n  };\r\n\r\n  Widget _buildSliders() => Column(\r\n    children: <Widget>[\r\n      Wrap(\r\n        children: map.keys.map((key) => _buildChild(key)).toList(),\r\n      ),\r\n      Slider(\r\n          min: -pi,\r\n          max: pi,\r\n          value: _x,\r\n          divisions: 360,\r\n          label: ''x:${_x.toStringAsFixed(1)}'',\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _x = v;\r\n            });\r\n          }),\r\n    ],\r\n  );\r\n\r\n  Padding _buildChild(int key) {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(4.0),\r\n      child: FilterChip(\r\n        selectedColor: Colors.orange.withAlpha(55),\r\n        selectedShadowColor: Colors.blue,\r\n        shadowColor: Colors.orangeAccent,\r\n        pressElevation: 5,\r\n        elevation: 3,\r\n        avatar: CircleAvatar(child: Text(key.toString())),\r\n        label: Text(map[key]!),\r\n        selected: _rotateFlag == key,\r\n        onSelected: (bool value) {\r\n          print(map[key]);\r\n          setState(() {\r\n            _x = 0;\r\n            if (value) {\r\n              _rotateFlag = key;\r\n            }\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(472,78,0,replace(replace('import ''dart:math'';\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass R3C2 extends StatefulWidget {\r\n  const R3C2({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _R3C2State createState() => _R3C2State();\r\n}\r\n\r\nclass _R3C2State extends State<R3C2> {\r\n  late Matrix4 _m4;\r\n  double _value = 0;\r\n  double _rad = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    _m4 = Matrix4.identity()\r\n//      ..setEntry(3, 0, _value) // x\r\n//      ..setEntry(3, 1, _value)//   y\r\n      ..setEntry(3, 2, _value) // z\r\n      ..rotateY(_rad)\r\n//      ..rotateX(_rad)\r\n        ;\r\n    return Column(\r\n      children: <Widget>[\r\n        Transform(\r\n          transform: _m4,\r\n          child: Container(\r\n              color: Colors.cyanAccent,\r\n              width: 100,\r\n              height: 100,\r\n              child: Image.asset(\r\n                ''assets/images/wy_300x200.webp'',\r\n                fit: BoxFit.cover,\r\n              )),\r\n        ),\r\n        _buildSliders()\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSliders() => Column(\r\n    children: <Widget>[\r\n      Slider(\r\n          min: -0.01,\r\n          max: 0.01,\r\n          value: _value,\r\n          divisions: 360,\r\n          label: ''x:${_value.toStringAsFixed(5)}'',\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _value = v;\r\n            });\r\n          }),\r\n      Slider(\r\n          min: -pi,\r\n          max: pi,\r\n          value: _rad,\r\n          divisions: 360,\r\n          label: ''角度:'' + (_rad * 180 / pi).toStringAsFixed(1) + "°",\r\n          onChanged: (v) {\r\n            setState(() {\r\n              _rad = v;\r\n            });\r\n          }),\r\n    ],\r\n  );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(473,226,0,replace(replace('\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass TweenAnimationBuilderDemo extends StatefulWidget {\r\n  const TweenAnimationBuilderDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<TweenAnimationBuilderDemo> createState() =>\r\n      _TweenAnimationBuilderDemoState();\r\n}\r\n\r\nclass _TweenAnimationBuilderDemoState extends State<TweenAnimationBuilderDemo> {\r\n  List<Color> get colors => const [\r\n    Colors.red,\r\n    Colors.orange,\r\n    Colors.yellow,\r\n    Colors.green,\r\n    Colors.blue,\r\n    Colors.indigo,\r\n    Colors.purple\r\n  ];\r\n\r\n  int _activeIndex = 0;\r\n\r\n  Color get begin => colors[_activeIndex % colors.length];\r\n\r\n  Color get end => colors[(_activeIndex + 1) % colors.length];\r\n\r\n  void nextColor(){\r\n    _activeIndex++;\r\n    setState(() {});\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return GestureDetector(\r\n      onTap: nextColor,\r\n      child: TweenAnimationBuilder(\r\n        tween: ColorTween(begin: begin, end: end),\r\n        duration: const Duration(milliseconds: 800),\r\n        builder: (BuildContext context, Color? color, Widget? child) {\r\n          return Container(\r\n            width: 40,\r\n            height: 40,\r\n            decoration: BoxDecoration(\r\n                color: color, borderRadius: BorderRadius.circular(5)),\r\n            child: child,\r\n          );\r\n        },\r\n        child: const Icon(Icons.android_outlined, color: Colors.white),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(474,81,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-04-19\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomUnConstrainedBox extends StatefulWidget {\r\n  const CustomUnConstrainedBox({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomUnConstrainedBoxState createState() => _CustomUnConstrainedBoxState();\r\n}\r\n\r\nclass _CustomUnConstrainedBoxState extends State<CustomUnConstrainedBox> {\r\n  bool _value = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      spacing: 20,\r\n      children: [_buildUnconstrainedBox(), _buildConstrainedAxis()],\r\n    );\r\n  }\r\n\r\n  Widget _buildUnconstrainedBox() {\r\n    Widget child = Container(\r\n      color: Colors.cyanAccent,\r\n      width: 60,\r\n      height: 60,\r\n      child: Switch(\r\n        value: _value,\r\n        onChanged: (v) {\r\n          setState(() {\r\n            _value = v;\r\n          });\r\n        },\r\n      ),\r\n    );\r\n\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 150,\r\n          height: 100,\r\n          child: _value\r\n              ? UnconstrainedBox(alignment: Alignment.center, child: child)\r\n              : child,\r\n        ),\r\n        Text(_value ? "已解除约束" : "子组件受约束")\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildConstrainedAxis() {\r\n    return Column(\r\n      children: <Widget>[\r\n        Container(\r\n          color: Colors.grey.withAlpha(22),\r\n          width: 150,\r\n          height: 100,\r\n          child: UnconstrainedBox(\r\n              alignment: Alignment.center,\r\n              constrainedAxis: Axis.vertical,\r\n              child: Container(\r\n                color: Colors.cyanAccent,\r\n                width: 60,\r\n                height: 60,\r\n              )),\r\n        ),\r\n        const Text("竖直方向仍约束")\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(475,241,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\nclass UndoHistoryDemo1 extends StatefulWidget {\r\n  const UndoHistoryDemo1({super.key});\r\n\r\n  @override\r\n  State<UndoHistoryDemo1> createState() => _UndoHistoryDemo1State();\r\n}\r\n\r\nclass _UndoHistoryDemo1State extends State<UndoHistoryDemo1> {\r\n  final UndoHistoryController _undoController = UndoHistoryController();\r\n\r\n  @override\r\n  void dispose() {\r\n    _undoController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: Column(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: <Widget>[\r\n          _buildToolBar(),\r\n          const Divider(height: 0.5),\r\n          Expanded(\r\n              child: TextField(\r\n            undoController: _undoController,\r\n            expands: true,\r\n            maxLines: null,\r\n            minLines: null,\r\n            decoration: InputDecoration(\r\n              filled: true,\r\n              hintText: ''请输入...'',\r\n              fillColor: Colors.white,\r\n              hoverColor: Colors.transparent,\r\n              border: InputBorder.none,\r\n            ),\r\n          ))\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildToolBar() {\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4),\r\n      child: ValueListenableBuilder<UndoHistoryValue>(\r\n        valueListenable: _undoController,\r\n        builder: (BuildContext context, UndoHistoryValue value, Widget? child) {\r\n          return Wrap(\r\n            spacing: 4,\r\n            children: <Widget>[\r\n              _IconAction(\r\n                  icon: Icons.undo,\r\n                  onTap: value.canUndo ? _undoController.undo : null),\r\n              _IconAction(\r\n                  icon: Icons.redo,\r\n                  onTap: value.canRedo ? _undoController.redo : null),\r\n            ],\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _IconAction extends StatefulWidget {\r\n  final IconData icon;\r\n  final VoidCallback? onTap;\r\n\r\n  const _IconAction({super.key, required this.icon, this.onTap});\r\n\r\n  @override\r\n  State<_IconAction> createState() => _IconActionState();\r\n}\r\n\r\nclass _IconActionState extends State<_IconAction> {\r\n  bool _hover = false;\r\n\r\n  bool get enable => widget.onTap != null;\r\n\r\n  Color? get color => (_hover && enable) ? Colors.grey.withOpacity(0.2) : null;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    MouseCursor cursor = (_hover && enable) ? SystemMouseCursors.click : SystemMouseCursors.basic;\r\n    return MouseRegion(\r\n      cursor: cursor ,\r\n      onExit: (_) => setState(() => _hover = false),\r\n      onEnter: (_) => setState(() => _hover = true),\r\n      child: GestureDetector(\r\n        onTap: widget.onTap,\r\n        child: Container(\r\n            decoration: BoxDecoration(\r\n                color: color, borderRadius: BorderRadius.circular(4)),\r\n            padding: const EdgeInsets.all(4.0),\r\n            child: Icon(\r\n              widget.icon,\r\n              size: 20,\r\n              color: enable ? null : Colors.grey,\r\n            )),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(476,243,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/9/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass UniqueWidgetDemo extends StatelessWidget {\r\n  const UniqueWidgetDemo({Key? key}) : super(key: key);\r\n\r\n  final String info =\r\n      ''该类是抽象类，在 Flutter 框架层没有实现类，也没有其他源码使用到它，说明它基本上没啥用。''\r\n      ''本质上它也非常简单，就是为组件添加一个 GlobalKey，在 Element#inflateWidget 时，会校验组件是否有 GlobalKey ，''\r\n      ''如果有，则根据 key 找到之前的对应的 Element，就不会触发 Widget#createElement。为了方便获取 State，该类暴露 currentState 属性。''\r\n      ''你瞄一下源码，就能看到这个组件是多么简单，简单到可以自己完成，以至于没什么大用。'';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      color: Colors.blue.withOpacity(0.1),\r\n      padding: const EdgeInsets.all(10),\r\n      margin: const EdgeInsets.all(10),\r\n      child: Text(info),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(477,22,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass CustomUAGHP extends StatelessWidget {\r\n  const CustomUAGHP({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: MediaQuery.of(context).size.width / 3 * 2,\r\n      child: UserAccountsDrawerHeader(\r\n        accountName: Container(\r\n          padding: const EdgeInsets.all(8.0),\r\n          child: const Text(\r\n            "张风捷特烈",\r\n            style:\r\n                TextStyle(color: Colors.orangeAccent, fontSize: 22, shadows: [\r\n              Shadow(\r\n                color: Colors.black,\r\n                offset: Offset(.5, .5),\r\n                blurRadius: 2,\r\n              ),\r\n            ]),\r\n          ),\r\n        ),\r\n        accountEmail: const Padding(\r\n          padding: EdgeInsets.all(8.0),\r\n          child: Text("1981462002@qq.com",\r\n              style: TextStyle(color: Colors.white, fontSize: 14, shadows: [\r\n                Shadow(\r\n                    color: Colors.orangeAccent,\r\n                    offset: Offset(.5, .5),\r\n                    blurRadius: 2),\r\n              ])),\r\n        ),\r\n        currentAccountPicture: Container(\r\n          padding: const EdgeInsets.all(15.0),\r\n          child: const CircleAvatar(\r\n            backgroundImage: AssetImage("assets/images/icon_head.webp"),\r\n          ),\r\n        ),\r\n        decoration: const BoxDecoration(\r\n          image: DecorationImage(image: AssetImage("assets/images/caver.webp")),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(478,22,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass ProUAGHP extends StatelessWidget {\r\n  const ProUAGHP({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      width: MediaQuery.of(context).size.width / 3 * 2,\r\n      child: UserAccountsDrawerHeader(\r\n        margin: const EdgeInsets.all(10),\r\n        accountName: Container(\r\n          padding: const EdgeInsets.all(8.0),\r\n          child: const Text(\r\n            "张风捷特烈",\r\n            style:\r\n                TextStyle(color: Colors.orangeAccent, fontSize: 22, shadows: [\r\n              Shadow(\r\n                color: Colors.black,\r\n                offset: Offset(.5, .5),\r\n                blurRadius: 2,\r\n              ),\r\n            ]),\r\n          ),\r\n        ),\r\n        accountEmail: const Padding(\r\n          padding: EdgeInsets.all(8.0),\r\n          child: Text("1981462002@qq.com",\r\n              style: TextStyle(color: Colors.white, fontSize: 14, shadows: [\r\n                Shadow(\r\n                  color: Colors.orangeAccent,\r\n                  offset: Offset(.5, .5),\r\n                  blurRadius: 2,\r\n                ),\r\n              ])),\r\n        ),\r\n        currentAccountPicture: Container(\r\n          padding: const EdgeInsets.all(15.0),\r\n          child: const CircleAvatar(\r\n            backgroundImage: AssetImage("assets/images/icon_head.webp"),\r\n          ),\r\n        ),\r\n        otherAccountsPictures: const [\r\n          FlutterLogo(textColor: Colors.green),\r\n        ],\r\n        onDetailsPressed: () {\r\n\r\n        },\r\n        arrowColor: Colors.white,\r\n        decoration: const BoxDecoration(\r\n          image: DecorationImage(image: AssetImage("assets/images/caver.webp")),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(479,255,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/7/21\r\n/// contact me by email 1981462002@qq.com\r\n\r\nfinal ValueNotifier<int> _counter = ValueNotifier<int>(0);\r\n\r\nclass ValueListenableBuilderDemo extends StatelessWidget {\r\n  const ValueListenableBuilderDemo({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: Scaffold(\r\n        appBar: AppBar(title: const Text("ValueListenableBuilder")),\r\n        body: Center(\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: <Widget>[\r\n              const Text(''You have pushed the button this many times:''),\r\n              ValueListenableBuilder<int>(\r\n                builder: _buildWithValue,\r\n                valueListenable: _counter,\r\n                child: const Text(''I am Child!''),\r\n              )\r\n            ],\r\n          ),\r\n        ),\r\n        floatingActionButton: FloatingActionButton(\r\n          child: const Icon(Icons.plus_one),\r\n          onPressed: () => _counter.value += 1,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildWithValue(BuildContext context, int value, Widget? child) {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceAround,\r\n      children: <Widget>[\r\n        Text(''$value''),\r\n        child ?? const SizedBox.shrink(),\r\n      ],\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(480,35,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomVerticalDivider extends StatelessWidget {\r\n  const CustomVerticalDivider({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    List<Color> dataColor = [\r\n      Colors.red, Colors.yellow,\r\n      Colors.blue, Colors.green];\r\n    List<double> dataThickness = [1.0, 2.0, 4.0, 6.0];\r\n    Map<Color,double> data = Map.fromIterables(dataColor, dataThickness);\r\n    return SizedBox(\r\n      height: 150,\r\n      child: Row(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: dataColor\r\n            .map((e) => VerticalDivider(\r\n          color: e,\r\n          thickness: data[e],\r\n        )).toList(),\r\n      ),\r\n    );\r\n  }\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(481,35,0,replace(replace('\r\n\r\nimport ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/27\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass WidthVerticalDivider extends StatelessWidget {\r\n  const WidthVerticalDivider({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    List<Color> dataColor = [\r\n      Colors.red, Colors.yellow,\r\n      Colors.blue, Colors.green];\r\n    List<double> dataThickness = [10.0, 20.0, 30.0, 40.0];\r\n    Map<Color,double>  data = Map.fromIterables(dataColor, dataThickness);\r\n    return SizedBox(\r\n      height: 150,\r\n      child: Row(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: dataColor\r\n            .map((e) => VerticalDivider(\r\n          color: e,\r\n          indent:data[e],\r\n          endIndent: data[e]!*2,\r\n          width: data[e],\r\n          thickness: data[e]!/10,\r\n        ))\r\n            .toList(),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(482,340,0,replace(replace('import ''package:flutter/gestures.dart'';\r\nimport ''package:flutter/material.dart'';\r\nimport ''package:flutter/rendering.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/8/2\r\n/// contact me by email 1981462002@qq.com\r\n\r\n\r\nclass ViewportDemo extends StatelessWidget {\r\n  const ViewportDemo({super.key});\r\n\r\n  List<Color> get data => List.generate(128, (i) => Color(0xFF6600FF - 2 * i));\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 250,\r\n      child: Scrollable(\r\n        axisDirection: AxisDirection.down,\r\n        physics: const BouncingScrollPhysics(),\r\n        dragStartBehavior: DragStartBehavior.start,\r\n        viewportBuilder: (ctx, position) => Viewport(\r\n          axisDirection: AxisDirection.down,\r\n          cacheExtent: 200,\r\n          anchor: 0,\r\n          cacheExtentStyle: CacheExtentStyle.pixel,\r\n          offset: position,\r\n          slivers: <Widget>[_buildSliverList()],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSliverList() => SliverList(\r\n    delegate: SliverChildBuilderDelegate(\r\n            (_, int index) =>ColorItem(color: data[index],),\r\n        childCount: data.length),\r\n  );\r\n\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n\r\nclass ColorItem extends StatefulWidget {\r\n  final Color color;\r\n\r\n  const ColorItem({Key? key, required this.color}) : super(key: key);\r\n\r\n  @override\r\n  _ColorItemState createState() => _ColorItemState();\r\n}\r\n\r\nclass _ColorItemState extends State<ColorItem> {\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    print(''-----initState----${colorString(widget.color)}-----------'');\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return  Container(\r\n      margin: const EdgeInsets.only(top: 1),\r\n      alignment: Alignment.center,\r\n      width: 100,\r\n      height: 60,\r\n      color: widget.color,\r\n      child: Text(\r\n        colorString(widget.color),\r\n        style: const TextStyle(color: Colors.white, shadows: [\r\n          Shadow(color: Colors.black, offset: Offset(.5, .5), blurRadius: 2)\r\n        ]),\r\n      ),\r\n    );\r\n  }\r\n  String colorString(Color color) =>\r\n      "#${color.value.toRadixString(16).padLeft(8, ''0'').toUpperCase()}";\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(483,10,0,replace(replace('import ''package:flutter/material.dart'';\r\012/// create by 张风捷特烈 on 2020/4/27\r\012/// contact me by email 1981462002@qq.com\r\012\r\012class CustomVisibility extends StatelessWidget {\r\012  const CustomVisibility({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return Wrap(\r\012      spacing: 10,\r\012      children: [\r\012        _buildVisibility(true),\r\012        _buildVisibility(false),\r\012      ],\r\012    );\r\012  }\r\012\r\012  Widget _buildVisibility(bool visible) {\r\012    Widget box = Container(\r\012      height: 30,\r\012      width: 30,\r\012      color: Colors.blue,\r\012    );\r\012    return Container(\r\012      width: 150,\r\012      height: 150 * 0.618,\r\012      color: Colors.cyanAccent.withAlpha(33),\r\012      child: Row(\r\012        mainAxisAlignment: MainAxisAlignment.center,\r\012        children: <Widget>[\r\012          box,\r\012          Visibility(\r\012              visible: visible,\r\012              child: Container(\r\012                alignment: Alignment.center,\r\012                height: 80 * 0.618,\r\012                width: 80,\r\012                color: Colors.red,\r\012                child: const Text(\r\012                  "visible\ntrue",\r\012                  style: TextStyle(fontSize: 20),\r\012                ),\r\012              )),\r\012          box,\r\012        ],\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(484,10,0,replace(replace('import ''package:flutter/material.dart'';\r\012\r\012/// create by 张风捷特烈 on 2020/4/27\r\012/// contact me by email 1981462002@qq.com\r\012\r\012class ReplacementVisibility extends StatelessWidget {\r\012  const ReplacementVisibility({Key? key}) : super(key: key);\r\012\r\012  @override\r\012  Widget build(BuildContext context) {\r\012    return Wrap(\r\012      spacing: 10,\r\012      children: <Widget>[\r\012        _buildVisibility(true),\r\012        _buildVisibility(false),\r\012      ],\r\012    );\r\012  }\r\012\r\012  Widget _buildVisibility(bool visible) {\r\012    Widget box = Container(\r\012      height: 30,\r\012      width: 30,\r\012      color: Colors.blue,\r\012    );\r\012    return Container(\r\012      width: 150,\r\012      height: 150 * 0.618,\r\012      color: Colors.cyanAccent.withAlpha(33),\r\012      child: Row(\r\012        mainAxisAlignment: MainAxisAlignment.center,\r\012        children: <Widget>[\r\012          box,\r\012          Visibility(\r\012              visible: visible,\r\012              replacement: Container(\r\012                alignment: Alignment.center,\r\012                height: 80 * 0.618,\r\012                width: 80,\r\012              ),\r\012              child: Container(\r\012                alignment: Alignment.center,\r\012                height: 80 * 0.618,\r\012                width: 80,\r\012                color: Colors.red,\r\012                child: const Text(\r\012                  "visible\ntrue",\r\012                  style: TextStyle(fontSize: 20),\r\012                ),\r\012              )),\r\012          box,\r\012        ],\r\012      ),\r\012    );\r\012  }\r\012}\r\012','\r',char(13)),'\012',char(10)));
INSERT INTO node VALUES(485,234,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/8/16\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass WidgetInspectorDemo extends StatelessWidget {\r\n  const WidgetInspectorDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height: 200,\r\n      child: WidgetInspector(\r\n        child: const HomePage(),\r\n        tapBehaviorButtonBuilder: _tapBehaviorButtonBuilder,\r\n        exitWidgetSelectionButtonBuilder: null,\r\n        moveExitWidgetSelectionButtonBuilder: _selectButtonBuilder,\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _tapBehaviorButtonBuilder(\r\n    BuildContext context, {\r\n    required VoidCallback onPressed,\r\n    required bool selectionOnTapEnabled,\r\n    required String semanticsLabel,\r\n  }) {\r\n    return Container();\r\n  }\r\n\r\n  Widget _selectButtonBuilder(BuildContext context,\r\n      {required VoidCallback onPressed,\r\n      required String semanticsLabel,\r\n      bool? usesDefaultAlignment}) {\r\n    return Container();\r\n  }\r\n}\r\n\r\nclass HomePage extends StatefulWidget {\r\n  const HomePage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _HomePageState createState() => _HomePageState();\r\n}\r\n\r\nclass _HomePageState extends State<HomePage> {\r\n  int _count = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Container(\r\n        alignment: const Alignment(0, 0.7),\r\n        child: Text(\r\n          ''你点击了$_count次'',\r\n          style: const TextStyle(fontSize: 18, color: Colors.blue),\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        child: const Icon(Icons.add),\r\n        onPressed: () {\r\n          setState(() {\r\n            _count++;\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(486,236,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/8/16\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass WidgetsAppDemo extends StatefulWidget {\r\n  const WidgetsAppDemo({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _WidgetsAppDemoState createState() => _WidgetsAppDemoState();\r\n}\r\n\r\nclass _WidgetsAppDemoState extends State<WidgetsAppDemo> {\r\n  bool _debugShowCheckedModeBanner = false;\r\n  bool _debugShowWidgetInspector = false;\r\n  bool _showPerformanceOverlay = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      mainAxisSize: MainAxisSize.min,\r\n      children: [\r\n        _buildSwitchers(),\r\n        SizedBox(\r\n          height: 250,\r\n          child: WidgetsApp(\r\n            color: Colors.blue,\r\n            debugShowCheckedModeBanner: _debugShowCheckedModeBanner,\r\n            showPerformanceOverlay: _showPerformanceOverlay,\r\n            debugShowWidgetInspector: _debugShowWidgetInspector,\r\n            pageRouteBuilder:\r\n                <T>(RouteSettings settings, WidgetBuilder builder) {\r\n              return MaterialPageRoute<T>(settings: settings, builder: builder);\r\n            },\r\n            home: const HomePage(),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSwitchers() {\r\n    return DefaultTextStyle(\r\n      style: const TextStyle(color: Colors.blue),\r\n      child: Wrap(\r\n        spacing: 10,\r\n        children: [\r\n          Column(\r\n            children: [\r\n              Switch(\r\n                value: _showPerformanceOverlay,\r\n                onChanged: (v) {\r\n                  setState(() {\r\n                    _showPerformanceOverlay = v;\r\n                  });\r\n                },\r\n              ),\r\n              const Text(''性能浮层'')\r\n            ],\r\n          ),\r\n          Column(\r\n            children: [\r\n              Switch(\r\n                value: _debugShowCheckedModeBanner,\r\n                onChanged: (v) {\r\n                  setState(() {\r\n                    _debugShowCheckedModeBanner = v;\r\n                  });\r\n                },\r\n              ),\r\n              const Text(''开启角标'')\r\n            ],\r\n          ),\r\n          Column(\r\n            children: [\r\n              Switch(\r\n                value: _debugShowWidgetInspector,\r\n                onChanged: (v) {\r\n                  setState(() {\r\n                    _debugShowWidgetInspector = v;\r\n                  });\r\n                },\r\n              ),\r\n              const Text(''检查器'')\r\n            ],\r\n          )\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass HomePage extends StatefulWidget {\r\n  const HomePage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _HomePageState createState() => _HomePageState();\r\n}\r\n\r\nclass _HomePageState extends State<HomePage> {\r\n  int _count = 0;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Container(\r\n        alignment: const Alignment(0, 0.7),\r\n        child: Text(\r\n          ''你点击了$_count次'',\r\n          style: const TextStyle(fontSize: 18, color: Colors.blue),\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        child: const Icon(Icons.add),\r\n        onPressed: () {\r\n          setState(() {\r\n            _count++;\r\n          });\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(487,170,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-29\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomWillPopScope extends StatelessWidget {\r\n  const CustomWillPopScope({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return WillPopScope(\r\n      child: const BackButton(),\r\n      onWillPop: () => _willPop(context),\r\n    );\r\n  }\r\n\r\n  Future<bool> _willPop(context) async {\r\n    bool? exit = await showDialog(\r\n          context: context,\r\n          builder: (ctx) => AlertDialog(\r\n            shape: const RoundedRectangleBorder(\r\n                borderRadius: BorderRadius.all(Radius.circular(10))),\r\n            title: const Text(''提示''),\r\n            content: const Text(''你确定要离开此页吗?''),\r\n            actions: [\r\n              ElevatedButton(\r\n                onPressed: () => Navigator.of(ctx).pop(true),\r\n                child: const Text(''确定''),\r\n              ),\r\n              ElevatedButton(\r\n                onPressed: () => Navigator.of(ctx).pop(false),\r\n                child: const Text(''取消''),\r\n              ),\r\n            ],\r\n          ),\r\n        );\r\n    print(''====_willPop==:$exit========'');\r\n\r\n    return exit??false;\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(488,98,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass DirectionWrap extends StatelessWidget {\r\n  const DirectionWrap({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        children: Axis.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n              width: 160,\r\n              height: 100,\r\n              color: Colors.grey.withAlpha(33),\r\n              child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n   Widget get yellowBox => Container(\r\n    color: Colors.yellow,\r\n    height: 30,\r\n    width: 50,\r\n  );\r\n\r\n   Widget get redBox => Container(\r\n    color: Colors.red,\r\n    height: 40,\r\n    width: 40,\r\n  );\r\n   Widget get greenBox => Container(\r\n    color: Colors.green,\r\n    height: 40,\r\n    width: 20,\r\n  );\r\n   Widget get  blackBox => Container(\r\n    color: Colors.black,\r\n    height: 10,\r\n    width: 10,\r\n  );\r\n   Widget get  purpleBox => Container(\r\n    color: Colors.purple,\r\n    height: 20,\r\n    width: 20,\r\n  );\r\n   Widget get  orangeBox => Container(\r\n    color: Colors.orange,\r\n    height: 80,\r\n    width: 20,\r\n  );\r\n   Widget get  cyanBox => Container(\r\n    color: Colors.cyanAccent,\r\n    height: 10,\r\n    width: 20,\r\n  );\r\n\r\n  Widget _buildItem(mode) => Wrap(\r\n    direction: mode,\r\n    runSpacing: 10,\r\n    spacing: 10,\r\n    children: <Widget>[\r\n      yellowBox, redBox, greenBox, cyanBox,\r\n      blackBox, purpleBox, orangeBox,\r\n    ],\r\n  );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(489,98,0,replace(replace('import ''package:flutter/material.dart'';\r\n/// create by 张风捷特烈 on 2020-03-30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass WrapAlignmentWrap extends StatelessWidget {\r\n   const WrapAlignmentWrap({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        children: WrapAlignment.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n              width: 160,\r\n              height: 100,\r\n              color: Colors.grey.withAlpha(88),\r\n              child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  Widget get yellowBox => Container(\r\n    color: Colors.yellow,\r\n    height: 30,\r\n    width: 50,\r\n  );\r\n\r\n   Widget get redBox => Container(\r\n    color: Colors.red,\r\n    height: 40,\r\n    width: 40,\r\n  );\r\n   Widget get greenBox => Container(\r\n    color: Colors.green,\r\n    height: 40,\r\n    width: 20,\r\n  );\r\n   Widget get blackBox => Container(\r\n    color: Colors.black,\r\n    height: 10,\r\n    width: 10,\r\n  );\r\n   Widget get purpleBox => Container(\r\n    color: Colors.purple,\r\n    height: 20,\r\n    width: 20,\r\n  );\r\n   Widget get orangeBox => Container(\r\n    color: Colors.orange,\r\n    height: 80,\r\n    width: 20,\r\n  );\r\n   Widget get cyanBox => Container(\r\n    color: Colors.cyanAccent,\r\n    height: 10,\r\n    width: 20,\r\n  );\r\n\r\n   Widget _buildItem(mode) => Wrap(\r\n    alignment: mode,\r\n    runSpacing: 10,\r\n    spacing: 10,\r\n    children: <Widget>[\r\n      yellowBox, redBox,\r\n      greenBox, cyanBox,\r\n      blackBox, purpleBox,\r\n      orangeBox,\r\n    ],\r\n  );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(490,98,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CrossAxisAlignmentWrap extends StatelessWidget {\r\n  const CrossAxisAlignmentWrap({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        children: WrapCrossAlignment.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n              width: 160,\r\n              height: 100,\r\n              color: Colors.grey.withAlpha(88),\r\n              child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  Widget get yellowBox => Container(\r\n    color: Colors.yellow,\r\n    height: 30,\r\n    width: 50,\r\n  );\r\n\r\n  Widget get redBox => Container(\r\n    color: Colors.red,\r\n    height: 40,\r\n    width: 40,\r\n  );\r\n  Widget get greenBox => Container(\r\n    color: Colors.green,\r\n    height: 40,\r\n    width: 20,\r\n  );\r\n  Widget get blackBox => Container(\r\n    color: Colors.black,\r\n    height: 10,\r\n    width: 10,\r\n  );\r\n  Widget get purpleBox => Container(\r\n    color: Colors.purple,\r\n    height: 20,\r\n    width: 20,\r\n  );\r\n  Widget get orangeBox => Container(\r\n    color: Colors.orange,\r\n    height: 80,\r\n    width: 20,\r\n  );\r\n  Widget get cyanBox => Container(\r\n    color: Colors.cyanAccent,\r\n    height: 10,\r\n    width: 20,\r\n  );\r\n\r\n  Widget _buildItem(mode) => Wrap(\r\n    crossAxisAlignment: mode,\r\n    runSpacing: 10,\r\n    spacing: 10,\r\n    children: <Widget>[\r\n      yellowBox, redBox,\r\n      greenBox, cyanBox,\r\n      blackBox, purpleBox,\r\n      orangeBox,\r\n    ],\r\n  );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(491,98,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass TextDirectionWrap extends StatelessWidget {\r\n  const TextDirectionWrap({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        children: TextDirection.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n              width: 160,\r\n              height: 100,\r\n              color: Colors.grey.withAlpha(88),\r\n              child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  Widget get yellowBox => Container(\r\n    color: Colors.yellow,\r\n    height: 30,\r\n    width: 50,\r\n  );\r\n\r\n  Widget get redBox => Container(\r\n    color: Colors.red,\r\n    height: 40,\r\n    width: 40,\r\n  );\r\n  Widget get greenBox => Container(\r\n    color: Colors.green,\r\n    height: 40,\r\n    width: 20,\r\n  );\r\n  Widget get blackBox => Container(\r\n    color: Colors.black,\r\n    height: 10,\r\n    width: 10,\r\n  );\r\n  Widget get purpleBox => Container(\r\n    color: Colors.purple,\r\n    height: 20,\r\n    width: 20,\r\n  );\r\n  Widget get orangeBox => Container(\r\n    color: Colors.orange,\r\n    height: 80,\r\n    width: 20,\r\n  );\r\n  Widget get cyanBox => Container(\r\n    color: Colors.cyanAccent,\r\n    height: 10,\r\n    width: 20,\r\n  );\r\n\r\n  Widget _buildItem(mode) => Wrap(\r\n    textDirection: mode,\r\n    runSpacing: 10,\r\n    spacing: 10,\r\n    children: <Widget>[\r\n      yellowBox, redBox, greenBox, cyanBox,\r\n      blackBox, purpleBox, orangeBox,\r\n    ],\r\n  );\r\n}\r\n','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(492,98,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020/4/30\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass VerticalDirectionWrap extends StatelessWidget {\r\n  const VerticalDirectionWrap({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n        children: VerticalDirection.values\r\n            .map((mode) => Column(children: <Widget>[\r\n          Container(\r\n              margin: const EdgeInsets.all(5),\r\n              width: 160,\r\n              height: 100,\r\n              color: Colors.grey.withAlpha(88),\r\n              child: _buildItem(mode)),\r\n          Text(mode.toString().split(''.'')[1])\r\n        ]))\r\n            .toList());\r\n  }\r\n\r\n  Widget get yellowBox => Container(\r\n    color: Colors.yellow,\r\n    height: 30,\r\n    width: 50,\r\n  );\r\n\r\n  Widget get redBox => Container(\r\n    color: Colors.red,\r\n    height: 40,\r\n    width: 40,\r\n  );\r\n  Widget get greenBox => Container(\r\n    color: Colors.green,\r\n    height: 40,\r\n    width: 20,\r\n  );\r\n  Widget get blackBox => Container(\r\n    color: Colors.black,\r\n    height: 10,\r\n    width: 10,\r\n  );\r\n  Widget get purpleBox => Container(\r\n    color: Colors.purple,\r\n    height: 20,\r\n    width: 20,\r\n  );\r\n  Widget get orangeBox => Container(\r\n    color: Colors.orange,\r\n    height: 80,\r\n    width: 20,\r\n  );\r\n  Widget get cyanBox => Container(\r\n    color: Colors.cyanAccent,\r\n    height: 10,\r\n    width: 20,\r\n  );\r\n\r\n  Widget _buildItem(mode) => Wrap(\r\n    verticalDirection: mode,\r\n    direction: Axis.vertical,\r\n    runSpacing: 10,\r\n    spacing: 10,\r\n    children: [\r\n      yellowBox, redBox, greenBox, cyanBox,\r\n      blackBox, purpleBox, orangeBox,\r\n    ],\r\n  );\r\n}','\r',char(13)),'\n',char(10)));
INSERT INTO node VALUES(493,136,0,replace(replace('import ''package:flutter/material.dart'';\r\n\r\n/// create by 张风捷特烈 on 2020-03-25\r\n/// contact me by email 1981462002@qq.com\r\n\r\nclass CustomYearPicker extends StatefulWidget {\r\n  const CustomYearPicker({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _CustomYearPickerState createState() => _CustomYearPickerState();\r\n}\r\n\r\nclass _CustomYearPickerState extends State<CustomYearPicker> {\r\n  DateTime _date = DateTime.now();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SizedBox(\r\n      height:150,\r\n      child: YearPicker(\r\n        selectedDate: _date,\r\n        onChanged: (date) => setState(() => _date = date),\r\n        firstDate: DateTime(2018),\r\n        lastDate: DateTime(2030),\r\n      ),\r\n    );\r\n  }\r\n}\r\n','\r',char(13)),'\n',char(10)));
CREATE TABLE node_desc(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        node_id INTEGER NOT NULL,
        name VARCHAR(128) NOT NULL,
        subtitle TEXT NOT NULL,
        locale VARCHAR(16) DEFAULT 'zh-cn'
      );
INSERT INTO node_desc VALUES(1,1,'AboutDialog基本使用',replace('【applicationIcon】 : 左上图标   【Widget】\n【applicationVersion】 : 版本号  【String】\n【applicationName】 : 应用名  【String】\n【applicationLegalese】 : 应用律术   【String】\n【children】 : 子组件列表   【List<Widget>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(2,1,'Basic Usage of AboutDialog',replace('【applicationIcon】: Top-left icon 【Widget】\n【applicationVersion】: Version number 【String】\n【applicationName】: Application name 【String】\n【applicationLegalese】: Application legal terms 【String】\n【children】: Sub-component list 【List<Widget>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(3,2,'AboutListTile基本使用',replace('【icon】 : 左图标   【Widget】\n【applicationIcon】 : 左上图标   【Widget】\n【applicationVersion】 : 版本号  【String】\n【applicationName】 : 应用名  【String】\n【applicationLegalese】 : 应用律术   【String】\n【aboutBoxChildren】 : 弹框内容组件   【List<Widget>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(4,2,'Basic Usage of AboutListTile',replace('【icon】 : Left icon   【Widget】\n【applicationIcon】 : Top-left icon   【Widget】\n【applicationVersion】 : Version number  【String】\n【applicationName】 : Application name  【String】\n【applicationLegalese】 : Application legalese   【String】\n【aboutBoxChildren】 : Dialog content components   【List<Widget>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(5,3,'AbsorbPointer基本使用',replace('【child】 : 孩子组件   【Widget】\n【absorbing】 : 是否吸收事件   【bool】\n如下,Switch选中时absorbing为true，按钮事件将被吸收，无法点击。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(6,3,'Basic Usage of AbsorbPointer',replace('【child】: Child component   【Widget】\n【absorbing】: Whether to absorb events   【bool】\nAs shown below, when the Switch is selected, absorbing is true, and the button event will be absorbed and cannot be clicked.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(7,4,'ActionChip的普通表现如下',replace('【onPressed】: 点击事件   【Function】\n【pressElevation】: 按下时影深   【double】\n其他属性同Chip组件，无右侧组件。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(8,4,'The normal performance of ActionChip is as follows',replace('【onPressed】: Click event   【Function】\n【pressElevation】: Shadow depth when pressed   【double】\nOther properties are the same as the Chip component, no right component.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(9,5,'AlertDialog基本使用',replace('【title】 : 顶部组件   【Widget】\n【content】 : 内容组件  【Widget】\n【titleTextStyle】 : 顶部文字样式  【TextStyle】\n【contentTextStyle】 : 内容文字样式  【TextStyle】\n【titlePadding】 : 顶部内边距  【EdgeInsetsGeometry】\n【contentPadding】 : 内容内边距  【EdgeInsetsGeometry】\n【actions】 : 右下角组件列表  【List<Widget>】\n【backgroundColor】 : 背景色  【Color】\n【elevation】 : 影深  【double】\n【shape】 : 形状   【ShapeBorder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(10,5,'Basic Usage of AlertDialog',replace('【title】 : Top component   【Widget】\n【content】 : Content component  【Widget】\n【titleTextStyle】 : Top text style  【TextStyle】\n【contentTextStyle】 : Content text style  【TextStyle】\n【titlePadding】 : Top padding  【EdgeInsetsGeometry】\n【contentPadding】 : Content padding  【EdgeInsetsGeometry】\n【actions】 : Bottom right component list  【List<Widget>】\n【backgroundColor】 : Background color  【Color】\n【elevation】 : Elevation  【double】\n【shape】 : Shape   【ShapeBorder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(11,6,'Align基本使用',replace('【child】 : 孩子组件   【Widget】\n【alignment】 : 对齐方式   【AlignmentGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(12,6,'Basic Usage of Align',replace('【child】 : Child component   【Widget】\n【alignment】 : Alignment method   【AlignmentGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(13,7,'Align其他用法',replace('由于Alignment对象可指定在父容器中宽高的分率位置\n可以使用Align实现一些复杂的排布需求，比如按指定的数学方程变化位置','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(14,7,'Other Usages of Align',replace('Since the Alignment object can specify the fractional position of the width and height in the parent container\nAlign can be used to achieve some complex layout requirements, such as changing positions according to specified mathematical equations','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(15,8,'AlignTransition基本使用',replace('【child】 : 孩子组件   【Widget】\n【alignment】 : 对齐动画   【Animation<AlignmentGeometry>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(16,8,'Basic Usage of AlignTransition',replace('【child】: Child component   【Widget】\n【alignment】: Alignment animation   【Animation<AlignmentGeometry>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(17,9,'AnimatedAlign基本使用',replace('【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【alignment】 : 对齐方式   【AlignmentGeometry】\n【curve】 : 动画曲线   【Duration】\n【padding】 : 内边距   【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(18,9,'Basic Usage of AnimatedAlign',replace('【child】: Child component 【Widget】\n【duration】: Animation duration 【Duration】\n【onEnd】: Animation end callback 【Function()】\n【alignment】: Alignment method 【AlignmentGeometry】\n【curve】: Animation curve 【Duration】\n【padding】: Padding 【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(19,10,'AnimatedBuilder 使用案例',replace('【animation】 : *可监听对象   【Listenable】\n【builder】 : *组件构造器   【TransitionBuilder】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(20,10,'AnimatedBuilder Usage Example',replace('【animation】: *Listenable object   【Listenable】\n【builder】: *Component builder   【TransitionBuilder】\n【child】: Child component   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(21,11,'AnimatedContainer基本使用',replace('【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【color】 : 颜色   【Color】\n【width】 : 宽   【double】\n【height】 : 高   【double】\n【alignment】 : 对齐   【AlignmentGeometry】\n【decoration】 : 装饰   【Decoration】\n【constraints】 : 约束   【BoxConstraints】\n【transform】 : 变化   【Matrix4】\n【margin】 : 外边距   【EdgeInsetsGeometry】\n【padding】 : 内边距   【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(22,11,'Basic Usage of AnimatedContainer',replace('【child】: Child component   【Widget】\n【duration】: Animation duration   【Duration】\n【onEnd】: Animation end callback   【Function()】\n【curve】: Animation curve   【Duration】\n【color】: Color   【Color】\n【width】: Width   【double】\n【height】: Height   【double】\n【alignment】: Alignment   【AlignmentGeometry】\n【decoration】: Decoration   【Decoration】\n【constraints】: Constraints   【BoxConstraints】\n【transform】: Transformation   【Matrix4】\n【margin】: Margin   【EdgeInsetsGeometry】\n【padding】: Padding   【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(23,12,'AnimatedCrossFade基本使用',replace('【firstChild】 : 第一孩子   【Widget】\n【secondChild】 : 第二孩子   【Widget】\n【crossFadeState】 : 显示第几个   【CrossFadeState】\n【duration】 : 时长   【Duration】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(24,12,'Basic Usage of AnimatedCrossFade',replace('【firstChild】 : First Child   【Widget】\n【secondChild】 : Second Child   【Widget】\n【crossFadeState】 : Which to Display   【CrossFadeState】\n【duration】 : Duration   【Duration】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(25,13,'AnimatedCrossFade动画曲线',replace('【firstCurve】 : 第一曲线   【Curve】\n【secondCurve】 : 第二曲线   【Curve】\n【sizeCurve】 : 尺寸变化曲线   【CrossFadeState】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(26,13,'Animation Curves of AnimatedCrossFade',replace('【firstCurve】 : First Curve   【Curve】\n【secondCurve】 : Second Curve   【Curve】\n【sizeCurve】 : Size Change Curve   【CrossFadeState】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(27,14,'AnimatedDefaultTextStyle基本使用',replace('【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【textAlign】 : 文字对齐方式  【TextAlign】\n【softWrap】 : 是否包裹  【bool】\n【maxLines】 : 最大行数  【int】\n【overflow】 : 溢出模式  【TextOverflow】\n【style】 : 文字样式   【TextStyle】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(28,14,'Basic Usage of AnimatedDefaultTextStyle',replace('【child】: Child component 【Widget】\n【duration】: Animation duration 【Duration】\n【onEnd】: Animation end callback 【Function()】\n【curve】: Animation curve 【Duration】\n【textAlign】: Text alignment 【TextAlign】\n【softWrap】: Whether to wrap 【bool】\n【maxLines】: Maximum number of lines 【int】\n【overflow】: Overflow mode 【TextOverflow】\n【style】: Text style 【TextStyle】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(29,15,'动画过渡效果',replace('该案例中，点击时会修改 heightFactor、widthFactor、alignment 参数，查看动画运动效果。\n【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【alignment】 : 动画变换中心   【Alignment】\n【curve】 : 动画曲线   【Duration】\n【heightFactor】 : 高度分率   【double?】\n【widthFactor】 : 宽度分率   【double?】\n【turns】 : 旋转量   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(30,15,'Animation Transition Effect',replace('In this case, the heightFactor, widthFactor, and alignment parameters are modified when clicked to view the animation effect.\n【child】 : Child component   【Widget】\n【duration】 : Animation duration   【Duration】\n【onEnd】 : Animation end callback   【Function()】\n【alignment】 : Animation transformation center   【Alignment】\n【curve】 : Animation curve   【Duration】\n【heightFactor】 : Height factor   【double?】\n【widthFactor】 : Width factor   【double?】\n【turns】 : Rotation amount   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(31,16,'AnimatedIcon基本使用',replace('【icon】 : 动画图标数据   【AnimatedIcons】\n【size】 : 大小  【double】\n【color】 : 颜色  【Color】\n【progress】 : 动画   【Animation<double>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(32,16,'Basic Usage of AnimatedIcon',replace('【icon】: Animation icon data 【AnimatedIcons】\n【size】: Size 【double】\n【color】: Color 【Color】\n【progress】: Animation 【Animation<double>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(33,17,'AnimatedList基本使用',replace('【itemBuilder】 : 组件构造器   【AnimatedListItemBuilder】\n【initialItemCount】 : 子组件数量   【int】\n【scrollDirection】 : 滑动方向   【Axis】\n【controller】 : 滑动控制器   【ScrollController】\n【reverse】 : 数据是否反向   【bool】\n【padding】 : 内边距   【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(34,17,'Basic Usage of AnimatedList',replace('【itemBuilder】: Component builder 【AnimatedListItemBuilder】\n【initialItemCount】: Number of child components 【int】\n【scrollDirection】: Scroll direction 【Axis】\n【controller】: Scroll controller 【ScrollController】\n【reverse】: Whether the data is reversed 【bool】\n【padding】: Padding 【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(35,18,'AnimatedModalBarrier 介绍',replace('【dismissible】 : 点击是否返回   【bool】\n【color】 : 颜色   【Animation<Color>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(36,18,'Introduction to AnimatedModalBarrier',replace('【dismissible】: Whether to return on click   【bool】\n【color】: Color   【Animation<Color>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(37,19,'AnimatedOpacity基本使用',replace('【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【opacity】 : 透明度   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(38,19,'Basic Usage of AnimatedOpacity',replace('【child】: Child component   【Widget】\n【duration】: Animation duration   【Duration】\n【onEnd】: Animation end callback   【Function()】\n【curve】: Animation curve   【Duration】\n【opacity】: Opacity   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(39,20,'AnimatedPadding基本使用',replace('【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【padding】 : 内边距   【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(40,20,'Basic Usage of AnimatedPadding',replace('【child】: Child component   【Widget】\n【duration】: Animation duration   【Duration】\n【onEnd】: Animation end callback   【Function()】\n【curve】: Animation curve   【Duration】\n【padding】: Padding   【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(41,21,'AnimatedPhysicalModel基本使用',replace('【color】 : 背景色   【Color】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【shape】 : 形状   【BoxShape】\n【elevation】 : 影深   【double】\n【borderRadius】 : 圆角   【BorderRadius】\n【shadowColor】 : 阴影色   【Color】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(42,21,'Basic Usage of AnimatedPhysicalModel',replace('【color】: Background color 【Color】\n【duration】: Animation duration 【Duration】\n【onEnd】: Animation end callback 【Function()】\n【curve】: Animation curve 【Duration】\n【shape】: Shape 【BoxShape】\n【elevation】: Elevation 【double】\n【borderRadius】: Border radius 【BorderRadius】\n【shadowColor】: Shadow color 【Color】\n【child】: Child widget 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(43,22,'AnimatedPositioned基本使用',replace('【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【top】 : 到父顶距离   【double】\n【right】 : 到父右距离   【double】\n【left】 : 到父左距离   【double】\n【bottom】 : 到父底距离   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(44,22,'Basic Usage of AnimatedPositioned',replace('【child】: Child component   【Widget】\n【duration】: Animation duration   【Duration】\n【onEnd】: Animation end callback   【Function()】\n【curve】: Animation curve   【Duration】\n【top】: Distance to parent top   【double】\n【right】: Distance to parent right   【double】\n【left】: Distance to parent left   【double】\n【bottom】: Distance to parent bottom   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(45,23,'AnimatedPositionedDirectional基本使用',replace('【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【top】 : 到父顶距离   【double】\n【end】 : 到父右距离   【double】\n【start】 : 到父左距离   【double】\n【bottom】 : 到父底距离   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(46,23,'Basic Usage of AnimatedPositionedDirectional',replace('【child】: Child component   【Widget】\n【duration】: Animation duration   【Duration】\n【onEnd】: Animation end callback   【Function()】\n【curve】: Animation curve   【Duration】\n【top】: Distance to parent top   【double】\n【end】: Distance to parent right   【double】\n【start】: Distance to parent left   【double】\n【bottom】: Distance to parent bottom   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(47,24,'旋转动画效果',replace('该案例中，拖拽调节 turns 参数，查看动画运动效果。旋转角度为: turns*2*pi\n【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【alignment】 : 动画变换中心   【Alignment】\n【curve】 : 动画曲线   【Duration】\n【filterQuality】 : 滤镜质量   【FilterQuality】\n【turns】 : 旋转量   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(48,24,'Rotation Animation Effect',replace('In this case, drag to adjust the turns parameter to see the animation effect. The rotation angle is: turns*2*pi\n【child】: Child component 【Widget】\n【duration】: Animation duration 【Duration】\n【onEnd】: Animation end callback 【Function()】\n【alignment】: Animation transformation center 【Alignment】\n【curve】: Animation curve 【Duration】\n【filterQuality】: Filter quality 【FilterQuality】\n【turns】: Rotation amount 【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(49,25,'缩放动画效果',replace('该案例中，拖拽调节 scale 参数，查看动画运动效果。\n【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【alignment】 : 动画变换中心   【Alignment】\n【filterQuality】 : 滤镜质量   【FilterQuality】\n【scale】 : 缩放量   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(50,25,'Scaling Animation Effect',replace('In this case, drag to adjust the scale parameter to view the animation effect.\n【child】: Child component 【Widget】\n【duration】: Animation duration 【Duration】\n【onEnd】: Animation end callback 【Function()】\n【curve】: Animation curve 【Duration】\n【alignment】: Animation transformation center 【Alignment】\n【filterQuality】: Filter quality 【FilterQuality】\n【scale】: Scaling amount 【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(51,26,'AnimatedSize基本使用',replace('【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【alignment】 : 对齐方式   【AlignmentGeometry】\n【curve】 : 动画曲线   【Duration】\n【vsync】 : vsync   【TickerProvider】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(52,26,'Basic Usage of AnimatedSize',replace('【child】 : Child component   【Widget】\n【duration】 : Animation duration   【Duration】\n【alignment】 : Alignment   【AlignmentGeometry】\n【curve】 : Animation curve   【Duration】\n【vsync】 : vsync   【TickerProvider】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(53,27,'滑动动画效果',replace('该案例中，拖拽调节 x,y 参数，查看动画运动效果。其中偏移量 = x,y * 方框宽高\n【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【offset】 : 偏移量   【Offset】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(54,27,'Slide Animation Effect',replace('In this case, drag to adjust the x, y parameters to view the animation effect. The offset = x, y * the width and height of the box.\n【child】: child component   【Widget】\n【duration】: animation duration   【Duration】\n【onEnd】: animation end callback   【Function()】\n【curve】: animation curve   【Duration】\n【offset】: offset   【Offset】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(55,28,'AnimatedSwitcher基本使用',replace('【child】 : 孩子组件   【Widget】\n【duration】 : 动画时长  【Duration】\n【switchOutCurve】 : 切出曲线  【Curves】\n【switchInCurve】 : 切入曲线  【Curves】\n【switchInCurve】 : 切入曲线  【Curves】\n【transitionBuilder】 : 动画构造器  【Widget Function(Widget, Animation<double>)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(56,28,'Basic Usage of AnimatedSwitcher',replace('【child】 : Child component   【Widget】\n【duration】 : Animation duration  【Duration】\n【switchOutCurve】 : Switch out curve  【Curves】\n【switchInCurve】 : Switch in curve  【Curves】\n【switchInCurve】 : Switch in curve  【Curves】\n【transitionBuilder】 : Animation builder  【Widget Function(Widget, Animation<double>)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(57,29,'AnimatedTheme基本使用',replace('【data】 : 主题数据   【ThemeData】\n【duration】 : 动画时长   【Duration】\n【onEnd】 : 动画结束回调   【Function()】\n【curve】 : 动画曲线   【Duration】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(58,29,'Basic Usage of AnimatedTheme',replace('【data】 : Theme data   【ThemeData】\n【duration】 : Animation duration   【Duration】\n【onEnd】 : Animation end callback   【Function()】\n【curve】 : Animation curve   【Duration】\n【child】 : Child widget   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(59,30,'AnnotatedRegion改变状态量样式',replace('【value】 : 值   【T】\n【sized】 : 是否提供大小   【bool】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(60,30,'AnnotatedRegion Changes State Variables and Styles',replace('【value】 : value   【T】\n【sized】 : whether to provide size   【bool】\n【child】 : child component   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(61,31,'AppBar基本使用',replace('【leading】 : 左侧组件   【Widget】\n【title】 : 中间组件   【Widget】\n【actions】 : 右侧组件   【List<Widget>】\n【elevation】 : 影深   【double】\n【shape】 : 形状   【ShapeBorder】\n【backgroundColor】 : 影深   【背景色】\n【centerTitle】 : 中间是否居中   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(62,31,'Basic Usage of AppBar',replace('【leading】 : Left component   【Widget】\n【title】 : Middle component   【Widget】\n【actions】 : Right component   【List<Widget>】\n【elevation】 : Shadow depth   【double】\n【shape】 : Shape   【ShapeBorder】\n【backgroundColor】 : Background color   【Color】\n【centerTitle】 : Whether the title is centered   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(63,32,'AppBar与TabBar、TabBarView联用','【bottom】 : 底部组件   【PreferredSizeWidget】','zh-cn');
INSERT INTO node_desc VALUES(64,32,'Using AppBar with TabBar and TabBarView','【bottom】 : Bottom component   【PreferredSizeWidget】','en-us');
INSERT INTO node_desc VALUES(65,33,'AspectRatio基本使用',replace('【child】 : 孩子组件   【Widget】\n【aspectRatio】 : 宽高比例   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(66,33,'Basic Usage of AspectRatio',replace('【child】: Child component   【Widget】\n【aspectRatio】: Aspect ratio   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(67,34,'Autocomplete基本使用',replace('【optionsBuilder】 : 选项构造器   【AutocompleteOptionsBuilder<T>】\n【onSelected】 : 选择时回调   【AutocompleteOnSelected<T>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(68,34,'Basic Usage of Autocomplete',replace('【optionsBuilder】: Option builder   【AutocompleteOptionsBuilder<T>】\n【onSelected】: Callback when selected   【AutocompleteOnSelected<T>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(69,35,'Autocomplete的泛型',replace('【optionsViewBuilder】 : 面板构造器   【AutocompleteOptionsViewBuilder<T>】\n【fieldViewBuilder】 : 输入构造器   【AutocompleteFieldViewBuilder】\n【displayStringForOption】 : 文字展示   【AutocompleteOptionToString】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(70,35,'Generics of Autocomplete',replace('【optionsViewBuilder】: Panel builder   【AutocompleteOptionsViewBuilder<T>】\n【fieldViewBuilder】: Input builder   【AutocompleteFieldViewBuilder】\n【displayStringForOption】: Text display   【AutocompleteOptionToString】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(71,36,'AutomaticKeepAlive 介绍',replace('【child】 : 子组件   【Widget】\n在 ListView、SliverList、GridView、SliverGrid、PageView、TabBarView 等列表、切页组件源码中都有使用到 AutomaticKeepAlive 组件。在保活某个 State 时，可以使用 AutomaticKeepAliveClientMixin 进行操作，它是对 KeepAliveNotification 使用的一个简易封装。该示例展示出 ListView 条目的状态保活。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(72,36,'Introduction to AutomaticKeepAlive',replace('【child】: Child component 【Widget】\nThe AutomaticKeepAlive component is used in the source code of list and page-switching components such as ListView, SliverList, GridView, SliverGrid, PageView, and TabBarView. When keeping a State alive, you can use AutomaticKeepAliveClientMixin, which is a simple encapsulation of the use of KeepAliveNotification. This example demonstrates the state preservation of ListView items.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(73,37,'BackButton属性',replace('【color】: 颜色   【Color】\n【style】: 按钮样式   【ButtonStyle?】\n【onPressed】: 点击事件   【Function】\n onPressed为空会退出当前栈','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(74,37,'BackButton Properties',replace('【color】: Color   【Color】\n【style】: Button Style   【ButtonStyle?】\n【onPressed】: Click Event   【Function】\n If onPressed is empty, it will exit the current stack.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(75,38,'BackButtonIcon 效果','通过 _ActionIcon 组件根据 ActionIconTheme 主题，来适配不同平台的返回按钮图标。','zh-cn');
INSERT INTO node_desc VALUES(76,38,'BackButtonIcon Effect','The _ActionIcon component adapts the back button icon for different platforms according to the ActionIconTheme.','en-us');
INSERT INTO node_desc VALUES(77,39,'BackdropFilter基本使用',replace('【child】 : 孩子组件   【Widget】\n【filter】 : 过滤器   【ImageFilter】\nImageFilter.blur可以实现高斯模糊，指定x，y模糊因子。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(78,39,'Basic Usage of BackdropFilter',replace('【child】: Child component 【Widget】\n【filter】: Filter 【ImageFilter】\nImageFilter.blur can achieve Gaussian blur by specifying the x and y blur factors.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(79,40,'Badge 圆点标记的使用',replace('【backgroundColor】 : 背景色   【Color?】\n【isLabelVisible】 : 是否显示标记  【bool】\n【smallSize】 : 无标签时直径   【double?】\n【child】 : 子组件   【Widget?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(80,40,'Usage of Badge Dot Marker',replace('【backgroundColor】: Background color 【Color?】\n【isLabelVisible】: Whether to display the marker 【bool】\n【smallSize】: Diameter when there is no label 【double?】\n【child】: Child component 【Widget?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(81,41,'Badge 标签标记',replace('【label】 : 标题组件   【Widget?】\n【textStyle】 : 标题颜色  【TextStyle?】\n【textColor】 : 标题样式  【Color?】\n【padding】 : 标题边距  【EdgeInsetsGeometry?】\n【largeSize】 : 有标签时高度   【double?】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(82,41,'Badge Label Marker',replace('【label】: Title component 【Widget?】\n【textStyle】: Title color 【TextStyle?】\n【textColor】: Title style 【Color?】\n【padding】: Title margin 【EdgeInsetsGeometry?】\n【largeSize】: Height when there is a label 【double?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(83,42,'Badge 的偏移量',replace('【offset】 : 标记偏移量  【Offset?】\n【alignment】 : 标题偏移   【AlignmentDirectional?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(84,42,'Badge Offset',replace('【offset】: Marker offset 【Offset?】\n【alignment】: Title offset 【AlignmentDirectional?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(85,43,'用于显示一个角标',replace('【message】 : 显示的文字信息  【String】\n【location】 : 位置*4  【BannerLocation】\n【color】: 角标颜色   【Color】\n【child】: 孩子   【Widget】\n【textStyle】: 文字样式   【TextStyle】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(86,43,'Used to display a badge',replace('【message】: The text message to display 【String】\n【location】: Position*4 【BannerLocation】\n【color】: Badge color 【Color】\n【child】: Child 【Widget】\n【textStyle】: Text style 【TextStyle】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(87,44,'Baseline基本使用',replace('【child】 : 孩子组件   【Widget】\n【baseline】 : 基线位置   【double】\n【baselineType】 : 基线类型   【TextBaseline】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(88,44,'Basic Usage of Baseline',replace('【child】 : Child component   【Widget】\n【baseline】 : Baseline position   【double】\n【baselineType】 : Baseline type   【TextBaseline】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(89,45,'BottomAppBar基本用法',replace('【elevation】 : 影深   【double】\n【shape】 : 形状   【NotchedShape】\n【notchMargin】 : 间隔距离   【double】\n【color】 : 颜色   【Color】\n【child】 : 孩子   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(90,45,'Basic Usage of BottomAppBar',replace('【elevation】: Elevation 【double】\n【shape】: Shape 【NotchedShape】\n【notchMargin】: Notch Margin 【double】\n【color】: Color 【Color】\n【child】: Child 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(91,46,'BottomNavigationBar基本使用',replace('【currentIndex】 : 当前索引   【int】\n【elevation】 : 影深   【double】\n【type】 : 类型*2   【BottomNavigationBarType】\n【fixedColor】 : type为fix的颜色   【Color】\n【backgroundColor】 : 背景色   【Color】\n【iconSize】 : 图标大小   【double】\n【selectedLabelStyle】 : 选中文字样式   【TextStyle】\n【unselectedLabelStyle】 : 未选中文字样式   【TextStyle】\n【showUnselectedLabels】 : 显示未选中标签   【bool】\n【showSelectedLabels】 : 显示选中标签   【bool】\n【items】 : 条目   【List<BottomNavigationBarItem>】\n【onTap】 : 点击事件   【Function(int)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(92,46,'Basic Usage of BottomNavigationBar',replace('【currentIndex】 : Current index   【int】\n【elevation】 : Shadow depth   【double】\n【type】 : Type*2   【BottomNavigationBarType】\n【fixedColor】 : Color when type is fix   【Color】\n【backgroundColor】 : Background color   【Color】\n【iconSize】 : Icon size   【double】\n【selectedLabelStyle】 : Selected text style   【TextStyle】\n【unselectedLabelStyle】 : Unselected text style   【TextStyle】\n【showUnselectedLabels】 : Show unselected labels   【bool】\n【showSelectedLabels】 : Show selected labels   【bool】\n【items】 : Items   【List<BottomNavigationBarItem>】\n【onTap】 : Click event   【Function(int)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(93,47,'可结合PageView进行切页','在onTap时进行使用控制器进行切页','zh-cn');
INSERT INTO node_desc VALUES(94,47,'Page Switching with PageView','Use the controller for page switching during onTap','en-us');
INSERT INTO node_desc VALUES(95,48,'BottomSheet基本使用',replace('【builder】 : 组件构造器   【WidgetBuilder】\n【backgroundColor】 : 背景色   【Color】\n【elevation】 : 影深   【double】\n【shape】 : 形状   【ShapeBorder】\n【onClosing】 : 关闭回调  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(96,48,'Basic Usage of BottomSheet',replace('【builder】: Component constructor 【WidgetBuilder】\n【backgroundColor】: Background color 【Color】\n【elevation】: Shadow depth 【double】\n【shape】: Shape 【ShapeBorder】\n【onClosing】: Closing callback 【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(97,49,'BoxScrollView 介绍',replace('【reverse】 : 是否反向   【bool】\n【scrollDirection】 : 滑动方向   【Axis】\n【cacheExtent】 : 缓存长   【double】\n【dragStartBehavior】 : 拖动行为   【DragStartBehavior】\n【clipBehavior】 : 裁剪行为   【ClipBehavior】\n【controller】 : 控制器   【ScrollController】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(98,49,'Introduction to BoxScrollView',replace('【reverse】 : Whether to reverse   【bool】\n【scrollDirection】 : Scroll direction   【Axis】\n【cacheExtent】 : Cache length   【double】\n【dragStartBehavior】 : Drag start behavior   【DragStartBehavior】\n【clipBehavior】 : Clip behavior   【ClipBehavior】\n【controller】 : Controller   【ScrollController】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(99,50,'Builder的使用',replace('【builder】 : 组件构造器   【WidgetBuilder】\n同一个类中使用`XXX.of(context)`获取某类状态对象方法会存在`上下文滞后`的错误，使用Builder解决。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(100,50,'Usage of Builder',replace('【builder】: Component Constructor   【WidgetBuilder】\nUsing `XXX.of(context)` to obtain a state object of a certain class within the same class may result in a ''context lag'' error, which can be resolved using Builder.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(101,51,'ButtonBar对齐方式',replace('【alignment】: 对齐方式   【MainAxisAlignment】\n【children】: 子组件集   【List<Widget>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(102,51,'ButtonBar Alignment',replace('【alignment】: Alignment   【MainAxisAlignment】\n【children】: Child components   【List<Widget>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(103,52,'ButtonBar边距和高',replace('【buttonPadding】: 内边距   【EdgeInsetsGeometry】\n【buttonHeight】: 高   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(104,52,'ButtonBar Margin and Height',replace('【buttonPadding】: Padding   【EdgeInsetsGeometry】\n【buttonHeight】: Height   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(105,53,'ButtonBarTheme基本使用','可指定ButtonBarThemeData数据属性为【后代】的ButtonBar组件设置默认样式，如对齐方式、样式、边距等。也可以用ButtonBarTheme.of获取ButtonBar的主题属性。','zh-cn');
INSERT INTO node_desc VALUES(106,53,'Basic Usage of ButtonBarTheme','You can specify the ButtonBarThemeData properties to set default styles for descendant ButtonBar components, such as alignment, style, margins, etc. You can also use ButtonBarTheme.of to get the theme properties of ButtonBar.','en-us');
INSERT INTO node_desc VALUES(107,54,'ButtonTheme使用',replace('属性参数同MaterialButton，可以通过ButtonTheme.of获取按钮主题数据，"\n也可以为ButtonTheme【后代】的按钮组件设置默认样式，包括颜色、形状、尺寸等。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(108,54,'ButtonTheme Usage',replace('The property parameters are the same as MaterialButton. You can obtain button theme data through ButtonTheme.of, "\nand also set default styles for button components that are descendants of ButtonTheme, including color, shape, size, etc.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(109,55,'快捷键使用',replace('案例中激活焦点后，Ctrl+↑  和 Ctrl+↓ 组合键可以增加或减少数字\n【enabled】 : 是否可用   【bool】\n【onTapOutside】 : 点击外界监听   【TapRegionCallback?】\n【onTapInside】 : 点击内部监听   【TapRegionCallback?】\n【groupId】 : 点击区域组标识   【Object?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(110,55,'Shortcut Usage',replace('After activating focus in the example, the Ctrl+↑ and Ctrl+↓ key combinations can increase or decrease the number\n【enabled】: Whether it is available 【bool】\n【onTapOutside】: Click outside listener 【TapRegionCallback?】\n【onTapInside】: Click inside listener 【TapRegionCallback?】\n【groupId】: Click area group identifier 【Object?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(111,56,'Card可以让一个组件卡片化',replace('【elevation】 : 影深  【double】\n【margin】: 外边距   【double】\n【color】: 颜色   【Color】\n【child】: 孩子   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(112,56,'Card can cardify a component',replace('【elevation】: Shadow depth 【double】\n【margin】: Margin 【double】\n【color】: Color 【Color】\n【child】: Child 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(113,57,'可以通过shape属性实现裁切效果',replace('【shape】 : 形状  【ShapeBorder】\n【margin】: 外边距   【double】\n【color】: 颜色   【Color】\n【child】: 孩子   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(114,57,'Can achieve clipping effect through the shape property',replace('【shape】: Shape 【ShapeBorder】\n【margin】: Margin 【double】\n【color】: Color 【Color】\n【child】: Child 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(115,58,'CarouselView 基础用法',replace('【itemExtent】 : 主轴方向强制尺寸  【double】\n【shrinkExtent】: 滑动中，主轴方向条目最小尺寸 【double】\n【scrollDirection】 : 滑动轴向   【Axis?】\n【children】: 子组件列表 【List<Widget>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(116,58,'CarouselView Basic Usage',replace('【itemExtent】 : Forced size in the main axis direction 【double】\n【shrinkExtent】: Minimum size of the item in the main axis direction during scrolling 【double】\n【scrollDirection】 : Scroll axis direction 【Axis?】\n【children】: List of child components 【List<Widget>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(117,59,'CarouselView 样式配置',replace('【padding】 : 内边距   【EdgeInsets? 】\n【backgroundColor】 : 背景色   【Color? 】\n【elevation】 : 阴影深   【double?】\n【shape】 : 形状   【ShapeBorder?】\n【controller】 : 控制器   【CarouselController?】\n【reverse】 : 是否反向滑动   【bool】\n【onTap】 : 点击事件   【ValueChanged<int>? 】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(118,59,'CarouselView Style Configuration',replace('【padding】 : Padding 【EdgeInsets? 】\n【backgroundColor】 : Background color 【Color? 】\n【elevation】 : Shadow depth 【double?】\n【shape】 : Shape 【ShapeBorder?】\n【controller】 : Controller 【CarouselController?】\n【reverse】 : Whether to scroll in reverse 【bool】\n【onTap】 : Click event 【ValueChanged<int>? 】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(119,60,'Center基本使用','【child】 : 孩子组件   【Widget】','zh-cn');
INSERT INTO node_desc VALUES(120,60,'Basic Usage of Center','【child】: Child component   【Widget】','en-us');
INSERT INTO node_desc VALUES(121,61,'Checkbox基础用法',replace('【value】 : 是否选中   【double】\n【checkColor】: 选中时✔️gou颜色 【Color】\n【activeColor】: 选中时框内颜色 【Color】\n【onChanged】: 状态改变事件 【Function(bool)】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(122,61,'Basic Usage of Checkbox',replace('【value】 : Whether it is selected   【double】\n【checkColor】: Color of ✔️ when selected 【Color】\n【activeColor】: Color inside the box when selected 【Color】\n【onChanged】: State change event 【Function(bool)】,','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(123,62,'Checkbox的三态',replace('【tristate】 : 是否是三态   【double】\n  onChanged时,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(124,62,'Tristate of Checkbox',replace('【tristate】 : Whether it is tristate   【double】\n  when onChanged,','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(125,63,'CheckBoxListTile的基本表现如下',replace('【secondary】: 左侧组件   【Widget】\n【checkColor】: ✔️颜色   【Color】\n【activeColor】: 选中时外框颜色   【Color】\n【title】: 中间上组件   【Widget】\n【subtitle】: 中间下组件   【Widget】\n【onChanged】: 选中事件   【Function(bool)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(126,63,'Basic representation of CheckBoxListTile',replace('【secondary】: Left component   【Widget】\n【checkColor】: ✔️ color   【Color】\n【activeColor】: Frame color when selected   【Color】\n【title】: Top middle component   【Widget】\n【subtitle】: Bottom middle component   【Widget】\n【onChanged】: Selection event   【Function(bool)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(127,64,'CheckBoxListTile的选中效果','【selected】: 是否选中   【bool】','zh-cn');
INSERT INTO node_desc VALUES(128,64,'Selection effect of CheckBoxListTile','【selected】: Whether selected   【bool】','en-us');
INSERT INTO node_desc VALUES(129,65,'CheckBoxListTile的密排属性','【dense】: 是否密排   【bool】','zh-cn');
INSERT INTO node_desc VALUES(130,65,'Dense property of CheckBoxListTile','【dense】: Whether dense   【bool】','en-us');
INSERT INTO node_desc VALUES(131,66,'CheckedModeBanner基本使用','【child】 : 组件   【Widget】','zh-cn');
INSERT INTO node_desc VALUES(132,66,'Basic usage of CheckedModeBanner','【child】 : Component   【Widget】','en-us');
INSERT INTO node_desc VALUES(133,67,'Chip的普通表现如下',replace('【avatar】: 左侧组件   【Widget】\n【label】: 中间组件   【Widget】\n【padding】 : 内边距  【EdgeInsetsGeometry】\n【labelPadding】: label边距   【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(134,67,'The normal appearance of Chip is as follows',replace('【avatar】: Left component   【Widget】\n【label】: Middle component   【Widget】\n【padding】: Padding   【EdgeInsetsGeometry】\n【labelPadding】: Label padding   【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(135,68,'可以设置颜色和阴影',replace('【backgroundColor】: 背景色   【Color】\n【shadowColor】: 阴影色   【Color】\n【elevation】: 影深   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(136,68,'You can set colors and shadows',replace('【backgroundColor】: Background color   【Color】\n【shadowColor】: Shadow color   【Color】\n【elevation】: Shadow depth   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(137,69,'可以设置右侧点击按钮',replace('【deleteIcon】: 右侧组件(通常为Icon)   【Widget】\n【deleteIconColor】: 右侧组件颜色   【Color】\n【onDeleted】: 右侧组件点击事件   【Function】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(138,69,'You can set the right click button',replace('【deleteIcon】: Right component (usually an Icon)   【Widget】\n【deleteIconColor】: Right component color   【Color】\n【onDeleted】: Right component click event   【Function】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(139,70,'ChipTheme基本使用','可指定ChipThemeData数据属性为【后代】的Chip类型组件设置默认样式，属性和Chip属性类似，如阴影、颜色、边距、形状、文字样式等。也可以用ChipTheme.of获取Chip的主题数据。','zh-cn');
INSERT INTO node_desc VALUES(140,70,'Basic Usage of ChipTheme','You can specify the ChipThemeData properties to set default styles for Chip type components of descendants. The properties are similar to those of Chip, such as shadow, color, margin, shape, text style, etc. You can also use ChipTheme.of to get the theme data of Chip.','en-us');
INSERT INTO node_desc VALUES(141,71,'ChoiceChip的普通表现如下',replace('【selectedColor】: 选中时颜色   【Color】\n【selectedShadowColor】: 选中时阴影颜色   【Color】\n【onSelected】: 选中事件   【Fuction(bool)】\n    其他属性同Chip组件，无右侧组件。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(142,71,'The normal performance of ChoiceChip is as follows',replace('【selectedColor】: Color when selected   【Color】\n【selectedShadowColor】: Shadow color when selected   【Color】\n【onSelected】: Selection event   【Fuction(bool)】\n    Other properties are the same as the Chip component, with no right component.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(143,72,'CircleAvatar的表现',replace('【radius】 : 半径  【double】\n【backgroundImage】 : 图片资源  【ImageProvider】\n【foregroundColor】: 前景色   【Color】\n【backgroundColor】: 背景色   【Color】\n【minRadius】: 最小半径   【double】\n【maxRadius】: 最大半径   【double】\n【child】: 孩子组件   【Child】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(144,72,'CircleAvatar Performance',replace('【radius】: radius 【double】\n【backgroundImage】: image resource 【ImageProvider】\n【foregroundColor】: foreground color 【Color】\n【backgroundColor】: background color 【Color】\n【minRadius】: minimum radius 【double】\n【maxRadius】: maximum radius 【double】\n【child】: child component 【Child】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(145,73,'CircularProgressIndicator基本使用',replace('【value】 : 进度   【double】\n【backgroundColor】 : 背景色   【Color】\n【valueColor】 : 进度颜色   【Animation<Color>】\n【strokeWidth】 : 线宽   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(146,73,'Basic Usage of CircularProgressIndicator',replace('【value】 : Progress   【double】\n【backgroundColor】 : Background Color   【Color】\n【valueColor】 : Progress Color   【Animation<Color>】\n【strokeWidth】 : Line Width   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(147,74,'ClipOval基本使用',replace('【child】 : 子组件   【Widget】\n【clipBehavior】 : 裁剪行为   【Clip】\n【clipper】 : 裁剪器   【CustomClipper<RRect>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(148,74,'Basic Usage of ClipOval',replace('【child】: Child component   【Widget】\n【clipBehavior】: Clipping behavior   【Clip】\n【clipper】: Clipper   【CustomClipper<RRect>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(149,75,'ClipPath基本使用',replace('【child】 : 子组件   【Widget】\n【clipBehavior】 : 裁剪行为   【Clip】\n【clipper】 : 裁剪器   【CustomClipper<Path>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(150,75,'Basic Usage of ClipPath',replace('【child】 : Child component   【Widget】\n【clipBehavior】 : Clipping behavior   【Clip】\n【clipper】 : Clipper   【CustomClipper<Path>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(151,76,'ClipRect基本使用',replace('【child】 : 子组件   【Widget】\n【clipBehavior】 : 裁剪行为   【Clip】\n【clipper】 : 裁剪器   【CustomClipper<Rect>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(152,76,'Basic Usage of ClipRect',replace('【child】: Child component 【Widget】\n【clipBehavior】: Clipping behavior 【Clip】\n【clipper】: Clipper 【CustomClipper<Rect>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(153,77,'ClipRRect基本使用',replace('【child】 : 子组件   【Widget】\n【borderRadius】 : 边线半径   【BorderRadius】\n【clipBehavior】 : 裁剪行为   【Clip】\n【clipper】 : 裁剪器   【CustomClipper<Rect>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(154,77,'Basic Usage of ClipRRect',replace('【child】: Child component   【Widget】\n【borderRadius】: Border radius   【BorderRadius】\n【clipBehavior】: Clipping behavior   【Clip】\n【clipper】: Clipper   【CustomClipper<Rect>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(155,78,'CloseButton点击事件',replace('【onPressed】 : 点击事件  【VoidCallback?】\n【style】: 按钮样式   【ButtonStyle?】\n【color】: 颜色   【Color】\nonPressed 为空时，点击时会退出当前界面。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(156,78,'CloseButton Click Event',replace('【onPressed】: Click event  【VoidCallback?】\n【style】: Button style   【ButtonStyle?】\n【color】: Color   【Color】\nWhen onPressed is null, clicking will exit the current interface.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(157,79,'CloseButtonIcon 效果','通过 _ActionIcon 组件根据 ActionIconTheme 主题，来适配不同平台的关闭按钮图标。','zh-cn');
INSERT INTO node_desc VALUES(158,79,'CloseButtonIcon Effect','The _ActionIcon component adapts the close button icon for different platforms based on the ActionIconTheme.','en-us');
INSERT INTO node_desc VALUES(159,80,'ColoredBox基本使用',replace('【color】 : 组件   【Color】\n【child】 : 组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(160,80,'Basic Usage of ColoredBox',replace('【color】: Component 【Color】\n【child】: Component 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(161,81,'ColorFiltered基本使用',replace('【child】 : 孩子组件   【Widget】\n【colorFilter】 : 滤色器   【ColorFilter】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(162,81,'Basic Usage of ColorFiltered',replace('【child】: Child component   【Widget】\n【colorFilter】: Color filter   【ColorFilter】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(163,82,'Column基本使用',replace('【children】 : 组件列表   【List<Widget>】\n【mainAxisAlignment】 : 主轴对齐   【MainAxisAlignment】\n【crossAxisAlignment】 : 交叉轴对齐   【CrossAxisAlignment】\n【textBaseline】 : 文字基线   【TextBaseline】\n【verticalDirection】 : 竖直方向   【VerticalDirection】\n【mainAxisSize】 : 主轴尺寸   【MainAxisSize】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(164,82,'Basic Usage of Column',replace('【children】: Component list 【List<Widget>】\n【mainAxisAlignment】: Main axis alignment 【MainAxisAlignment】\n【crossAxisAlignment】: Cross axis alignment 【CrossAxisAlignment】\n【textBaseline】: Text baseline 【TextBaseline】\n【verticalDirection】: Vertical direction 【VerticalDirection】\n【mainAxisSize】: Main axis size 【MainAxisSize】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(165,83,'CompositedTransformFollower 使用',replace('【child】 : 子组件   【Widget】\n【link】 : 链接   【LayerLink】\n【offset】 : 偏移   【Offset】\n【targetAnchor】 : 目标锚点   【Alignment】\n【followerAnchor】 : 伴随者锚点   【Alignment】\n【showWhenUnlinked】 : 为链接是否显示   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(166,83,'Usage of CompositedTransformFollower',replace('【child】 : Child widget   【Widget】\n【link】 : Link   【LayerLink】\n【offset】 : Offset   【Offset】\n【targetAnchor】 : Target anchor   【Alignment】\n【followerAnchor】 : Follower anchor   【Alignment】\n【showWhenUnlinked】 : Whether to show when unlinked   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(167,84,'CompositedTransformTarget 使用',replace('【child】 : 子组件   【Widget】\n【link】 : 链接   【LayerLink】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(168,84,'CompositedTransformTarget Usage',replace('【child】 : Child component   【Widget】\n【link】 : Link   【LayerLink】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(169,85,'BoxConstraints基本使用',replace('【child】 : 孩子组件   【Widget】\n【minWidth】 : 最小宽   【double】\n【minHeight】 : 最小高   【double】\n【maxHeight】 : 最大高   【double】\n【maxWidth】 : 最大宽   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(170,85,'Basic Usage of BoxConstraints',replace('【child】 : Child component   【Widget】\n【minWidth】 : Minimum width   【double】\n【minHeight】 : Minimum height   【double】\n【maxHeight】 : Maximum height   【double】\n【maxWidth】 : Maximum width   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(171,86,'可用于显示一个指定宽高的区域',replace('【width】 : 宽   【int】\n【height】: 高   【int】\n【color】: 颜色    【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(172,86,'Can be used to display an area with specified width and height',replace('【width】 : width   【int】\n【height】: height   【int】\n【color】: color    【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(173,87,'可以在区域中放入一个子组件',replace('【padding】 : 内边距   【EdgeInsetsGeometry】\n【margin】: 外边距   【EdgeInsetsGeometry】\n【child】: 子组件    【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(174,87,'Can place a child component within the area',replace('【padding】 : padding   【EdgeInsetsGeometry】\n【margin】: margin   【EdgeInsetsGeometry】\n【child】: child component    【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(175,88,'可对子组件进行对齐定位','【alignment】 : 对齐定位   【AlignmentGeometry】','zh-cn');
INSERT INTO node_desc VALUES(176,88,'Can align and position the child component','【alignment】 : alignment   【AlignmentGeometry】','en-us');
INSERT INTO node_desc VALUES(177,89,'可对子组件进行装饰',replace('【decoration】 : 装饰   【Decoration】\n可装饰: 边线、圆弧、颜色、渐变色、阴影、图片等内容','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(178,89,'Can decorate the child component',replace('【decoration】 : decoration   【Decoration】\nCan decorate: borders, rounded corners, colors, gradients, shadows, images, etc.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(179,90,'Container还具有变换性',replace('【transform】 : 变换矩阵   【Matrix4】\n基于Matrix4的矩阵变换，变换详情见线性代数','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(180,90,'Container also has transformation capabilities',replace('【transform】 : transformation matrix   【Matrix4】\nMatrix transformation based on Matrix4, see linear algebra for details','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(181,91,'Container的约束性',replace('【constraints】 : 约束   【BoxConstraints】\n会约束该区域的尺寸，不会小于指定的最小宽高，也不会大于指定的最大宽高。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(182,91,'Constraints of the Container',replace('【constraints】 : constraints   【BoxConstraints】\nWill constrain the size of the area, it will not be smaller than the specified minimum width and height, nor larger than the specified maximum width and height.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(183,92,'CupertinoActionSheet基本使用',replace('【title】 : 第一行组件   【Widget】\n【message】 : 第二行组件  【Widget】\n【cancelButton】 : 取消按钮处组件  【Widget】\n【actions】 : 中间组件列表  【List<Widget>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(184,92,'Basic Usage of CupertinoActionSheet',replace('【title】: First row component 【Widget】\n【message】: Second row component 【Widget】\n【cancelButton】: Component at the cancel button 【Widget】\n【actions】: List of middle components 【List<Widget>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(185,93,'CupertinoActionSheetAction基本使用',replace('【child】 : 子组件   【Widget】\n【isDefaultAction】 : 是否默认选中  【bool】\n【onPressed】 : 点击事件  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(186,93,'Basic Usage of CupertinoActionSheetAction',replace('【child】: Child widget 【Widget】\n【isDefaultAction】: Whether it is the default action 【bool】\n【onPressed】: Click event 【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(187,94,'CupertinoActivityIndicator基本使用',replace('【animating】 : 是否loading动画   【bool】\n【radius】 : 半径   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(188,94,'Basic Usage of CupertinoActivityIndicator',replace('【animating】 : Whether the loading animation is active   【bool】\n【radius】 : Radius   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(189,95,'CupertinoActionSheetAction基本使用',replace('【child】 : 子组件   【Widget】\n【isDefaultAction】 : 是否默认选中  【bool】\n【onPressed】 : 点击事件  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(190,95,'Basic Usage of CupertinoActionSheetAction',replace('【child】 : Child component   【Widget】\n【isDefaultAction】 : Whether it is selected by default  【bool】\n【onPressed】 : Click event  【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(191,96,'CupertinoApp基本用法',replace('【theme】 : 主题   【ThemeData】\n【title】 : 任务栏标题   【String】\n【onGenerateRoute】 : 路由生成器   【RouteFactory】\n【home】 : 主页   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(192,96,'Basic Usage of CupertinoApp',replace('【theme】 : Theme   【ThemeData】\n【title】 : Taskbar Title   【String】\n【onGenerateRoute】 : Route Generator   【RouteFactory】\n【home】 : Home Page   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(193,97,'CupertinoButton点击事件',replace('【color】: 颜色   【Color】\n【pressedOpacity】: 按下时透明度   【double】\n【child】: 子组件   【Widget】\n【padding】: 内边距   【EdgeInsetsGeometry】\n【borderRadius】: 圆角半径   【BorderRadius】\n【onPressed】: 点击事件   【Function】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(194,97,'CupertinoButton Click Event',replace('【color】: Color   【Color】\n【pressedOpacity】: Opacity when pressed   【double】\n【child】: Child widget   【Widget】\n【padding】: Padding   【EdgeInsetsGeometry】\n【borderRadius】: Border radius   【BorderRadius】\n【onPressed】: Click event   【Function】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(195,98,'CupertinoCheckbox 使用',replace('【value】 : 是否选中   【bool?】\n【onChanged】 : 变化回调   【ValueChanged<bool?>?】\n【checkColor】 : 选中时√颜色   【Color?】\n【activeColor】 : 选中背景颜色   【Color?】\n【activeColor】 : 选中背景颜色   【Color?】\n【inactiveColor】 : 非激活是边线色/不可用背景色   【Color?】\nonChanged 为 null 时，表示不可用。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(196,98,'CupertinoCheckbox Usage',replace('【value】: Whether it is selected   【bool?】\n【onChanged】: Change callback   【ValueChanged<bool?>?】\n【checkColor】: Checkmark color when selected   【Color?】\n【activeColor】: Background color when selected   【Color?】\n【activeColor】: Background color when selected   【Color?】\n【inactiveColor】: Border color when inactive/background color when disabled   【Color?】\nWhen onChanged is null, it means it is disabled.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(197,99,'CupertinoCheckbox 三态',replace('【tristate】 : 是否启用三态   【bool】\n三态时，值为 null 为 - ','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(198,99,'CupertinoCheckbox Three States',replace('【tristate】: Whether to enable three states   【bool】\nIn three states, the value is null for -','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(199,100,'CupertinoCheckbox 边线与形状',replace('【shape】 : 形状   【OutlinedBorder?】\n【side】 : 边线   【BorderSide?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(200,100,'CupertinoCheckbox Border and Shape',replace('【shape】: Shape   【OutlinedBorder?】\n【side】: Border   【BorderSide?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(201,101,'CupertinoContextMenu基本使用',replace('【child】 : 子组件   【Widget】\n【actions】 : 行为组件集   【List<Widget>】\n【previewBuilder】 : 动画构造器  【ContextMenuPreviewBuilder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(202,101,'Basic Usage of CupertinoContextMenu',replace('【child】 : Child Component   【Widget】\n【actions】 : Action Components Set   【List<Widget>】\n【previewBuilder】 : Animation Builder  【ContextMenuPreviewBuilder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(203,102,'CupertinoContextMenuAction基本使用',replace('【child】 : 子组件   【Widget】\n【isDefaultAction】 : 是否默认选中  【bool】\n【trailingIcon】 : 尾部  【bool】\n【onPressed】 : 点击事件  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(204,102,'Basic Usage of CupertinoContextMenuAction',replace('【child】 : Child Component   【Widget】\n【isDefaultAction】 : Whether it is the default action  【bool】\n【trailingIcon】 : Trailing Icon  【bool】\n【onPressed】 : Click Event  【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(205,103,'CupertinoDatePicker基本使用',replace('【initialDateTime】 : 初始日期   【DateTime】\n【minimumYear】 : 最小年份   【int】\n【maximumYear】 : 最大年份   【int】\n【onDateTimeChanged】 : 点击回调  【Function(DateTime)】\n【minuteInterval】 : 分钟间隔  【int】\n【use24hFormat】 : 是否是24小时制  【bool】\n【backgroundColor】 : 背景色  【Color】\n【mode】 : 模式*3  【CupertinoDatePickerMode】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(206,103,'Basic Usage of CupertinoDatePicker',replace('【initialDateTime】 : Initial date   【DateTime】\n【minimumYear】 : Minimum year   【int】\n【maximumYear】 : Maximum year   【int】\n【onDateTimeChanged】 : Click callback  【Function(DateTime)】\n【minuteInterval】 : Minute interval  【int】\n【use24hFormat】 : Whether it is 24-hour format  【bool】\n【backgroundColor】 : Background color  【Color】\n【mode】 : Mode*3  【CupertinoDatePickerMode】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(207,104,'CupertinoDialogAction基本使用',replace('【isDefaultAction】 : 是否是默认性操作   【bool】\n【isDestructiveAction】 : 是否是毁灭性操作   【bool】\n【textStyle】: 文字样式   【TextStyle】\n【onPressed】: 点击事件   【VoidCallback】\n【child】: 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(208,104,'Basic Usage of CupertinoDialogAction',replace('【isDefaultAction】: Whether it is a default action 【bool】\n【isDestructiveAction】: Whether it is a destructive action 【bool】\n【textStyle】: Text style 【TextStyle】\n【onPressed】: Click event 【VoidCallback】\n【child】: Child widget 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(209,105,'组件介绍',replace('【child】 : 子组件   【Widget】\n【linearTransition】 : 是否线性转换   【bool】\n【primaryRouteAnimation】 : 初始路由动画   【Animation<double>】\n【secondaryRouteAnimation】 : 第二路由动画   【Animation<double>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(210,105,'Component Introduction',replace('【child】 : Child component   【Widget】\n【linearTransition】 : Whether to use linear transition   【bool】\n【primaryRouteAnimation】 : Initial route animation   【Animation<double>】\n【secondaryRouteAnimation】 : Secondary route animation   【Animation<double>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(211,106,'CupertinoNavigationBar基本用法',replace('【leading】 : 左侧组件   【Widget】\n【middle】 : 中间组件   【Widget】\n【trailing】 : 尾部组件   【Widget】\n【backgroundColor】 : 背景色   【Color】\n【padding】 : 内边距   【EdgeInsetsDirectional】\n【border】 : 边线   【Border】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(212,106,'Basic Usage of CupertinoNavigationBar',replace('【leading】: Left component 【Widget】\n【middle】: Middle component 【Widget】\n【trailing】: Trailing component 【Widget】\n【backgroundColor】: Background color 【Color】\n【padding】: Padding 【EdgeInsetsDirectional】\n【border】: Border 【Border】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(213,107,'返回按钮基本使用',replace('【onPressed】 : 点击事件   【VoidCallback】\n【color】: 颜色    【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(214,107,'Basic Usage of Back Button',replace('【onPressed】: Click event 【VoidCallback】\n【color】: Color 【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(215,108,'CupertinoPageScaffold基本用法',replace('【child】 : 内容   【Widget】\n【backgroundColor】 : 背景色   【Color】\n【navigationBar】 : 头部   【ObstructingPreferredSizeWidget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(216,108,'Basic Usage of CupertinoPageScaffold',replace('【child】 : Content   【Widget】\n【backgroundColor】 : Background Color   【Color】\n【navigationBar】 : Header   【ObstructingPreferredSizeWidget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(217,109,'CupertinoPageTransition 介绍',replace('【child】 : 子组件   【Widget】\n【linearTransition】 : 是否线性转换   【bool】\n【primaryRouteAnimation】 : 初始路由动画   【Animation<double>】\n【secondaryRouteAnimation】 : 第二路由动画   【Animation<double>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(218,109,'Introduction to CupertinoPageTransition',replace('【child】 : Child widget   【Widget】\n【linearTransition】 : Whether to use linear transition   【bool】\n【primaryRouteAnimation】 : Primary route animation   【Animation<double>】\n【secondaryRouteAnimation】 : Secondary route animation   【Animation<double>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(219,110,'CupertinoPicker基本使用',replace('【children】 : 子组件列表   【List<Widget>】\n【offAxisFraction】 : 轴偏移率   【double】\n【squeeze】 : 挤压率   【double】\n【diameterRatio】 : 高与圆柱直径比率   【double】\n【itemExtent】 : 间距   【double】\n【backgroundColor】 : 背景色   【Color】\n【onSelectedItemChanged】 : 选中事件  【Function(int)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(220,110,'Basic Usage of CupertinoPicker',replace('【children】 : List of child components   【List<Widget>】\n【offAxisFraction】 : Axis offset rate   【double】\n【squeeze】 : Squeeze rate   【double】\n【diameterRatio】 : Ratio of height to cylinder diameter   【double】\n【itemExtent】 : Spacing   【double】\n【backgroundColor】 : Background color   【Color】\n【onSelectedItemChanged】 : Selected event  【Function(int)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(221,111,'CupertinoPopupSurface 使用',replace('【isSurfacePainted】 : 是否绘白   【bool】\n【child】 : 子组件   【Widget】\n测试效果左侧 isSurfacePainted = false，右侧 isSurfacePainted = true','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(222,111,'CupertinoPopupSurface Usage',replace('【isSurfacePainted】: Whether to paint white   【bool】\n【child】: Child component   【Widget】\nTest effect: left isSurfacePainted = false, right isSurfacePainted = true','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(223,112,'CupertinoRadio 使用',replace('【value】 : 选钮值   【T】\n【groupValue】 : 当前匹配值   【T】\n【onChanged】 : 改变时回调   【Function(T)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(224,112,'CupertinoRadio Usage',replace('【value】: Radio button value 【T】\n【groupValue】: Current matching value 【T】\n【onChanged】: Callback when changed 【Function(T)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(225,113,'CupertinoRadio 颜色',replace('【activeColor】 : 激活背景颜色   【Color?】\n【fillColor】 : 填充   【Color?】\n【inactiveColor】 : 未激活背景颜色   【Color?】\n【focusColor】 : 聚焦色   【Color?】\n【mouseCursor】 : 鼠标指针样式   【MouseCursor?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(226,113,'CupertinoRadio Colors',replace('【activeColor】: Active background color 【Color?】\n【fillColor】: Fill color 【Color?】\n【inactiveColor】: Inactive background color 【Color?】\n【focusColor】: Focus color 【Color?】\n【mouseCursor】: Mouse cursor style 【MouseCursor?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(227,114,'是否支持切换',replace('【toggleable】 : 是否支持切换   【bool】\ntoggleable 默认为 false, 为 true 时，点击激活的选钮，会回调 null 数据，以此支持选中和非选择切换需求。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(228,114,'Toggle Support',replace('【toggleable】: Whether toggle is supported 【bool】\ntoggleable defaults to false. When set to true, clicking an active radio button will call back null data, supporting the need for toggling between selected and unselected states.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(229,115,'CupertinoScrollbar基本使用',replace('【child】 : 子组件   【Widget】\n【controller】 : 控制器  【ScrollController】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(230,115,'Basic Usage of CupertinoScrollbar',replace('【child】 : Child widget   【Widget】\n【controller】 : Controller  【ScrollController】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(231,116,'iOS页签基本使用',replace('【children】 : 组件Map   【Map<T, Widget>】\n【onValueChanged】 : 值改变回调   【ValueChanged<T>】\n【groupValue】 : 选中值   【T】\n【padding】 : 内边距   【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(232,116,'Basic Usage of iOS Tabs',replace('【children】: Component Map 【Map<T, Widget>】\n【onValueChanged】: Value Change Callback 【ValueChanged<T>】\n【groupValue】: Selected Value 【T】\n【padding】: Padding 【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(233,117,'CupertinoSegmentedControl的颜色',replace('【unselectedColor】 : 未选中色   【Color】\n【selectedColor】 : 选中色   【Color<T>】\n【pressedColor】 : 按下色   【Color】\n【borderColor】 : 边线色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(234,117,'Colors of CupertinoSegmentedControl',replace('【unselectedColor】: Unselected Color 【Color】\n【selectedColor】: Selected Color 【Color<T>】\n【pressedColor】: Pressed Color 【Color】\n【borderColor】: Border Color 【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(235,118,'CupertinoSlider基本使用',replace('【value】 : 数值   【double】\n【min】 : 最小值   【double】\n【max】 : 最大值   【double】\n【activeColor】 : 激活颜色   【Color】\n【thumbColor】 : 圆形颜色   【Color】\n【divisions】 : 分段数   【int】\n【onChangeStart】 : 开始滑动回调   【Function(double)】\n【onChangeEnd】 : 滑动结束回调   【Function(double)】\n【onChanged】 : 改变时回调   【Function(double)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(236,118,'Basic Usage of CupertinoSlider',replace('【value】: value   【double】\n【min】: minimum value   【double】\n【max】: maximum value   【double】\n【activeColor】: active color   【Color】\n【thumbColor】: thumb color   【Color】\n【divisions】: number of divisions   【int】\n【onChangeStart】: callback when sliding starts   【Function(double)】\n【onChangeEnd】: callback when sliding ends   【Function(double)】\n【onChanged】: callback when value changes   【Function(double)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(237,119,'iOS滑动页签基本使用',replace('【children】 : 组件Map   【Map<T, Widget>】\n【onValueChanged】 : 值改变回调   【ValueChanged<T>】\n【groupValue】 : 选中值   【T】\n【thumbColor】 : 选中色   【Color】\n【backgroundColor】 : 背景色   【Color】\n【padding】 : 内边距   【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(238,119,'Basic Usage of iOS Sliding Tabs',replace('【children】: Component Map   【Map<T, Widget>】\n【onValueChanged】: Value Change Callback   【ValueChanged<T>】\n【groupValue】: Selected Value   【T】\n【thumbColor】: Selected Color   【Color】\n【backgroundColor】: Background Color   【Color】\n【padding】: Padding   【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(239,120,'导航条基本使用',replace('【leading】 : 左侧组件   【Widget】\n【middle】 : 中间组件   【Widget】\n【trailing】 : 尾部组件   【Widget】\n【largeTitle】 : 底部折展组件   【Widget】\n【border】 : 边线   【Border】\n【backgroundColor】 : 背景色   【Color】\n【padding】 : 内边距   【EdgeInsetsDirectional】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(240,120,'Basic Usage of Navigation Bar',replace('【leading】: Left component 【Widget】\n【middle】: Middle component 【Widget】\n【trailing】: Trailing component 【Widget】\n【largeTitle】: Bottom expandable component 【Widget】\n【border】: Border 【Border】\n【backgroundColor】: Background color 【Color】\n【padding】: Padding 【EdgeInsetsDirectional】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(241,121,'刷新控制器基本使用',replace('【refreshIndicatorExtent】 : 加载中指示器高度   【double】\n【refreshTriggerPullDistance】 : 触发加载的滑动高度   【double】\n【onRefresh】 : 下拉事件   【RefreshCallback】\n【builder】 : 指示器构造器   【RefreshControlIndicatorBuilder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(242,121,'Basic Usage of Refresh Controller',replace('【refreshIndicatorExtent】: Height of the loading indicator   【double】\n【refreshTriggerPullDistance】: Scroll height that triggers loading   【double】\n【onRefresh】: Pull-down event   【RefreshCallback】\n【builder】: Indicator builder   【RefreshControlIndicatorBuilder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(243,122,'CupertinoSwitch基本使用',replace('【value】 : 是否选中   【double】\n【activeColor】 : 激活态颜色   【Color】\n【onChanged】 : 切换回调   【Function(double)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(244,122,'Basic Usage of CupertinoSwitch',replace('【value】: Whether it is selected 【double】\n【activeColor】: Active state color 【Color】\n【onChanged】: Toggle callback 【Function(double)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(245,123,'CupertinoTabBar基本用法',replace('【currentIndex】 : 当前激活索引   【Widget】\n【items】 : 条目组件   【Widget】\n【backgroundColor】 : 背景色   【Color】\n【inactiveColor】 : 非激活色   【Color】\n【activeColor】 : 激活色   【Color】\n【iconSize】 : 图标大小    【double】\n【border】 : 边线   【Border】\n【onTap】 : 点击事件   【Function(int)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(246,123,'Basic Usage of CupertinoTabBar',replace('【currentIndex】 : Current active index   【Widget】\n【items】 : Item components   【Widget】\n【backgroundColor】 : Background color   【Color】\n【inactiveColor】 : Inactive color   【Color】\n【activeColor】 : Active color   【Color】\n【iconSize】 : Icon size    【double】\n【border】 : Border   【Border】\n【onTap】 : Click event   【Function(int)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(247,124,'CupertinoTabScaffold基本用法',replace('【tabBar】 : 页签条   【CupertinoTabBar】\n【backgroundColor】 : 背景色   【Color】\n【controller】 : 控制器   【CupertinoTabController】\n【tabBuilder】 : 页面构造器   【IndexedWidgetBuilder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(248,124,'Basic Usage of CupertinoTabScaffold',replace('【tabBar】: Tab bar   【CupertinoTabBar】\n【backgroundColor】: Background color   【Color】\n【controller】: Controller   【CupertinoTabController】\n【tabBuilder】: Page builder   【IndexedWidgetBuilder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(249,125,'CupertinoTabView基本使用',replace('【builder】 : 主页构造器   【WidgetBuilder】\n【navigatorObservers】 : 路由监听器   【List<NavigatorObserver>】\n【routes】 : 路由映射   【Map<String, WidgetBuilder>】\n【onGenerateRoute】 : 路由工厂   【RouteFactory】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(250,125,'Basic Usage of CupertinoTabView',replace('【builder】 : Homepage builder   【WidgetBuilder】\n【navigatorObservers】 : Route observers   【List<NavigatorObserver>】\n【routes】 : Route mapping   【Map<String, WidgetBuilder>】\n【onGenerateRoute】 : Route factory   【RouteFactory】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(251,126,'CupertinoTextField基础使用',replace('【placeholder】 : 提示文字   【String】\n【showCursor】 : 是否显示游标   【bool】\n【minLines】 : 最小行数   【int】\n【maxLines】 : 最大行数   【int】\n【padding】 : 内边距   【EdgeInsetsGeometry】\n【onChanged】 : 变化监听   【ValueChanged<String>】\n【onTap】: 点击监听   【GestureTapCallback】\n【onSubmitted】: 提交监听    【ValueChanged<String>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(252,126,'Basic Usage of CupertinoTextField',replace('【placeholder】 : Hint text   【String】\n【showCursor】 : Whether to show cursor   【bool】\n【minLines】 : Minimum number of lines   【int】\n【maxLines】 : Maximum number of lines   【int】\n【padding】 : Padding   【EdgeInsetsGeometry】\n【onChanged】 : Change listener   【ValueChanged<String>】\n【onTap】: Tap listener   【GestureTapCallback】\n【onSubmitted】: Submit listener    【ValueChanged<String>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(253,127,'CupertinoTextField常用样式属性',replace('【style】 : 输入文字样式   【TextStyle】\n【prefix】: 前缀组件   【Widget】\n【prefixMode】: 前缀模式   【OverlayVisibilityMode】\n【suffix】: 后缀组件   【Widget】\n【suffixMode】: 后缀模式   【OverlayVisibilityMode】\n【cursorColor】: 游标颜色   【Color】\n【cursorWidth】: 游标宽度   【double】\n【cursorRadius】: 游标圆角   【Radius】\n【readOnly】: 是否只读    【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(254,127,'Common Style Properties of CupertinoTextField',replace('【style】 : Input text style   【TextStyle】\n【prefix】: Prefix component   【Widget】\n【prefixMode】: Prefix mode   【OverlayVisibilityMode】\n【suffix】: Suffix component   【Widget】\n【suffixMode】: Suffix mode   【OverlayVisibilityMode】\n【cursorColor】: Cursor color   【Color】\n【cursorWidth】: Cursor width   【double】\n【cursorRadius】: Cursor radius   【Radius】\n【readOnly】: Whether read-only    【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(255,128,'该组件无法使用','【-】 : -   【-】','zh-cn');
INSERT INTO node_desc VALUES(256,128,'This component is not available','【-】 : -   【-】','en-us');
INSERT INTO node_desc VALUES(257,129,'文字样式-TextTheme','后代组件可以通过CupertinoTheme.of获取主题的数据进行使用。','zh-cn');
INSERT INTO node_desc VALUES(258,129,'Text Style-TextTheme','Descendant components can obtain and use the theme data through CupertinoTheme.of.','en-us');
INSERT INTO node_desc VALUES(259,130,'CupertinoThemeData的使用','和Theme一样可以通过指定的属性，让它们在后代中共享，不过属性较少。注意如果需要使用主题，不能在当前的context中获取。','zh-cn');
INSERT INTO node_desc VALUES(260,130,'Usage of CupertinoThemeData','Like Theme, you can share specified properties among descendants, but there are fewer properties. Note that if you need to use the theme, you cannot obtain it in the current context.','en-us');
INSERT INTO node_desc VALUES(261,131,'CupertinoTimerPicker基本使用',replace('【initialTimerDuration】 : 初始时间   【Duration】\n【minuteInterval】 : 分钟间隔数   【double】\n【secondInterval】 : 秒间隔数   【double】\n【alignment】 : 对齐方式  【AlignmentGeometry】\n【backgroundColor】 : 背景色  【Color】\n【mode】 : 模式*3  【CupertinoTimerPickerMode】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(262,131,'Basic Usage of CupertinoTimerPicker',replace('【initialTimerDuration】: Initial time   【Duration】\n【minuteInterval】: Minute interval   【double】\n【secondInterval】: Second interval   【double】\n【alignment】: Alignment   【AlignmentGeometry】\n【backgroundColor】: Background color   【Color】\n【mode】: Mode*3   【CupertinoTimerPickerMode】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(263,132,'CupertinoUserInterfaceLevel 介绍','CupertinoUserInterfaceLevel.of(context) 可以获取 CupertinoUserInterfaceLevelData 数据。也可以使用该组件设置该数据与子树共享。关于数据原图详见:  https:developer.apple.com/documentation/uikit/uiuserinterfacelevel','zh-cn');
INSERT INTO node_desc VALUES(264,132,'Introduction to CupertinoUserInterfaceLevel','CupertinoUserInterfaceLevel.of(context) can retrieve CupertinoUserInterfaceLevelData. This component can also be used to set and share this data with the subtree. For more information about the data source, see: https://developer.apple.com/documentation/uikit/uiuserinterfacelevel','en-us');
INSERT INTO node_desc VALUES(265,133,'CustomMultiChildLayout基本使用',replace('【children】 : 子组件集   【List<Widget>】\n【delegate】 : 布局代理   【MultiChildLayoutDelegate】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(266,133,'Basic Usage of CustomMultiChildLayout',replace('【children】: Set of child components   【List<Widget>】\n【delegate】: Layout delegate   【MultiChildLayoutDelegate】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(267,134,'CustomPaint绘线图形','【painter】 : 绘画器   【CustomPainter】','zh-cn');
INSERT INTO node_desc VALUES(268,134,'CustomPaint Line Drawing','【painter】: Painter   【CustomPainter】','en-us');
INSERT INTO node_desc VALUES(269,135,'CustomPaint绘线贝塞尔曲线','Flutter也支持贝塞尔曲线等复杂绘制。','zh-cn');
INSERT INTO node_desc VALUES(270,135,'CustomPaint Bezier Curve','Flutter also supports complex drawings such as Bezier curves.','en-us');
INSERT INTO node_desc VALUES(271,136,'CustomScrollView基本使用',replace('【slivers】 : 子组件列表   【List<Widget>】\n【reverse】 : 是否反向   【bool】\n【scrollDirection】 : 滑动方向   【Axis】\n【controller】 : 控制器   【ScrollController】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(272,136,'Basic Usage of CustomScrollView',replace('【slivers】 : Child component list   【List<Widget>】\n【reverse】 : Whether to reverse   【bool】\n【scrollDirection】 : Scroll direction   【Axis】\n【controller】 : Controller   【ScrollController】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(273,137,'CustomSingleChildLayout基本使用','【delegate】 : 代理   【SingleChildLayoutDelegate】','zh-cn');
INSERT INTO node_desc VALUES(274,137,'Basic Usage of CustomSingleChildLayout','【delegate】 : delegate   【SingleChildLayoutDelegate】','en-us');
INSERT INTO node_desc VALUES(275,138,'CustomSingleChildLayout的偏移使用','可以利用代理的偏移能力，对子组件进行偏移定位。','zh-cn');
INSERT INTO node_desc VALUES(276,138,'Offset Usage of CustomSingleChildLayout','The offset capability of the delegate can be used to position the child component with an offset.','en-us');
INSERT INTO node_desc VALUES(277,139,'DataTable基本使用',replace('【columns】 : 列   【List<DataColumn>】\n【rows】 : 行  【List<DataRow>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(278,139,'Basic Usage of DataTable',replace('【columns】 : columns   【List<DataColumn>】\n【rows】 : rows  【List<DataRow>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(279,140,'DataTable的sort',replace('【sortColumnIndex】 : 列号   【int】\n【columnSpacing】 : 列间距   【double】\n【sortAscending】 : 是否顺序  【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(280,140,'Sorting in DataTable',replace('【sortColumnIndex】 : column index   【int】\n【columnSpacing】 : column spacing   【double】\n【sortAscending】 : ascending order  【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(281,141,'DateRangePickerDialog 基本使用',replace('【firstDate】 : 最早日期   【DateTime】\n【lastDate】 : 最晚日期   【DateTime】\n【initialDateRange】 : 初始范围   【DateTimeRange?】\n【saveText】 : 保存文字  【String?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(282,141,'Basic Usage of DateRangePickerDialog',replace('【firstDate】 : Earliest date   【DateTime】\n【lastDate】 : Latest date   【DateTime】\n【initialDateRange】 : Initial range   【DateTimeRange?】\n【saveText】 : Save text  【String?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(283,142,'魔改 DateRangePickerDialog','修改 DateRangePickerDialog 源码，使得月份条目显示数值背景。','zh-cn');
INSERT INTO node_desc VALUES(284,142,'Customize DateRangePickerDialog','Modify the source code of DateRangePickerDialog to display a numerical background for month entries.','en-us');
INSERT INTO node_desc VALUES(285,143,'DecoratedBox基本使用',replace('【decoration】 : 装饰对象   【Decoration】\n【position】 : 前景色(左)/后景色(右)   【DecorationPosition】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(286,143,'Basic Usage of DecoratedBox',replace('【decoration】: Decoration object   【Decoration】\n【position】: Foreground color (left)/Background color (right)   【DecorationPosition】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(287,144,'DecoratedBox形状和图片装饰',replace('【shape】 : 形状   【BoxShape】\n【image】 : 背景图片   【DecorationImage】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(288,144,'Shape and Image Decoration of DecoratedBox',replace('【shape】: Shape   【BoxShape】\n【image】: Background image   【DecorationImage】,','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(289,145,'DecoratedBox边线装饰','【border】 : 边线   【BoxBorder】,','zh-cn');
INSERT INTO node_desc VALUES(290,145,'Border Decoration of DecoratedBox','【border】: Border   【BoxBorder】,','en-us');
INSERT INTO node_desc VALUES(291,146,'DecoratedBox形状装饰','通过ShapeDecoration对象可指定边线形状,','zh-cn');
INSERT INTO node_desc VALUES(292,146,'Shape Decoration of DecoratedBox','You can specify the border shape through the ShapeDecoration object,','en-us');
INSERT INTO node_desc VALUES(293,147,'DecoratedBox底线装饰','通过UnderlineTabIndicator对象可指定底线,','zh-cn');
INSERT INTO node_desc VALUES(294,147,'Bottom Line Decoration of DecoratedBox','You can specify the bottom line through the UnderlineTabIndicator object,','en-us');
INSERT INTO node_desc VALUES(295,148,'FlutterLogoDecoration装饰','通过FlutterLogoDecoration对象可指定Flutter图标装饰(并没有什么太大的作用),','zh-cn');
INSERT INTO node_desc VALUES(296,148,'FlutterLogoDecoration Decoration','You can specify Flutter icon decoration through the FlutterLogoDecoration object (not very useful),','en-us');
INSERT INTO node_desc VALUES(297,149,'DecoratedBoxTransition基本使用',replace('【child】 : 孩子组件   【Widget】\n【position】 : 前/背景色  【DecorationPosition】\n【decoration】 : 动画   【Animation<Decoration>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(298,149,'Basic Usage of DecoratedBoxTransition',replace('【child】: Child component   【Widget】\n【position】: Foreground/Background color   【DecorationPosition】\n【decoration】: Animation   【Animation<Decoration>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(299,150,'DecoratedSliver 基本使用',replace('【sliver】 : 孩子组件   【Widget?】\n【decoration】 : 装饰对象   【Decoration】\n【position】 : 装饰位置   【DecorationPosition】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(300,150,'Basic Usage of DecoratedSliver',replace('【sliver】: Child component   【Widget?】\n【decoration】: Decoration object   【Decoration】\n【position】: Decoration position   【DecorationPosition】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(301,151,'DefaultAssetBundle 介绍',replace('【bundle】 : *资源包   【AssetBundle】\n【child】 : *子组件  【Widget】\n我们可以定义自己的 DefaultAssetBundle 来供后续节点使用，也可以直接使用默认的。该案例演示通过框架提供的 DefaultAssetBundle 加载一张资源图片进行显示。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(302,151,'Introduction to DefaultAssetBundle',replace('【bundle】: *Resource Bundle   【AssetBundle】\n【child】: *Child Widget  【Widget】\nWe can define our own DefaultAssetBundle for use by subsequent nodes, or we can directly use the default one. This case demonstrates loading and displaying a resource image using the DefaultAssetBundle provided by the framework.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(303,152,'DefaultTabController基本使用',replace('【length】 : 页签数量   【int】\n【initialIndex】 : 初始页签索引   【int】\n【child】 : 组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(304,152,'Basic Usage of DefaultTabController',replace('【length】: Number of tabs   【int】\n【initialIndex】: Initial tab index   【int】\n【child】: Component   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(305,153,'DefaultTextStyle使用',replace('各属性同Text，详见之。\n其功能是: 设置默认的文字样式应用于【后代组件】,注意后代组件也可以指定自身的样式','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(306,153,'DefaultTextStyle Usage',replace('The properties are the same as Text, see details there.\nIts function is: Set the default text style to be applied to [descendant widgets], note that descendant widgets can also specify their own styles.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(307,154,'DefaultTextStyleTransition基本使用',replace('【child】 : 孩子组件   【Widget】\n【textAlign】 : 文字对齐方式  【TextAlign】\n【softWrap】 : 是否包裹  【bool】\n【maxLines】 : 最大行数  【int】\n【overflow】 : 溢出模式  【TextOverflow】\n【style】 : 动画   【Animation<TextStyle>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(308,154,'Basic Usage of DefaultTextStyleTransition',replace('【child】 : Child component   【Widget】\n【textAlign】 : Text alignment   【TextAlign】\n【softWrap】 : Whether to wrap   【bool】\n【maxLines】 : Maximum number of lines   【int】\n【overflow】 : Overflow mode   【TextOverflow】\n【style】 : Animation   【Animation<TextStyle>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(309,155,'Dialog基本使用',replace('【child】 : 动画图标数据   【Widget】\n【elevation】 : 影深  【double】\n【backgroundColor】 : 背景色  【Color】\n【shape】 : 形状   【ShapeBorder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(310,155,'Basic Usage of Dialog',replace('【child】: Animation icon data 【Widget】\n【elevation】: Shadow depth 【double】\n【backgroundColor】: Background color 【Color】\n【shape】: Shape 【ShapeBorder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(311,156,'Directionality基本使用',replace('【textDirection】 : 文字排列方向   【TextDirection】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(312,156,'Basic Usage of Directionality',replace('【textDirection】: Text arrangement direction   【TextDirection】\n【child】: Child component   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(313,157,'Dismissible基本使用',replace('【child】 : 子组件   【Widget】\n【background】 : 左底  【Widget】\n【secondaryBackground】 : 右底  【Widget】\n【key】 : 键  【Key】\n【confirmDismiss】 : 确认回调  【DismissDirectionCallback】\n【onDismissed】 : 消失回调  【DismissDirectionCallback】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(314,157,'Basic Usage of Dismissible',replace('【child】: Child component 【Widget】\n【background】: Left bottom 【Widget】\n【secondaryBackground】: Right bottom 【Widget】\n【key】: Key 【Key】\n【confirmDismiss】: Confirmation callback 【DismissDirectionCallback】\n【onDismissed】: Dismissal callback 【DismissDirectionCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(315,158,'Dismissible基本使用',replace('【direction】 : 方向   【DismissDirection】\n【crossAxisEndOffset】 : 偏移  【double】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(316,158,'Basic Usage of Dismissible',replace('【direction】: Direction 【DismissDirection】\n【crossAxisEndOffset】: Offset 【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(317,159,'Divider颜色和粗细',replace('【color】: 颜色   【Color】\n【thickness】: 线粗细   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(318,159,'Divider Color and Thickness',replace('【color】: Color   【Color】\n【thickness】: Line thickness   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(319,160,'Divider高度和空缺',replace('【indent】: 前面空缺长度   【double】\n【endIndent】: 后面空缺长度   【double】\n【height】: 占位高   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(320,160,'Divider Height and Indent',replace('【indent】: Front indent length   【double】\n【endIndent】: Rear indent length   【double】\n【height】: Placeholder height   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(321,161,'DividerTheme使用',replace('属性参数与Divider类似，可以通过DividerTheme.of获取分割线主题数据，"\n也可以为DividerTheme【后代】的分割线设置默认样式，包括颜色、粗细、高度等。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(322,161,'Using DividerTheme',replace('The property parameters are similar to Divider. You can obtain the divider theme data through DividerTheme.of,\nand you can also set default styles for the dividers of DividerTheme【descendants】, including color, thickness, height, etc.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(323,162,'Draggable基本使用',replace('【child】 : 孩子   【Widget】\n【feedback】 : 拖拽时的孩子   【Widget】\n【axis】 : 拖动的轴   【Axis】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(324,162,'Basic Usage of Draggable',replace('【child】 : child   【Widget】\n【feedback】 : child during dragging   【Widget】\n【axis】 : axis of dragging   【Axis】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(325,163,'Draggable与DragTarget联用',replace('【data】 : 数据   【T】\n【onDragStarted】 : 开始拖拽   【Function()】\n【onDragEnd】 : 结束拖拽   【Function(DraggableDetails)】\n【onDragCompleted】 : 拖拽完成   【Function()】\n【onDraggableCanceled】 : 拖拽取消   【Function(Velocity,Offset)】\n【onChanged】 : 改变时回调   【Function(T)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(326,163,'Combined Usage of Draggable and DragTarget',replace('【data】 : data   【T】\n【onDragStarted】 : start dragging   【Function()】\n【onDragEnd】 : end dragging   【Function(DraggableDetails)】\n【onDragCompleted】 : drag completed   【Function()】\n【onDraggableCanceled】 : drag canceled   【Function(Velocity,Offset)】\n【onChanged】 : callback when changed   【Function(T)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(327,164,'Draggable其他使用','可以根据拖拽来处理一些事件。如删除、查询、弹框等','zh-cn');
INSERT INTO node_desc VALUES(328,164,'Other Usages of Draggable','Some events can be handled based on dragging, such as deletion, querying, pop-ups, etc.','en-us');
INSERT INTO node_desc VALUES(329,165,'基本使用方法',replace('【child】 : 子组件   【Widget】\n使用 DraggableScrollableActuator.reset(context) 重置后代 DraggableScrollableSheet 位初始位置。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(330,165,'Basic Usage',replace('【child】: Child component   【Widget】\nUse DraggableScrollableActuator.reset(context) to reset the position of the descendant DraggableScrollableSheet to the initial position.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(331,166,'DraggableScrollableSheet基本使用',replace('【initialChildSize】 : 初始分度   【double】\n【minChildSize】 : 最小分度   【double】\n【maxChildSize】 : 最大分度   【double】\n【builder】 : 滑动组件构造器   【ScrollableWidgetBuilder】\n【expand】 : 是否延展   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(332,166,'Basic Usage of DraggableScrollableSheet',replace('【initialChildSize】: Initial fraction   【double】\n【minChildSize】: Minimum fraction   【double】\n【maxChildSize】: Maximum fraction   【double】\n【builder】: Scrollable component builder   【ScrollableWidgetBuilder】\n【expand】: Whether to expand   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(333,167,'DragTarget基本使用',replace('【builder】 : 组件构造器   【DragTargetBuilder<T>】\n【onWillAccept】 : 拖入时   【Function(T)】\n【onAccept】 : 拖拽成功   【Function(T)】\n【onLeave】 : 拖入再脱出   【Function(T)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(334,167,'Basic Usage of DragTarget',replace('【builder】: Component builder 【DragTargetBuilder<T>】\n【onWillAccept】: When dragging in 【Function(T)】\n【onAccept】: Drag success 【Function(T)】\n【onLeave】: Drag in and then out 【Function(T)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(335,168,'Drawer基本使用',replace('【child】 : 子组件   【Widget】\n【elevation】 : 影深  【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(336,168,'Basic Usage of Drawer',replace('【child】 : Child component   【Widget】\n【elevation】 : Elevation  【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(337,169,'DrawerButton 基本使用',replace('【onPressed】 : 点击事件  【VoidCallback?】\n【style】: 按钮样式   【ButtonStyle?】\nonPressed 为空时，点击时会打开左抽屉。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(338,169,'Basic Usage of DrawerButton',replace('【onPressed】: Click event 【VoidCallback?】\n【style】: Button style 【ButtonStyle?】\nWhen onPressed is empty, clicking will open the left drawer.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(339,170,'DrawerButtonIcon 效果','通过 _ActionIcon 组件根据 ActionIconTheme 主题，来适配不同平台的抽屉按钮图标。','zh-cn');
INSERT INTO node_desc VALUES(340,170,'DrawerButtonIcon Effect','The _ActionIcon component adapts the drawer button icon for different platforms based on the ActionIconTheme.','en-us');
INSERT INTO node_desc VALUES(341,171,'DrawerController基本使用',replace('【drawerCallback】 : 事件回调   【DrawerCallback】\n【enableOpenDragGesture】 : 是否侧边滑开   【bool】\n【alignment】 : 对齐方式   【DrawerAlignment】\n【scrimColor】 : 背景颜色   【Color】\n【child】 : Drawer组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(342,171,'Basic Usage of DrawerController',replace('【drawerCallback】: Event callback 【DrawerCallback】\n【enableOpenDragGesture】: Whether to slide open from the side 【bool】\n【alignment】: Alignment 【DrawerAlignment】\n【scrimColor】: Background color 【Color】\n【child】: Drawer component 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(343,172,'DrawerHeader基本使用',replace('【child】 : 子组件   【Widget】\n【decoration】 : 装饰   【Decoration】\n【margin】 : 外边距   【EdgeInsetsGeometry】\n【padding】 : 内边距   【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(344,172,'Basic Usage of DrawerHeader',replace('【child】 : Child Component   【Widget】\n【decoration】 : Decoration   【Decoration】\n【margin】 : Margin   【EdgeInsetsGeometry】\n【padding】 : Padding   【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(345,173,'DropdownButton基本用法',replace('【value】 : 当前值   【T】\n【items】 : 下拉选框   【List<DropdownMenuItem<T>>】\n【icon】 : 图标   【Widget】\n【elevation】 : 影深   【double】\n【onChanged】 : 选择条目事件   【Function(T)】\n【backgroundColor】 : 背景色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(346,173,'Basic Usage of DropdownButton',replace('【value】 : Current value   【T】\n【items】 : Dropdown items   【List<DropdownMenuItem<T>>】\n【icon】 : Icon   【Widget】\n【elevation】 : Elevation   【double】\n【onChanged】 : Selection change event   【Function(T)】\n【backgroundColor】 : Background color   【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(347,174,'DropdownButton的样式指定',replace('【isDense】 : 是否紧排   【bool】\n【iconSize】 : 图标大小   【double】\n【hint】 : 提示组件   【Widget】\n【iconEnabledColor】 : 图标颜色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(348,174,'Styling of DropdownButton',replace('【isDense】 : Whether to be dense   【bool】\n【iconSize】 : Icon size   【double】\n【hint】 : Hint widget   【Widget】\n【iconEnabledColor】 : Icon color   【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(349,175,'表单下拉框简单使用',replace('【items】 : 子组件列表   【List<DropdownMenuItem<T>>】\n【validator】 : 表单验证回调   【FormFieldValidator<T>】\n【onSaved】 : 表单保存回调   【FormFieldSetter<T>】\n其他属性详见 DropdownButton，表单校验特性详见 FormField。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(350,175,'Simple Usage of Form Dropdown',replace('【items】: List of child components 【List<DropdownMenuItem<T>>】\n【validator】: Form validation callback 【FormFieldValidator<T>】\n【onSaved】: Form save callback 【FormFieldSetter<T>】\nFor other properties, refer to DropdownButton. For form validation features, refer to FormField.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(351,176,'DropDownButtonHideUnderline使用','【child】 : 子组件   【Widget】,','zh-cn');
INSERT INTO node_desc VALUES(352,176,'DropDownButtonHideUnderline Usage','【child】 : Child component   【Widget】,','en-us');
INSERT INTO node_desc VALUES(353,177,'下拉菜单的简单使用',replace('【dropdownMenuEntries】 : 菜单条目列表   【List<DropdownMenuEntry<T>>】\n【initialSelection】 : 表单验证回调   【T?】\n【onSelected】 : 表单保存回调   【ValueChanged<T?>?】\n【menuHeight】 : 菜单高度   【double】\n【width】 : 输入框宽度   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(354,177,'Simple Usage of Dropdown Menu',replace('【dropdownMenuEntries】 : Menu item list   【List<DropdownMenuEntry<T>>】\n【initialSelection】 : Form validation callback   【T?】\n【onSelected】 : Form save callback   【ValueChanged<T?>?】\n【menuHeight】 : Menu height   【double】\n【width】 : Input box width   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(355,178,'下拉菜单样式设置',replace('【controller】 : 文字输入控制器   【TextEditingController?】\n【label】 : 输入框标签   【Widget?】\n【textStyle】 : 输入框文字样式   【TextStyle?】\n【inputDecorationTheme】 : 输入框装饰主题   【InputDecorationTheme?】\n【leadingIcon】 : 左侧图标   【Widget?】\n【trailingIcon】 : 右侧为展开菜单时图标   【Widget?】\n【selectedTrailingIcon】 : 右侧展开菜单时图标   【Widget?】\n【hintText】 : 输入框提示文字   【String?】\n【helperText】 : 输入框辅助文字   【String?】\n【errorText】 : 输入框错误文字   【String?】\n【menuStyle】 : 弹出菜单样式   【MenuStyle?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(356,178,'Dropdown Menu Style Settings',replace('【controller】 : Text input controller   【TextEditingController?】\n【label】 : Input box label   【Widget?】\n【textStyle】 : Input box text style   【TextStyle?】\n【inputDecorationTheme】 : Input box decoration theme   【InputDecorationTheme?】\n【leadingIcon】 : Left icon   【Widget?】\n【trailingIcon】 : Right icon when menu is expanded   【Widget?】\n【selectedTrailingIcon】 : Right icon when menu is expanded   【Widget?】\n【hintText】 : Input box hint text   【String?】\n【helperText】 : Input box helper text   【String?】\n【errorText】 : Input box error text   【String?】\n【menuStyle】 : Popup menu style   【MenuStyle?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(357,179,'下拉菜单自定义菜单项','可以通过 DropdownMenuEntry 的 labelWidget 定制构建菜单项。','zh-cn');
INSERT INTO node_desc VALUES(358,179,'Custom Menu Items for Dropdown Menu','You can customize the menu items by using the labelWidget of DropdownMenuEntry.','en-us');
INSERT INTO node_desc VALUES(359,180,'EditableText基本使用',replace('【controller】 : 控制器   【TextEditingController】\n【focusNode】 : 焦点   【FocusNode】\n【style】 : 文字样式   【TextStyle】\n【backgroundCursorColor】 : 背景游标颜色   【Color】\n【cursorColor】 : 游标颜色   【Color】\n上面五个是EditableText必须的属性，其他同TextField,此处不再列举。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(360,180,'Basic Usage of EditableText',replace('【controller】: Controller 【TextEditingController】\n【focusNode】: Focus Node 【FocusNode】\n【style】: Text Style 【TextStyle】\n【backgroundCursorColor】: Background Cursor Color 【Color】\n【cursorColor】: Cursor Color 【Color】\nThe above five are the essential properties of EditableText. Others are the same as TextField and will not be listed here.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(361,181,'ElevatedButton基本使用',replace('【child】 : 是否具有滚动主体   【Widget】\n【onPressed】 : 点击事件   【VoidCallback】\n【onLongPress】 : 长按事件   【VoidCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(362,181,'Basic Usage of ElevatedButton',replace('【child】: Whether it has a scrollable body   【Widget】\n【onPressed】: Click event   【VoidCallback】\n【onLongPress】: Long press event   【VoidCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(363,182,'ElevatedButton样式',replace('【style】 : 按钮样式   【ButtonStyle】\n【focusNode】 : 焦点   【FocusNode】\n【clipBehavior】 : 裁剪行为   【Clip】\n【autofocus】 : 自动聚焦   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(364,182,'ElevatedButton Style',replace('【style】: Button style   【ButtonStyle】\n【focusNode】: Focus   【FocusNode】\n【clipBehavior】: Clip behavior   【Clip】\n【autofocus】: Auto focus   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(365,183,'EndDrawerButton 基本使用',replace('【onPressed】 : 点击事件  【VoidCallback?】\n【style】: 按钮样式   【ButtonStyle?】\nonPressed 为空时，点击时会打开右抽屉。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(366,183,'Basic Usage of EndDrawerButton',replace('【onPressed】: Click event  【VoidCallback?】\n【style】: Button style   【ButtonStyle?】\nWhen onPressed is empty, clicking will open the right drawer.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(367,184,'EndDrawerButtonIcon 效果','通过 _ActionIcon 组件根据 ActionIconTheme 主题，来适配不同平台的右抽屉按钮图标。','zh-cn');
INSERT INTO node_desc VALUES(368,184,'EndDrawerButtonIcon Effect','The _ActionIcon component adapts the right drawer button icon for different platforms based on the ActionIconTheme.','en-us');
INSERT INTO node_desc VALUES(369,185,'ErrorWidget基本使用','入参 : 显示信息   【Object】','zh-cn');
INSERT INTO node_desc VALUES(370,185,'Basic Usage of ErrorWidget','Parameters: Display Message   【Object】','en-us');
INSERT INTO node_desc VALUES(371,186,'Expanded基本使用',replace('【child】 : 孩子   【Widget】\n【flex】 : 剩余空间分配占比   【int】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(372,186,'Basic Usage of Expanded',replace('【child】: child   【Widget】\n【flex】: Proportion of remaining space allocation   【int】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(373,187,'ExpandIcon基本使用',replace('【isExpanded】 : 是否展开   【bool】\n【padding】 : 内边距   【EdgeInsetsGeometry】,\n【size】 : 图标大小   【double】\n【color】 : 不展开时颜色   【Color】\n【expandedColor】 : 展开时颜色   【Color】\n【onPressed】 : 点击事件   【Function(bool)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(374,187,'Basic Usage of ExpandIcon',replace('【isExpanded】 : Whether expanded 【bool】\n【padding】 : Padding 【EdgeInsetsGeometry】,\n【size】 : Icon size 【double】\n【color】 : Color when not expanded 【Color】\n【expandedColor】 : Color when expanded 【Color】\n【onPressed】 : Click event 【Function(bool)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(375,188,'ExpansionPanelList基本使用',replace('【children】 : 子组件列表   【List<Widget>】\n【animationDuration】 : 动画时长   【Duration】\n【expansionCallback】 : 展开回调   【List<Widget>】\n【onPressed】 : 点击事件  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(376,188,'Basic Usage of ExpansionPanelList',replace('【children】: List of child components   【List<Widget>】\n【animationDuration】: Animation duration   【Duration】\n【expansionCallback】: Expansion callback   【List<Widget>】\n【onPressed】: Click event  【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(377,189,'ExpansionTile基本使用',replace('【children】 : 展开内容   【List<Widget>】\n【leading】 : 头左组件   【Widget】\n【title】 : 头中组件   【Widget】\n【trailing】 : 头尾组件   【Widget】\n【backgroundColor】 : 背景色   【Color】\n【onExpansionChanged】 : 折叠事件   【Function(bool)】\n【initiallyExpanded】 : 是否初始时展开   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(378,189,'Basic Usage of ExpansionTile',replace('【children】: Expanded content 【List<Widget>】\n【leading】: Leading component 【Widget】\n【title】: Title component 【Widget】\n【trailing】: Trailing component 【Widget】\n【backgroundColor】: Background color 【Color】\n【onExpansionChanged】: Collapse event 【Function(bool)】\n【initiallyExpanded】: Whether initially expanded 【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(379,190,'FadeInImage.assetNetwork加载网络图片',replace('【placeholder】 : 展位图地址  【String】\n【image】 : 显示图地址  【String】\n【width】: 宽   【double】\n【height】: 高   【double】\n【fadeInDuration】: 淡入时长   【Duration】\n【fadeOutDuration】: 淡出时长   【Duration】\n【fadeInCurve】: 淡入曲线   【Cubic】\n【fadeOutCurve】: 淡出曲线   【Cubic】\n【fit】: 适应模式   【BoxFit】\n【alignment】: 对齐模式   【Alignment】\n【repeat】: 重复模式   【ImageRepeat】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(380,190,'FadeInImage.assetNetwork Load Network Image',replace('【placeholder】 : Placeholder image address  【String】\n【image】 : Display image address  【String】\n【width】: Width   【double】\n【height】: Height   【double】\n【fadeInDuration】: Fade-in duration   【Duration】\n【fadeOutDuration】: Fade-out duration   【Duration】\n【fadeInCurve】: Fade-in curve   【Cubic】\n【fadeOutCurve】: Fade-out curve   【Cubic】\n【fit】: Fit mode   【BoxFit】\n【alignment】: Alignment mode   【Alignment】\n【repeat】: Repeat mode   【ImageRepeat】,','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(381,191,'FadeTransition基本使用',replace('【child】 : 孩子组件   【Widget】\n【opacity】 : 动画   【Animation<double>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(382,191,'Basic Usage of FadeTransition',replace('【child】 : Child Component   【Widget】\n【opacity】 : Animation   【Animation<double>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(383,192,'基本使用',replace('【child】 : 按钮内容   【Widget】\n【onPressed】 : 点击事件   【VoidCallback】\n【onHover】 : 长按事件   【ValueChanged<bool>? 】\n【onLongPress】 : 长按事件   【VoidCallback?】\n填充按钮在视觉上仅次于 [FloatingActionButton]，应用于重要的、最终完成流程的操作，例如: 保存、立即加入 或 确认。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(384,192,'Basic Usage',replace('【child】: Button content 【Widget】\n【onPressed】: Click event 【VoidCallback】\n【onHover】: Long press event 【ValueChanged<bool>? 】\n【onLongPress】: Long press event 【VoidCallback?】\nThe filled button is visually second only to [FloatingActionButton] and is used for important, finalizing actions such as save, join now, or confirm.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(385,193,'色调变体','FilledButton.tonal 是色调填充按钮，视觉上介于 [FilledButton] 和 [OutlinedButton] 之间，适用于需要比轮廓按钮稍强一些的强调但优先级较低的场景。例如 [下一步] 按钮 ','zh-cn');
INSERT INTO node_desc VALUES(386,193,'Tonal Variant','FilledButton.tonal is a tonal filled button, visually between [FilledButton] and [OutlinedButton], suitable for scenarios requiring slightly stronger emphasis than an outlined button but with lower priority. For example, a [Next] button.','en-us');
INSERT INTO node_desc VALUES(387,194,'FilterChip可接受选择事件',replace('【selected】: 是否选择   【bool】\n【onSelected】: 选择事件   【Function(bool)】\n【selectedColor】: 选择后的颜色   【Color】\n【selectedShadowColor】: 选择后的阴影颜色   【Color】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(388,194,'FilterChip can accept selection events',replace('【selected】: Whether selected   【bool】\n【onSelected】: Selection event   【Function(bool)】\n【selectedColor】: Color after selection   【Color】\n【selectedShadowColor】: Shadow color after selection   【Color】,','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(389,195,'FittedBox基本使用',replace('【child】 : 孩子组件   【Widget】\n【fit】 : 适应模式   【BoxFit】\n【alignment】 : 对齐方式   【AlignmentGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(390,195,'Basic Usage of FittedBox',replace('【child】: Child component   【Widget】\n【fit】: Adaptation mode   【BoxFit】\n【alignment】: Alignment method   【AlignmentGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(391,196,'Flex的排布方向',replace('【children】 : 组件列表   【List<Widget>】\n【direction】 : 方向   【Axis】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(392,196,'Flex Direction',replace('【children】: Component list 【List<Widget>】\n【direction】: Direction 【Axis】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(393,197,'Flex主轴对齐方式','【mainAxisAlignment】 : 主轴对齐   【MainAxisAlignment】','zh-cn');
INSERT INTO node_desc VALUES(394,197,'Flex Main Axis Alignment','【mainAxisAlignment】: Main axis alignment 【MainAxisAlignment】','en-us');
INSERT INTO node_desc VALUES(395,198,'Flex交叉轴对齐方式','【crossAxisAlignment】 : 交叉轴对齐   【CrossAxisAlignment】','zh-cn');
INSERT INTO node_desc VALUES(396,198,'Flex Cross Axis Alignment','【crossAxisAlignment】: Cross axis alignment 【CrossAxisAlignment】','en-us');
INSERT INTO node_desc VALUES(397,199,'Flex垂直方向顺序','【verticalDirection】 : 垂直方向顺序   【VerticalDirection】','zh-cn');
INSERT INTO node_desc VALUES(398,199,'Flex Vertical Direction','【verticalDirection】: Vertical direction 【VerticalDirection】','en-us');
INSERT INTO node_desc VALUES(399,200,'Flex水平方向顺序','【textDirection】 : 水平方向顺序   【TextDirection】','zh-cn');
INSERT INTO node_desc VALUES(400,200,'Flex Horizontal Direction','【textDirection】: Horizontal direction 【TextDirection】','en-us');
INSERT INTO node_desc VALUES(401,201,'Flexible基本使用',replace('【child】 : 孩子   【Widget】\n【fit】 : 适应模式*2   【FlexFit】\n【flex】 : 剩余空间分配占比   【int】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(402,201,'Basic Usage of Flexible',replace('【child】: child   【Widget】\n【fit】: adaptation mode*2   【FlexFit】\n【flex】: remaining space allocation ratio   【int】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(403,202,'FlexibleSpaceBar基本使用',replace('【title】 : 标题组件   【Widget】\n【titlePadding】 : 标题间距   【EdgeInsetsGeometry】\n【collapseMode】 : 折叠模式   【CollapseMode】\n【stretchModes】 : 延伸模式   【List<StretchMode>】\n【background】 : 背景组件   【Widget】\n【centerTitle】 : 是否居中   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(404,202,'Basic Usage of FlexibleSpaceBar',replace('【title】 : Title component   【Widget】\n【titlePadding】 : Title spacing   【EdgeInsetsGeometry】\n【collapseMode】 : Collapse mode   【CollapseMode】\n【stretchModes】 : Stretch modes   【List<StretchMode>】\n【background】 : Background component   【Widget】\n【centerTitle】 : Whether to center   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(405,203,'FloatingActionButton点击事件',replace('【child】: 子组件   【Widget】\n【tooltip】: 长按时提示文字   【String】\n【backgroundColor】: 背景色   【Color】\n【foregroundColor】: 前景色   【Color】\n【elevation】: 影深   【double】\n【onPressed】: 点击事件   【Function】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(406,203,'FloatingActionButton Click Event',replace('【child】: Child widget   【Widget】\n【tooltip】: Tooltip text when long pressed   【String】\n【backgroundColor】: Background color   【Color】\n【foregroundColor】: Foreground color   【Color】\n【elevation】: Elevation   【double】\n【onPressed】: Click event   【Function】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(407,204,'mini属性','【mini】: 是否是迷你   【bool】','zh-cn');
INSERT INTO node_desc VALUES(408,204,'mini Property','【mini】: Whether it is mini   【bool】','en-us');
INSERT INTO node_desc VALUES(409,205,'shape属性','【shape】: 形状   【ShapeBorder】','zh-cn');
INSERT INTO node_desc VALUES(410,205,'shape Property','【shape】: Shape   【ShapeBorder】','en-us');
INSERT INTO node_desc VALUES(411,206,'Flow圆形排布',replace('【children】 : 组件列表   【List<Widget>】\n【delegate】 : 代理   【FlowDelegate】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(412,206,'Flow Circular Arrangement',replace('【children】: Component list   【List<Widget>】\n【delegate】: Agent   【FlowDelegate】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(413,207,'Flow圆形与动画结合','通过动画来更改周围组件的位置实现效果','zh-cn');
INSERT INTO node_desc VALUES(414,207,'Flow Circular with Animation','Achieve effects by changing the position of surrounding components through animation','en-us');
INSERT INTO node_desc VALUES(415,208,'用于显示一个FlutterLogo',replace('【size】 : 大小  【double】\n【colors】: 颜色   【MaterialColor】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(416,208,'Used to display a FlutterLogo',replace('【size】 : Size  【double】\n【colors】: Color   【MaterialColor】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(417,209,'样式用于显示文字',replace('【style】 : 样式-3种枚举  【FlutterLogoStyle】\n【textColor】: 文字颜色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(418,209,'Style used to display text',replace('【style】 : Style - 3 types of enumeration  【FlutterLogoStyle】\n【textColor】: Text color   【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(419,210,'FocusNode 聚焦与失焦',replace('【focusNode】 : 焦点   【FocusNode?】\n【onFocusChange】 : 焦点变化监听   【ValueChanged<bool>?】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(420,210,'FocusNode Focus and Blur',replace('【focusNode】 : Focus   【FocusNode?】\n【onFocusChange】 : Focus change listener   【ValueChanged<bool>?】\n【child】 : Child widget   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(421,211,'自动聚焦',replace('【autofocus】 : 是否自动聚焦   【bool】\nFlutter 框架内置了焦点切换的快捷键，比如横向滑动的列表 ←、→ 分别让前项和后项聚焦。Tab 键可以让下一个 Focus 节点聚焦','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(422,211,'Auto Focus',replace('【autofocus】 : Whether to auto focus   【bool】\nThe Flutter framework has built-in shortcuts for focus switching, such as ← and → for horizontal sliding lists to focus on the previous and next items respectively. The Tab key can focus on the next Focus node.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(423,212,'键盘事件回调','【onKeyEvent】 : 键盘事件回调   【FocusOnKeyEventCallback?】','zh-cn');
INSERT INTO node_desc VALUES(424,212,'Keyboard Event Callback','【onKeyEvent】 : Keyboard event callback   【FocusOnKeyEventCallback?】','en-us');
INSERT INTO node_desc VALUES(425,213,'Form基本使用',replace('【child】 : 子组件   【Widget】\n【onChanged】 : 表单变化回调   【VoidCallback】\n【onWillPop】 : 返回回调  【WillPopCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(426,213,'Basic Usage of Form',replace('【child】 : Child component   【Widget】\n【onChanged】 : Form change callback   【VoidCallback】\n【onWillPop】 : Return callback  【WillPopCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(427,214,'FormField 介绍',replace('【builder】 : 内容构造器   【FormFieldBuilder<T>】\n【initialValue】 : 初始值   【T】\n【validator】 : 验证函数   【FormFieldValidator<String> 】\n【enabled】 : 是否有效   【bool】\n【onSaved】 : 表单save时回调  【FormFieldSetter<String>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(428,214,'FormField Introduction',replace('【builder】 : Content builder   【FormFieldBuilder<T>】\n【initialValue】 : Initial value   【T】\n【validator】 : Validation function   【FormFieldValidator<String>】\n【enabled】 : Whether it is enabled   【bool】\n【onSaved】 : Callback when the form is saved  【FormFieldSetter<String>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(429,215,'FractionallySizedBox基本使用',replace('【child】 : 孩子组件   【Widget】\n【widthFactor】 : 宽分率   【double】\n【heightFactor】 : 高分率   【double】\n【alignment】 : 对齐方式   【AlignmentGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(430,215,'Basic Usage of FractionallySizedBox',replace('【child】 : Child component   【Widget】\n【widthFactor】 : Width fraction   【double】\n【heightFactor】 : Height fraction   【double】\n【alignment】 : Alignment   【AlignmentGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(431,216,'FractionalTranslation基本使用',replace('【translation】 : 偏移分度值   【Offset】\n【child】: 子组件    【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(432,216,'Basic Usage of FractionalTranslation',replace('【translation】: Offset fraction value 【Offset】\n【child】: Child component 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(433,217,'FutureBuilder基本使用',replace('【builder】 : 子组件   【AsyncWidgetBuilder<T>】\n【initialData】 : 初始数据   【T】\n【future】 : 异步任务  【Future<T>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(434,217,'Basic Usage of FutureBuilder',replace('【builder】 : Subcomponent   【AsyncWidgetBuilder<T>】\n【initialData】 : Initial Data   【T】\n【future】 : Asynchronous Task  【Future<T>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(435,218,'GestureDetector基本事件',replace('【child】 : 子组件   【Widget】\n【onTap】 : 点击事件   【Function()】\n【onDoubleTap】 : 双击事件   【GestureTapCallback】\n【onLongPress】 : 长按事件   【GestureLongPressCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(436,218,'Basic Events of GestureDetector',replace('【child】 : Child component   【Widget】\n【onTap】 : Tap event   【Function()】\n【onDoubleTap】 : Double tap event   【GestureTapCallback】\n【onLongPress】 : Long press event   【GestureLongPressCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(437,219,'GestureDetector详情信息',replace('【onTapDown】 : 按下回调   【GestureTapDownCallback】\n【onTapUp】 : 点击抬起回调   【GestureTapUpCallback】\n【onTapCancel】 : 点击取消   【GestureTapCancelCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(438,219,'Details of GestureDetector',replace('【onTapDown】 : Press down callback   【GestureTapDownCallback】\n【onTapUp】 : Tap release callback   【GestureTapUpCallback】\n【onTapCancel】 : Tap cancel   【GestureTapCancelCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(439,220,'GestureDetector的Pan事件',replace('【onPanDown】 : 按下回调   【GestureDragDownCallback】\n【onPanEnd】 : 拖动结束   【GestureDragEndCallback】\n【onPanStart】 : 开始拖动   【GestureDragStartCallback】\n【onPanUpdate】 : 拖动更新   【GestureDragUpdateCallback】\n【onPanCancel】 : 拖动取消   【GestureDragCancelCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(440,220,'Pan Events of GestureDetector',replace('【onPanDown】 : Press down callback   【GestureDragDownCallback】\n【onPanEnd】 : Drag end   【GestureDragEndCallback】\n【onPanStart】 : Drag start   【GestureDragStartCallback】\n【onPanUpdate】 : Drag update   【GestureDragUpdateCallback】\n【onPanCancel】 : Drag cancel   【GestureDragCancelCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(441,221,'基本使用',replace('【showLeading】 : 头部是否生效   【bool】\n【showTrailing】 : 底部是否生效   【bool】\n【axisDirection】 : 轴向   【AxisDirection】\n【color】 : 颜色   【Color】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(442,221,'Basic Usage',replace('【showLeading】: Whether the header is active 【bool】\n【showTrailing】: Whether the footer is active 【bool】\n【axisDirection】: Axis direction 【AxisDirection】\n【color】: Color 【Color】\n【child】: Child widget 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(443,222,'GridPager 基础属性',replace('【child】: 子组件   【Widget】\n【color】: 颜色   【Color】\n【interval】: 小块边长   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(444,222,'GridPager Basic Properties',replace('【child】: Child component   【Widget】\n【color】: Color   【Color】\n【interval】: Small block side length   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(445,223,'GridPager 再分割',replace('【child】: 子组件   【Widget】\n【color】: 颜色   【Color】\n【subdivisions】: 小块中子块个数   【int】\n【divisions】: 小块中子块的分割数   【int】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(446,223,'GridPager Subdivision',replace('【child】: Child component   【Widget】\n【color】: Color   【Color】\n【subdivisions】: Number of sub-blocks in a small block   【int】\n【divisions】: Number of subdivisions of sub-blocks in a small block   【int】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(447,224,'GridTile的基本表现如下',replace('【header】: 头组件   【Widget】\n【child】: 子组件   【Widget】\n【footer】: 脚组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(448,224,'The basic representation of GridTile is as follows',replace('【header】: Header component   【Widget】\n【child】: Child component   【Widget】\n【footer】: Footer component   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(449,225,'GridTileBar的基本表现如下',replace('【leading】: 左侧组件   【Widget】\n【trailing】: 尾组件   【Widget】\n【title】: 中间上组件   【Widget】\n【subtitle】: 中间下组件   【Widget】\n【backgroundColor】: 背景色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(450,225,'The basic representation of GridTileBar is as follows',replace('【leading】: Left component   【Widget】\n【trailing】: Trailing component   【Widget】\n【title】: Top middle component   【Widget】\n【subtitle】: Bottom middle component   【Widget】\n【backgroundColor】: Background color   【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(451,226,'GridView.count构造',replace('【children】 : 子组件列表   【List<Widget>】\n【crossAxisCount】 : 主轴一行box数量  【int】\n【mainAxisSpacing】 : 主轴每行间距  【double】\n【crossAxisSpacing】 : 交叉轴每行间距  【double】\n【childAspectRatio】 : box主长/交叉轴长  【double】\n【crossAxisCount】 : 主轴一行数量  【int】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(452,226,'GridView.count Construction',replace('【children】 : List of child components   【List<Widget>】\n【crossAxisCount】 : Number of boxes per row on the main axis  【int】\n【mainAxisSpacing】 : Spacing between rows on the main axis  【double】\n【crossAxisSpacing】 : Spacing between rows on the cross axis  【double】\n【childAspectRatio】 : Main length/cross length of the box  【double】\n【crossAxisCount】 : Number of boxes per row on the main axis  【int】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(453,227,'GridView滑动方向',replace('【scrollDirection】 : 滑动方向   【Axis】\n【reverse】 : 是否反向滑动   【bool】\n【shrinkWrap】 : 无边界时是否包裹  【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(454,227,'GridView Scroll Direction',replace('【scrollDirection】 : Scroll direction   【Axis】\n【reverse】 : Whether to scroll in reverse   【bool】\n【shrinkWrap】 : Whether to wrap when there is no boundary  【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(455,228,'GridView滑动方向',replace('【scrollDirection】 : 滑动方向   【Axis】\n【reverse】 : 是否反向滑动   【bool】\n【shrinkWrap】 : 无边界时是否包裹  【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(456,228,'GridView Scroll Direction',replace('【scrollDirection】 : Scroll direction   【Axis】\n【reverse】 : Whether to scroll in reverse   【bool】\n【shrinkWrap】 : Whether to wrap when there is no boundary  【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(457,229,'GridView.builder构造',replace('【itemCount】 : 条目数量   【int】\n【gridDelegate】 : 网格代理   【SliverGridDelegate】\n【itemBuilder】 : 条目构造器  【IndexedWidgetBuilder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(458,229,'GridView.builder Construction',replace('【itemCount】 : Number of items   【int】\n【gridDelegate】 : Grid delegate   【SliverGridDelegate】\n【itemBuilder】 : Item builder  【IndexedWidgetBuilder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(459,230,'Hero基本使用','【tag】 : 标签   【String】,','zh-cn');
INSERT INTO node_desc VALUES(460,230,'Basic Usage of Hero','【tag】 : tag   【String】,','en-us');
INSERT INTO node_desc VALUES(461,231,'HtmlElementView 介绍',replace('【child】 : 子组件   【child】\n【viewType】 : html元素唯一表识   【String】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(462,231,'Introduction to HtmlElementView',replace('【child】 : Child widget   【child】\n【viewType】 : Unique identifier for the HTML element   【String】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(463,232,'用于显示一个图标',replace('【入参】 :图标数据 【IconData】\n【size】 : 大小  【double】\n【color】: 颜色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(464,232,'Used to display an icon',replace('【Input】 : Icon data 【IconData】\n【size】 : Size  【double】\n【color】: Color   【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(465,233,'使用自定义图标','可在iconfont网站中下载图标字体进行使用','zh-cn');
INSERT INTO node_desc VALUES(466,233,'Use custom icons','You can download icon fonts from the iconfont website for use','en-us');
INSERT INTO node_desc VALUES(467,234,'IconButton属性',replace('【icon】: 图标组件   【Widget】\n【tooltip】: 长按提示文字   【String】\n【highlightColor】: 长按高亮色   【Color】\n【splashColor】: 水波纹色   【Color】\n【onPressed】: 点击事件   【Function】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(468,234,'IconButton Properties',replace('【icon】: Icon component   【Widget】\n【tooltip】: Long press tooltip text   【String】\n【highlightColor】: Long press highlight color   【Color】\n【splashColor】: Ripple color   【Color】\n【onPressed】: Click event   【Function】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(469,235,'IconTheme使用','可以通过IconTheme.of获取图标主题数据，也可以为IconTheme【后代】的图标组件设置默认样式，包括颜色、透明度、尺寸。','zh-cn');
INSERT INTO node_desc VALUES(470,235,'IconTheme Usage','You can obtain the icon theme data through IconTheme.of, or set the default style for the icon components of IconTheme【descendants】, including color, opacity, and size.','en-us');
INSERT INTO node_desc VALUES(471,236,'IgnorePointer基本使用',replace('【child】 : 孩子组件   【Widget】\n【ignoring】 : 是否忽视事件   【bool】\n如下,Switch选中时ignoring为true，按钮事件将被锁定，无法点击。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(472,236,'Basic Usage of IgnorePointer',replace('【child】 : Child component   【Widget】\n【ignoring】 : Whether to ignore events   【bool】\nAs shown below, when the Switch is selected, ignoring is true, and the button event will be locked and cannot be clicked.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(473,237,'可从资源文件和网络加载图片','Image.asset加载资源图片,','zh-cn');
INSERT INTO node_desc VALUES(474,237,'Load images from resource files and the network','Image.asset loads resource images,','en-us');
INSERT INTO node_desc VALUES(475,238,'图片的适应模式','【fit】 : 适应模式*7   【BoxFit】,','zh-cn');
INSERT INTO node_desc VALUES(476,238,'Image adaptation mode','【fit】 : Adaptation mode*7   【BoxFit】,','en-us');
INSERT INTO node_desc VALUES(477,239,'图片对齐模式',replace('【alignment】 : 颜色   【AlignmentGeometry】\n    常用Alignment类的九个静态常量，但也可定制位置','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(478,239,'Image alignment mode',replace('【alignment】 : Color   【AlignmentGeometry】\n    Common nine static constants of the Alignment class, but custom positions are also possible','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(479,240,'图片颜色及混合模式',replace('【color】 : 颜色   【Color】\n【colorBlendMode】: 混合模式*29 【BlendMode】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(480,240,'Image color and blending mode',replace('【color】 : Color   【Color】\n【colorBlendMode】: Blending mode*29 【BlendMode】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(481,241,'图片重复模式','【repeat】 : 重复模式*4   【ImageRepeat】','zh-cn');
INSERT INTO node_desc VALUES(482,241,'Image repeat mode','【repeat】 : Repeat mode*4   【ImageRepeat】','en-us');
INSERT INTO node_desc VALUES(483,242,'图片实现局部放大','【centerSlice】 : 保留的区域   【Rect】','zh-cn');
INSERT INTO node_desc VALUES(484,242,'Image partial zoom implementation','【centerSlice】 : Reserved area   【Rect】','en-us');
INSERT INTO node_desc VALUES(485,243,'ImageFilter 高斯模糊',replace('【imageFilter】 : 图像滤镜   【ImageFilter】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(486,243,'ImageFilter Gaussian Blur',replace('【imageFilter】 : Image filter   【ImageFilter】\n【child】 : Child component   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(487,244,'ImageFilter 滤色效果','通过 ColorFilter 对象实现颜色滤镜。','zh-cn');
INSERT INTO node_desc VALUES(488,244,'ImageFilter Color Effect','Achieve color filter through the ColorFilter object.','en-us');
INSERT INTO node_desc VALUES(489,245,'ImageFilter 变换效果','通过 ImageFilter.matrix 构造，进行矩阵变换，但比较鸡肋。','zh-cn');
INSERT INTO node_desc VALUES(490,245,'ImageFilter Transformation Effect','Perform matrix transformation through the ImageFilter.matrix constructor, but it is relatively weak.','en-us');
INSERT INTO node_desc VALUES(491,246,'用于显示一个纯色图片',replace('【入参】 : 图片资源  【ImageProvider】\n【size】 : 大小  【double】\n【color】: 角标颜色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(492,246,'Used to display a solid color image',replace('【Parameter】: Image resource 【ImageProvider】\n【size】: Size 【double】\n【color】: Badge color 【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(493,247,'IndexedStack基本使用',replace('【children】 : 子组件列表   【Lis<Widget>】\n【alignment】 : 对齐方式   【AlignmentGeometry】\n【index】 : 当前显示组件  【int】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(494,247,'Basic Usage of IndexedStack',replace('【children】: List of child components 【List<Widget>】\n【alignment】: Alignment 【AlignmentGeometry】\n【index】: Currently displayed component 【int】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(495,248,'InheritedModel 使用',replace('【child】 : 子组件   【Widget】\n下面是一个自定义 InheritedModel，实现数据的子树共享；并且定义颜色和数值两个方面，控制依赖通知的粒度。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(496,248,'InheritedModel Usage',replace('【child】: child component   【Widget】\nBelow is a custom InheritedModel that implements subtree sharing of data; and defines two aspects, color and value, to control the granularity of dependency notifications.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(497,249,'InheritedTheme 介绍',replace('InheritedTheme.capture 可以抓取上层主题，获取 CapturedThemes 对象，通过该对象 wrap 方法可以跨路由使用抓到的主题。\n    \n\nclass InheritedThemeDemo extends StatelessWidget {\n  const InheritedThemeDemo({Key? key) : super(key: key);\n\n\n  @override\n  Widget build(BuildContext context) {\n    return const DefaultTextStyle(\n      style: TextStyle(fontSize: 24, color: Colors.blue),\n      child: TestBody(),\n    );\n  \n\n\nclass TestBody extends StatelessWidget {\n  const TestBody({Key? key) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n\n    return GestureDetector(\n        onTap: () => _toNextPage(context),\n        child: Container(\n            height: 60,\n            margin: const EdgeInsets.only(left: 40,right: 40),\n            alignment: Alignment.center,\n            color: Theme.of(context).primaryColor.withOpacity(0.1),\n            child: const Text(''InheritedTheme'')));\n  \n\n  void _toNextPage(BuildContext context) {\n     final NavigatorState navigator = Navigator.of(context);\n     final CapturedThemes themes =\n     InheritedTheme.capture(from: context, to: navigator.context);\n    \n     Navigator.of(context).push(\n       MaterialPageRoute(\n         builder: (BuildContext _) {\n           return themes.wrap(Container(\n             alignment: Alignment.center,\n             color: Colors.white,\n             child: Text(''Flutter Unit''),','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(498,249,'Introduction to InheritedTheme',replace('InheritedTheme.capture can capture the upper theme, obtain the CapturedThemes object, and use the captured theme across routes through the wrap method of this object.\n    \n\nclass InheritedThemeDemo extends StatelessWidget {\n  const InheritedThemeDemo({Key? key) : super(key: key);\n\n\n  @override\n  Widget build(BuildContext context) {\n    return const DefaultTextStyle(\n      style: TextStyle(fontSize: 24, color: Colors.blue),\n      child: TestBody(),\n    );\n  \n\n\nclass TestBody extends StatelessWidget {\n  const TestBody({Key? key) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n\n    return GestureDetector(\n        onTap: () => _toNextPage(context),\n        child: Container(\n            height: 60,\n            margin: const EdgeInsets.only(left: 40,right: 40),\n            alignment: Alignment.center,\n            color: Theme.of(context).primaryColor.withOpacity(0.1),\n            child: const Text(''InheritedTheme'')));\n  \n\n  void _toNextPage(BuildContext context) {\n     final NavigatorState navigator = Navigator.of(context);\n     final CapturedThemes themes =\n     InheritedTheme.capture(from: context, to: navigator.context);\n    \n     Navigator.of(context).push(\n       MaterialPageRoute(\n         builder: (BuildContext _) {\n           return themes.wrap(Container(\n             alignment: Alignment.center,\n             color: Colors.white,\n             child: Text(''Flutter Unit''),','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(499,250,'Column基本使用',replace('【children】 : 组件列表   【List<Widget>】\n【mainAxisAlignment】 : 主轴对齐   【MainAxisAlignment】\n【crossAxisAlignment】 : 交叉轴对齐   【CrossAxisAlignment】\n【textBaseline】 : 文字基线   【TextBaseline】\n【verticalDirection】 : 竖直方向   【VerticalDirection】\n【mainAxisSize】 : 主轴尺寸   【MainAxisSize】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(500,250,'Basic Usage of Column',replace('【children】: Component list   【List<Widget>】\n【mainAxisAlignment】: Main axis alignment   【MainAxisAlignment】\n【crossAxisAlignment】: Cross axis alignment   【CrossAxisAlignment】\n【textBaseline】: Text baseline   【TextBaseline】\n【verticalDirection】: Vertical direction   【VerticalDirection】\n【mainAxisSize】: Main axis size   【MainAxisSize】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(501,251,'InheritedWidget 案例','下面是通过一个颜色计数器项目展示 InheritedWidget 组件的使用。','zh-cn');
INSERT INTO node_desc VALUES(502,251,'InheritedWidget Example','Below is an example of using the InheritedWidget component through a color counter project.','en-us');
INSERT INTO node_desc VALUES(503,252,'Ink基本使用',replace('【child】 : 子组件   【Widget】\n【padding】 : 内边距   【EdgeInsetsGeometry】\n【decoration】 : 装饰   【Decoration】\n【width】 : 宽   【double】\n【height】 : 高   【double】\n【color】 : 颜色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(504,252,'Basic Usage of Ink',replace('【child】: Child component 【Widget】\n【padding】: Padding 【EdgeInsetsGeometry】\n【decoration】: Decoration 【Decoration】\n【width】: Width 【double】\n【height】: Height 【double】\n【color】: Color 【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(505,253,'Ink.image图片水波纹','其中属性与Image组件一致，详见Image组件','zh-cn');
INSERT INTO node_desc VALUES(506,253,'Ink.image Ripple with Image','The properties are consistent with the Image component, see the Image component for details','en-us');
INSERT INTO node_desc VALUES(507,254,'InkResponse基本事件',replace('【child】 : 子组件   【Widget】\n【onTap】 : 点击事件   【Function()】\n【onDoubleTap】 : 双击事件   【Function()】\n【onTapCancel】 : 点击取消   【Function()】\n【onLongPress】 : 长按事件   【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(508,254,'Basic Events of InkResponse',replace('【child】 : Child component   【Widget】\n【onTap】 : Click event   【Function()】\n【onDoubleTap】 : Double-click event   【Function()】\n【onTapCancel】 : Click cancel   【Function()】\n【onLongPress】 : Long press event   【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(509,255,'InkResponse其他属性',replace('【child】 : 子组件   【Widget】\n【onHighlightChanged】 : 高亮变化回调   【Function(bool)】\n【highlightColor】 : 高亮色   【Color】\n【splashColor】 : 水波纹色   【Color】\n【radius】 : 水波半径   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(510,255,'Other Properties of InkResponse',replace('【child】 : Child component   【Widget】\n【onHighlightChanged】 : Highlight change callback   【Function(bool)】\n【highlightColor】 : Highlight color   【Color】\n【splashColor】 : Ripple color   【Color】\n【radius】 : Ripple radius   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(511,256,'InkWell基本事件',replace('【child】 : 子组件   【Widget】\n【onTap】 : 点击事件   【Function()】\n【onDoubleTap】 : 双击事件   【Function()】\n【onTapCancel】 : 点击取消   【Function()】\n【onLongPress】 : 长按事件   【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(512,256,'InkWell Basic Events',replace('【child】: Child component   【Widget】\n【onTap】: Tap event   【Function()】\n【onDoubleTap】: Double tap event   【Function()】\n【onTapCancel】: Tap cancel   【Function()】\n【onLongPress】: Long press event   【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(513,257,'InkWell其他属性',replace('【child】 : 子组件   【Widget】\n【onHighlightChanged】 : 高亮变化回调   【Function(bool)】\n【highlightColor】 : 高亮色   【Color】\n【splashColor】 : 水波纹色   【Color】\n【radius】 : 水波半径   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(514,257,'InkWell Other Properties',replace('【child】: Child component   【Widget】\n【onHighlightChanged】: Highlight change callback   【Function(bool)】\n【highlightColor】: Highlight color   【Color】\n【splashColor】: Ripple color   【Color】\n【radius】: Ripple radius   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(515,258,'可以接受点击、删除事件',replace('【onPressed】: 点击事件   【Function()】\n【onDeleted】: 删除事件   【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(516,258,'Can accept click and delete events',replace('【onPressed】: Click event   【Function()】\n【onDeleted】: Delete event   【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(517,259,'可以接受选中事件',replace('【selected】: 是否选中   【bool】\n【onSelected】: 选中事件   【Function(bool)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(518,259,'Can accept select event',replace('【selected】: Whether selected   【bool】\n【onSelected】: Select event   【Function(bool)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(519,260,'InputDecorator基本使用',replace('【decoration】 : 装饰对象   【InputDecoration】\n【textAlign】 : 文字对齐方式   【TextAlign】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(520,260,'Basic Usage of InputDecorator',replace('【decoration】: Decoration object   【InputDecoration】\n【textAlign】: Text alignment   【TextAlign】\n【child】: Child widget   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(521,261,'InteractiveViewer基本使用',replace('【alignPanAxis】 : 沿轴拖动   【bool】\n【boundaryMargin】 : 边界边距   【EdgeInsets】\n【panEnabled】 : 是否可平移   【bool】\n【scaleEnabled】 : 是否可缩放   【bool】\n【maxScale】 : 最大放大倍数   【double】\n【minScale】 : 最小缩小倍数   【double】\n【onInteractionEnd】 : 交互结束回调   【GestureScaleEndCallback】\n【onInteractionStart】 : 交互开始回调   【GestureScaleStartCallback】\n【onInteractionUpdate】 : 交互更新回调   【GestureScaleUpdateCallback】\n【child】 : 游标颜色   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(522,261,'Basic Usage of InteractiveViewer',replace('【alignPanAxis】: Drag along the axis 【bool】\n【boundaryMargin】: Boundary margin 【EdgeInsets】\n【panEnabled】: Whether panning is enabled 【bool】\n【scaleEnabled】: Whether scaling is enabled 【bool】\n【maxScale】: Maximum zoom scale 【double】\n【minScale】: Minimum zoom scale 【double】\n【onInteractionEnd】: Interaction end callback 【GestureScaleEndCallback】\n【onInteractionStart】: Interaction start callback 【GestureScaleStartCallback】\n【onInteractionUpdate】: Interaction update callback 【GestureScaleUpdateCallback】\n【child】: Cursor color 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(523,262,'constrained属性测试','【constrained】 :  受约束的  【bool】','zh-cn');
INSERT INTO node_desc VALUES(524,262,'Constrained Property Test','【constrained】: Constrained 【bool】','en-us');
INSERT INTO node_desc VALUES(525,263,'变换控制器的使用','【transformationController】 : 变换控制器   【TransformationController】','zh-cn');
INSERT INTO node_desc VALUES(526,263,'Usage of Transformation Controller','【transformationController】: Transformation controller 【TransformationController】','en-us');
INSERT INTO node_desc VALUES(527,264,'IntrinsicHeight基本使用',replace('【child】 : 子组件   【Widget】\n如示例:左侧高可变动，中间高固定,右侧高取前两者的最高值。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(528,264,'Basic Usage of IntrinsicHeight',replace('【child】: Child component 【Widget】\nAs shown in the example: the height on the left can vary, the height in the middle is fixed, and the height on the right takes the highest value of the previous two.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(529,265,'IntrinsicWidth基本使用',replace('【child】 : 子组件   【Widget】\n如示例:上面宽可变动，中间宽固定,下面宽取前两者的最高值。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(530,265,'Basic Usage of IntrinsicWidth',replace('【child】: Child component 【Widget】\nAs shown in the example: the width above can be changed, the width in the middle is fixed, and the width below takes the highest value of the former two.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(531,266,'KeepAlive 介绍',replace('【child】 : *子组件   【Widget】\n【keepAlive】 : *是否保活   【bool】\n在 flutter 框架层中，只用于 AutomaticKeepAlive 中，源码中也说很少单独使用它。该示例展示出 ListView 条目的状态保活。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(532,266,'Introduction to KeepAlive',replace('【child】: *Child component   【Widget】\n【keepAlive】: *Whether to keep alive   【bool】\nIn the Flutter framework layer, it is only used in AutomaticKeepAlive. The source code also mentions that it is rarely used alone. This example demonstrates the state keep-alive of ListView items.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(533,267,'监听键盘事件',replace('案例中区域点击获取焦点，然后敲击键盘可以看到事件触发信息。\n【focusNode】 : 焦点   【FocusNode】\n【autofocus】 : 是否自动聚焦   【bool】\n【includeSemantics】 : 包含语义   【bool】\n【onKeyEvent】 : 按键回调事件   【ValueChanged<KeyEvent>?】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(534,267,'Listen to Keyboard Events',replace('In the example, click the area to gain focus, and then press the keyboard to see the event trigger information.\n【focusNode】 : Focus   【FocusNode】\n【autofocus】 : Whether to auto-focus   【bool】\n【includeSemantics】 : Include semantics   【bool】\n【onKeyEvent】 : Key callback event   【ValueChanged<KeyEvent>?】\n【child】 : Child widget   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(535,268,'LayoutBuilder基本认识','【builder】 : 布局构造器   【LayoutWidgetBuilder】','zh-cn');
INSERT INTO node_desc VALUES(536,268,'Basic Understanding of LayoutBuilder','【builder】: Layout Constructor   【LayoutWidgetBuilder】','en-us');
INSERT INTO node_desc VALUES(537,269,'LayoutBuilder的适应布局',replace('可以根据区域的大小进行组件展示设计。"\n比如在不同的宽度区域显示不同的布局结构。"\n毕竟很多地方不容易获取父组件区域，使用LayoutBuilder就会非常爽口。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(538,269,'Adaptive Layout of LayoutBuilder',replace('Can design component display based on the size of the area.\nFor example, displaying different layout structures in different width areas.\nAfter all, it is not easy to obtain the parent component area in many places, and using LayoutBuilder will be very refreshing.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(539,270,'LayoutBuilder的展开使用','使用TextPainter来检测文字的行数，实现展开或收起功能。','zh-cn');
INSERT INTO node_desc VALUES(540,270,'Expanded Use of LayoutBuilder','Use TextPainter to detect the number of lines of text to implement expand or collapse functionality.','en-us');
INSERT INTO node_desc VALUES(541,271,'LayoutId使用场景',replace('【id】 : 标识id   【Object】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(542,271,'LayoutId Usage Scenarios',replace('【id】 : Identifier id   【Object】\n【child】 : Child component   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(543,272,'LicensePage基本使用',replace('【applicationIcon】 : 左上图标   【Widget】\n【applicationVersion】 : 版本号  【String】\n【applicationName】 : 应用名  【String】\n【applicationLegalese】 : 应用律术   【String】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(544,272,'Basic Usage of LicensePage',replace('【applicationIcon】: Top-left icon   【Widget】\n【applicationVersion】: Version number  【String】\n【applicationName】: Application name  【String】\n【applicationLegalese】: Application legalese   【String】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(545,273,'LimitedBox基本使用',replace('【child】 : 孩子组件   【Widget】\n【maxHeight】 : 最大高   【double】\n【maxWidth】 : 最大宽   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(546,273,'Basic Usage of LimitedBox',replace('【child】: Child component   【Widget】\n【maxHeight】: Maximum height   【double】\n【maxWidth】: Maximum width   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(547,274,'LinearProgressIndicator基本使用',replace('【value】 : 进度   【double】\n【backgroundColor】 : 背景色   【Color】\n【valueColor】 : 进度颜色   【Animation<Color>】\n    value为null时会不停循环','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(548,274,'Basic Usage of LinearProgressIndicator',replace('【value】: Progress   【double】\n【backgroundColor】: Background Color   【Color】\n【valueColor】: Progress Color   【Animation<Color>】\n    It will keep looping when the value is null','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(549,275,'ListView的基本使用',replace('【mainAxis】 : 主轴方向   【Axis】\n【reverse】: 是否反向   【bool】\n【children】: 子组件集   【List<Widget>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(550,275,'Basic Usage of ListView',replace('【mainAxis】: Main axis direction   【Axis】\n【reverse】: Whether to reverse   【bool】\n【children】: Child component collection   【List<Widget>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(551,276,'Listener基本事件',replace('【child】 : 子组件   【Widget】\n【onPointerDown】 : 按下事件   【Function(PointerDownEvent)】\n【onPointerMove】 : 移动事件   【Function(PointerMoveEvent)】\n【onPointerMove】 : 抬起事件   【Function(PointerUpEvent)】\n【onPointerCancel】 : 取消事件   【Function(PointerUpEvent)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(552,276,'Basic Events of Listener',replace('【child】 : Child component   【Widget】\n【onPointerDown】 : Press event   【Function(PointerDownEvent)】\n【onPointerMove】 : Move event   【Function(PointerMoveEvent)】\n【onPointerMove】 : Release event   【Function(PointerUpEvent)】\n【onPointerCancel】 : Cancel event   【Function(PointerUpEvent)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(553,277,'ListTile的基本表现如下',replace('【leading】: 左侧组件   【Widget】\n【title】: 中间上组件   【Widget】\n【subtitle】: 中间下组件   【Widget】\n【trailing】: 尾组件   【Widget】\n【contentPadding】: 内边距   【EdgeInsetsGeometry】\n【onLongPress】: 点击事件   【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(554,277,'The basic representation of ListTile is as follows',replace('【leading】: Left component   【Widget】\n【title】: Top middle component   【Widget】\n【subtitle】: Bottom middle component   【Widget】\n【trailing】: Trailing component   【Widget】\n【contentPadding】: Inner padding   【EdgeInsetsGeometry】\n【onLongPress】: Click event   【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(555,278,'ListTile选中效果和长按事件',replace('【selected】: 是否选中   【bool】\n【onTap】: 点击事件   【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(556,278,'ListTile selection effect and long press event',replace('【selected】: Whether selected   【bool】\n【onTap】: Click event   【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(557,279,'ListTile的密排属性','【dense】: 是否密排   【bool】','zh-cn');
INSERT INTO node_desc VALUES(558,279,'Dense property of ListTile','【dense】: Whether dense   【bool】','en-us');
INSERT INTO node_desc VALUES(559,280,'ListTileTheme基本使用','可指定ListTileThemeData数据属性为【后代】的ListTile组件设置默认样式，如样式、颜色、装饰、边距等。也可以用ListTileTheme.of获取ListTile的主题属性。','zh-cn');
INSERT INTO node_desc VALUES(560,280,'Basic Usage of ListTileTheme','You can specify the ListTileThemeData properties to set default styles for descendant ListTile components, such as styles, colors, decorations, margins, etc. You can also use ListTileTheme.of to get the theme properties of ListTile.','en-us');
INSERT INTO node_desc VALUES(561,281,'ListView基本使用',replace('【children】 : 子组件列表   【List<Widget>】\n【padding】 : 内边距  【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(562,281,'Basic Usage of ListView',replace('【children】 : List of child components   【List<Widget>】\n【padding】 : Padding  【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(563,282,'ListView横向滑动',replace('【scrollDirection】 : 滑动方向   【Axis】\n【reverse】 : 是否反向滑动   【bool】\n【shrinkWrap】 : 无边界时是否包裹  【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(564,282,'Horizontal Scrolling of ListView',replace('【scrollDirection】 : Scroll direction   【Axis】\n【reverse】 : Whether to scroll in reverse   【bool】\n【shrinkWrap】 : Whether to wrap when unbounded  【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(565,283,'ListView.builder构造',replace('【itemCount】 : 条目个数   【int】\n【itemBuilder】 : 条目构造器   【IndexedWidgetBuilder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(566,283,'ListView.builder Construction',replace('【itemCount】 : Number of items   【int】\n【itemBuilder】 : Item builder   【IndexedWidgetBuilder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(567,284,'ListView.separated构造','【separatorBuilder】 : 条目构造器   【IndexedWidgetBuilder】','zh-cn');
INSERT INTO node_desc VALUES(568,284,'ListView.separated Construction','【separatorBuilder】 : Item builder   【IndexedWidgetBuilder】','en-us');
INSERT INTO node_desc VALUES(569,285,'ListWheelScrollView基本使用',replace('【children】 : 子组件列表   【List<Widget>】\n【perspective】 : 透视度   【double】\n【itemExtent】 : item高   【EdgeInsets】\n【onSelectedItemChanged】 : 选中回调  【ValueChanged<int> 】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(570,285,'Basic Usage of ListWheelScrollView',replace('【children】: List of child components 【List<Widget>】\n【perspective】: Perspective 【double】\n【itemExtent】: Item height 【EdgeInsets】\n【onSelectedItemChanged】: Selection callback 【ValueChanged<int>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(571,286,'ListWheelViewport 简单使用',replace('【itemExtent】 : 轴向item尺寸   【double】\n【offset】 : 视口偏移   【ViewportOffset】\n【childDelegate】 : 孩子代理构造器   【ListWheelChildDelegate】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(572,286,'Basic Usage of ListWheelViewport',replace('【itemExtent】 : Axial item size   【double】\n【offset】 : Viewport offset   【ViewportOffset】\n【childDelegate】 : Child delegate constructor   【ListWheelChildDelegate】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(573,287,'ListWheelViewport 透视效果',replace('【perspective】 : 透视参数   【double】\n【squeeze】 : 挤压值   【double】\n【diameterRatio】 : 直径分率   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(574,287,'Perspective Effect of ListWheelViewport',replace('【perspective】 : Perspective parameter   【double】\n【squeeze】 : Squeeze value   【double】\n【diameterRatio】 : Diameter ratio   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(575,288,'ListWheelViewport 放大',replace('【useMagnifier】 : 是否放大   【bool】\n【magnification】 : 放大比例   【double】\n【clipBehavior】 : 剪裁行为   【Clip】\n【renderChildrenOutsideViewport】 : 出视野是否渲染   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(576,288,'Magnification of ListWheelViewport',replace('【useMagnifier】 : Whether to magnify   【bool】\n【magnification】 : Magnification ratio   【double】\n【clipBehavior】 : Clip behavior   【Clip】\n【renderChildrenOutsideViewport】 : Whether to render children outside the viewport   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(577,289,'偏移和透明度',replace('【offAxisFraction】 : 轴中心偏移比   【double】\n【overAndUnderCenterOpacity】 : 放大器之外的透明度   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(578,289,'Offset and Opacity',replace('【offAxisFraction】 : Axis center offset ratio   【double】\n【overAndUnderCenterOpacity】 : Opacity outside the magnifier   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(579,290,'获取当前语言','通过 Localizations.localeOf(context) 可以根据上下文获取最近上层的 Localizations 组件存储的 Locale 数据信息。','zh-cn');
INSERT INTO node_desc VALUES(580,290,'Get Current Language','Through Localizations.localeOf(context), you can retrieve the Locale data information stored in the nearest upper-level Localizations component based on the context.','en-us');
INSERT INTO node_desc VALUES(581,291,'LongPressDraggable与DragTarget联用',replace('【child】 : 孩子   【Widget】\n【feedback】 : 拖拽时的孩子   【Widget】\n【axis】 : 拖动的轴   【Axis】\n【data】 : 数据   【T】\n【onDragStarted】 : 开始拖拽   【Function()】\n【onDragEnd】 : 结束拖拽   【Function(DraggableDetails)】\n【onDragCompleted】 : 拖拽完成   【Function()】\n【onDraggableCanceled】 : 拖拽取消   【Function(Velocity,Offset)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(582,291,'LongPressDraggable used with DragTarget',replace('【child】 : child   【Widget】\n【feedback】 : child during drag   【Widget】\n【axis】 : axis of drag   【Axis】\n【data】 : data   【T】\n【onDragStarted】 : start drag   【Function()】\n【onDragEnd】 : end drag   【Function(DraggableDetails)】\n【onDragCompleted】 : drag completed   【Function()】\n【onDraggableCanceled】 : drag canceled   【Function(Velocity,Offset)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(583,292,'Material基本使用',replace('【child】 : 子组件   【Widget】\n【type】 : 类型   【MaterialType】\n【elevation】 : 影深   【double】\n【shadowColor】 : 阴影颜色   【Color】\n【color】 : 颜色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(584,292,'Basic Usage of Material',replace('【child】 : Child Component   【Widget】\n【type】 : Type   【MaterialType】\n【elevation】 : Elevation   【double】\n【shadowColor】 : Shadow Color   【Color】\n【color】 : Color   【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(585,293,'Material的shape属性','【shape】 : 形状   【ShapeBorder】,','zh-cn');
INSERT INTO node_desc VALUES(586,293,'Shape Property of Material','【shape】 : Shape   【ShapeBorder】,','en-us');
INSERT INTO node_desc VALUES(587,294,'MaterialApp基本用法',replace('【theme】 : 主题   【ThemeData】\n【title】 : 任务栏标题   【String】\n【debugShowCheckedModeBanner】 : 开启角标   【bool】\n【showPerformanceOverlay】 : 开启性能浮层   【bool】\n【debugShowMaterialGrid】 : 开启网格   【bool】\n【onGenerateRoute】 : 路由生成器   【RouteFactory】\n【home】 : 主页   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(588,294,'Basic Usage of MaterialApp',replace('【theme】 : Theme   【ThemeData】\n【title】 : Taskbar Title   【String】\n【debugShowCheckedModeBanner】 : Enable Badge   【bool】\n【showPerformanceOverlay】 : Enable Performance Overlay   【bool】\n【debugShowMaterialGrid】 : Enable Grid   【bool】\n【onGenerateRoute】 : Route Generator   【RouteFactory】\n【home】 : Home Page   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(589,295,'MaterialBanner一行的使用',replace('【content】 : 中间组件   【Widget】\n【leading】: 左侧组件   【Widget】\n【actions】: 右侧组件列表   【List<Widget>】\n【padding】: 内边距   【EdgeInsetsGeometry】\n【forceActionsBelow】: 是否按钮在下方   【bool】\n【backgroundColor】: 背景色    【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(590,295,'Usage of MaterialBanner in a Single Line',replace('【content】: Middle component   【Widget】\n【leading】: Left component   【Widget】\n【actions】: List of right components   【List<Widget>】\n【padding】: Padding   【EdgeInsetsGeometry】\n【forceActionsBelow】: Whether buttons are below   【bool】\n【backgroundColor】: Background color    【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(591,296,'MaterialBanner两行的使用',replace('【contentTextStyle】: 中间位置样式   【TextStyle】\n【leadingPadding】: 左侧组件边距    【EdgeInsetsGeometry】\n当尾部组件数量大于1,该组件结构为左中下。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(592,296,'Usage of MaterialBanner in Two Lines',replace('【contentTextStyle】: Style for the middle position   【TextStyle】\n【leadingPadding】: Padding for the left component    【EdgeInsetsGeometry】\nWhen the number of trailing components is greater than 1, the component structure is left-center-bottom.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(593,297,'MaterialBannerTheme基本使用','可指定MaterialBannerThemeData数据属性为【后代】的MaterialBanner组件设置默认样式，如背景色、边距、文字样式等。也可以用MaterialBannerTheme.of获取MaterialBanner的主题数据。','zh-cn');
INSERT INTO node_desc VALUES(594,297,'Basic Usage of MaterialBannerTheme','You can specify the MaterialBannerThemeData properties to set default styles for descendant MaterialBanner components, such as background color, margins, text styles, etc. You can also use MaterialBannerTheme.of to get the theme data of MaterialBanner.','en-us');
INSERT INTO node_desc VALUES(595,298,'MaterialButton点击事件',replace('【color】: 颜色   【Color】\n【splashColor】: 水波纹颜色   【Color】\n【height】: 高   【double】\n【elevation】: 影深   【double】\n【child】: 子组件   【Widget】\n【textColor】: 子组件文字颜色   【Color】\n【highlightColor】: 长按高亮色   【Color】\n【padding】: 内边距   【EdgeInsetsGeometry】\n【onPressed】: 点击事件   【Function】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(596,298,'MaterialButton Click Event',replace('【color】: Color   【Color】\n【splashColor】: Ripple Color   【Color】\n【height】: Height   【double】\n【elevation】: Elevation   【double】\n【child】: Child Component   【Widget】\n【textColor】: Child Component Text Color   【Color】\n【highlightColor】: Long Press Highlight Color   【Color】\n【padding】: Padding   【EdgeInsetsGeometry】\n【onPressed】: Click Event   【Function】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(597,299,'MaterialButton长按事件',replace('【highlightColor】: 长按高亮色   【Color】\n【onLongPress】: 长按事件   【Function】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(598,299,'MaterialButton Long Press Event',replace('【highlightColor】: Long Press Highlight Color   【Color】\n【onLongPress】: Long Press Event   【Function】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(599,300,'MaterialButton的自定义形状','【shape】: 形状   【ShapeBorder】','zh-cn');
INSERT INTO node_desc VALUES(600,300,'MaterialButton Custom Shape','【shape】: Shape   【ShapeBorder】','en-us');
INSERT INTO node_desc VALUES(601,301,'MediaQuery获取数据信息','MediaQuery.of(context)可以获取MediaQueryData','zh-cn');
INSERT INTO node_desc VALUES(602,301,'MediaQuery Get Data Information','MediaQuery.of(context) can obtain MediaQueryData','en-us');
INSERT INTO node_desc VALUES(603,302,'MergeableMaterial基本使用',replace('【elevation】 : 影深   【double】\n【hasDividers】 : 是否有分隔线   【bool】\n【dividerColor】 : 分隔线颜色   【Color】\n【mainAxis】 : 轴向   【Axis】\n【children】 : 子组件集   【List<MergeableMaterialItem>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(604,302,'Basic Usage of MergeableMaterial',replace('【elevation】 : Shadow depth   【double】\n【hasDividers】 : Whether there are dividers   【bool】\n【dividerColor】 : Divider color   【Color】\n【mainAxis】 : Axis direction   【Axis】\n【children】 : Child components collection   【List<MergeableMaterialItem>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(605,303,'ModalBarrier 介绍',replace('【dismissible】 : 点击是否返回   【bool】\n【color】 : 颜色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(606,303,'Introduction to ModalBarrier',replace('【dismissible】: Whether to return when clicked 【bool】\n【color】: Color 【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(607,304,'MouseRegion基本使用',replace('【onEnter】 : 移入事件   【PointerEnterEventListener】\n【onHover】: 移动事件    【PointerHoverEventListener】\n【onExit】: 移出事件    【PointerExitEventListener】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(608,304,'Basic Usage of MouseRegion',replace('【onEnter】: Enter event   【PointerEnterEventListener】\n【onHover】: Move event    【PointerHoverEventListener】\n【onExit】: Exit event    【PointerExitEventListener】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(609,305,'NavigationRail 基本使用',replace('【destinations】 : 菜单数据列表   【List<NavigationRailDestination>】\n【selectedIndex】: 激活索引    【int】\n【labelType】: 标签样式    【NavigationRailLabelType?】\n【onDestinationSelected】: 菜单点击事件    【ValueChanged<int>?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(610,305,'Basic Usage of NavigationRail',replace('【destinations】 : Menu data list   【List<NavigationRailDestination>】\n【selectedIndex】: Active index    【int】\n【labelType】: Label style    【NavigationRailLabelType?】\n【onDestinationSelected】: Menu click event    【ValueChanged<int>?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(611,306,'NavigationRail 折叠效果',replace('【elevation】 : 影深   【double】\n【leading】: 首组件    【Widget?】\n【trailing】: 尾组件    【Widget?】\n【extended】: 是否展开    【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(612,306,'Collapse Effect of NavigationRail',replace('【elevation】 : Shadow depth   【double】\n【leading】: Leading component    【Widget?】\n【trailing】: Trailing component    【Widget?】\n【extended】: Whether to expand    【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(613,307,'NavigationRail 样式',replace('【useIndicator】 : 是否显示指示器   【bool】\n【indicatorColor】: 指示器颜色    【Color?】\n【backgroundColor】: 背景色    【Color?】\n【labelType】: 标签样式    【NavigationRailLabelType?】\n【selectedIconTheme】: 选中图标样式    【IconThemeData?】\n【unselectedIconTheme】: 未选中图标样式    【IconThemeData?】\n【selectedLabelTextStyle】: 选中文字样式    【TextStyle?】\n【unselectedLabelTextStyle】: 未选中文字样式    【TextStyle?】\n【minExtendedWidth】: 展开宽度    【double?】\n【minWidth】: 未展开宽度    【double?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(614,307,'NavigationRail Style',replace('【useIndicator】 : Whether to show the indicator   【bool】\n【indicatorColor】: Indicator color    【Color?】\n【backgroundColor】: Background color    【Color?】\n【labelType】: Label style    【NavigationRailLabelType?】\n【selectedIconTheme】: Selected icon style    【IconThemeData?】\n【unselectedIconTheme】: Unselected icon style    【IconThemeData?】\n【selectedLabelTextStyle】: Selected text style    【TextStyle?】\n【unselectedLabelTextStyle】: Unselected text style    【TextStyle?】\n【minExtendedWidth】: Expanded width    【double?】\n【minWidth】: Unexpanded width    【double?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(615,308,'NavigationToolbar基本使用',replace('【leading】 : 左侧组件   【Widget】\n【middle】: 中间组件   【Widget】\n【trailing】: 右侧组件组件   【Widget】\n【centerMiddle】: 中间组件是否居中   【bool】\n【middleSpacing】: 中间组件距左距离    【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(616,308,'Basic Usage of NavigationToolbar',replace('【leading】: Left component   【Widget】\n【middle】: Middle component   【Widget】\n【trailing】: Right component   【Widget】\n【centerMiddle】: Whether the middle component is centered   【bool】\n【middleSpacing】: Distance of the middle component from the left   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(617,309,'Navigator基本用法',replace('【initialRoute】 : 最初显示路由   【String】\n【onGenerateRoute】 : 路由生成器   【RouteFactory】\n【observers】 : 路由监听器   【List<NavigatorObserver>】\n【onPopPage】 : 出栈回调   【PopPageCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(618,309,'Basic Usage of Navigator',replace('【initialRoute】: Initial display route 【String】\n【onGenerateRoute】: Route generator 【RouteFactory】\n【observers】: Route observers 【List<NavigatorObserver>】\n【onPopPage】: Pop page callback 【PopPageCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(619,310,'NestedScrollView基本用法',replace('【controller】 : 滑动控制器   【ScrollController】\n【scrollDirection】 : 滑动方向   【Axis】\n【reverse】 : 是否反向   【bool】\n【physics】 : 滑顶样式   【ScrollPhysics】\n【dragStartBehavior】 : 开始拖动行为   【DragStartBehavior】\n【headerSliverBuilder】 : *头部构造器   【NestedScrollViewHeaderSliversBuilder】\n【body】 : *内容   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(620,310,'Basic Usage of NestedScrollView',replace('【controller】 : Scroll Controller   【ScrollController】\n【scrollDirection】 : Scroll Direction   【Axis】\n【reverse】 : Whether to Reverse   【bool】\n【physics】 : Scroll Physics   【ScrollPhysics】\n【dragStartBehavior】 : Drag Start Behavior   【DragStartBehavior】\n【headerSliverBuilder】 : *Header Builder   【NestedScrollViewHeaderSliversBuilder】\n【body】 : *Content   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(621,311,'NestedScrollViewViewport 介绍',replace('【offset】 : *偏移   【ViewportOffset】\n【handle】 : *处理器   【SliverOverlapAbsorberHandle】\n【axisDirection】 : 轴向   【AxisDirection】\n【crossAxisDirection】 : 交叉轴向   【AxisDirection】\n【slivers】 : 子组件   【List<Widget>】\n【clipBehavior】 : 裁剪行为   【Clip】\n【anchor】 : 锚点   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(622,311,'Introduction to NestedScrollViewViewport',replace('【offset】 : *Offset   【ViewportOffset】\n【handle】 : *Handle   【SliverOverlapAbsorberHandle】\n【axisDirection】 : Axis Direction   【AxisDirection】\n【crossAxisDirection】 : Cross Axis Direction   【AxisDirection】\n【slivers】 : Child Components   【List<Widget>】\n【clipBehavior】 : Clip Behavior   【Clip】\n【anchor】 : Anchor   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(623,312,'监听OverscrollIndicatorNotification','该通知之后在滑动到最顶和最底是回调，通过leading属性判断是顶部还是底部。另外通过notification#disallowGlow(),可以去除顶底滑动蓝色阴影','zh-cn');
INSERT INTO node_desc VALUES(624,312,'Listen to OverscrollIndicatorNotification','This notification is called back when sliding to the top and bottom, and it is judged whether it is the top or bottom by the leading property. In addition, you can remove the blue shadow at the top and bottom sliding through notification#disallowGlow().','en-us');
INSERT INTO node_desc VALUES(625,313,'监听ScrollUpdateNotification','在滑动过程中对滑动数据进行回调,你可以获取大量数据来进行操作。','zh-cn');
INSERT INTO node_desc VALUES(626,313,'Listen to ScrollUpdateNotification','During the sliding process, the sliding data is called back, and you can obtain a large amount of data to operate.','en-us');
INSERT INTO node_desc VALUES(627,314,'LimitedBox基本使用',replace('【child】 : 孩子组件   【Widget】\n【offstage】 : 是否消失   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(628,314,'Basic Usage of LimitedBox',replace('【child】: Child component   【Widget】\n【offstage】: Whether to disappear   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(629,315,'Opacity基本使用',replace('【child】 : 孩子组件   【Widget】\n【opacity】 : 透明度0~1   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(630,315,'Basic Usage of Opacity',replace('【child】 : Child component   【Widget】\n【opacity】 : Transparency 0~1   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(631,316,'OrientationBuilder基本使用','【builder】 : 方向组件构造器   【OrientationWidgetBuilder】','zh-cn');
INSERT INTO node_desc VALUES(632,316,'Basic Usage of OrientationBuilder','【builder】: Orientation component builder   【OrientationWidgetBuilder】','en-us');
INSERT INTO node_desc VALUES(633,317,'OutlinedButton基本使用',replace('【child】 : 按钮内容   【Widget】\n【onPressed】 : 点击事件   【VoidCallback】\n【onLongPress】 : 长按事件   【VoidCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(634,317,'Basic Usage of OutlinedButton',replace('【child】: Button content 【Widget】\n【onPressed】: Click event 【VoidCallback】\n【onLongPress】: Long press event 【VoidCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(635,318,'OutlinedButton样式',replace('【style】 : 按钮样式   【ButtonStyle】\n【focusNode】 : 焦点   【FocusNode】\n【clipBehavior】 : 裁剪行为   【Clip】\n【autofocus】 : 自动聚焦   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(636,318,'OutlinedButton Style',replace('【style】: Button style 【ButtonStyle】\n【focusNode】: Focus 【FocusNode】\n【clipBehavior】: Clip behavior 【Clip】\n【autofocus】: Autofocus 【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(637,319,'OverflowBox基本使用',replace('【child】 : 孩子组件   【Widget】\n【minWidth】 : 最小宽   【double】\n【minHeight】 : 最小高   【double】\n【maxHeight】 : 最大高   【double】\n【maxWidth】 : 最大宽   【double】\n【alignment】 : 对齐方式   【AlignmentGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(638,319,'Basic Usage of OverflowBox',replace('【child】: Child component 【Widget】\n【minWidth】: Minimum width 【double】\n【minHeight】: Minimum height 【double】\n【maxHeight】: Maximum height 【double】\n【maxWidth】: Maximum width 【double】\n【alignment】: Alignment 【AlignmentGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(639,320,'Overlay基本使用','Overlay.of(context).insert插入全局组件','zh-cn');
INSERT INTO node_desc VALUES(640,320,'Basic Usage of Overlay','Overlay.of(context).insert inserts a global component','en-us');
INSERT INTO node_desc VALUES(641,321,'Padding四面等边距',replace('【child】 : 孩子组件   【Widget】\n【padding】 : 内四边距   【EdgeInsetsGeometry】"\nEdgeInsets.all用来限定相同的四边边距','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(642,321,'Padding Equal Margin on All Sides',replace('【child】: Child component 【Widget】\n【padding】: Inner four-sided margin 【EdgeInsetsGeometry】\nEdgeInsets.all is used to define the same margin on all four sides','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(643,322,'Padding单独边距边距','EdgeInsets.only用来限定相同的四边边距','zh-cn');
INSERT INTO node_desc VALUES(644,322,'Padding Individual Margin','EdgeInsets.only is used to define the same margin on all four sides','en-us');
INSERT INTO node_desc VALUES(645,323,'Padding方向边距','EdgeInsets.symmetric用来限定水平和竖直方向的边距','zh-cn');
INSERT INTO node_desc VALUES(646,323,'Padding Directional Margin','EdgeInsets.symmetric is used to define horizontal and vertical margins','en-us');
INSERT INTO node_desc VALUES(647,324,'PageStorage基本使用',replace('【bucket】 : 存储区   【PageStorageBucket】\n【child】: 子组件   【Widget】\n上面切换界面初始化组件时并不会将状态重置。如上CountWidget，子组件需要在初始化时从存储器中读取状态，在改变状态时将状态量写入存储器。另外，如果使用MaterialApp已经内置了PageStorage,不过你也可以创建PageStorage。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(648,324,'Basic Usage of PageStorage',replace('【bucket】: Storage Area 【PageStorageBucket】\n【child】: Child Widget 【Widget】\nWhen switching interfaces and initializing components, the state will not be reset. As in the CountWidget example, the child component needs to read the state from the storage during initialization and write the state to the storage when changing the state. Additionally, MaterialApp already has PageStorage built-in, but you can also create your own PageStorage.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(649,325,'PageView基本使用',replace('【children】 : 子组件列表   【List<Widget>】\n【onPageChanged】 : 点击事件  【ValueChanged<int>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(650,325,'Basic Usage of PageView',replace('【children】 : List of child components   【List<Widget>】\n【onPageChanged】 : Click event  【ValueChanged<int>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(651,326,'PageView滑动方向',replace('【scrollDirection】 : 滑动方向   【Axis】\n【reverse】 : 是否反向  【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(652,326,'Swipe Direction of PageView',replace('【scrollDirection】 : Swipe direction   【Axis】\n【reverse】 : Whether to reverse  【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(653,327,'PageView控制器简单实用','【controller】 : 页面控制器   【PageController】','zh-cn');
INSERT INTO node_desc VALUES(654,327,'Simple Use of PageView Controller','【controller】 : Page controller   【PageController】','en-us');
INSERT INTO node_desc VALUES(655,328,'PaginatedDataTable 使用',replace('【header】 : 表名   【Widget】\n【rowsPerPage】 : 每页记录数   【int】\n【actions】 : 操作组件   【List<Widget>】\n【columns】 : 数据列   【List<DataColumn>】\n【sortColumnIndex】 : 排序列索引   【int】\n【sortAscending】 : 是否升序   【bool】\n【onSelectAll】 : 全选回调   【ValueSetter<bool>】\n【onRowsPerPageChanged】 : 分页改变监听   【ValueChanged<int>】\n【availableRowsPerPage】 : 可用分页列表   【List<int>】\n【source】 : 数据源   【DataTableSource】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(656,328,'PaginatedDataTable Usage',replace('【header】 : Table Name   【Widget】\n【rowsPerPage】 : Number of records per page   【int】\n【actions】 : Action components   【List<Widget>】\n【columns】 : Data columns   【List<DataColumn>】\n【sortColumnIndex】 : Sort column index   【int】\n【sortAscending】 : Whether ascending   【bool】\n【onSelectAll】 : Select all callback   【ValueSetter<bool>】\n【onRowsPerPageChanged】 : Page change listener   【ValueChanged<int>】\n【availableRowsPerPage】 : Available page list   【List<int>】\n【source】 : Data source   【DataTableSource】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(657,329,'ParentDataWidget 介绍','【child】 : 子组件   【Widget】','zh-cn');
INSERT INTO node_desc VALUES(658,329,'Introduction to ParentDataWidget','【child】: Child component   【Widget】','en-us');
INSERT INTO node_desc VALUES(659,330,'PerformanceOverlay基本使用','使用PerformanceOverlay.allEnabled可以开始所有的监测项。','zh-cn');
INSERT INTO node_desc VALUES(660,330,'Basic Usage of PerformanceOverlay','Using PerformanceOverlay.allEnabled can start all monitoring items.','en-us');
INSERT INTO node_desc VALUES(661,331,'PhysicalModel基本使用',replace('【clipBehavior】 : 裁剪行为   【Clip】\n【borderRadius】 : 圆角   【BorderRadius】\n【child】 : 子组件   【Widget】\n【elevation】 : 阴影深   【double】\n【shadowColor】 : 阴影颜色   【Color】\n【shape】 : 形状   【BoxShape】\n【color】: 颜色    【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(662,331,'Basic Usage of PhysicalModel',replace('【clipBehavior】: Clipping Behavior   【Clip】\n【borderRadius】: Rounded Corners   【BorderRadius】\n【child】: Child Component   【Widget】\n【elevation】: Shadow Depth   【double】\n【shadowColor】: Shadow Color   【Color】\n【shape】: Shape   【BoxShape】\n【color】: Color    【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(663,332,'PhysicalShape基本使用',replace('【clipper】 : 裁剪器   【CustomClipper<Path>】\n【clipBehavior】 : 裁剪行为   【Clip】\n【child】 : 子组件   【Widget】\n【elevation】 : 阴影深   【double】\n【shadowColor】 : 阴影颜色   【Color】\n【color】: 颜色    【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(664,332,'Basic Usage of PhysicalShape',replace('【clipper】: Clipper   【CustomClipper<Path>】\n【clipBehavior】: Clipping Behavior   【Clip】\n【child】: Child Component   【Widget】\n【elevation】: Shadow Depth   【double】\n【shadowColor】: Shadow Color   【Color】\n【color】: Color    【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(665,333,'PinnedHeaderSliver 官方案例',replace('【child】 : 子组件   【Widget?】\nPinnedHeaderSliver 只能用在滚动视口中，其中子组件在滑动到顶部时，不会移出视口，从而会停留在视口上方。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(666,333,'PinnedHeaderSliver Official Example',replace('【child】 : Child widget   【Widget?】\nPinnedHeaderSliver can only be used in a scroll viewport, where the child widget will not move out of the viewport when scrolling to the top, thus staying above the viewport.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(667,334,'标题吸顶','基于 PinnedHeaderSliver 实现的标题吸顶效果，注意看下方的分隔线也有吸顶效果哦。','zh-cn');
INSERT INTO node_desc VALUES(668,334,'Sticky Header','The sticky header effect implemented based on PinnedHeaderSliver, note that the divider below also has a sticky effect.','en-us');
INSERT INTO node_desc VALUES(669,335,'标题+搜索吸顶','基于 PinnedHeaderSliver 实现的标题+搜索框的吸顶效果。','zh-cn');
INSERT INTO node_desc VALUES(670,335,'Sticky Header + Search','The sticky header + search box effect implemented based on PinnedHeaderSliver.','en-us');
INSERT INTO node_desc VALUES(671,336,'Placeholder基础属性',replace('【color】: 颜色   【Color】\n【strokeWidth】: 线粗   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(672,336,'Placeholder Basic Properties',replace('【color】: Color   【Color】\n【strokeWidth】: Stroke Width   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(673,337,'Placeholder的fallback属性',replace('当所在区域无宽高约束时，占位组件的宽高。"\n【fallbackHeight】: 高   【double】\n【fallbackWidth】: 宽   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(674,337,'Placeholder Fallback Properties',replace('When there are no width and height constraints in the area, the width and height of the placeholder component.\n【fallbackHeight】: Height   【double】\n【fallbackWidth】: Width   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(675,338,'PopupMenuButton基本使用',replace('【itemBuilder】 : 构造器   【PopupMenuItemBuilder<T>】\n【offset】 : 偏移   【Offset】\n【color】 : 背景颜色   【Color】\n【shape】 : 形状   【ShapeBorder】\n【elevation】 : 影深   【double】\n【onCanceled】 : 取消事件   【Function()】\n【onSelected】 : 选择事件   【Function(T)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(676,338,'Basic Usage of PopupMenuButton',replace('【itemBuilder】: Constructor 【PopupMenuItemBuilder<T>】\n【offset】: Offset 【Offset】\n【color】: Background Color 【Color】\n【shape】: Shape 【ShapeBorder】\n【elevation】: Elevation 【double】\n【onCanceled】: Cancel Event 【Function()】\n【onSelected】: Selection Event 【Function(T)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(677,339,'PopupMenuDivider基本使用','【height】 : 高度  【double】','zh-cn');
INSERT INTO node_desc VALUES(678,339,'Basic Usage of PopupMenuDivider','【height】 : height  【double】','en-us');
INSERT INTO node_desc VALUES(679,340,'PopupMenuTheme基本使用','可指定PopupMenuThemeData数据属性为【后代】的PopupMenuButton组件设置默认样式，如形状、影深、颜色、文字样式等。也可以用PopupMenuTheme.of获取PopupMenu的主题数据。','zh-cn');
INSERT INTO node_desc VALUES(680,340,'Basic Usage of PopupMenuTheme','You can specify the PopupMenuThemeData properties to set default styles for descendant PopupMenuButton components, such as shape, elevation, color, text style, etc. You can also use PopupMenuTheme.of to obtain the theme data of PopupMenu.','en-us');
INSERT INTO node_desc VALUES(681,341,'Positioned基本使用',replace('【child】 : 组件   【Widget】\n【top】 : 到父顶距离   【double】\n【right】 : 到父右距离   【double】\n【left】 : 到父左距离   【double】\n【bottom】 : 到父底距离   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(682,341,'Basic Usage of Positioned',replace('【child】: Component   【Widget】\n【top】: Distance to the top of the parent   【double】\n【right】: Distance to the right of the parent   【double】\n【left】: Distance to the left of the parent   【double】\n【bottom】: Distance to the bottom of the parent   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(683,342,'PositionedDirectional基本使用',replace('【child】 : 组件   【Widget】\n【top】 : 到父顶距离   【double】\n【end】 : 到父右距离   【double】\n【start】 : 到父左距离   【double】\n【bottom】 : 到父底距离   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(684,342,'Basic Usage of PositionedDirectional',replace('【child】 : Component   【Widget】\n【top】 : Distance to the top of the parent   【double】\n【end】 : Distance to the right of the parent   【double】\n【start】 : Distance to the left of the parent   【double】\n【bottom】 : Distance to the bottom of the parent   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(685,343,'PositionedTransition基本使用',replace('【child】 : 孩子组件   【Widget】\n【rect】 : 动画   【Animation<RelativeRect>】\n    PositionedTransition组件只能在Stack内起作用','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(686,343,'Basic Usage of PositionedTransition',replace('【child】 : Child component   【Widget】\n【rect】 : Animation   【Animation<RelativeRect>】\n    The PositionedTransition component only works within a Stack','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(687,344,'PreferredSize调整AppBar高度','【preferredSize】 : 尺寸   【Size】','zh-cn');
INSERT INTO node_desc VALUES(688,344,'Adjusting AppBar Height with PreferredSize','【preferredSize】 : size   【Size】','en-us');
INSERT INTO node_desc VALUES(689,345,'PreferredSize的转化使用','【PreferredSize将普通组件转化为PreferredSizeWidget','zh-cn');
INSERT INTO node_desc VALUES(690,345,'Conversion and Usage of PreferredSize','【PreferredSize converts a regular component into a PreferredSizeWidget','en-us');
INSERT INTO node_desc VALUES(691,346,'PrimaryScrollController 介绍',replace('【controller】 : 滑动控制器   【ScrollController】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(692,346,'Introduction to PrimaryScrollController',replace('【controller】: Scroll Controller   【ScrollController】\n【child】: Child Widget   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(693,347,'Radio基本使用',replace('【value】 : 选钮值   【T】\n【groupValue】 : 当前匹配值   【T】\n【activeColor】 : 激活颜色   【Color】\n【onChanged】 : 改变时回调   【Function(T)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(694,347,'Basic Usage of Radio',replace('【value】: Radio button value   【T】\n【groupValue】: Current matching value   【T】\n【activeColor】: Active color   【Color】\n【onChanged】: Callback on change   【Function(T)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(695,348,'RadioListTile需要一个泛型T',replace('【value】 : 条目对象  【T】\n【groupValue】 : 选中对象  【T】\n【selected】: 是否选中   【bool】\n【secondary】: 右侧组件   【Widget】\n【title】: 中间上组件   【Widget】\n【subtitle】: 中间下组件   【Widget】\n【onChanged】: 切换事件   【Function(T)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(696,348,'RadioListTile requires a generic type T',replace('【value】 : Item object  【T】\n【groupValue】 : Selected object  【T】\n【selected】: Whether selected   【bool】\n【secondary】: Right component   【Widget】\n【title】: Middle top component   【Widget】\n【subtitle】: Middle bottom component   【Widget】\n【onChanged】: Switch event   【Function(T)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(697,349,'RadioListTile选中色和密排',replace('【activeColor】 : 选中时颜色  【Color】\n【dense】: 是否密排   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(698,349,'RadioListTile selection color and dense layout',replace('【activeColor】 : Color when selected  【Color】\n【dense】: Whether dense layout   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(699,350,'RangeSlider基本使用',replace('【values】 : 数值   【RangeValues】\n【min】 : 最小值   【double】\n【max】 : 最大值   【double】\n【divisions】 : 分段数   【int】\n【label】 : 提示气泡文字   【String】\n【activeColor】 : 激活颜色   【Color】\n【inactiveColor】 : 非激活颜色   【Color】\n【onChangeStart】 : 开始滑动时监听   【Function(RangeValues)】\n【onChangeEnd】 : 滑动结束时监听   【Function(RangeValues)】\n【onChanged】 : 改变时回调   【Function(RangeValues)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(700,350,'Basic Usage of RangeSlider',replace('【values】 : Values   【RangeValues】\n【min】 : Minimum value   【double】\n【max】 : Maximum value   【double】\n【divisions】 : Number of divisions   【int】\n【label】 : Tooltip text   【String】\n【activeColor】 : Active color   【Color】\n【inactiveColor】 : Inactive color   【Color】\n【onChangeStart】 : Listener when sliding starts   【Function(RangeValues)】\n【onChangeEnd】 : Listener when sliding ends   【Function(RangeValues)】\n【onChanged】 : Callback when changed   【Function(RangeValues)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(701,351,'RawChip点击效果',replace('【label】: 中间组件   【Widget】\n【padding】 : 内边距   【EdgeInsetsGeometry】\n【labelPadding】 : label边距   【EdgeInsetsGeometry】\n【shadowColor】: 阴影色   【Color】\n【avatar】: 左侧组件   【Widget】\n【elevation】: 影深   【double】\n【pressElevation】: 点击时影深   【double】\n【onPressed】 : 点击事件  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(702,351,'RawChip Click Effect',replace('【label】: Middle component   【Widget】\n【padding】 : Padding   【EdgeInsetsGeometry】\n【labelPadding】 : Label padding   【EdgeInsetsGeometry】\n【shadowColor】: Shadow color   【Color】\n【avatar】: Left component   【Widget】\n【elevation】: Elevation   【double】\n【pressElevation】: Elevation when pressed   【double】\n【onPressed】 : Click event  【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(703,352,'RawChip选中和删除效果',replace('【selected】: 是否选中   【bool】\n【deleteIconColor】: 尾部图标色   【Color】\n【selectedColor】: 选中色   【Color】\n【deleteIcon】: 尾部组件   【Widget】\n【onSelected】: 选中事件   【Function(bool)】\n【onDeleted】 : 尾部事件  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(704,352,'RawChip Selection and Deletion Effect',replace('【selected】: Whether selected   【bool】\n【deleteIconColor】: Trailing icon color   【Color】\n【selectedColor】: Selected color   【Color】\n【deleteIcon】: Trailing component   【Widget】\n【onSelected】: Selection event   【Function(bool)】\n【onDeleted】 : Trailing event  【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(705,353,'RawGestureDetector基本使用',replace('【behavior】 : 侦测行为   【HitTestBehavior】\n【gestures】 : 手势映射   【Map<Type, GestureRecognizerFactory>】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(706,353,'Basic Usage of RawGestureDetector',replace('【behavior】: Detection behavior 【HitTestBehavior】\n【gestures】: Gesture mapping 【Map<Type, GestureRecognizerFactory>】\n【child】: Child widget 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(707,354,'RawImage基本使用',replace('【image】 : 图片   【ui.Image】\n【width】 : 宽   【int】\n【height】: 高   【int】\n【isAntiAlias】: 是否抗锯齿   【bool】\n【filterQuality】: 过滤质量   【FilterQuality】\n很多属性同Image,详见之.','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(708,354,'Basic Usage of RawImage',replace('【image】: Image   【ui.Image】\n【width】: Width   【int】\n【height】: Height   【int】\n【isAntiAlias】: Whether to anti-alias   【bool】\n【filterQuality】: Filter quality   【FilterQuality】\nMany properties are the same as Image, see details there.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(709,355,'RawGestureDetector基本使用',replace('【onKey】 : 键盘事件   【ValueChanged<RawKeyEvent>】\n【focusNode】 : 焦点   【FocusNode】\n【autofocus】 : 是否自动聚焦   【bool】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(710,355,'Basic Usage of RawGestureDetector',replace('【onKey】 : Keyboard event   【ValueChanged<RawKeyEvent>】\n【focusNode】 : Focus   【FocusNode】\n【autofocus】 : Whether to auto focus   【bool】\n【child】 : Child widget   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(711,356,'RawMagnifier 的简单使用',replace('【size】 : 尺寸  【Size】\n【magnificationScale】 : 放大倍率  【double】\n【focalPointOffset】: 放大内容偏移量   【Offset】\n【decoration】: 发现装饰   【MagnifierDecoration】\n【child】: 子组件   【Widget?】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(712,356,'Simple use of RawMagnifier',replace('【size】: Size 【Size】\n【magnificationScale】: Magnification 【double】\n【focalPointOffset】: Magnification content offset 【Offset】\n【decoration】: Decoration 【MagnifierDecoration】\n【child】: Child component 【Widget?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(713,357,'RawMagnifier 自定义装饰形状','这里自定义五角星装饰形状','zh-cn');
INSERT INTO node_desc VALUES(714,357,'Custom decoration shape for RawMagnifier','Customize the five-pointed star decoration shape here','en-us');
INSERT INTO node_desc VALUES(715,358,'RawMaterialButton基本使用',replace('【child】 : 子组件   【Widget】\n【elevation】 : 影深   【double】\n【fillColor】 : 填充色   【Color】\n【splashColor】 : 水波纹色   【Color】\n【textStyle】 : 文字样式   【TextStyle】\n【onLongPress】 : 长按事件   【Function()】\n【onPressed】 : 点击事件  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(716,358,'Basic Usage of RawMaterialButton',replace('【child】: Child component 【Widget】\n【elevation】: Shadow depth 【double】\n【fillColor】: Fill color 【Color】\n【splashColor】: Ripple color 【Color】\n【textStyle】: Text style 【TextStyle】\n【onLongPress】: Long press event 【Function()】\n【onPressed】: Click event 【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(717,359,'RawMaterialButton高亮和形状',replace('【highlightElevation】 : 高亮影深   【double】\n【shape】 : 形状   【ShapeBorder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(718,359,'Highlight and Shape of RawMaterialButton',replace('【highlightElevation】: Highlight shadow depth 【double】\n【shape】: Shape 【ShapeBorder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(719,360,'RefreshIndicator基本使用',replace('【child】 : 孩子(可滑动)   【Widget】\n【displacement】 : 指示器悬浮高度   【double】\n【color】 : 指示器颜色   【Color】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(720,360,'Basic Usage of RefreshIndicator',replace('【child】 : Child (scrollable)   【Widget】\n【displacement】 : Indicator floating height   【double】\n【color】 : Indicator color   【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(721,361,'RelativePositionedTransition基本使用',replace('【child】 : 孩子组件   【Widget】\n【size】 : 左和上的偏移量   【Size】\n【rect】 : 动画   【Animation<Rect>】\n    PositionedTransition组件只能在Stack内起作用','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(722,361,'Basic Usage of RelativePositionedTransition',replace('【child】: Child component   【Widget】\n【size】: Left and top offset   【Size】\n【rect】: Animation   【Animation<Rect>】\n    PositionedTransition component only works within a Stack','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(723,362,'RenderObjectToWidgetAdapter 介绍',replace('【container】 : 渲染对象   【RenderObjectWithChildMixin<T>】\n【child】 : 子组件   【Widget】\n【debugShortDescription】 : 调试简介   【String】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(724,362,'Introduction to RenderObjectToWidgetAdapter',replace('【container】 : Render object   【RenderObjectWithChildMixin<T>】\n【child】 : Child component   【Widget】\n【debugShortDescription】 : Debugging introduction   【String】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(725,363,'ReorderableListView基本使用',replace('【children】 : 子组件列表   【List<Widget>】\n【header】 : 头部组件   【Widget】\n【padding】 : 内边距   【EdgeInsets】\n【onReorder】 : 调换时回调  【ReorderCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(726,363,'Basic Usage of ReorderableListView',replace('【children】 : List of child components   【List<Widget>】\n【header】 : Header component   【Widget】\n【padding】 : Padding   【EdgeInsets】\n【onReorder】 : Callback when reordering  【ReorderCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(727,364,'ReorderableListView滑动方向',replace('【scrollDirection】 : 滑动方向   【Axis】\n【reverse】 : 是否反向  【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(728,364,'Scroll Direction of ReorderableListView',replace('【scrollDirection】 : Scroll direction   【Axis】\n【reverse】 : Whether to reverse  【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(729,365,'RepaintBoundary基本使用',replace('【child】 : 子组件   【Widget】\n比如上面的绘制视图，即使shouldRepaint为false,在滑动中会也会不断执行paint方法,使用RepaintBoundary可以避免不必要的绘制。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(730,365,'Basic Usage of RepaintBoundary',replace('【child】 : Child component   【Widget】\nFor example, in the above drawing view, even if shouldRepaint is false, the paint method will be continuously executed during scrolling. Using RepaintBoundary can avoid unnecessary drawing.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(731,366,'保存Widget成为图片','通过RenderRepaintBoundary可以获取子组件的Image信息，从而获取字节保存为图片文件。','zh-cn');
INSERT INTO node_desc VALUES(732,366,'Save Widget as Image','Through RenderRepaintBoundary, you can obtain the Image information of the child component, and then save the bytes as an image file.','en-us');
INSERT INTO node_desc VALUES(733,367,'RichText基本使用',replace('【text】 : 文字   【TextSpan】\n    其他属性与Text相同,详见之。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(734,367,'Basic Usage of RichText',replace('【text】: text   【TextSpan】\n    Other properties are the same as Text, see it for details.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(735,368,'RichText包含其他组件','使用WidgetSpan来承载普通组件，作为RichText的内容','zh-cn');
INSERT INTO node_desc VALUES(736,368,'RichText Contains Other Components','Use WidgetSpan to carry ordinary components as the content of RichText','en-us');
INSERT INTO node_desc VALUES(737,369,'RotatedBox基本使用',replace('【child】 : 孩子组件   【Widget】\n【quarterTurns】 : 旋转多少个90°   【int】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(738,369,'Basic Usage of RotatedBox',replace('【child】 : Child widget   【Widget】\n【quarterTurns】 : How many 90° to rotate   【int】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(739,370,'RotationTransition基本使用',replace('【child】 : 孩子组件   【Widget】\n【turns】 : 是否消失   【Animation<double>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(740,370,'Basic Usage of RotationTransition',replace('【child】 : Child component   【Widget】\n【turns】 : Whether to disappear   【Animation<double>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(741,371,'Row基本使用',replace('【children】 : 组件列表   【List<Widget>】\n【mainAxisAlignment】 : 主轴对齐   【MainAxisAlignment】\n【crossAxisAlignment】 : 交叉轴对齐   【CrossAxisAlignment】\n【textBaseline】 : 文字基线   【TextBaseline】\n【verticalDirection】 : 竖直方向   【VerticalDirection】\n【mainAxisSize】 : 主轴尺寸   【MainAxisSize】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(742,371,'Basic Usage of Row',replace('【children】: Component list   【List<Widget>】\n【mainAxisAlignment】: Main axis alignment   【MainAxisAlignment】\n【crossAxisAlignment】: Cross axis alignment   【CrossAxisAlignment】\n【textBaseline】: Text baseline   【TextBaseline】\n【verticalDirection】: Vertical direction   【VerticalDirection】\n【mainAxisSize】: Main axis size   【MainAxisSize】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(743,372,'SafeArea 使用测试',replace('【left】 : 左侧是否启用   【bool】\n【top】 : 上方是否启用   【bool】\n【bottom】 : 下方是否启用   【bool】\n【right】 : 右侧是否启用   【bool】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(744,372,'SafeArea Usage Test',replace('【left】: Whether to enable the left side   【bool】\n【top】: Whether to enable the top   【bool】\n【bottom】: Whether to enable the bottom   【bool】\n【right】: Whether to enable the right side   【bool】\n【child】: Child widget   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(745,373,'Scaffold基本用法',replace('【appBar】 : 头部组件   【PreferredSizeWidget】\n【bottomNavigationBar】 : 底部组件   【Widget】\n【drawer】 : 左侧滑组件   【Widget】\n【endDrawer】 : 右侧滑组件   【Widget】\n【body】 : 内容组件   【Widget】\n【backgroundColor】 : 背景色   【Color】\n【floatingActionButton】 : 浮动按钮   【Widget】\n【floatingActionButtonLocation】 : 浮动按钮位置   【FloatingActionButtonLocation】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(746,373,'Basic Usage of Scaffold',replace('【appBar】: Header component 【PreferredSizeWidget】\n【bottomNavigationBar】: Bottom component 【Widget】\n【drawer】: Left sliding component 【Widget】\n【endDrawer】: Right sliding component 【Widget】\n【body】: Content component 【Widget】\n【backgroundColor】: Background color 【Color】\n【floatingActionButton】: Floating button 【Widget】\n【floatingActionButtonLocation】: Floating button position 【FloatingActionButtonLocation】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(747,374,'ScaleTransition基本使用',replace('【child】 : 孩子组件   【Widget】\n【scale】 : 动画   【Animation<double>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(748,374,'Basic Usage of ScaleTransition',replace('【child】: Child component   【Widget】\n【scale】: Animation   【Animation<double>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(749,375,'Scrollable的基本使用',replace('【viewportBuilder】 : 视口构造器   【ViewportBuilder】\n【axisDirection】: 滑动方向   【AxisDirection】\n【controller】: 滑动控制器   【ScrollController】\n【dragStartBehavior】: t拖动行为   【DragStartBehavior】\n【physics】: 滚动现象   【ScrollPhysics】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(750,375,'Basic Usage of Scrollable',replace('【viewportBuilder】: Viewport Constructor   【ViewportBuilder】\n【axisDirection】: Scroll Direction   【AxisDirection】\n【controller】: Scroll Controller   【ScrollController】\n【dragStartBehavior】: Drag Behavior   【DragStartBehavior】\n【physics】: Scroll Physics   【ScrollPhysics】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(751,376,'Scrollbar基本使用',replace('【child】 : 子组件   【Widget】\n【controller】 : 控制器  【ScrollController】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(752,376,'Basic Usage of Scrollbar',replace('【child】: Child widget 【Widget】\n【controller】: Controller 【ScrollController】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(753,377,'ScrollConfiguration基本使用',replace('【child】 : 子组件   【Widget】\n【behavior】 : 滑动行为  【ScrollBehavior】\n    可以使用ScrollConfiguration让ListView无蓝色阴影','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(754,377,'Basic Usage of ScrollConfiguration',replace('【child】: Child component 【Widget】\n【behavior】: Scroll behavior 【ScrollBehavior】\n    ScrollConfiguration can be used to remove the blue shadow of ListView','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(755,378,'ScrollView 介绍',replace('【reverse】 : 是否反向   【bool】\n【scrollDirection】 : 滑动方向   【Axis】\n【cacheExtent】 : 缓存长   【double】\n【dragStartBehavior】 : 拖动行为   【DragStartBehavior】\n【clipBehavior】 : 裁剪行为   【ClipBehavior】\n【controller】 : 控制器   【ScrollController】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(756,378,'Introduction to ScrollView',replace('【reverse】: Whether to reverse 【bool】\n【scrollDirection】: Scroll direction 【Axis】\n【cacheExtent】: Cache length 【double】\n【dragStartBehavior】: Drag behavior 【DragStartBehavior】\n【clipBehavior】: Clip behavior 【ClipBehavior】\n【controller】: Controller 【ScrollController】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(757,379,'SelectableText基本使用',replace('【入参】 : 显示文字   【String】\n【style】 : 文字样式   【TextStyle】\n【cursorRadius】 : 光标半径   【Radius】\n【cursorColor】 : 光标颜色   【Color】\n【cursorWidth】 : 光标宽度   【double】\n【showCursor】 : 是否显示光标   【bool】\n【autofocus】 : 自动聚焦   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(758,379,'Basic Usage of SelectableText',replace('【Parameter】 : Display text   【String】\n【style】 : Text style   【TextStyle】\n【cursorRadius】 : Cursor radius   【Radius】\n【cursorColor】 : Cursor color   【Color】\n【cursorWidth】 : Cursor width   【double】\n【showCursor】 : Whether to show the cursor   【bool】\n【autofocus】 : Auto focus   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(759,380,'SelectableText对齐属性',replace('【textAlign】 : 对齐方式*6   【textAlign】\n【textDirection】 : 文字方向*2   【TextDirection】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(760,380,'Alignment Properties of SelectableText',replace('【textAlign】 : Alignment method*6   【textAlign】\n【textDirection】 : Text direction*2   【TextDirection】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(761,381,'径向渐变着色',replace('【child】 : 孩子组件   【Widget】\n【shaderCallback】 : 着色器回调   【ShaderCallback】\n【blendMode】 : 混色模式   【BlendMode】\n    通过RadialGradient#createShader创建径向渐变着色器。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(762,381,'Radial Gradient Shading',replace('【child】: Child component   【Widget】\n【shaderCallback】: Shader callback   【ShaderCallback】\n【blendMode】: Blending mode   【BlendMode】\n    Create a radial gradient shader through RadialGradient#createShader.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(763,382,'线性渐变着色',replace('通过LinearGradient#createShader创建线性渐变着色器\n着色器相关知识详见【绘制专辑】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(764,382,'Linear Gradient Shading',replace('Create a linear gradient shader through LinearGradient#createShader\nFor more information on shaders, see 【Drawing Album】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(765,383,'NestedScrollViewViewport 介绍',replace('【offset】 : *偏移   【ViewportOffset】\n【axisDirection】 : 轴向   【AxisDirection】\n【crossAxisDirection】 : 交叉轴向   【AxisDirection】\n【slivers】 : 子组件   【List<Widget>】\n【clipBehavior】 : 裁剪行为   【Clip】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(766,383,'Introduction to NestedScrollViewViewport',replace('【offset】: *offset   【ViewportOffset】\n【axisDirection】: Axis direction   【AxisDirection】\n【crossAxisDirection】: Cross axis direction   【AxisDirection】\n【slivers】: Child components   【List<Widget>】\n【clipBehavior】: Clip behavior   【Clip】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(767,384,'SimpleDialog基本使用',replace('【title】 : 顶部组件   【Widget】\n【children】 : 子组件列表  【List<Widget>】\n【titlePadding】 : 顶部内边距  【EdgeInsetsGeometry】\n【contentPadding】 : 内容内边距  【EdgeInsetsGeometry】\n【backgroundColor】 : 背景色  【Color】\n【elevation】 : 影深  【double】\n【shape】 : 形状   【ShapeBorder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(768,384,'Basic Usage of SimpleDialog',replace('【title】 : Top component   【Widget】\n【children】 : List of child components  【List<Widget>】\n【titlePadding】 : Top padding  【EdgeInsetsGeometry】\n【contentPadding】 : Content padding  【EdgeInsetsGeometry】\n【backgroundColor】 : Background color  【Color】\n【elevation】 : Shadow depth  【double】\n【shape】 : Shape   【ShapeBorder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(769,385,'SimpleDialogOption基本使用',replace('【child】 : 子组件   【Widget】\n【onPressed】 : 点击事件  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(770,385,'Basic Usage of SimpleDialogOption',replace('【child】 : Child widget   【Widget】\n【onPressed】 : Click event  【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(771,386,'SingleChildScrollView基本使用',replace('【child】 : 子组件   【Widget】\n【padding】 : 内边距  【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(772,386,'Basic Usage of SingleChildScrollView',replace('【child】: Child widget 【Widget】\n【padding】: Padding 【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(773,387,'SingleChildScrollView滑动方向',replace('【scrollDirection】 : 滑动方向   【Axis】\n【reverse】 : 是否反向   【Axis】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(774,387,'Scroll Direction of SingleChildScrollView',replace('【scrollDirection】: Scroll direction 【Axis】\n【reverse】: Whether to reverse 【Axis】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(775,388,'基本使用','【child】 : 组件   【Widget】','zh-cn');
INSERT INTO node_desc VALUES(776,388,'Basic Usage','【child】 : Component   【Widget】','en-us');
INSERT INTO node_desc VALUES(777,389,'SizedBox基本使用',replace('【child】 : 孩子组件   【Widget】\n【width】 : 宽   【double】\n【height】 : 高   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(778,389,'Basic Usage of SizedBox',replace('【child】 : Child component   【Widget】\n【width】 : Width   【double】\n【height】 : Height   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(779,390,'SizedOverflowBox基本使用',replace('【child】 : 孩子组件   【Widget】\n【size】 : 尺寸偏移   【Size】\n【alignment】 : 对齐方式   【AlignmentGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(780,390,'Basic Usage of SizedOverflowBox',replace('【child】: Child component   【Widget】\n【size】: Size offset   【Size】\n【alignment】: Alignment method   【AlignmentGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(781,391,'SizeTransition基本使用',replace('【child】 : 孩子组件   【Widget】\n【axis】 : 轴向*2   【Axis】\n【sizeFactor】 : 动画   【Animation<double>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(782,391,'Basic Usage of SizeTransition',replace('【child】: Child component   【Widget】\n【axis】: Axis*2   【Axis】\n【sizeFactor】: Animation   【Animation<double>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(783,392,'Slider基本使用',replace('【value】 : 数值   【double】\n【min】 : 最小值   【double】\n【max】 : 最大值   【double】\n【activeColor】 : 激活颜色   【Color】\n【inactiveColor】 : 非激活颜色   【Color】\n【onChanged】 : 改变时回调   【Function(double)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(784,392,'Basic Usage of Slider',replace('【value】 : value   【double】\n【min】 : minimum value   【double】\n【max】 : maximum value   【double】\n【activeColor】 : active color   【Color】\n【inactiveColor】 : inactive color   【Color】\n【onChanged】 : callback when changed   【Function(double)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(785,393,'Slider的分段与标签',replace('【divisions】 : 分段数   【int】\n【label】 : 提示气泡文字   【String】\n【onChangeStart】 : 开始滑动时监听   【Function(double)】\n【onChangeEnd】 : 滑动结束时监听   【Function(double)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(786,393,'Slider Segments and Labels',replace('【divisions】 : number of segments   【int】\n【label】 : tooltip text   【String】\n【onChangeStart】 : listener when sliding starts   【Function(double)】\n【onChangeEnd】 : listener when sliding ends   【Function(double)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(787,394,'SliderTheme使用',replace('可通过SliderTheme.of获取Slider主题数据对象，其中包含大量属性用于对Slider的设定。"\n可以为ButtonTheme【后代】的按钮组件设置默认样式，包括颜色、形状、尺寸等。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(788,394,'SliderTheme Usage',replace('You can obtain the Slider theme data object through SliderTheme.of, which contains a large number of properties for setting the Slider.\nYou can set the default style for the button components of ButtonTheme【descendants】, including color, shape, size, etc.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(789,395,'SliderTheme对Slider的样式定制',replace('通过thumbShape和valueIndicatorShape可以对Slider进行样式定制。"\n注: 本例参考flutter-gallery中的SlideDemo','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(790,395,'SliderTheme Customization for Slider',replace('You can customize the style of the Slider through thumbShape and valueIndicatorShape.\nNote: This example refers to the SlideDemo in flutter-gallery','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(791,396,'SlideTransition 基本使用',replace('【child】 : 孩子组件   【Widget】\n【textDirection】 : x轴方向  【TextDirection】\n【position】 : 动画   【Animation<Offset>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(792,396,'Basic Usage of SlideTransition',replace('【child】: Child component   【Widget】\n【textDirection】: X-axis direction   【TextDirection】\n【position】: Animation   【Animation<Offset>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(793,397,'SliverAnimatedList基本使用',replace('【itemBuilder】 : item构造器   【AnimatedListItemBuilder】\n【initialItemCount】 : 初始item个数   【int】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(794,397,'Basic Usage of SliverAnimatedList',replace('【itemBuilder】: Item builder   【AnimatedListItemBuilder】\n【initialItemCount】: Initial item count   【int】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(795,398,'SliverAppBar基本使用',replace('【leading】 : 左侧组件   【Widget】\n【title】 : 中间组件   【Widget】\n【actions】 : 尾部组件列表   【List<Widget>】\n【floating】 : 是否浮动   【bool】\n【pinned】 : 是否顶部停留   【bool】\n【snap】 : 是否半收展   【bool】\n【bottom】 : 底部组件   【PreferredSizeWidget】\n【expandedHeight】 : 延展高度   【double】\n【elevation】 : 影深   【double】\n【flexibleSpace】 : 延展空间   【FlexibleSpaceBar】\n【backgroundColor】 : 背景色   【Color】\n【controller】 : 控制器   【ScrollController】\n   snap为true时必需floating为true','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(796,398,'Basic Usage of SliverAppBar',replace('【leading】: Left component   【Widget】\n【title】: Center component   【Widget】\n【actions】: List of trailing components   【List<Widget>】\n【floating】: Whether to float   【bool】\n【pinned】: Whether to stay at the top   【bool】\n【snap】: Whether to semi-collapse   【bool】\n【bottom】: Bottom component   【PreferredSizeWidget】\n【expandedHeight】: Expanded height   【double】\n【elevation】: Shadow depth   【double】\n【flexibleSpace】: Expanded space   【FlexibleSpaceBar】\n【backgroundColor】: Background color   【Color】\n【controller】: Controller   【ScrollController】\n   When snap is true, floating must be true','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(797,399,'SliverConstrainedCrossAxis 基本使用',replace('【maxExtent】 : 大小   【double】\n【sliver】 : 子组件   【Widget?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(798,399,'Basic Usage of SliverConstrainedCrossAxis',replace('【maxExtent】 : size   【double】\n【sliver】 : child component   【Widget?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(799,400,'SliverCrossAxisExpanded 基本使用',replace('【flex】 : 占比   【int】\n【sliver】 : 子组件   【Widget?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(800,400,'Basic Usage of SliverCrossAxisExpanded',replace('【flex】: Ratio   【int】\n【sliver】: Child Component   【Widget?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(801,401,'SliverCrossAxisGroup 基本使用','【slivers】 : 子组件列表   【List<Widget>】','zh-cn');
INSERT INTO node_desc VALUES(802,401,'Basic Usage of SliverCrossAxisGroup','【slivers】 : List of child components   【List<Widget>】','en-us');
INSERT INTO node_desc VALUES(803,402,'SliverFillRemaining基本使用',replace('【hasScrollBody】 : 是否具有滚动主体   【bool】\n【fillOverscroll】 : 是否可填充滚动区域   【bool】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(804,402,'Basic Usage of SliverFillRemaining',replace('【hasScrollBody】: Whether it has a scroll body 【bool】\n【fillOverscroll】: Whether it can fill the scroll area 【bool】\n【child】: Child component 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(805,403,'SliverFillViewport基本使用',replace('【viewportFraction】 : 视口分率   【double】\n【delegate】 : 孩子代理   【SliverChildDelegate】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(806,403,'Basic Usage of SliverFillViewport',replace('【viewportFraction】 : Viewport Fraction   【double】\n【delegate】 : Child Delegate   【SliverChildDelegate】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(807,404,'SliverFixedExtentList基本使用',replace('【itemExtent】 : 主轴方向强迫长度   【double】\n【delegate】 : 孩子代理   【SliverChildDelegate】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(808,404,'Basic Usage of SliverFixedExtentList',replace('【itemExtent】: Forced length in the main axis   【double】\n【delegate】: Child delegate   【SliverChildDelegate】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(809,405,'SliverList基本使用',replace('SliverGrid.count 指定轴向数量构造\nSliverGrid.extent 指定轴向长度构造\n属性特征同GridView,可详见之','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(810,405,'Basic Usage of SliverList',replace('SliverGrid.count constructs with specified axial count\nSliverGrid.extent constructs with specified axial length\nThe attribute characteristics are the same as GridView, see it for details','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(811,406,'SliverIgnorePointer基本使用',replace('【sliver】 : sliver组件   【Widget】\n【ignoring】 : 是否忽略事件   【bool】,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(812,406,'Basic Usage of SliverIgnorePointer',replace('【sliver】: sliver component   【Widget】\n【ignoring】: whether to ignore events   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(813,407,'SliverLayoutBuilder基本使用','【builder】 : 组件构造器   【SliverLayoutWidgetBuilder】','zh-cn');
INSERT INTO node_desc VALUES(814,407,'Basic Usage of SliverLayoutBuilder','【builder】: Component Builder   【SliverLayoutWidgetBuilder】','en-us');
INSERT INTO node_desc VALUES(815,408,'SliverList基本使用','【delegate】 : 孩子代理   【SliverChildDelegate】','zh-cn');
INSERT INTO node_desc VALUES(816,408,'Basic Usage of SliverList','【delegate】: Child delegate   【SliverChildDelegate】','en-us');
INSERT INTO node_desc VALUES(817,409,'SliverMainAxisGroup 基本使用',replace('【slivers】 : 子组件列表   【List<Widget>】\n可结合 SliverPersistentHeader 实现分组，标题吸顶效果。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(818,409,'Basic Usage of SliverMainAxisGroup',replace('【slivers】: List of child components 【List<Widget>】\nCan be combined with SliverPersistentHeader to achieve grouping and sticky header effects.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(819,410,'SliverOpacity基本使用',replace('【opacity】 : 透明度   【double】\n【sliver】 : 子组件  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(820,410,'Basic Usage of SliverOpacity',replace('【opacity】: Opacity 【double】\n【sliver】: Child Component 【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(821,411,'SliverOverlapAbsorber基本使用',replace('【sliver】 : 子组件   【Widget】\n【handle】 : *处理器   【SliverOverlapAbsorberHandle】\n如果不使用SliverOverlapAbsorber和SliverOverlapInjector组件,NestedScrollView的内容会和头部栏重叠。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(822,411,'Basic Usage of SliverOverlapAbsorber',replace('【sliver】 : Child component   【Widget】\n【handle】 : *Handler   【SliverOverlapAbsorberHandle】\nIf the SliverOverlapAbsorber and SliverOverlapInjector components are not used, the content of the NestedScrollView will overlap with the header bar.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(823,412,'SliverOverlapInjector基本使用',replace('【sliver】 : 子组件   【Widget】\n【handle】 : *处理器   【SliverOverlapAbsorberHandle】\n如果不使用SliverOverlapAbsorber和SliverOverlapInjector组件,NestedScrollView的内容会和头部栏重叠。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(824,412,'Basic Usage of SliverOverlapInjector',replace('【sliver】 : Child component   【Widget】\n【handle】 : *Handler   【SliverOverlapAbsorberHandle】\nIf the SliverOverlapAbsorber and SliverOverlapInjector components are not used, the content of the NestedScrollView will overlap with the header bar.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(825,413,'SliverPadding基本使用',replace('【sliver】 : 子组件   【Widget】\n【padding】 : 内边距  【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(826,413,'Basic Usage of SliverPadding',replace('【sliver】: Child component   【Widget】\n【padding】: Padding  【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(827,414,'SliverPersistentHeader基本使用',replace('【delegate】 : 代理   【SliverPersistentHeaderDelegate】\n【floating】 : 是否浮动   【bool】\n【pinned】 : 是否顶部停留   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(828,414,'Basic Usage of SliverPersistentHeader',replace('【delegate】: Delegate 【SliverPersistentHeaderDelegate】\n【floating】: Whether to float 【bool】\n【pinned】: Whether to stay at the top 【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(829,415,'SliverPrototypeExtentList基本使用',replace('【prototypeItem】 : 主轴方向尺寸组件   【Widget】\n【delegate】 : 孩子代理   【SliverChildDelegate】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(830,415,'Basic Usage of SliverPrototypeExtentList',replace('【prototypeItem】 : Main axis size component   【Widget】\n【delegate】 : Child delegate   【SliverChildDelegate】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(831,416,'SliverToBoxAdapter基本使用','【child】 : 子组件   【Widget】','zh-cn');
INSERT INTO node_desc VALUES(832,416,'Basic Usage of SliverToBoxAdapter','【child】: Child component   【Widget】','en-us');
INSERT INTO node_desc VALUES(833,417,'SliverWithKeepAliveWidget 介绍','【key】 : 键   【Key】','zh-cn');
INSERT INTO node_desc VALUES(834,417,'Introduction to SliverWithKeepAliveWidget','【key】 : key   【Key】','en-us');
INSERT INTO node_desc VALUES(835,418,'SnackBar基本使用',replace('【content】 : 中间内容组件   【Widget】\n【action】 : 右侧按钮   【SnackBarAction】\n【duration】 : 持续时长   【Widget】\n【backgroundColor】 : 背景色   【Color】\n【elevation】 : 影深   【double】\n【shape】 : 形状   【ShapeBorder】\n【onVisible】 : 显示时回调  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(836,418,'Basic Usage of SnackBar',replace('【content】: Middle content component 【Widget】\n【action】: Right side button 【SnackBarAction】\n【duration】: Duration 【Widget】\n【backgroundColor】: Background color 【Color】\n【elevation】: Shadow depth 【double】\n【shape】: Shape 【ShapeBorder】\n【onVisible】: Callback when shown 【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(837,419,'SnackBarAction基本使用',replace('【label】 :  标签  【String】\n【textColor】 : 文字颜色   【Color】\n【disabledTextColor】 : 文字失效色   【Color】\n【onPressed】 : 点击回调  【Function()】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(838,419,'Basic Usage of SnackBarAction',replace('【label】 :  Label  【String】\n【textColor】 :  Text Color   【Color】\n【disabledTextColor】 :  Disabled Text Color   【Color】\n【onPressed】 :  Click Callback  【Function()】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(839,420,'Spacer基本使用','一个Spacer会占据可延伸区域','zh-cn');
INSERT INTO node_desc VALUES(840,420,'Basic Usage of Spacer','A Spacer will occupy the extendable area','en-us');
INSERT INTO node_desc VALUES(841,421,'多个Spacer空间分配','【flex】 : 剩余空间分配占比   【int】','zh-cn');
INSERT INTO node_desc VALUES(842,421,'Space Allocation with Multiple Spacers','【flex】 : Proportion of remaining space allocation   【int】','en-us');
INSERT INTO node_desc VALUES(843,422,'Stack基本使用',replace('【children】 : 组件列表   【List<Widget>】\n【textDirection】 : 孩子排布方向   【MainAxisAlignment】\n【alignment】 : 对齐方式   【AlignmentGeometry】\n【overflow】 : 溢出模式   【Overflow】\n【fit】 : 适应模式   【StackFit】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(844,422,'Basic Usage of Stack',replace('【children】: Component list   【List<Widget>】\n【textDirection】: Child arrangement direction   【MainAxisAlignment】\n【alignment】: Alignment method   【AlignmentGeometry】\n【overflow】: Overflow mode   【Overflow】\n【fit】: Fit mode   【StackFit】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(845,423,'Stack和Positioned结合使用','Positioned组件只能用与Stack中，可以指定左上右下的距离对某个组件进行位置精确安放。','zh-cn');
INSERT INTO node_desc VALUES(846,423,'Combined Usage of Stack and Positioned','The Positioned component can only be used within a Stack, allowing precise placement of a component by specifying distances from the top, left, right, and bottom.','en-us');
INSERT INTO node_desc VALUES(847,424,'StatefulBuilder基本使用','【builder】 : 组件构造器   【StatefulWidgetBuilder】','zh-cn');
INSERT INTO node_desc VALUES(848,424,'Basic Usage of StatefulBuilder','【builder】 : Component Constructor   【StatefulWidgetBuilder】','en-us');
INSERT INTO node_desc VALUES(849,425,'StatusTransitionWidget 介绍',replace('【animation】 : 子组件   【Animation<double>】\n这里自定义 ColorStatusTransitionWidget 进行使用，在动画器的状态改变时构建不同的颜色。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(850,425,'Introduction to StatusTransitionWidget',replace('【animation】 : Child component   【Animation<double>】\nHere, a custom ColorStatusTransitionWidget is used to build different colors when the state of the animator changes.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(851,426,'Stepper基本使用',replace('【steps】 : 步骤列表   【List<Step>】\n【currentStep】 : 当前步骤   【double】\n【onStepTapped】 : 点击回调   【ValueChanged<int>】\n【onStepCancel】 : 上一步回调  【VoidCallback】\n【controlsBuilder】 : 控制器构造  【ControlsWidgetBuilder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(852,426,'Basic Usage of Stepper',replace('【steps】: Step list 【List<Step>】\n【currentStep】: Current step 【double】\n【onStepTapped】: Click callback 【ValueChanged<int>】\n【onStepCancel】: Previous step callback 【VoidCallback】\n【controlsBuilder】: Controller construction 【ControlsWidgetBuilder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(853,427,'Stepper的方向','【type】 : 方向   【StepperType】','zh-cn');
INSERT INTO node_desc VALUES(854,427,'Direction of Stepper','【type】: Direction 【StepperType】','en-us');
INSERT INTO node_desc VALUES(855,428,'StreamBuilder基本使用',replace('【stream】 : 子组件   【Stream<T>】\n【initialData】 : 初始数据   【T】\n【builder】 : 点击事件  【AsyncWidgetBuilder<T>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(856,428,'Basic Usage of StreamBuilder',replace('【stream】 : Child component   【Stream<T>】\n【initialData】 : Initial data   【T】\n【builder】 : Click event  【AsyncWidgetBuilder<T>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(857,429,'Switch基础用法',replace('【inactiveThumbColor】 : 未选中小圈颜色   【Color】\n【inactiveTrackColor】 : 未选中滑槽颜色   【Color】\n【activeColor】 : 选中时小圈颜色   【Color】\n【activeTrackColor】 : 选中时滑槽颜色   【Color】\n【onChanged】 : 切换回调   【Function(double)】"\n  onChanged时,回调true、null、false三种状态','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(858,429,'Basic Usage of Switch',replace('【inactiveThumbColor】 : Unselected small circle color   【Color】\n【inactiveTrackColor】 : Unselected track color   【Color】\n【activeColor】 : Selected small circle color   【Color】\n【activeTrackColor】 : Selected track color   【Color】\n【onChanged】 : Toggle callback   【Function(double)】\nWhen onChanged, callbacks for true, null, and false states','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(859,430,'Switch图片',replace('【inactiveThumbImage】 : 未选中小圈图片   【ImageProvider】\n【activeThumbImage】 : 选中小圈图片   【ImageProvider】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(860,430,'Switch Image',replace('【inactiveThumbImage】 : Unselected small circle image   【ImageProvider】\n【activeThumbImage】 : Selected small circle image   【ImageProvider】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(861,431,'SwitchListTile的基本表现如下',replace('【secondary】: 左侧组件   【Widget】\n【title】: 中间上组件   【Widget】\n【subtitle】: 中间下组件   【Widget】\n【inactiveThumbColor】: 未选中时圆圈颜色   【Color】\n【inactiveTrackColor】: 未选中滑槽颜色   【Color】\n【activeColor】: 选中时圆圈颜色   【Color】\n【activeTrackColor】: 选中滑槽颜色   【Color】\n【onChanged】: 选中事件   【Function(bool)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(862,431,'Basic representation of SwitchListTile',replace('【secondary】: Left component   【Widget】\n【title】: Top middle component   【Widget】\n【subtitle】: Bottom middle component   【Widget】\n【inactiveThumbColor】: Circle color when not selected   【Color】\n【inactiveTrackColor】: Track color when not selected   【Color】\n【activeColor】: Circle color when selected   【Color】\n【activeTrackColor】: Track color when selected   【Color】\n【onChanged】: Selection event   【Function(bool)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(863,432,'SwitchListTile的选中效果',replace('【selected】: 是否选中   【bool】\n【inactiveThumbImage】: 未选中时圆圈图片   【ImageProvider】\n【activeThumbImage】: 选中时圆圈图片   【ImageProvider】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(864,432,'Selection effect of SwitchListTile',replace('【selected】: Whether selected   【bool】\n【inactiveThumbImage】: Circle image when not selected   【ImageProvider】\n【activeThumbImage】: Circle image when selected   【ImageProvider】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(865,433,'SwitchListTile的密排属性','【dense】: 是否密排   【bool】','zh-cn');
INSERT INTO node_desc VALUES(866,433,'Dense property of SwitchListTile','【dense】: Whether dense   【bool】','en-us');
INSERT INTO node_desc VALUES(867,434,'Tab基本使用',replace('【child】 : 子组件   【Widget】\n【text】 : 文字   【String】\n【icon】 : 下方组件  【Widgit】\n    text和child不能同时存在','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(868,434,'Basic Usage of Tab',replace('【child】: Child component 【Widget】\n【text】: Text 【String】\n【icon】: Bottom component 【Widget】\n    text and child cannot exist simultaneously','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(869,435,'TabBar基本使用',replace('【controller】 : 控制器   【TabController】\n【indicatorColor】 : 指示器颜色   【指示器颜色】\n【indicatorWeight】 : 指示器高   【double】\n【indicatorPadding】 : 指示器边距   【EdgeInsetsGeometry】\n【labelStyle】 : 页签文字样式   【TextStyle】\n【unselectedLabelStyle】 : 未选中文字样式   【TextStyle】\n【isScrollable】 : 是否可滑动   【bool】\n【onTap】 : 页签点击回调   【Function(int)】\n【tabs】 : 标签组件   【List<Widget>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(870,435,'Basic Usage of TabBar',replace('【controller】 : Controller   【TabController】\n【indicatorColor】 : Indicator Color   【Indicator Color】\n【indicatorWeight】 : Indicator Height   【double】\n【indicatorPadding】 : Indicator Margin   【EdgeInsetsGeometry】\n【labelStyle】 : Tab Text Style   【TextStyle】\n【unselectedLabelStyle】 : Unselected Text Style   【TextStyle】\n【isScrollable】 : Whether Scrollable   【bool】\n【onTap】 : Tab Click Callback   【Function(int)】\n【tabs】 : Tab Components   【List<Widget>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(871,436,'通过设置Theme可实现无水波纹','将Theme关于水波纹的颜色设置为透明即可。','zh-cn');
INSERT INTO node_desc VALUES(872,436,'Achieve No Ripple Effect by Setting Theme','Set the ripple color in the Theme to transparent.','en-us');
INSERT INTO node_desc VALUES(873,437,'TabBarView需要与TabBar联用',replace('【controller】 : 控制器   【TabController】\n【children】 : 孩子们   【指示器颜色】\n【physics】 : 表现   【ScrollPhysics】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(874,437,'TabBarView needs to be used in conjunction with TabBar',replace('【controller】 : Controller   【TabController】\n【children】 : Children   【Indicator Color】\n【physics】 : Behavior   【ScrollPhysics】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(875,438,'Table基本使用',replace('【children】 : 组件列表   【List<Widget>】\n【columnWidths】 : 列宽   【Map<int, TableColumnWidth>】\n【defaultColumnWidth】 : 默认列宽  【TableColumnWidth】\n【border】 : 边线   【TableBorder】\n【textDirection】 : 文字方向   【TextDirection】\n【defaultVerticalAlignment】 : 单元格竖直方向对齐模式   【TableCellVerticalAlignment】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(876,438,'Basic Usage of Table',replace('【children】: Component list 【List<Widget>】\n【columnWidths】: Column widths 【Map<int, TableColumnWidth>】\n【defaultColumnWidth】: Default column width 【TableColumnWidth】\n【border】: Border 【TableBorder】\n【textDirection】: Text direction 【TextDirection】\n【defaultVerticalAlignment】: Vertical alignment mode of cells 【TableCellVerticalAlignment】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(877,439,'TableCell基本使用',replace('【child】 : 组件   【Widget】\n【verticalAlignment】 : 竖直对齐方式   【TableCellVerticalAlignment】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(878,439,'Basic Usage of TableCell',replace('【child】: Component   【Widget】\n【verticalAlignment】: Vertical Alignment   【TableCellVerticalAlignment】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(879,440,'TableRowInkWell基本事件',replace('【child】 : 子组件   【Widget】\n【onTap】 : 点击事件   【Function()】\n【onDoubleTap】 : 双击事件   【Function()】\n【onLongPress】 : 长按事件   【Function()】\n【onHighlightChanged】 : 高亮变化回调   【Function(bool)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(880,440,'TableRowInkWell Basic Events',replace('【child】 : Child component   【Widget】\n【onTap】 : Click event   【Function()】\n【onDoubleTap】 : Double-click event   【Function()】\n【onLongPress】 : Long-press event   【Function()】\n【onHighlightChanged】 : Highlight change callback   【Function(bool)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(881,441,'TabPageSelector基本使用',replace('【controller】 : 控制器   【TabController】\n【indicatorSize】: 指示器大小   【double】\n【selectedColor】: 选中色   【Color】\n【color】: 颜色    【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(882,441,'Basic Usage of TabPageSelector',replace('【controller】 : Controller   【TabController】\n【indicatorSize】: Indicator Size   【double】\n【selectedColor】: Selected Color   【Color】\n【color】: Color    【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(883,442,'TabPageSelectorIndicator基本使用',replace('【size】: 大小   【double】\n【backgroundColor】: 背景色   【Color】\n【borderColor】: 边线色    【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(884,442,'Basic Usage of TabPageSelectorIndicator',replace('【size】: size   【double】\n【backgroundColor】: background color   【Color】\n【borderColor】: border color    【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(885,443,'监听点击组件内部和外部',replace('【enabled】 : 是否可用   【bool】\n【onTapOutside】 : 点击外界监听   【TapRegionCallback?】\n【onTapInside】 : 点击内部监听   【TapRegionCallback?】\n【groupId】 : 点击区域组标识   【Object?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(886,443,'Listen to clicks inside and outside the component',replace('【enabled】 : Whether it is available   【bool】\n【onTapOutside】 : Listen to clicks outside   【TapRegionCallback?】\n【onTapInside】 : Listen to clicks inside   【TapRegionCallback?】\n【groupId】 : Click region group identifier   【Object?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(887,444,'文字的基本样式',replace('【入参】 : 文字  【String】\n【style】: 文字样式   【TextStyle】\n【color】: 文字样式   【Color】\n【fontSize】: 文字大小   【double】\n【fontWeight】: 字重   【FontWeight】\n【fontStyle】: 字体样式   【fontStyle】\n【letterSpacing】: 字距   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(888,444,'Basic Text Styles',replace('【Parameter】 : Text  【String】\n【style】: Text Style   【TextStyle】\n【color】: Text Color   【Color】\n【fontSize】: Font Size   【double】\n【fontWeight】: Font Weight   【FontWeight】\n【fontStyle】: Font Style   【fontStyle】\n【letterSpacing】: Letter Spacing   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(889,445,'文字阴影',replace('【shadows】 : 文字  【List<Shadow>】\n【backgroundColor】: 背景颜色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(890,445,'Text Shadow',replace('【shadows】 : Text Shadows  【List<Shadow>】\n【backgroundColor】: Background Color   【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(891,446,'文字装饰线',replace('【fontFamily】 : 文字字体  【String】\n【decoration】: 装饰线   【TextDecoration】\n【decorationColor】: 装饰线颜色   【Color】\n【decorationThickness】: 装饰线粗   【double】\n【decorationStyle】: 装饰线样式   【TextDecorationStyle】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(892,446,'Text Decoration',replace('【fontFamily】 : Font Family  【String】\n【decoration】: Decoration Line   【TextDecoration】\n【decorationColor】: Decoration Line Color   【Color】\n【decorationThickness】: Decoration Line Thickness   【double】\n【decorationStyle】: Decoration Line Style   【TextDecorationStyle】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(893,447,'文字对齐方式',replace('【textAlign】: 对齐方式   【TextAlign】\n下面依次是:left、right、center、justify、start、end,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(894,447,'Text Alignment',replace('【textAlign】: Alignment   【TextAlign】\nThe following are: left, right, center, justify, start, end.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(895,448,'文字方向与最大行数',replace('【maxLines】 : 最大行数  【int】\n【textDirection】 : 文字方向  【TextDirection】\n下面依次是:rtl、ltr,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(896,448,'Text Direction and Maximum Lines',replace('【maxLines】 : Maximum Lines  【int】\n【textDirection】 : Text Direction  【TextDirection】\nThe following are: rtl, ltr.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(897,449,'是否包裹与越界效果',replace('【softWrap】 : 是否换行  【bool】\n【overflow】 : 越界效果  【TextOverflow】\n下面softWrap=false;  overflow依次是:clip、fade、ellipsis、visible,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(898,449,'Wrapping and Overflow Effects',replace('【softWrap】 : Whether to Wrap  【bool】\n【overflow】 : Overflow Effect  【TextOverflow】\nWhen softWrap=false; overflow options are: clip, fade, ellipsis, visible.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(899,450,'TextButton基本使用',replace('【child】 : 是否具有滚动主体   【Widget】\n【onPressed】 : 点击事件   【VoidCallback】\n【onLongPress】 : 长按事件   【VoidCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(900,450,'Basic Usage of TextButton',replace('【child】 : Whether it has a scrollable body   【Widget】\n【onPressed】 : Click event   【VoidCallback】\n【onLongPress】 : Long press event   【VoidCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(901,451,'TextButton样式',replace('【style】 : 按钮样式   【ButtonStyle】\n【focusNode】 : 焦点   【FocusNode】\n【clipBehavior】 : 裁剪行为   【Clip】\n【autofocus】 : 自动聚焦   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(902,451,'TextButton Style',replace('【style】 : Button style   【ButtonStyle】\n【focusNode】 : Focus   【FocusNode】\n【clipBehavior】 : Clip behavior   【Clip】\n【autofocus】 : Auto focus   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(903,452,'TextField基本用法',replace('【controller】 : 控制器   【TextEditingController】\n【style】 : 文字样式   【TextStyle】\n【decoration】 : 装饰线   【InputDecoration】\n【onEditingComplete】 : 输入完成事件   【Function()】\n【onSubmitted】 : 提交事件   【Function(String)】\n【onChanged】 : 输入事件   【Function(String)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(904,452,'Basic Usage of TextField',replace('【controller】 : Controller   【TextEditingController】\n【style】 : Text Style   【TextStyle】\n【decoration】 : Decoration   【InputDecoration】\n【onEditingComplete】 : Input Completion Event   【Function()】\n【onSubmitted】 : Submission Event   【Function(String)】\n【onChanged】 : Input Event   【Function(String)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(905,453,'TextField行数和cursor',replace('【minLines】 : 最小行数   【int】\n【maxLines】 : 最大行数   【int】\n【cursorRadius】 : 光标半径   【Radius】\n【cursorColor】 : 光标颜色   【Color】\n【cursorWidth】 : 光标宽度   【double】\n【showCursor】 : 是否显示光标   【bool】\n【autofocus】 : 自动聚焦   【bool】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(906,453,'Line Number and Cursor of TextField',replace('【minLines】 : Minimum Lines   【int】\n【maxLines】 : Maximum Lines   【int】\n【cursorRadius】 : Cursor Radius   【Radius】\n【cursorColor】 : Cursor Color   【Color】\n【cursorWidth】 : Cursor Width   【double】\n【showCursor】 : Whether to Show Cursor   【bool】\n【autofocus】 : Auto Focus   【bool】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(907,454,'decoration的复杂装饰',replace('InputDecoration有非常多的装饰点,对应点缀见代码:\nborder: 边线相关\nhelper: 左下角相关提示\ncounter: 右下角相关提示\nprefix: 输入框内部最左侧\nsuffix: 输入框内部最右侧\nlabel: 无焦点时文字\nlabel: 无焦点时文字\nhint: 提示文字相关\nborder: 边线相关','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(908,454,'Complex Decoration of Decoration',replace('InputDecoration has many decoration points, corresponding to the code:\nborder: Border related\nhelper: Bottom left corner related hints\ncounter: Bottom right corner related hints\nprefix: Innermost left side of the input box\nsuffix: Innermost right side of the input box\nlabel: Text when no focus\nlabel: Text when no focus\nhint: Hint text related\nborder: Border related','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(909,455,'监听点击组件内部和外部',replace('案例中点击加号和减号，不会取消输入框的焦点，键盘仍然可以输入。\n【enabled】 : 是否可用   【bool】\n【onTapOutside】 : 点击外界监听   【TapRegionCallback?】\n【onTapInside】 : 点击内部监听   【TapRegionCallback?】\n【groupId】 : 点击区域组标识   【Object?】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(910,455,'Monitor Clicks Inside and Outside the Component',replace('In the example, clicking the plus and minus signs does not cancel the focus of the input field, and the keyboard can still be used for input.\n【enabled】 : Whether it is available   【bool】\n【onTapOutside】 : External click listener   【TapRegionCallback?】\n【onTapInside】 : Internal click listener   【TapRegionCallback?】\n【groupId】 : Clickable area group identifier   【Object?】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(911,456,'TextFormField基本使用',replace('基本属性和TextField一致，详见之\n【validator】 : 验证函数   【FormFieldValidator<String> 】\n【onFieldSubmitted】 : 提交回调   【ValueChanged<String>】\n【onSaved】 : 表单save时回调  【FormFieldSetter<String>】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(912,456,'Basic Usage of TextFormField',replace('The basic properties are the same as TextField, see details there\n【validator】: Validation function 【FormFieldValidator<String>】\n【onFieldSubmitted】: Submission callback 【ValueChanged<String>】\n【onSaved】: Callback when the form is saved 【FormFieldSetter<String>】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(913,457,'文字样式-ThemeData#TextTheme','子组件可以通过ThemeData.of获取主题的数据进行使用。','zh-cn');
INSERT INTO node_desc VALUES(914,457,'Text Style-ThemeData#TextTheme','Child components can use the theme data obtained through ThemeData.of.','en-us');
INSERT INTO node_desc VALUES(915,458,'Theme的用法','使用Theme,可以指定非常多的属性作为主题,这些属性将应用于所有的后代组件，如指定字体、滑块、卡片、文字、分割线、按钮等属性。','zh-cn');
INSERT INTO node_desc VALUES(916,458,'Usage of Theme','Using Theme, you can specify a wide range of properties as themes, which will be applied to all descendant components, such as specifying properties for fonts, sliders, cards, text, dividers, buttons, etc.','en-us');
INSERT INTO node_desc VALUES(917,459,'统一禁用/启用动画','TickerMode 的 enabled 可以统一启用/禁用子树的动画效果。','zh-cn');
INSERT INTO node_desc VALUES(918,459,'Unified Enable/Disable Animation','The enabled property of TickerMode can uniformly enable/disable the animation effects of the subtree.','en-us');
INSERT INTO node_desc VALUES(919,460,'Title基本使用',replace('【title】 : 名称   【int】\n【color】: 颜色   【Color】\n【child】: 子组件    【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(920,460,'Basic Usage of Title',replace('【title】: Name   【int】\n【color】: Color   【Color】\n【child】: Child Component    【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(921,461,'ToggleButtons单选切换',replace('【children】: 子组件集   【List<Widget>】\n【borderWidth】: 边线宽   【double】\n【borderRadius】: 圆角   【BorderRadius】\n【isSelected】: 是否选中集   【List<bool>】\n【onPressed】: 点击事件   【Function(int)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(922,461,'ToggleButtons Single Selection',replace('【children】: Children components   【List<Widget>】\n【borderWidth】: Border width   【double】\n【borderRadius】: Rounded corners   【BorderRadius】\n【isSelected】: Selection status set   【List<bool>】\n【onPressed】: Click event   【Function(int)】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(923,462,'ToggleButtons颜色属性',replace('【borderColor】: 边线色   【Color】\n【selectedBorderColor】: 选中边线色   【Color】\n【selectedColor】: 选中时组件色   【Color】\n【fillColor】: 选中时填充色   【Color】\n【splashColor】: 水波纹色   【Color】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(924,462,'ToggleButtons Color Properties',replace('【borderColor】: Border color   【Color】\n【selectedBorderColor】: Selected border color   【Color】\n【selectedColor】: Component color when selected   【Color】\n【fillColor】: Fill color when selected   【Color】\n【splashColor】: Ripple color   【Color】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(925,463,'ToggleButtons多选切换','可以控制状态转化的逻辑来形成不同的效果。','zh-cn');
INSERT INTO node_desc VALUES(926,463,'ToggleButtons Multiple Selection','The logic of state transformation can be controlled to create different effects.','en-us');
INSERT INTO node_desc VALUES(927,464,'ToggleButtonsTheme基本使用','可指定ToggleButtonsThemeData数据属性为【后代】的ToggleButtons组件设置默认样式，如边框样式、颜色、装饰等。也可以用ToggleButtonsTheme.of获取ToggleButtons的主题数据。','zh-cn');
INSERT INTO node_desc VALUES(928,464,'Basic Usage of ToggleButtonsTheme','You can specify the ToggleButtonsThemeData properties to set default styles for descendant ToggleButtons components, such as border style, color, decoration, etc. You can also use ToggleButtonsTheme.of to get the theme data of ToggleButtons.','en-us');
INSERT INTO node_desc VALUES(929,465,'Tooltip基本使用',replace('【preferBelow】 : 是否首选下方   【bool】\n【padding】 : 内边距   【EdgeInsetsGeometry】\n【margin】 : 外边距   【EdgeInsetsGeometry】\n【message】 : 消息内容   【String】\n【showDuration】 : 展示时间   【Duration】\n【waitDuration】 : 悬浮出现时间   【Duration】\n【child】 : 孩子   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(930,465,'Basic Usage of Tooltip',replace('【preferBelow】: Whether to prefer below 【bool】\n【padding】: Padding 【EdgeInsetsGeometry】\n【margin】: Margin 【EdgeInsetsGeometry】\n【message】: Message content 【String】\n【showDuration】: Display duration 【Duration】\n【waitDuration】: Hover appearance time 【Duration】\n【child】: Child 【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(931,466,'Tooltip的装饰',replace('【decoration】 : 装饰对象 【Decoration】\n【textStyle】 : 文字样式   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(932,466,'Decoration of Tooltip',replace('【decoration】: Decoration object 【Decoration】\n【textStyle】: Text style 【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(933,467,'TooltipTheme基本使用','可指定TooltipThemeData数据属性为【后代】的Tooltip组件设置默认样式，如装饰、文字样式、显示时长、边距等。也可以用TooltipTheme.of获取Tooltip的主题属性。','zh-cn');
INSERT INTO node_desc VALUES(934,467,'Basic Usage of TooltipTheme','You can specify the TooltipThemeData properties to set default styles for descendant Tooltip components, such as decoration, text style, display duration, margins, etc. You can also use TooltipTheme.of to get the theme properties of Tooltip.','en-us');
INSERT INTO node_desc VALUES(935,468,'斜切变换skew',replace('斜切x由R0C1数控制,入参为弧度值,表示斜切角度\n斜切y由R1C0数控制,入参为弧度值,表示斜切角度','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(936,468,'Skew Transform skew',replace('Skew x is controlled by the R0C1 number, the input is in radians, representing the skew angle\nSkew y is controlled by the R1C0 number, the input is in radians, representing the skew angle','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(937,469,'平移变换translationValues',replace('平移x由R0C3数控制,入参为数值,表示平移长度\n平移y由R1C3数控制,入参为数值,表示平移长度\n平移z由R2C3数控制,入参为数值,表示平移长度','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(938,469,'Translation Transform translationValues',replace('Translation x is controlled by the R0C3 number, the input is a value, representing the translation length\nTranslation y is controlled by the R1C3 number, the input is a value, representing the translation length\nTranslation z is controlled by the R2C3 number, the input is a value, representing the translation length','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(939,470,'缩放变换diagonal3Values',replace('缩放x由R0C0数控制,入参为数值,表示缩放分率\n缩放y由R1C2数控制,入参为数值,表示缩放分率\n缩放z由R2C2数控制,入参为数值,表示缩放分率','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(940,470,'Scale Transform diagonal3Values',replace('Scale x is controlled by the R0C0 number, the input is a value, representing the scaling factor\nScale y is controlled by the R1C2 number, the input is a value, representing the scaling factor\nScale z is controlled by the R2C2 number, the input is a value, representing the scaling factor','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(941,471,'旋转变换rotation',replace('x旋转由R1C1、R1C2、R2C1、R2C2控制,入参表示弧度\ny旋转由R0C0、R0C2、R2C0、R2C2控制,入参表示弧度\nz旋转由R0C0、R0C1、R1C0、R1C1控制,','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(942,471,'Rotation Transform rotation',replace('x rotation is controlled by R1C1, R1C2, R2C1, R2C2, the input represents radians\ny rotation is controlled by R0C0, R0C2, R2C0, R2C2, the input represents radians\nz rotation is controlled by R0C0, R0C1, R1C0, R1C1','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(943,472,'透视变换rotation','由R3C1、R3C2、R3C3控制透视','zh-cn');
INSERT INTO node_desc VALUES(944,472,'Perspective Transform rotation','Perspective is controlled by R3C1, R3C2, R3C3','en-us');
INSERT INTO node_desc VALUES(945,473,'TweenAnimationBuilder 使用案例',replace('【tween】 : *渐变器   【Tween<T>】\n【duration】 : *时长   【Duration】\n【builder】 : *构造器   【ValueWidgetBuilder<T>】\n【curve】 : 动画曲线   【Curve】\n【onEnd】 : 结束回调   【VoidCallback】\n【child】 : 子组件   【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(946,473,'TweenAnimationBuilder Usage Example',replace('【tween】 : *Tween   【Tween<T>】\n【duration】 : *Duration   【Duration】\n【builder】 : *Builder   【ValueWidgetBuilder<T>】\n【curve】 : Animation Curve   【Curve】\n【onEnd】 : End Callback   【VoidCallback】\n【child】 : Child Widget   【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(947,474,'UnconstrainedBox基本使用',replace('【child】 : 孩子组件   【Widget】\n【constrainedAxis】 : 仍受约束的轴*2   【Axis】\n【alignment】 : 对齐方式   【AlignmentGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(948,474,'Basic Usage of UnconstrainedBox',replace('【child】: Child component 【Widget】\n【constrainedAxis】: Axes still constrained*2 【Axis】\n【alignment】: Alignment method 【AlignmentGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(949,475,'TextField 中使用 UndoHistory','该案例中通过外界按钮，进行控制 TextField 的撤销/重做功能。其中 undoController 参数可以传入 UndoHistoryController 对象，用于控制并影响输入文本内容。','zh-cn');
INSERT INTO node_desc VALUES(950,475,'Using UndoHistory in TextField','In this example, the undo/redo functionality of the TextField is controlled via an external button. The undoController parameter can be passed an UndoHistoryController object to control and influence the input text content.','en-us');
INSERT INTO node_desc VALUES(951,476,'UniqueWidget 介绍','【child】 : 子组件   【Widget】','zh-cn');
INSERT INTO node_desc VALUES(952,476,'Introduction to UniqueWidget','【child】 : Child component   【Widget】','en-us');
INSERT INTO node_desc VALUES(953,477,'该组件的基本表现如下',replace('【currentAccountPicture】: 上组件   【Widget】\n【accountName】: 中组件   【Widget】\n【accountEmail】: 下组件   【Widget】\n【decoration】: 装饰   【Decoration】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(954,477,'The basic performance of this component is as follows',replace('【currentAccountPicture】: Top component   【Widget】\n【accountName】: Middle component   【Widget】\n【accountEmail】: Bottom component   【Widget】\n【decoration】: Decoration   【Decoration】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(955,478,'右上角和底部',replace('【otherAccountsPictures】: 右上组件   【List<Widget>】\n【onDetailsPressed】: 右下角点击事件   【Function()】\n【arrowColor】: 右下角按钮颜色   【Color】\n【margin】: 外边距   【EdgeInsetsGeometry】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(956,478,'Top right corner and bottom',replace('【otherAccountsPictures】: Top right component   【List<Widget>】\n【onDetailsPressed】: Bottom right click event   【Function()】\n【arrowColor】: Bottom right button color   【Color】\n【margin】: Margin   【EdgeInsetsGeometry】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(957,479,'ValueListenableBuilder基本使用',replace('【builder】: 组件构造器   【ValueWidgetBuilder<T>】\n【valueListenable】: 监听值    【ValueListenable<T>】\n【child】: 子组件    【Widget】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(958,479,'Basic Usage of ValueListenableBuilder',replace('【builder】: Component builder   【ValueWidgetBuilder<T>】\n【valueListenable】: Listened value    【ValueListenable<T>】\n【child】: Child component    【Widget】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(959,480,'VerticalDivider颜色和粗细',replace('【color】: 颜色   【Color】\n【thickness】: 线粗细   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(960,480,'VerticalDivider Color and Thickness',replace('【color】: Color   【Color】\n【thickness】: Line thickness   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(961,481,'VerticalDivider宽度和空缺',replace('【indent】: 前面空缺长度   【double】\n【endIndent】: 后面空缺长度   【double】\n【width】: 占位宽   【double】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(962,481,'VerticalDivider Width and Indent',replace('【indent】: Front indent length   【double】\n【endIndent】: Back indent length   【double】\n【width】: Placeholder width   【double】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(963,482,'Viewport的基本使用',replace('【offset】 : *视口偏移量   【ViewportOffset】\n【cacheExtentStyle】: 预加载类型   【CacheExtentStyle】\n【cacheExtent】: 预加载量   【double】\n【axisDirection】: 滑动方向   【AxisDirection】\n【slivers】: 子Sliver组件集   【List<Widget>】\n【anchor】: 锚点    【double】\n可以运行这些代码，查看ColorItem的构建情况，128个色条并非一次性全部构建。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(964,482,'Basic Usage of Viewport',replace('【offset】: *Viewport offset   【ViewportOffset】\n【cacheExtentStyle】: Preload type   【CacheExtentStyle】\n【cacheExtent】: Preload amount   【double】\n【axisDirection】: Scrolling direction   【AxisDirection】\n【slivers】: Child Sliver component set   【List<Widget>】\n【anchor】: Anchor point   【double】\nYou can run this code to see how the ColorItem is constructed, the 128 color bars are not all constructed at once.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(965,483,'根据visible控制内部子组件的显隐情况',replace('【visible】 : 是否显示  【bool】\n【child】: 孩子   【Widget】\n默认孩子隐藏时会失去原来所在区域。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(966,483,'Control the visibility of internal child components based on visible',replace('【visible】: Whether to display  【bool】\n【child】: Child  【Widget】\nBy default, the child will lose its original area when hidden.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(967,484,'replacement可在隐藏时进行占位','【replacement】 : 隐藏时的占位组件  【Widget】','zh-cn');
INSERT INTO node_desc VALUES(968,484,'replacement can be used as a placeholder when hidden','【replacement】: Placeholder component when hidden  【Widget】','en-us');
INSERT INTO node_desc VALUES(969,485,'WidgetInspector基本使用',replace('【child】 : 子组件   【Widget】\n【selectButtonBuilder】: *选择按钮构造器   【InspectorSelectButtonBuilder】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(970,485,'Basic Usage of WidgetInspector',replace('【child】 : Child component   【Widget】\n【selectButtonBuilder】: *Select button builder   【InspectorSelectButtonBuilder】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(971,486,'WidgetsApp基本使用',replace('【pageRouteBuilder】 : *路由构造器   【PageRouteFactory】\n【color】: *颜色    【Color】\n【debugShowWidgetInspector】: 是否显示z组件查看器   【bool】\n其他属性基本上同MaterialApp,详见之。','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(972,486,'Basic Usage of WidgetsApp',replace('【pageRouteBuilder】 : *Route Builder   【PageRouteFactory】\n【color】: *Color    【Color】\n【debugShowWidgetInspector】: Whether to display the widget inspector   【bool】\nOther properties are basically the same as MaterialApp, see details there.','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(973,487,'WillPopScope使用',replace('【child】 : 子组件   【Widget】\n【onWillPop】 : 返回回调  【WillPopCallback】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(974,487,'WillPopScope Usage',replace('【child】: Child component 【Widget】\n【onWillPop】: Return callback 【WillPopCallback】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(975,488,'Wrap的基础用法',replace('【children】 : 组件列表   【List<Widget>】\n【spacing】 : 主轴条目间距   【double】\n【runSpacing】 : 交叉轴条目间距   【double】\n【direction】 : 主轴对齐   【Axis】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(976,488,'Basic Usage of Wrap',replace('【children】: Component list   【List<Widget>】\n【spacing】: Main axis spacing between items   【double】\n【runSpacing】: Cross axis spacing between items   【double】\n【direction】: Main axis alignment   【Axis】','\n',char(10)),'en-us');
INSERT INTO node_desc VALUES(977,489,'Wrap的alignment属性','【alignment】 : 主轴对齐   【WrapAlignment】','zh-cn');
INSERT INTO node_desc VALUES(978,489,'Wrap''s alignment Property','【alignment】: Main axis alignment   【WrapAlignment】','en-us');
INSERT INTO node_desc VALUES(979,490,'Wrap的crossAxisAlignment属性','【crossAxisAlignment】 : 交叉轴对齐   【CrossAxisAlignment】','zh-cn');
INSERT INTO node_desc VALUES(980,490,'Wrap''s crossAxisAlignment Property','【crossAxisAlignment】: Cross axis alignment   【CrossAxisAlignment】','en-us');
INSERT INTO node_desc VALUES(981,491,'Wrap的textDirection属性','【textDirection】 : 文字方向   【TextDirection】','zh-cn');
INSERT INTO node_desc VALUES(982,491,'Wrap''s textDirection Property','【textDirection】: Text direction   【TextDirection】','en-us');
INSERT INTO node_desc VALUES(983,492,'Wrap的verticalDirection属性','【verticalDirection】 : 竖直方向  【VerticalDirection】','zh-cn');
INSERT INTO node_desc VALUES(984,492,'Wrap''s verticalDirection Property','【verticalDirection】: Vertical direction   【VerticalDirection】','en-us');
INSERT INTO node_desc VALUES(985,493,'YearPicker基本使用',replace('【selectedDate】 : 选中日期   【DateTime】\n【firstDate】 : 最前日期限制   【DateTime】\n【lastDate】 : 最后日期限制   【DateTime】\n【onChanged】 : 点击回调  【Function(DateTime)】','\n',char(10)),'zh-cn');
INSERT INTO node_desc VALUES(986,493,'Basic Usage of YearPicker',replace('【selectedDate】: Selected date   【DateTime】\n【firstDate】: First date limit   【DateTime】\n【lastDate】: Last date limit   【DateTime】\n【onChanged】: Click callback  【Function(DateTime)】','\n',char(10)),'en-us');
CREATE TABLE category(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(64) NOT NULL UNIQUE,
        type INTEGER DEFAULT 0,
        color VARCHAR(9) DEFAULT '#FF2196F3',
        info VARCHAR(256) DEFAULT '这里什么都没有...',
        created DATETIME NOT NULL,
        updated DATETIME NOT NULL,
        priority INTEGER DEFAULT 0,
        image VARCHAR(128) DEFAULT ''
      );
INSERT INTO category VALUES(1,'收藏集',1,'#FFFF5722','用户收藏的 Widget 组件集合','2025-08-23T23:51:44.636761','2025-08-23T23:51:44.636761',0,'');
INSERT INTO category VALUES(2,'很难分',0,'#FF000000','我也不知道他该分哪类，暂且给它一个容身之地，有待开拓新集录。','2025-08-23T23:51:44.640758','2025-08-23T23:51:44.640758',0,'');
INSERT INTO category VALUES(3,'衍生集',0,'#FFD1D08F','一般不单独使用的组件，常与或必须与某个组件联合使用。','2025-08-23T23:51:44.653761','2025-08-23T23:51:44.653761',0,'');
INSERT INTO category VALUES(4,'主题集',0,'#FF9C27B0','使它的子族组件具有统一样式能力的组件，一般都包含Theme关键字。','2025-08-23T23:51:44.657763','2025-08-23T23:51:44.657763',0,'');
INSERT INTO category VALUES(5,'弹出集',0,'#FF00BCD4','与对话框和弹出框的相关组件，一般不单独使用，只用于交互弹出框中。','2025-08-23T23:51:44.668768','2025-08-23T23:51:44.668768',0,'');
INSERT INTO category VALUES(6,'功能集',0,'#FF586CF2','只是为了完成单一的功能而存在的组件，没有复杂的心机，使用单一而纯粹。','2025-08-23T23:51:44.673768','2025-08-23T23:51:44.673768',0,'');
INSERT INTO category VALUES(7,'组装集',0,'#FFE040FB','用多种已存在的组件拼合而成的新组件，一般是通用结构，来方便使用。','2025-08-23T23:51:44.684279','2025-08-23T23:51:44.684279',0,'');
INSERT INTO category VALUES(8,'装饰集',0,'#FFFF9800','可以让子组件的外观进行装饰变换，如剪裁、边线、卡片、滤镜、变换等。','2025-08-23T23:51:44.688282','2025-08-23T23:51:44.688282',0,'');
INSERT INTO category VALUES(9,'滑动集',0,'#FFCDDC39','收录和滑动相关的组件，一般都可以指定滑动控制器来监听滑动。','2025-08-23T23:51:44.700278','2025-08-23T23:51:44.700278',0,'');
INSERT INTO category VALUES(10,'动画集',0,'#FFF44336','收录本身具有动画效果，或可使子组件产生动画效果的组件。','2025-08-23T23:51:44.705280','2025-08-23T23:51:44.705280',0,'');
INSERT INTO category VALUES(11,'事件集',0,'#FF2196F3','收录与事件相关的组件，其特征是该组件有事件回调，有可操作性。','2025-08-23T23:51:44.717280','2025-08-23T23:51:44.717280',0,'');
INSERT INTO category VALUES(12,'布局集',0,'#FF4CAF50','本收录与布局相关的组件，布局包括对子组件的限定、排布、定位等功能。','2025-08-23T23:51:44.722279','2025-08-23T23:51:44.722279',0,'');
INSERT INTO category VALUES(13,'图文集',0,'#FFF2F2F2','图文应用中最基础的展现形式，包括文字、图片、字体图标等组件。','2025-08-23T23:51:44.725279','2025-08-23T23:51:44.725279',0,'');
CREATE TABLE category_widget(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        categoryId INTEGER NOT NULL,
        widgetId INTEGER NOT NULL
      );
INSERT INTO category_widget VALUES(1,1,1);
INSERT INTO category_widget VALUES(2,1,2);
INSERT INTO category_widget VALUES(3,1,44);
INSERT INTO category_widget VALUES(4,1,88);
INSERT INTO category_widget VALUES(5,1,94);
INSERT INTO category_widget VALUES(6,1,95);
INSERT INTO category_widget VALUES(7,1,69);
INSERT INTO category_widget VALUES(8,1,85);
INSERT INTO category_widget VALUES(9,1,183);
INSERT INTO category_widget VALUES(10,1,184);
INSERT INTO category_widget VALUES(11,1,106);
INSERT INTO category_widget VALUES(12,1,11);
INSERT INTO category_widget VALUES(13,2,182);
INSERT INTO category_widget VALUES(14,2,145);
INSERT INTO category_widget VALUES(15,2,167);
INSERT INTO category_widget VALUES(16,2,197);
INSERT INTO category_widget VALUES(17,3,107);
INSERT INTO category_widget VALUES(18,3,159);
INSERT INTO category_widget VALUES(19,3,154);
INSERT INTO category_widget VALUES(20,3,155);
INSERT INTO category_widget VALUES(21,3,132);
INSERT INTO category_widget VALUES(22,3,133);
INSERT INTO category_widget VALUES(23,3,148);
INSERT INTO category_widget VALUES(24,3,194);
INSERT INTO category_widget VALUES(25,3,195);
INSERT INTO category_widget VALUES(26,3,59);
INSERT INTO category_widget VALUES(27,3,141);
INSERT INTO category_widget VALUES(28,3,144);
INSERT INTO category_widget VALUES(29,3,151);
INSERT INTO category_widget VALUES(30,3,174);
INSERT INTO category_widget VALUES(31,3,106);
INSERT INTO category_widget VALUES(32,3,108);
INSERT INTO category_widget VALUES(33,3,109);
INSERT INTO category_widget VALUES(34,3,181);
INSERT INTO category_widget VALUES(35,4,168);
INSERT INTO category_widget VALUES(36,4,169);
INSERT INTO category_widget VALUES(37,4,324);
INSERT INTO category_widget VALUES(38,4,325);
INSERT INTO category_widget VALUES(39,4,326);
INSERT INTO category_widget VALUES(40,4,329);
INSERT INTO category_widget VALUES(41,4,331);
INSERT INTO category_widget VALUES(42,5,127);
INSERT INTO category_widget VALUES(43,5,128);
INSERT INTO category_widget VALUES(44,5,129);
INSERT INTO category_widget VALUES(45,5,131);
INSERT INTO category_widget VALUES(46,5,134);
INSERT INTO category_widget VALUES(47,5,126);
INSERT INTO category_widget VALUES(48,5,130);
INSERT INTO category_widget VALUES(49,5,143);
INSERT INTO category_widget VALUES(50,5,55);
INSERT INTO category_widget VALUES(51,5,56);
INSERT INTO category_widget VALUES(52,5,140);
INSERT INTO category_widget VALUES(53,5,142);
INSERT INTO category_widget VALUES(54,5,50);
INSERT INTO category_widget VALUES(55,5,135);
INSERT INTO category_widget VALUES(56,5,136);
INSERT INTO category_widget VALUES(57,5,137);
INSERT INTO category_widget VALUES(58,5,138);
INSERT INTO category_widget VALUES(59,5,139);
INSERT INTO category_widget VALUES(60,6,164);
INSERT INTO category_widget VALUES(61,6,166);
INSERT INTO category_widget VALUES(62,6,10);
INSERT INTO category_widget VALUES(63,6,102);
INSERT INTO category_widget VALUES(64,6,107);
INSERT INTO category_widget VALUES(65,6,159);
INSERT INTO category_widget VALUES(66,6,34);
INSERT INTO category_widget VALUES(67,6,35);
INSERT INTO category_widget VALUES(68,6,37);
INSERT INTO category_widget VALUES(69,6,4);
INSERT INTO category_widget VALUES(70,6,5);
INSERT INTO category_widget VALUES(71,6,36);
INSERT INTO category_widget VALUES(72,6,170);
INSERT INTO category_widget VALUES(73,6,171);
INSERT INTO category_widget VALUES(74,6,172);
INSERT INTO category_widget VALUES(75,6,173);
INSERT INTO category_widget VALUES(76,6,49);
INSERT INTO category_widget VALUES(77,6,176);
INSERT INTO category_widget VALUES(78,6,46);
INSERT INTO category_widget VALUES(79,6,47);
INSERT INTO category_widget VALUES(80,6,48);
INSERT INTO category_widget VALUES(81,6,292);
INSERT INTO category_widget VALUES(82,6,295);
INSERT INTO category_widget VALUES(83,6,71);
INSERT INTO category_widget VALUES(84,6,73);
INSERT INTO category_widget VALUES(85,6,189);
INSERT INTO category_widget VALUES(86,6,187);
INSERT INTO category_widget VALUES(87,6,191);
INSERT INTO category_widget VALUES(88,6,192);
INSERT INTO category_widget VALUES(89,6,196);
INSERT INTO category_widget VALUES(90,6,180);
INSERT INTO category_widget VALUES(91,7,9);
INSERT INTO category_widget VALUES(92,7,11);
INSERT INTO category_widget VALUES(93,7,14);
INSERT INTO category_widget VALUES(94,7,15);
INSERT INTO category_widget VALUES(95,7,22);
INSERT INTO category_widget VALUES(96,7,12);
INSERT INTO category_widget VALUES(97,7,13);
INSERT INTO category_widget VALUES(98,7,16);
INSERT INTO category_widget VALUES(99,7,17);
INSERT INTO category_widget VALUES(100,7,18);
INSERT INTO category_widget VALUES(101,7,19);
INSERT INTO category_widget VALUES(102,7,21);
INSERT INTO category_widget VALUES(103,7,193);
INSERT INTO category_widget VALUES(104,7,20);
INSERT INTO category_widget VALUES(105,7,54);
INSERT INTO category_widget VALUES(106,7,65);
INSERT INTO category_widget VALUES(107,7,100);
INSERT INTO category_widget VALUES(108,7,143);
INSERT INTO category_widget VALUES(109,7,153);
INSERT INTO category_widget VALUES(110,7,200);
INSERT INTO category_widget VALUES(111,7,57);
INSERT INTO category_widget VALUES(112,7,60);
INSERT INTO category_widget VALUES(113,7,61);
INSERT INTO category_widget VALUES(114,7,64);
INSERT INTO category_widget VALUES(115,7,156);
INSERT INTO category_widget VALUES(116,7,198);
INSERT INTO category_widget VALUES(117,7,199);
INSERT INTO category_widget VALUES(118,7,52);
INSERT INTO category_widget VALUES(119,7,58);
INSERT INTO category_widget VALUES(120,7,62);
INSERT INTO category_widget VALUES(121,7,63);
INSERT INTO category_widget VALUES(122,7,157);
INSERT INTO category_widget VALUES(123,7,158);
INSERT INTO category_widget VALUES(124,7,178);
INSERT INTO category_widget VALUES(125,7,183);
INSERT INTO category_widget VALUES(126,7,190);
INSERT INTO category_widget VALUES(127,7,184);
INSERT INTO category_widget VALUES(128,7,196);
INSERT INTO category_widget VALUES(129,8,1);
INSERT INTO category_widget VALUES(130,8,3);
INSERT INTO category_widget VALUES(131,8,123);
INSERT INTO category_widget VALUES(132,8,160);
INSERT INTO category_widget VALUES(133,8,152);
INSERT INTO category_widget VALUES(134,8,69);
INSERT INTO category_widget VALUES(135,8,88);
INSERT INTO category_widget VALUES(136,8,78);
INSERT INTO category_widget VALUES(137,8,277);
INSERT INTO category_widget VALUES(138,8,278);
INSERT INTO category_widget VALUES(139,8,66);
INSERT INTO category_widget VALUES(140,8,67);
INSERT INTO category_widget VALUES(141,8,68);
INSERT INTO category_widget VALUES(142,8,70);
INSERT INTO category_widget VALUES(143,8,73);
INSERT INTO category_widget VALUES(144,8,72);
INSERT INTO category_widget VALUES(145,8,192);
INSERT INTO category_widget VALUES(146,9,162);
INSERT INTO category_widget VALUES(147,9,163);
INSERT INTO category_widget VALUES(148,9,164);
INSERT INTO category_widget VALUES(149,9,165);
INSERT INTO category_widget VALUES(150,9,177);
INSERT INTO category_widget VALUES(151,9,179);
INSERT INTO category_widget VALUES(152,9,117);
INSERT INTO category_widget VALUES(153,9,139);
INSERT INTO category_widget VALUES(154,9,178);
INSERT INTO category_widget VALUES(155,9,59);
INSERT INTO category_widget VALUES(156,9,183);
INSERT INTO category_widget VALUES(157,9,185);
INSERT INTO category_widget VALUES(158,9,188);
INSERT INTO category_widget VALUES(159,9,186);
INSERT INTO category_widget VALUES(160,9,180);
INSERT INTO category_widget VALUES(161,10,125);
INSERT INTO category_widget VALUES(162,10,100);
INSERT INTO category_widget VALUES(163,10,123);
INSERT INTO category_widget VALUES(164,10,116);
INSERT INTO category_widget VALUES(165,10,46);
INSERT INTO category_widget VALUES(166,10,47);
INSERT INTO category_widget VALUES(167,10,52);
INSERT INTO category_widget VALUES(168,10,90);
INSERT INTO category_widget VALUES(169,10,91);
INSERT INTO category_widget VALUES(170,10,92);
INSERT INTO category_widget VALUES(171,10,93);
INSERT INTO category_widget VALUES(172,10,111);
INSERT INTO category_widget VALUES(173,10,113);
INSERT INTO category_widget VALUES(174,10,112);
INSERT INTO category_widget VALUES(175,10,114);
INSERT INTO category_widget VALUES(176,10,115);
INSERT INTO category_widget VALUES(177,10,118);
INSERT INTO category_widget VALUES(178,10,119);
INSERT INTO category_widget VALUES(179,10,120);
INSERT INTO category_widget VALUES(180,10,121);
INSERT INTO category_widget VALUES(181,10,122);
INSERT INTO category_widget VALUES(182,10,124);
INSERT INTO category_widget VALUES(183,10,201);
INSERT INTO category_widget VALUES(184,10,48);
INSERT INTO category_widget VALUES(185,10,51);
INSERT INTO category_widget VALUES(186,10,89);
INSERT INTO category_widget VALUES(187,10,72);
INSERT INTO category_widget VALUES(188,11,146);
INSERT INTO category_widget VALUES(189,11,14);
INSERT INTO category_widget VALUES(190,11,15);
INSERT INTO category_widget VALUES(191,11,23);
INSERT INTO category_widget VALUES(192,11,28);
INSERT INTO category_widget VALUES(193,11,33);
INSERT INTO category_widget VALUES(194,11,12);
INSERT INTO category_widget VALUES(195,11,13);
INSERT INTO category_widget VALUES(196,11,16);
INSERT INTO category_widget VALUES(197,11,17);
INSERT INTO category_widget VALUES(198,11,18);
INSERT INTO category_widget VALUES(199,11,19);
INSERT INTO category_widget VALUES(200,11,25);
INSERT INTO category_widget VALUES(201,11,26);
INSERT INTO category_widget VALUES(202,11,27);
INSERT INTO category_widget VALUES(203,11,147);
INSERT INTO category_widget VALUES(204,11,30);
INSERT INTO category_widget VALUES(205,11,31);
INSERT INTO category_widget VALUES(206,11,32);
INSERT INTO category_widget VALUES(207,11,132);
INSERT INTO category_widget VALUES(208,11,133);
INSERT INTO category_widget VALUES(209,11,54);
INSERT INTO category_widget VALUES(210,11,143);
INSERT INTO category_widget VALUES(211,11,153);
INSERT INTO category_widget VALUES(212,11,170);
INSERT INTO category_widget VALUES(213,11,175);
INSERT INTO category_widget VALUES(214,11,200);
INSERT INTO category_widget VALUES(215,11,39);
INSERT INTO category_widget VALUES(216,11,40);
INSERT INTO category_widget VALUES(217,11,42);
INSERT INTO category_widget VALUES(218,11,44);
INSERT INTO category_widget VALUES(219,11,45);
INSERT INTO category_widget VALUES(220,11,49);
INSERT INTO category_widget VALUES(221,11,55);
INSERT INTO category_widget VALUES(222,11,56);
INSERT INTO category_widget VALUES(223,11,60);
INSERT INTO category_widget VALUES(224,11,61);
INSERT INTO category_widget VALUES(225,11,103);
INSERT INTO category_widget VALUES(226,11,104);
INSERT INTO category_widget VALUES(227,11,105);
INSERT INTO category_widget VALUES(228,11,150);
INSERT INTO category_widget VALUES(229,11,176);
INSERT INTO category_widget VALUES(230,11,177);
INSERT INTO category_widget VALUES(231,11,179);
INSERT INTO category_widget VALUES(232,11,198);
INSERT INTO category_widget VALUES(233,11,199);
INSERT INTO category_widget VALUES(234,11,24);
INSERT INTO category_widget VALUES(235,11,41);
INSERT INTO category_widget VALUES(236,11,43);
INSERT INTO category_widget VALUES(237,11,52);
INSERT INTO category_widget VALUES(238,11,53);
INSERT INTO category_widget VALUES(239,11,58);
INSERT INTO category_widget VALUES(240,11,117);
INSERT INTO category_widget VALUES(241,11,158);
INSERT INTO category_widget VALUES(242,11,178);
INSERT INTO category_widget VALUES(243,11,51);
INSERT INTO category_widget VALUES(244,11,141);
INSERT INTO category_widget VALUES(245,11,144);
INSERT INTO category_widget VALUES(246,11,149);
INSERT INTO category_widget VALUES(247,11,151);
INSERT INTO category_widget VALUES(248,11,292);
INSERT INTO category_widget VALUES(249,11,295);
INSERT INTO category_widget VALUES(250,12,94);
INSERT INTO category_widget VALUES(251,12,95);
INSERT INTO category_widget VALUES(252,12,96);
INSERT INTO category_widget VALUES(253,12,97);
INSERT INTO category_widget VALUES(254,12,98);
INSERT INTO category_widget VALUES(255,12,99);
INSERT INTO category_widget VALUES(256,12,1);
INSERT INTO category_widget VALUES(257,12,162);
INSERT INTO category_widget VALUES(258,12,163);
INSERT INTO category_widget VALUES(259,12,33);
INSERT INTO category_widget VALUES(260,12,29);
INSERT INTO category_widget VALUES(261,12,107);
INSERT INTO category_widget VALUES(262,12,159);
INSERT INTO category_widget VALUES(263,12,177);
INSERT INTO category_widget VALUES(264,12,179);
INSERT INTO category_widget VALUES(265,12,117);
INSERT INTO category_widget VALUES(266,12,85);
INSERT INTO category_widget VALUES(267,12,74);
INSERT INTO category_widget VALUES(268,12,76);
INSERT INTO category_widget VALUES(269,12,83);
INSERT INTO category_widget VALUES(270,12,87);
INSERT INTO category_widget VALUES(271,12,287);
INSERT INTO category_widget VALUES(272,12,77);
INSERT INTO category_widget VALUES(273,12,79);
INSERT INTO category_widget VALUES(274,12,80);
INSERT INTO category_widget VALUES(275,12,81);
INSERT INTO category_widget VALUES(276,12,82);
INSERT INTO category_widget VALUES(277,12,86);
INSERT INTO category_widget VALUES(278,12,84);
INSERT INTO category_widget VALUES(279,12,75);
INSERT INTO category_widget VALUES(280,12,161);
INSERT INTO category_widget VALUES(281,12,188);
INSERT INTO category_widget VALUES(282,12,185);
INSERT INTO category_widget VALUES(283,12,186);
INSERT INTO category_widget VALUES(284,12,106);
INSERT INTO category_widget VALUES(285,12,108);
INSERT INTO category_widget VALUES(286,12,109);
INSERT INTO category_widget VALUES(287,12,110);
INSERT INTO category_widget VALUES(288,13,2);
INSERT INTO category_widget VALUES(289,13,6);
INSERT INTO category_widget VALUES(290,13,7);
INSERT INTO category_widget VALUES(291,13,8);
INSERT INTO category_widget VALUES(292,13,53);
INSERT INTO category_widget VALUES(293,13,54);
INSERT INTO category_widget VALUES(294,13,125);
INSERT INTO category_widget VALUES(295,13,38);
INSERT INTO category_widget VALUES(296,13,199);
INSERT INTO category_widget VALUES(297,13,101);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('widget',558);
INSERT INTO sqlite_sequence VALUES('widget_inheritance',1404);
INSERT INTO sqlite_sequence VALUES('widget_desc',1106);
INSERT INTO sqlite_sequence VALUES('widget_fields',3745);
INSERT INTO sqlite_sequence VALUES('node',493);
INSERT INTO sqlite_sequence VALUES('node_desc',986);
INSERT INTO sqlite_sequence VALUES('category',13);
INSERT INTO sqlite_sequence VALUES('category_widget',297);
